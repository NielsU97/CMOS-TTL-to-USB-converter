
CMOS-TTL-webcam_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  70000000  70000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007618  700002b0  700002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  700078c8  700078c8  000088c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  700078d0  700078d0  00030234  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  700078d0  700078d0  00030234  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  700078d0  700078d0  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  700078d0  700078d0  000088d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  700078d4  700078d4  000088d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  24000000  700078d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .dtcm_ram     00027100  24000134  70007a0c  00009134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000850  24027234  7002eb0c  00030234  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000000  20000000  00001000  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014dc5  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003115  00000000  00000000  00045027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00048140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c17  00000000  00000000  00049170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032a7f  00000000  00000000  00049d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001485f  00000000  00000000  0007c806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001365f4  00000000  00000000  00091065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001c7659  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004320  00000000  00000000  001c769c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001cb9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

700002b0 <__do_global_dtors_aux>:
700002b0:	b510      	push	{r4, lr}
700002b2:	4c05      	ldr	r4, [pc, #20]	@ (700002c8 <__do_global_dtors_aux+0x18>)
700002b4:	7823      	ldrb	r3, [r4, #0]
700002b6:	b933      	cbnz	r3, 700002c6 <__do_global_dtors_aux+0x16>
700002b8:	4b04      	ldr	r3, [pc, #16]	@ (700002cc <__do_global_dtors_aux+0x1c>)
700002ba:	b113      	cbz	r3, 700002c2 <__do_global_dtors_aux+0x12>
700002bc:	4804      	ldr	r0, [pc, #16]	@ (700002d0 <__do_global_dtors_aux+0x20>)
700002be:	f3af 8000 	nop.w
700002c2:	2301      	movs	r3, #1
700002c4:	7023      	strb	r3, [r4, #0]
700002c6:	bd10      	pop	{r4, pc}
700002c8:	24027234 	.word	0x24027234
700002cc:	00000000 	.word	0x00000000
700002d0:	700078b0 	.word	0x700078b0

700002d4 <frame_dummy>:
700002d4:	b508      	push	{r3, lr}
700002d6:	4b03      	ldr	r3, [pc, #12]	@ (700002e4 <frame_dummy+0x10>)
700002d8:	b11b      	cbz	r3, 700002e2 <frame_dummy+0xe>
700002da:	4903      	ldr	r1, [pc, #12]	@ (700002e8 <frame_dummy+0x14>)
700002dc:	4803      	ldr	r0, [pc, #12]	@ (700002ec <frame_dummy+0x18>)
700002de:	f3af 8000 	nop.w
700002e2:	bd08      	pop	{r3, pc}
700002e4:	00000000 	.word	0x00000000
700002e8:	24027238 	.word	0x24027238
700002ec:	700078b0 	.word	0x700078b0

700002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
700002f0:	b580      	push	{r7, lr}
700002f2:	af00      	add	r7, sp, #0
  /* Configure the MPU */
  MPU_Config();
700002f4:	f000 f928 	bl	70000548 <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
700002f8:	f000 f94e 	bl	70000598 <CPU_CACHE_Enable>

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
700002fc:	f001 f801 	bl	70001302 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
70000300:	f000 f9b8 	bl	70000674 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
70000304:	f000 f88e 	bl	70000424 <MX_GPIO_Init>
  MX_DMA_Init();
70000308:	f000 f86e 	bl	700003e8 <MX_DMA_Init>
  MX_DCMIPP_Init();
7000030c:	f000 f82a 	bl	70000364 <MX_DCMIPP_Init>
  MX_USB_DEVICE_Init();
70000310:	f000 f904 	bl	7000051c <MX_USB_DEVICE_Init>

  /* Start DCMIPP Pipe0 capture in continuous mode */
  HAL_DCMIPP_PIPE_Start(&phdcmipp, DCMIPP_PIPE0, (uint32_t)activeBuffer, DCMIPP_MODE_CONTINUOUS);
70000314:	4b0d      	ldr	r3, [pc, #52]	@ (7000034c <main+0x5c>)
70000316:	681b      	ldr	r3, [r3, #0]
70000318:	461a      	mov	r2, r3
7000031a:	2300      	movs	r3, #0
7000031c:	2100      	movs	r1, #0
7000031e:	480c      	ldr	r0, [pc, #48]	@ (70000350 <main+0x60>)
70000320:	f001 fb12 	bl	70001948 <HAL_DCMIPP_PIPE_Start>

  /* Infinite loop */
  while (1)
  {
    /* Check if a frame is ready to be sent via USB */
    if (frameReady && readyBuffer != NULL)
70000324:	4b0b      	ldr	r3, [pc, #44]	@ (70000354 <main+0x64>)
70000326:	781b      	ldrb	r3, [r3, #0]
70000328:	b2db      	uxtb	r3, r3
7000032a:	2b00      	cmp	r3, #0
7000032c:	d0fa      	beq.n	70000324 <main+0x34>
7000032e:	4b0a      	ldr	r3, [pc, #40]	@ (70000358 <main+0x68>)
70000330:	681b      	ldr	r3, [r3, #0]
70000332:	2b00      	cmp	r3, #0
70000334:	d0f6      	beq.n	70000324 <main+0x34>
    {
      /* Send frame via USB UVC */
      USBD_VIDEO_SendFrame(&hUsbDeviceFS, (uint8_t *)readyBuffer, CAMERA_FRAME_SIZE);
70000336:	4b08      	ldr	r3, [pc, #32]	@ (70000358 <main+0x68>)
70000338:	681b      	ldr	r3, [r3, #0]
7000033a:	4a08      	ldr	r2, [pc, #32]	@ (7000035c <main+0x6c>)
7000033c:	4619      	mov	r1, r3
7000033e:	4808      	ldr	r0, [pc, #32]	@ (70000360 <main+0x70>)
70000340:	f000 fdfe 	bl	70000f40 <USBD_VIDEO_SendFrame>

      frameReady = 0;
70000344:	4b03      	ldr	r3, [pc, #12]	@ (70000354 <main+0x64>)
70000346:	2200      	movs	r2, #0
70000348:	701a      	strb	r2, [r3, #0]
    if (frameReady && readyBuffer != NULL)
7000034a:	e7eb      	b.n	70000324 <main+0x34>
7000034c:	24000000 	.word	0x24000000
70000350:	24027250 	.word	0x24027250
70000354:	2402753c 	.word	0x2402753c
70000358:	24027538 	.word	0x24027538
7000035c:	0004e200 	.word	0x0004e200
70000360:	2402725c 	.word	0x2402725c

70000364 <MX_DCMIPP_Init>:
  * @brief DCMIPP Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMIPP_Init(void)
{
70000364:	b580      	push	{r7, lr}
70000366:	b08a      	sub	sp, #40	@ 0x28
70000368:	af00      	add	r7, sp, #0
	DCMIPP_ParallelConfTypeDef ParallelConfig = {0};
7000036a:	1d3b      	adds	r3, r7, #4
7000036c:	2224      	movs	r2, #36	@ 0x24
7000036e:	2100      	movs	r1, #0
70000370:	4618      	mov	r0, r3
70000372:	f007 fa63 	bl	7000783c <memset>
	DCMIPP_PipeConfTypeDef PipeConfig = {0};
70000376:	2300      	movs	r3, #0
70000378:	603b      	str	r3, [r7, #0]
	phdcmipp.Instance = DCMIPP;
7000037a:	4b19      	ldr	r3, [pc, #100]	@ (700003e0 <MX_DCMIPP_Init+0x7c>)
7000037c:	4a19      	ldr	r2, [pc, #100]	@ (700003e4 <MX_DCMIPP_Init+0x80>)
7000037e:	601a      	str	r2, [r3, #0]

	if (HAL_DCMIPP_Init(&phdcmipp) != HAL_OK)
70000380:	4817      	ldr	r0, [pc, #92]	@ (700003e0 <MX_DCMIPP_Init+0x7c>)
70000382:	f001 fa0d 	bl	700017a0 <HAL_DCMIPP_Init>
70000386:	4603      	mov	r3, r0
70000388:	2b00      	cmp	r3, #0
7000038a:	d001      	beq.n	70000390 <MX_DCMIPP_Init+0x2c>
	{
	   Error_Handler();
7000038c:	f000 f9e4 	bl	70000758 <Error_Handler>
	}
	ParallelConfig.PCKPolarity = DCMIPP_PCKPOLARITY_RISING ;
70000390:	2320      	movs	r3, #32
70000392:	613b      	str	r3, [r7, #16]
	ParallelConfig.HSPolarity = DCMIPP_HSPOLARITY_LOW ;
70000394:	2300      	movs	r3, #0
70000396:	60fb      	str	r3, [r7, #12]
	ParallelConfig.VSPolarity = DCMIPP_VSPOLARITY_HIGH ;
70000398:	2380      	movs	r3, #128	@ 0x80
7000039a:	60bb      	str	r3, [r7, #8]
	ParallelConfig.ExtendedDataMode = DCMIPP_INTERFACE_8BITS;
7000039c:	2300      	movs	r3, #0
7000039e:	617b      	str	r3, [r7, #20]
	ParallelConfig.Format = DCMIPP_FORMAT_MONOCHROME_8B;
700003a0:	f44f 0394 	mov.w	r3, #4849664	@ 0x4a0000
700003a4:	607b      	str	r3, [r7, #4]
	ParallelConfig.SwapBits = DCMIPP_SWAPBITS_DISABLE;
700003a6:	2300      	movs	r3, #0
700003a8:	623b      	str	r3, [r7, #32]
	ParallelConfig.SwapCycles = DCMIPP_SWAPCYCLES_DISABLE;
700003aa:	2300      	movs	r3, #0
700003ac:	627b      	str	r3, [r7, #36]	@ 0x24
	ParallelConfig.SynchroMode = DCMIPP_SYNCHRO_HARDWARE;
700003ae:	2300      	movs	r3, #0
700003b0:	61bb      	str	r3, [r7, #24]

	HAL_DCMIPP_PARALLEL_SetConfig(&phdcmipp, &ParallelConfig);
700003b2:	1d3b      	adds	r3, r7, #4
700003b4:	4619      	mov	r1, r3
700003b6:	480a      	ldr	r0, [pc, #40]	@ (700003e0 <MX_DCMIPP_Init+0x7c>)
700003b8:	f001 fa20 	bl	700017fc <HAL_DCMIPP_PARALLEL_SetConfig>

	/* Configure DCMIPP Pipe0 for main capture */
	PipeConfig.FrameRate = DCMIPP_FRAME_RATE_ALL;  // Capture all frames
700003bc:	2300      	movs	r3, #0
700003be:	603b      	str	r3, [r7, #0]
	//PipeConfig.PixelFormat = DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1;  // YUV422 format
	//PipeConfig.PixelPackerFormat = DCMIPP_PIXEL_PACKER_FORMAT_YUV422_1;
	//PipeConfig.SyncUnmask = DCMIPP_SYNC_UNMASK_ALL;

  if (HAL_DCMIPP_PIPE_SetConfig(&phdcmipp, DCMIPP_PIPE0, &PipeConfig) != HAL_OK)
700003c0:	463b      	mov	r3, r7
700003c2:	461a      	mov	r2, r3
700003c4:	2100      	movs	r1, #0
700003c6:	4806      	ldr	r0, [pc, #24]	@ (700003e0 <MX_DCMIPP_Init+0x7c>)
700003c8:	f001 fa85 	bl	700018d6 <HAL_DCMIPP_PIPE_SetConfig>
700003cc:	4603      	mov	r3, r0
700003ce:	2b00      	cmp	r3, #0
700003d0:	d001      	beq.n	700003d6 <MX_DCMIPP_Init+0x72>
  {
    Error_Handler();
700003d2:	f000 f9c1 	bl	70000758 <Error_Handler>
  /* Set frame size */
  //if (HAL_DCMIPP_PIPE_SetFrameSize(&phdcmipp, DCMIPP_PIPE0, CAMERA_WIDTH, CAMERA_HEIGHT) != HAL_OK)
  //{
  //  Error_Handler();
  //}
}
700003d6:	bf00      	nop
700003d8:	3728      	adds	r7, #40	@ 0x28
700003da:	46bd      	mov	sp, r7
700003dc:	bd80      	pop	{r7, pc}
700003de:	bf00      	nop
700003e0:	24027250 	.word	0x24027250
700003e4:	50002000 	.word	0x50002000

700003e8 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
700003e8:	b580      	push	{r7, lr}
700003ea:	b082      	sub	sp, #8
700003ec:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_HPDMA1_CLK_ENABLE();
700003ee:	4b0c      	ldr	r3, [pc, #48]	@ (70000420 <MX_DMA_Init+0x38>)
700003f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
700003f4:	4a0a      	ldr	r2, [pc, #40]	@ (70000420 <MX_DMA_Init+0x38>)
700003f6:	f043 0301 	orr.w	r3, r3, #1
700003fa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
700003fe:	4b08      	ldr	r3, [pc, #32]	@ (70000420 <MX_DMA_Init+0x38>)
70000400:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
70000404:	607b      	str	r3, [r7, #4]
70000406:	687b      	ldr	r3, [r7, #4]

  /* HPDMA1 interrupt init */
  HAL_NVIC_SetPriority(HPDMA1_Channel0_IRQn, 5, 0);
70000408:	2200      	movs	r2, #0
7000040a:	2105      	movs	r1, #5
7000040c:	2040      	movs	r0, #64	@ 0x40
7000040e:	f001 f90c 	bl	7000162a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HPDMA1_Channel0_IRQn);
70000412:	2040      	movs	r0, #64	@ 0x40
70000414:	f001 f923 	bl	7000165e <HAL_NVIC_EnableIRQ>
}
70000418:	bf00      	nop
7000041a:	3708      	adds	r7, #8
7000041c:	46bd      	mov	sp, r7
7000041e:	bd80      	pop	{r7, pc}
70000420:	58024400 	.word	0x58024400

70000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
70000424:	b580      	push	{r7, lr}
70000426:	b088      	sub	sp, #32
70000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
7000042a:	f107 030c 	add.w	r3, r7, #12
7000042e:	2200      	movs	r2, #0
70000430:	601a      	str	r2, [r3, #0]
70000432:	605a      	str	r2, [r3, #4]
70000434:	609a      	str	r2, [r3, #8]
70000436:	60da      	str	r2, [r3, #12]
70000438:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
7000043a:	4b34      	ldr	r3, [pc, #208]	@ (7000050c <MX_GPIO_Init+0xe8>)
7000043c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000440:	4a32      	ldr	r2, [pc, #200]	@ (7000050c <MX_GPIO_Init+0xe8>)
70000442:	f043 0301 	orr.w	r3, r3, #1
70000446:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
7000044a:	4b30      	ldr	r3, [pc, #192]	@ (7000050c <MX_GPIO_Init+0xe8>)
7000044c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000450:	60bb      	str	r3, [r7, #8]
70000452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
70000454:	4b2d      	ldr	r3, [pc, #180]	@ (7000050c <MX_GPIO_Init+0xe8>)
70000456:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000045a:	4a2c      	ldr	r2, [pc, #176]	@ (7000050c <MX_GPIO_Init+0xe8>)
7000045c:	f043 0302 	orr.w	r3, r3, #2
70000460:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000464:	4b29      	ldr	r3, [pc, #164]	@ (7000050c <MX_GPIO_Init+0xe8>)
70000466:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
7000046a:	607b      	str	r3, [r7, #4]
7000046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
7000046e:	4b27      	ldr	r3, [pc, #156]	@ (7000050c <MX_GPIO_Init+0xe8>)
70000470:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000474:	4a25      	ldr	r2, [pc, #148]	@ (7000050c <MX_GPIO_Init+0xe8>)
70000476:	f043 0304 	orr.w	r3, r3, #4
7000047a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
7000047e:	4b23      	ldr	r3, [pc, #140]	@ (7000050c <MX_GPIO_Init+0xe8>)
70000480:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000484:	603b      	str	r3, [r7, #0]
70000486:	683b      	ldr	r3, [r7, #0]
   *
   * Note: You'll need to add D1-D7 pins based on your camera connection
   */

  /* DCMIPP_PIXCLK - PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
70000488:	2340      	movs	r3, #64	@ 0x40
7000048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
7000048c:	2302      	movs	r3, #2
7000048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
70000490:	2300      	movs	r3, #0
70000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
70000494:	2303      	movs	r3, #3
70000496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMIPP;
70000498:	230d      	movs	r3, #13
7000049a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
7000049c:	f107 030c 	add.w	r3, r7, #12
700004a0:	4619      	mov	r1, r3
700004a2:	481b      	ldr	r0, [pc, #108]	@ (70000510 <MX_GPIO_Init+0xec>)
700004a4:	f001 fae8 	bl	70001a78 <HAL_GPIO_Init>

  /* DCMIPP_VSYNC - PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
700004a8:	2380      	movs	r3, #128	@ 0x80
700004aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
700004ac:	2302      	movs	r3, #2
700004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
700004b0:	2300      	movs	r3, #0
700004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
700004b4:	2303      	movs	r3, #3
700004b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMIPP;
700004b8:	230d      	movs	r3, #13
700004ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
700004bc:	f107 030c 	add.w	r3, r7, #12
700004c0:	4619      	mov	r1, r3
700004c2:	4814      	ldr	r0, [pc, #80]	@ (70000514 <MX_GPIO_Init+0xf0>)
700004c4:	f001 fad8 	bl	70001a78 <HAL_GPIO_Init>

  /* DCMIPP_D0 - PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
700004c8:	2340      	movs	r3, #64	@ 0x40
700004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
700004cc:	2302      	movs	r3, #2
700004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
700004d0:	2300      	movs	r3, #0
700004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
700004d4:	2303      	movs	r3, #3
700004d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMIPP;
700004d8:	230d      	movs	r3, #13
700004da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
700004dc:	f107 030c 	add.w	r3, r7, #12
700004e0:	4619      	mov	r1, r3
700004e2:	480d      	ldr	r0, [pc, #52]	@ (70000518 <MX_GPIO_Init+0xf4>)
700004e4:	f001 fac8 	bl	70001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
700004e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
700004ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
700004ee:	2303      	movs	r3, #3
700004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
700004f2:	2300      	movs	r3, #0
700004f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
700004f6:	f107 030c 	add.w	r3, r7, #12
700004fa:	4619      	mov	r1, r3
700004fc:	4805      	ldr	r0, [pc, #20]	@ (70000514 <MX_GPIO_Init+0xf0>)
700004fe:	f001 fabb 	bl	70001a78 <HAL_GPIO_Init>

  /* TODO: Add remaining data pins D1-D7 based on your camera configuration */
  /* Example for 8-bit parallel interface:
   * DCMIPP_D1 through DCMIPP_D7 need to be configured
   */
}
70000502:	bf00      	nop
70000504:	3720      	adds	r7, #32
70000506:	46bd      	mov	sp, r7
70000508:	bd80      	pop	{r7, pc}
7000050a:	bf00      	nop
7000050c:	58024400 	.word	0x58024400
70000510:	58020000 	.word	0x58020000
70000514:	58020400 	.word	0x58020400
70000518:	58020800 	.word	0x58020800

7000051c <MX_USB_DEVICE_Init>:
  * @brief USB Device Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_DEVICE_Init(void)
{
7000051c:	b580      	push	{r7, lr}
7000051e:	af00      	add	r7, sp, #0
  /* Init Device Library */
  //USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);

  /* Add Supported Class */
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_VIDEO);
70000520:	4906      	ldr	r1, [pc, #24]	@ (7000053c <MX_USB_DEVICE_Init+0x20>)
70000522:	4807      	ldr	r0, [pc, #28]	@ (70000540 <MX_USB_DEVICE_Init+0x24>)
70000524:	f005 fcdc 	bl	70005ee0 <USBD_RegisterClass>

  /* Add Interface callbacks for VIDEO Class */
  USBD_VIDEO_RegisterInterface(&hUsbDeviceFS, &USBD_VIDEO_fops_FS);
70000528:	4906      	ldr	r1, [pc, #24]	@ (70000544 <MX_USB_DEVICE_Init+0x28>)
7000052a:	4805      	ldr	r0, [pc, #20]	@ (70000540 <MX_USB_DEVICE_Init+0x24>)
7000052c:	f000 fcee 	bl	70000f0c <USBD_VIDEO_RegisterInterface>

  /* Start Device Process */
  USBD_Start(&hUsbDeviceFS);
70000530:	4803      	ldr	r0, [pc, #12]	@ (70000540 <MX_USB_DEVICE_Init+0x24>)
70000532:	f005 fd0b 	bl	70005f4c <USBD_Start>
}
70000536:	bf00      	nop
70000538:	bd80      	pop	{r7, pc}
7000053a:	bf00      	nop
7000053c:	24000008 	.word	0x24000008
70000540:	2402725c 	.word	0x2402725c
70000544:	2400011c 	.word	0x2400011c

70000548 <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
70000548:	b580      	push	{r7, lr}
7000054a:	b084      	sub	sp, #16
7000054c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
7000054e:	f001 f8c3 	bl	700016d8 <HAL_MPU_Disable>

  /* Configure the MPU for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
70000552:	2301      	movs	r3, #1
70000554:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x70000000;
70000556:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
7000055a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
7000055c:	2316      	movs	r3, #22
7000055e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
70000560:	2303      	movs	r3, #3
70000562:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
70000564:	2300      	movs	r3, #0
70000566:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
70000568:	2301      	movs	r3, #1
7000056a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
7000056c:	2300      	movs	r3, #0
7000056e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
70000570:	2300      	movs	r3, #0
70000572:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
70000574:	2300      	movs	r3, #0
70000576:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
70000578:	2300      	movs	r3, #0
7000057a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
7000057c:	2300      	movs	r3, #0
7000057e:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
70000580:	463b      	mov	r3, r7
70000582:	4618      	mov	r0, r3
70000584:	f001 f8c6 	bl	70001714 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
70000588:	2004      	movs	r0, #4
7000058a:	f001 f883 	bl	70001694 <HAL_MPU_Enable>
}
7000058e:	bf00      	nop
70000590:	3710      	adds	r7, #16
70000592:	46bd      	mov	sp, r7
70000594:	bd80      	pop	{r7, pc}
	...

70000598 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
70000598:	b480      	push	{r7}
7000059a:	b085      	sub	sp, #20
7000059c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
7000059e:	4b34      	ldr	r3, [pc, #208]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
700005a0:	695b      	ldr	r3, [r3, #20]
700005a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
700005a6:	2b00      	cmp	r3, #0
700005a8:	d11b      	bne.n	700005e2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
700005aa:	f3bf 8f4f 	dsb	sy
}
700005ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700005b0:	f3bf 8f6f 	isb	sy
}
700005b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
700005b6:	4b2e      	ldr	r3, [pc, #184]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
700005b8:	2200      	movs	r2, #0
700005ba:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
700005be:	f3bf 8f4f 	dsb	sy
}
700005c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700005c4:	f3bf 8f6f 	isb	sy
}
700005c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
700005ca:	4b29      	ldr	r3, [pc, #164]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
700005cc:	695b      	ldr	r3, [r3, #20]
700005ce:	4a28      	ldr	r2, [pc, #160]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
700005d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
700005d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
700005d6:	f3bf 8f4f 	dsb	sy
}
700005da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700005dc:	f3bf 8f6f 	isb	sy
}
700005e0:	e000      	b.n	700005e4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
700005e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
700005e4:	4b22      	ldr	r3, [pc, #136]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
700005e6:	695b      	ldr	r3, [r3, #20]
700005e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
700005ec:	2b00      	cmp	r3, #0
700005ee:	d138      	bne.n	70000662 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
700005f0:	4b1f      	ldr	r3, [pc, #124]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
700005f2:	2200      	movs	r2, #0
700005f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
700005f8:	f3bf 8f4f 	dsb	sy
}
700005fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
700005fe:	4b1c      	ldr	r3, [pc, #112]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
70000600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70000604:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
70000606:	68fb      	ldr	r3, [r7, #12]
70000608:	0b5b      	lsrs	r3, r3, #13
7000060a:	f3c3 030e 	ubfx	r3, r3, #0, #15
7000060e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
70000610:	68fb      	ldr	r3, [r7, #12]
70000612:	08db      	lsrs	r3, r3, #3
70000614:	f3c3 0309 	ubfx	r3, r3, #0, #10
70000618:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
7000061a:	68bb      	ldr	r3, [r7, #8]
7000061c:	015a      	lsls	r2, r3, #5
7000061e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
70000622:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
70000624:	687a      	ldr	r2, [r7, #4]
70000626:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
70000628:	4911      	ldr	r1, [pc, #68]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
7000062a:	4313      	orrs	r3, r2
7000062c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
70000630:	687b      	ldr	r3, [r7, #4]
70000632:	1e5a      	subs	r2, r3, #1
70000634:	607a      	str	r2, [r7, #4]
70000636:	2b00      	cmp	r3, #0
70000638:	d1ef      	bne.n	7000061a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
7000063a:	68bb      	ldr	r3, [r7, #8]
7000063c:	1e5a      	subs	r2, r3, #1
7000063e:	60ba      	str	r2, [r7, #8]
70000640:	2b00      	cmp	r3, #0
70000642:	d1e5      	bne.n	70000610 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
70000644:	f3bf 8f4f 	dsb	sy
}
70000648:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
7000064a:	4b09      	ldr	r3, [pc, #36]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
7000064c:	695b      	ldr	r3, [r3, #20]
7000064e:	4a08      	ldr	r2, [pc, #32]	@ (70000670 <CPU_CACHE_Enable+0xd8>)
70000650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70000654:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
70000656:	f3bf 8f4f 	dsb	sy
}
7000065a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
7000065c:	f3bf 8f6f 	isb	sy
}
70000660:	e000      	b.n	70000664 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
70000662:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
70000664:	bf00      	nop
70000666:	3714      	adds	r7, #20
70000668:	46bd      	mov	sp, r7
7000066a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000066e:	4770      	bx	lr
70000670:	e000ed00 	.word	0xe000ed00

70000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
70000674:	b580      	push	{r7, lr}
70000676:	b0d2      	sub	sp, #328	@ 0x148
70000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
7000067a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
7000067e:	229c      	movs	r2, #156	@ 0x9c
70000680:	2100      	movs	r1, #0
70000682:	4618      	mov	r0, r3
70000684:	f007 f8da 	bl	7000783c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
70000688:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
7000068c:	2220      	movs	r2, #32
7000068e:	2100      	movs	r1, #0
70000690:	4618      	mov	r0, r3
70000692:	f007 f8d3 	bl	7000783c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
70000696:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
7000069a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
7000069e:	4618      	mov	r0, r3
700006a0:	2384      	movs	r3, #132	@ 0x84
700006a2:	461a      	mov	r2, r3
700006a4:	2100      	movs	r1, #0
700006a6:	f007 f8c9 	bl	7000783c <memset>

  __HAL_RCC_FMC_CLK_ENABLE();
700006aa:	4b29      	ldr	r3, [pc, #164]	@ (70000750 <SystemClock_Config+0xdc>)
700006ac:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
700006b0:	4a27      	ldr	r2, [pc, #156]	@ (70000750 <SystemClock_Config+0xdc>)
700006b2:	f043 0310 	orr.w	r3, r3, #16
700006b6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
700006ba:	4b25      	ldr	r3, [pc, #148]	@ (70000750 <SystemClock_Config+0xdc>)
700006bc:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
700006c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
700006c4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
700006c8:	601a      	str	r2, [r3, #0]
700006ca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
700006ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
700006d2:	681b      	ldr	r3, [r3, #0]

  /** Configure the main internal regulator output voltage
  */
  //__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
700006d4:	bf00      	nop
700006d6:	4b1f      	ldr	r3, [pc, #124]	@ (70000754 <SystemClock_Config+0xe0>)
700006d8:	695b      	ldr	r3, [r3, #20]
700006da:	f003 0302 	and.w	r3, r3, #2
700006de:	2b02      	cmp	r3, #2
700006e0:	d1f9      	bne.n	700006d6 <SystemClock_Config+0x62>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
700006e2:	2301      	movs	r3, #1
700006e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
700006e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
700006ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  //RCC_OscInitStruct.PLL.PLLR = 2;
  //RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  //RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  //RCC_OscInitStruct.PLL.PLLFRACN = 0;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
700006f0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
700006f4:	4618      	mov	r0, r3
700006f6:	f002 fca9 	bl	7000304c <HAL_RCC_OscConfig>
700006fa:	4603      	mov	r3, r0
700006fc:	2b00      	cmp	r3, #0
700006fe:	d001      	beq.n	70000704 <SystemClock_Config+0x90>
  {
    Error_Handler();
70000700:	f000 f82a 	bl	70000758 <Error_Handler>
  /** Initializes the CPU, AHB and APB buses clocks
  */
  //RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
  //                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
  //                            |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
70000704:	2303      	movs	r3, #3
70000706:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
7000070a:	2300      	movs	r3, #0
7000070c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
70000710:	2308      	movs	r3, #8
70000712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
70000716:	2308      	movs	r3, #8
70000718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  //RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
7000071c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
70000720:	2125      	movs	r1, #37	@ 0x25
70000722:	4618      	mov	r0, r3
70000724:	f002 ffcc 	bl	700036c0 <HAL_RCC_ClockConfig>
70000728:	4603      	mov	r3, r0
7000072a:	2b00      	cmp	r3, #0
7000072c:	d001      	beq.n	70000732 <SystemClock_Config+0xbe>
  {
    Error_Handler();
7000072e:	f000 f813 	bl	70000758 <Error_Handler>

  /** Configure DCMIPP clock source */
  //PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DCMIPP;
  //PeriphClkInit.DcmippClockSelection = RCC_DCMIPPCLKSOURCE_PLL2R;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
70000732:	f107 0308 	add.w	r3, r7, #8
70000736:	4618      	mov	r0, r3
70000738:	f003 fc3e 	bl	70003fb8 <HAL_RCCEx_PeriphCLKConfig>
7000073c:	4603      	mov	r3, r0
7000073e:	2b00      	cmp	r3, #0
70000740:	d001      	beq.n	70000746 <SystemClock_Config+0xd2>
  {
    Error_Handler();
70000742:	f000 f809 	bl	70000758 <Error_Handler>
  }
}
70000746:	bf00      	nop
70000748:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
7000074c:	46bd      	mov	sp, r7
7000074e:	bd80      	pop	{r7, pc}
70000750:	58024400 	.word	0x58024400
70000754:	58024800 	.word	0x58024800

70000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
70000758:	b480      	push	{r7}
7000075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
7000075c:	b672      	cpsid	i
}
7000075e:	bf00      	nop
  __disable_irq();
  while (1)
70000760:	bf00      	nop
70000762:	e7fd      	b.n	70000760 <Error_Handler+0x8>

70000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
70000764:	b580      	push	{r7, lr}
70000766:	b082      	sub	sp, #8
70000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
7000076a:	463b      	mov	r3, r7
7000076c:	2200      	movs	r2, #0
7000076e:	601a      	str	r2, [r3, #0]
70000770:	605a      	str	r2, [r3, #4]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_EXT_VOL;
70000772:	23e0      	movs	r3, #224	@ 0xe0
70000774:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
70000776:	2300      	movs	r3, #0
70000778:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
7000077a:	463b      	mov	r3, r7
7000077c:	4618      	mov	r0, r3
7000077e:	f002 fbdb 	bl	70002f38 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
70000782:	f002 fc53 	bl	7000302c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
70000786:	bf00      	nop
70000788:	3708      	adds	r7, #8
7000078a:	46bd      	mov	sp, r7
7000078c:	bd80      	pop	{r7, pc}
	...

70000790 <HAL_DCMIPP_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmipp: DCMIPP handle pointer
  * @retval None
  */
void HAL_DCMIPP_MspInit(DCMIPP_HandleTypeDef* hdcmipp)
{
70000790:	b580      	push	{r7, lr}
70000792:	b08c      	sub	sp, #48	@ 0x30
70000794:	af00      	add	r7, sp, #0
70000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
70000798:	f107 031c 	add.w	r3, r7, #28
7000079c:	2200      	movs	r2, #0
7000079e:	601a      	str	r2, [r3, #0]
700007a0:	605a      	str	r2, [r3, #4]
700007a2:	609a      	str	r2, [r3, #8]
700007a4:	60da      	str	r2, [r3, #12]
700007a6:	611a      	str	r2, [r3, #16]
  if(hdcmipp->Instance==DCMIPP)
700007a8:	687b      	ldr	r3, [r7, #4]
700007aa:	681b      	ldr	r3, [r3, #0]
700007ac:	4a3a      	ldr	r2, [pc, #232]	@ (70000898 <HAL_DCMIPP_MspInit+0x108>)
700007ae:	4293      	cmp	r3, r2
700007b0:	d16d      	bne.n	7000088e <HAL_DCMIPP_MspInit+0xfe>
  {
    /* USER CODE BEGIN DCMIPP_MspInit 0 */

    /* USER CODE END DCMIPP_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMIPP_CLK_ENABLE();
700007b2:	4b3a      	ldr	r3, [pc, #232]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007b4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
700007b8:	4a38      	ldr	r2, [pc, #224]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007ba:	f043 0304 	orr.w	r3, r3, #4
700007be:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
700007c2:	4b36      	ldr	r3, [pc, #216]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007c4:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
700007c8:	61bb      	str	r3, [r7, #24]
700007ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
700007cc:	4b33      	ldr	r3, [pc, #204]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700007d2:	4a32      	ldr	r2, [pc, #200]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007d4:	f043 0308 	orr.w	r3, r3, #8
700007d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700007dc:	4b2f      	ldr	r3, [pc, #188]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700007e2:	617b      	str	r3, [r7, #20]
700007e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
700007e6:	4b2d      	ldr	r3, [pc, #180]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700007ec:	4a2b      	ldr	r2, [pc, #172]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007ee:	f043 0302 	orr.w	r3, r3, #2
700007f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
700007f6:	4b29      	ldr	r3, [pc, #164]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
700007f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
700007fc:	613b      	str	r3, [r7, #16]
700007fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
70000800:	4b26      	ldr	r3, [pc, #152]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
70000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000806:	4a25      	ldr	r2, [pc, #148]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
70000808:	f043 0304 	orr.w	r3, r3, #4
7000080c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
70000810:	4b22      	ldr	r3, [pc, #136]	@ (7000089c <HAL_DCMIPP_MspInit+0x10c>)
70000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
70000816:	60fb      	str	r3, [r7, #12]
70000818:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> DCMIPP_D4
    PB9     ------> DCMIPP_D7
    PB7     ------> DCMIPP_VSYNC
    PD5     ------> DCMIPP_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
7000081a:	2308      	movs	r3, #8
7000081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
7000081e:	2302      	movs	r3, #2
70000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
70000822:	2300      	movs	r3, #0
70000824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMIPP;
70000826:	230d      	movs	r3, #13
70000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
7000082a:	f107 031c 	add.w	r3, r7, #28
7000082e:	4619      	mov	r1, r3
70000830:	481b      	ldr	r0, [pc, #108]	@ (700008a0 <HAL_DCMIPP_MspInit+0x110>)
70000832:	f001 f921 	bl	70001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_7;
70000836:	f44f 7360 	mov.w	r3, #896	@ 0x380
7000083a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
7000083c:	2302      	movs	r3, #2
7000083e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
70000840:	2300      	movs	r3, #0
70000842:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMIPP;
70000844:	230d      	movs	r3, #13
70000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
70000848:	f107 031c 	add.w	r3, r7, #28
7000084c:	4619      	mov	r1, r3
7000084e:	4815      	ldr	r0, [pc, #84]	@ (700008a4 <HAL_DCMIPP_MspInit+0x114>)
70000850:	f001 f912 	bl	70001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
70000854:	f44f 6300 	mov.w	r3, #2048	@ 0x800
70000858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
7000085a:	2302      	movs	r3, #2
7000085c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
7000085e:	2300      	movs	r3, #0
70000860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMIPP;
70000862:	230d      	movs	r3, #13
70000864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
70000866:	f107 031c 	add.w	r3, r7, #28
7000086a:	4619      	mov	r1, r3
7000086c:	480e      	ldr	r0, [pc, #56]	@ (700008a8 <HAL_DCMIPP_MspInit+0x118>)
7000086e:	f001 f903 	bl	70001a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
70000872:	2320      	movs	r3, #32
70000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
70000876:	2302      	movs	r3, #2
70000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
7000087a:	2300      	movs	r3, #0
7000087c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_DCMIPP;
7000087e:	2305      	movs	r3, #5
70000880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
70000882:	f107 031c 	add.w	r3, r7, #28
70000886:	4619      	mov	r1, r3
70000888:	4805      	ldr	r0, [pc, #20]	@ (700008a0 <HAL_DCMIPP_MspInit+0x110>)
7000088a:	f001 f8f5 	bl	70001a78 <HAL_GPIO_Init>

    /* USER CODE END DCMIPP_MspInit 1 */

  }

}
7000088e:	bf00      	nop
70000890:	3730      	adds	r7, #48	@ 0x30
70000892:	46bd      	mov	sp, r7
70000894:	bd80      	pop	{r7, pc}
70000896:	bf00      	nop
70000898:	50002000 	.word	0x50002000
7000089c:	58024400 	.word	0x58024400
700008a0:	58020c00 	.word	0x58020c00
700008a4:	58020400 	.word	0x58020400
700008a8:	58020800 	.word	0x58020800

700008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
700008ac:	b480      	push	{r7}
700008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
700008b0:	bf00      	nop
700008b2:	e7fd      	b.n	700008b0 <NMI_Handler+0x4>

700008b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
700008b4:	b480      	push	{r7}
700008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
700008b8:	bf00      	nop
700008ba:	e7fd      	b.n	700008b8 <HardFault_Handler+0x4>

700008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
700008bc:	b480      	push	{r7}
700008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
700008c0:	bf00      	nop
700008c2:	e7fd      	b.n	700008c0 <MemManage_Handler+0x4>

700008c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
700008c4:	b480      	push	{r7}
700008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
700008c8:	bf00      	nop
700008ca:	e7fd      	b.n	700008c8 <BusFault_Handler+0x4>

700008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
700008cc:	b480      	push	{r7}
700008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
700008d0:	bf00      	nop
700008d2:	e7fd      	b.n	700008d0 <UsageFault_Handler+0x4>

700008d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
700008d4:	b480      	push	{r7}
700008d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
700008d8:	bf00      	nop
700008da:	46bd      	mov	sp, r7
700008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
700008e0:	4770      	bx	lr

700008e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
700008e2:	b480      	push	{r7}
700008e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
700008e6:	bf00      	nop
700008e8:	46bd      	mov	sp, r7
700008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
700008ee:	4770      	bx	lr

700008f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
700008f0:	b480      	push	{r7}
700008f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
700008f4:	bf00      	nop
700008f6:	46bd      	mov	sp, r7
700008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
700008fc:	4770      	bx	lr

700008fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
700008fe:	b580      	push	{r7, lr}
70000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
70000902:	f000 fd53 	bl	700013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
70000906:	bf00      	nop
70000908:	bd80      	pop	{r7, pc}
	...

7000090c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS interrupt.
  */
void OTG_HS_IRQHandler(void)
{
7000090c:	b580      	push	{r7, lr}
7000090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
70000910:	4802      	ldr	r0, [pc, #8]	@ (7000091c <OTG_HS_IRQHandler+0x10>)
70000912:	f001 fa46 	bl	70001da2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
70000916:	bf00      	nop
70000918:	bd80      	pop	{r7, pc}
7000091a:	bf00      	nop
7000091c:	24027584 	.word	0x24027584

70000920 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
70000920:	b480      	push	{r7}
70000922:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
70000924:	4b07      	ldr	r3, [pc, #28]	@ (70000944 <SystemInit+0x24>)
70000926:	4a08      	ldr	r2, [pc, #32]	@ (70000948 <SystemInit+0x28>)
70000928:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
7000092a:	4b06      	ldr	r3, [pc, #24]	@ (70000944 <SystemInit+0x24>)
7000092c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70000930:	4a04      	ldr	r2, [pc, #16]	@ (70000944 <SystemInit+0x24>)
70000932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
70000936:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
7000093a:	bf00      	nop
7000093c:	46bd      	mov	sp, r7
7000093e:	f85d 7b04 	ldr.w	r7, [sp], #4
70000942:	4770      	bx	lr
70000944:	e000ed00 	.word	0xe000ed00
70000948:	70000000 	.word	0x70000000

7000094c <USBD_VIDEO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_VIDEO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
7000094c:	b580      	push	{r7, lr}
7000094e:	b084      	sub	sp, #16
70000950:	af00      	add	r7, sp, #0
70000952:	6078      	str	r0, [r7, #4]
70000954:	460b      	mov	r3, r1
70000956:	70fb      	strb	r3, [r7, #3]
  USBD_VIDEO_HandleTypeDef *hVideo;

  /* Allocate Video structure */
  hVideo = (USBD_VIDEO_HandleTypeDef *)USBD_malloc(sizeof(USBD_VIDEO_HandleTypeDef));
70000958:	2010      	movs	r0, #16
7000095a:	f006 ff2b 	bl	700077b4 <USBD_static_malloc>
7000095e:	60f8      	str	r0, [r7, #12]

  if (hVideo == NULL)
70000960:	68fb      	ldr	r3, [r7, #12]
70000962:	2b00      	cmp	r3, #0
70000964:	d109      	bne.n	7000097a <USBD_VIDEO_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
70000966:	687b      	ldr	r3, [r7, #4]
70000968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000096c:	687b      	ldr	r3, [r7, #4]
7000096e:	32b0      	adds	r2, #176	@ 0xb0
70000970:	2100      	movs	r1, #0
70000972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
70000976:	2302      	movs	r3, #2
70000978:	e03c      	b.n	700009f4 <USBD_VIDEO_Init+0xa8>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hVideo;
7000097a:	687b      	ldr	r3, [r7, #4]
7000097c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000980:	687b      	ldr	r3, [r7, #4]
70000982:	32b0      	adds	r2, #176	@ 0xb0
70000984:	68f9      	ldr	r1, [r7, #12]
70000986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
7000098a:	687b      	ldr	r3, [r7, #4]
7000098c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000990:	687b      	ldr	r3, [r7, #4]
70000992:	32b0      	adds	r2, #176	@ 0xb0
70000994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
70000998:	687b      	ldr	r3, [r7, #4]
7000099a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  /* Initialize structure */
  hVideo->streaming_state = 0;
7000099e:	68fb      	ldr	r3, [r7, #12]
700009a0:	2200      	movs	r2, #0
700009a2:	73da      	strb	r2, [r3, #15]
  hVideo->frame_id = 0;
700009a4:	68fb      	ldr	r3, [r7, #12]
700009a6:	2200      	movs	r2, #0
700009a8:	739a      	strb	r2, [r3, #14]
  hVideo->data_length = 0;
700009aa:	68fb      	ldr	r3, [r7, #12]
700009ac:	2200      	movs	r2, #0
700009ae:	601a      	str	r2, [r3, #0]
  hVideo->bytes_sent = 0;
700009b0:	68fb      	ldr	r3, [r7, #12]
700009b2:	2200      	movs	r2, #0
700009b4:	605a      	str	r2, [r3, #4]

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, VIDEO_IN_EP, USBD_EP_TYPE_BULK, VIDEO_PACKET_SIZE);
700009b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
700009ba:	2202      	movs	r2, #2
700009bc:	2181      	movs	r1, #129	@ 0x81
700009be:	6878      	ldr	r0, [r7, #4]
700009c0:	f006 fde7 	bl	70007592 <USBD_LL_OpenEP>
  pdev->ep_in[VIDEO_IN_EP & 0xFU].is_used = 1U;
700009c4:	687b      	ldr	r3, [r7, #4]
700009c6:	2201      	movs	r2, #1
700009c8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Open Interrupt EP */
  (void)USBD_LL_OpenEP(pdev, VIDEO_CMD_EP, USBD_EP_TYPE_INTR, 0x08);
700009ca:	2308      	movs	r3, #8
700009cc:	2203      	movs	r2, #3
700009ce:	2182      	movs	r1, #130	@ 0x82
700009d0:	6878      	ldr	r0, [r7, #4]
700009d2:	f006 fdde 	bl	70007592 <USBD_LL_OpenEP>
  pdev->ep_in[VIDEO_CMD_EP & 0xFU].is_used = 1U;
700009d6:	687b      	ldr	r3, [r7, #4]
700009d8:	2201      	movs	r2, #1
700009da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Initialize the video Interface physical components */
  ((USBD_VIDEO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
700009de:	687b      	ldr	r3, [r7, #4]
700009e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
700009e4:	687a      	ldr	r2, [r7, #4]
700009e6:	33b0      	adds	r3, #176	@ 0xb0
700009e8:	009b      	lsls	r3, r3, #2
700009ea:	4413      	add	r3, r2
700009ec:	685b      	ldr	r3, [r3, #4]
700009ee:	681b      	ldr	r3, [r3, #0]
700009f0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
700009f2:	2300      	movs	r3, #0
}
700009f4:	4618      	mov	r0, r3
700009f6:	3710      	adds	r7, #16
700009f8:	46bd      	mov	sp, r7
700009fa:	bd80      	pop	{r7, pc}

700009fc <USBD_VIDEO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_VIDEO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
700009fc:	b580      	push	{r7, lr}
700009fe:	b082      	sub	sp, #8
70000a00:	af00      	add	r7, sp, #0
70000a02:	6078      	str	r0, [r7, #4]
70000a04:	460b      	mov	r3, r1
70000a06:	70fb      	strb	r3, [r7, #3]
  /* Close endpoints */
  (void)USBD_LL_CloseEP(pdev, VIDEO_IN_EP);
70000a08:	2181      	movs	r1, #129	@ 0x81
70000a0a:	6878      	ldr	r0, [r7, #4]
70000a0c:	f006 fde7 	bl	700075de <USBD_LL_CloseEP>
  pdev->ep_in[VIDEO_IN_EP & 0xFU].is_used = 0U;
70000a10:	687b      	ldr	r3, [r7, #4]
70000a12:	2200      	movs	r2, #0
70000a14:	871a      	strh	r2, [r3, #56]	@ 0x38

  (void)USBD_LL_CloseEP(pdev, VIDEO_CMD_EP);
70000a16:	2182      	movs	r1, #130	@ 0x82
70000a18:	6878      	ldr	r0, [r7, #4]
70000a1a:	f006 fde0 	bl	700075de <USBD_LL_CloseEP>
  pdev->ep_in[VIDEO_CMD_EP & 0xFU].is_used = 0U;
70000a1e:	687b      	ldr	r3, [r7, #4]
70000a20:	2200      	movs	r2, #0
70000a22:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* DeInit physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
70000a26:	687b      	ldr	r3, [r7, #4]
70000a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000a2c:	687b      	ldr	r3, [r7, #4]
70000a2e:	32b0      	adds	r2, #176	@ 0xb0
70000a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000a34:	2b00      	cmp	r3, #0
70000a36:	d01f      	beq.n	70000a78 <USBD_VIDEO_DeInit+0x7c>
  {
    ((USBD_VIDEO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
70000a38:	687b      	ldr	r3, [r7, #4]
70000a3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
70000a3e:	687a      	ldr	r2, [r7, #4]
70000a40:	33b0      	adds	r3, #176	@ 0xb0
70000a42:	009b      	lsls	r3, r3, #2
70000a44:	4413      	add	r3, r2
70000a46:	685b      	ldr	r3, [r3, #4]
70000a48:	685b      	ldr	r3, [r3, #4]
70000a4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
70000a4c:	687b      	ldr	r3, [r7, #4]
70000a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000a52:	687b      	ldr	r3, [r7, #4]
70000a54:	32b0      	adds	r2, #176	@ 0xb0
70000a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000a5a:	4618      	mov	r0, r3
70000a5c:	f006 feb8 	bl	700077d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
70000a60:	687b      	ldr	r3, [r7, #4]
70000a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000a66:	687b      	ldr	r3, [r7, #4]
70000a68:	32b0      	adds	r2, #176	@ 0xb0
70000a6a:	2100      	movs	r1, #0
70000a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
70000a70:	687b      	ldr	r3, [r7, #4]
70000a72:	2200      	movs	r2, #0
70000a74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
70000a78:	2300      	movs	r3, #0
}
70000a7a:	4618      	mov	r0, r3
70000a7c:	3708      	adds	r7, #8
70000a7e:	46bd      	mov	sp, r7
70000a80:	bd80      	pop	{r7, pc}
	...

70000a84 <USBD_VIDEO_Setup>:
  * @param  pdev: device instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_VIDEO_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70000a84:	b580      	push	{r7, lr}
70000a86:	b086      	sub	sp, #24
70000a88:	af00      	add	r7, sp, #0
70000a8a:	6078      	str	r0, [r7, #4]
70000a8c:	6039      	str	r1, [r7, #0]
  USBD_VIDEO_HandleTypeDef *hVideo = (USBD_VIDEO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
70000a8e:	687b      	ldr	r3, [r7, #4]
70000a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000a94:	687b      	ldr	r3, [r7, #4]
70000a96:	32b0      	adds	r2, #176	@ 0xb0
70000a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000a9c:	60fb      	str	r3, [r7, #12]
  uint16_t len = 0;
70000a9e:	2300      	movs	r3, #0
70000aa0:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
70000aa2:	2300      	movs	r3, #0
70000aa4:	617b      	str	r3, [r7, #20]
  uint16_t status_info = 0U;
70000aa6:	2300      	movs	r3, #0
70000aa8:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
70000aaa:	2300      	movs	r3, #0
70000aac:	74fb      	strb	r3, [r7, #19]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
70000aae:	683b      	ldr	r3, [r7, #0]
70000ab0:	781b      	ldrb	r3, [r3, #0]
70000ab2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
70000ab6:	2b00      	cmp	r3, #0
70000ab8:	f000 80af 	beq.w	70000c1a <USBD_VIDEO_Setup+0x196>
70000abc:	2b20      	cmp	r3, #32
70000abe:	f040 8111 	bne.w	70000ce4 <USBD_VIDEO_Setup+0x260>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
70000ac2:	683b      	ldr	r3, [r7, #0]
70000ac4:	785b      	ldrb	r3, [r3, #1]
70000ac6:	2b01      	cmp	r3, #1
70000ac8:	d01e      	beq.n	70000b08 <USBD_VIDEO_Setup+0x84>
70000aca:	2b00      	cmp	r3, #0
70000acc:	f340 8098 	ble.w	70000c00 <USBD_VIDEO_Setup+0x17c>
70000ad0:	2b87      	cmp	r3, #135	@ 0x87
70000ad2:	f300 8095 	bgt.w	70000c00 <USBD_VIDEO_Setup+0x17c>
70000ad6:	2b81      	cmp	r3, #129	@ 0x81
70000ad8:	f2c0 8092 	blt.w	70000c00 <USBD_VIDEO_Setup+0x17c>
70000adc:	3b81      	subs	r3, #129	@ 0x81
70000ade:	2b06      	cmp	r3, #6
70000ae0:	f200 808e 	bhi.w	70000c00 <USBD_VIDEO_Setup+0x17c>
70000ae4:	a201      	add	r2, pc, #4	@ (adr r2, 70000aec <USBD_VIDEO_Setup+0x68>)
70000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70000aea:	bf00      	nop
70000aec:	70000b45 	.word	0x70000b45
70000af0:	70000b97 	.word	0x70000b97
70000af4:	70000b97 	.word	0x70000b97
70000af8:	70000c01 	.word	0x70000c01
70000afc:	70000bd5 	.word	0x70000bd5
70000b00:	70000beb 	.word	0x70000beb
70000b04:	70000b97 	.word	0x70000b97
      {
        case SET_CUR:
          if (req->wIndex == 0x0001)  /* VideoStreaming Interface */
70000b08:	683b      	ldr	r3, [r7, #0]
70000b0a:	889b      	ldrh	r3, [r3, #4]
70000b0c:	2b01      	cmp	r3, #1
70000b0e:	d17e      	bne.n	70000c0e <USBD_VIDEO_Setup+0x18a>
          {
            if (req->wValue == (VS_PROBE_CONTROL << 8))
70000b10:	683b      	ldr	r3, [r7, #0]
70000b12:	885b      	ldrh	r3, [r3, #2]
70000b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70000b18:	d107      	bne.n	70000b2a <USBD_VIDEO_Setup+0xa6>
            {
              (void)USBD_CtlPrepareRx(pdev, (uint8_t *)&videoProbeControl, req->wLength);
70000b1a:	683b      	ldr	r3, [r7, #0]
70000b1c:	88db      	ldrh	r3, [r3, #6]
70000b1e:	461a      	mov	r2, r3
70000b20:	4976      	ldr	r1, [pc, #472]	@ (70000cfc <USBD_VIDEO_Setup+0x278>)
70000b22:	6878      	ldr	r0, [r7, #4]
70000b24:	f006 fbc4 	bl	700072b0 <USBD_CtlPrepareRx>
            else if (req->wValue == (VS_COMMIT_CONTROL << 8))
            {
              (void)USBD_CtlPrepareRx(pdev, (uint8_t *)&videoCommitControl, req->wLength);
            }
          }
          break;
70000b28:	e071      	b.n	70000c0e <USBD_VIDEO_Setup+0x18a>
            else if (req->wValue == (VS_COMMIT_CONTROL << 8))
70000b2a:	683b      	ldr	r3, [r7, #0]
70000b2c:	885b      	ldrh	r3, [r3, #2]
70000b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70000b32:	d16c      	bne.n	70000c0e <USBD_VIDEO_Setup+0x18a>
              (void)USBD_CtlPrepareRx(pdev, (uint8_t *)&videoCommitControl, req->wLength);
70000b34:	683b      	ldr	r3, [r7, #0]
70000b36:	88db      	ldrh	r3, [r3, #6]
70000b38:	461a      	mov	r2, r3
70000b3a:	4971      	ldr	r1, [pc, #452]	@ (70000d00 <USBD_VIDEO_Setup+0x27c>)
70000b3c:	6878      	ldr	r0, [r7, #4]
70000b3e:	f006 fbb7 	bl	700072b0 <USBD_CtlPrepareRx>
          break;
70000b42:	e064      	b.n	70000c0e <USBD_VIDEO_Setup+0x18a>

        case GET_CUR:
          if (req->wIndex == 0x0001)  /* VideoStreaming Interface */
70000b44:	683b      	ldr	r3, [r7, #0]
70000b46:	889b      	ldrh	r3, [r3, #4]
70000b48:	2b01      	cmp	r3, #1
70000b4a:	d112      	bne.n	70000b72 <USBD_VIDEO_Setup+0xee>
          {
            if (req->wValue == (VS_PROBE_CONTROL << 8))
70000b4c:	683b      	ldr	r3, [r7, #0]
70000b4e:	885b      	ldrh	r3, [r3, #2]
70000b50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70000b54:	d104      	bne.n	70000b60 <USBD_VIDEO_Setup+0xdc>
            {
              pbuf = (uint8_t *)&videoProbeControl;
70000b56:	4b69      	ldr	r3, [pc, #420]	@ (70000cfc <USBD_VIDEO_Setup+0x278>)
70000b58:	617b      	str	r3, [r7, #20]
              len = sizeof(videoProbeControl);
70000b5a:	2322      	movs	r3, #34	@ 0x22
70000b5c:	817b      	strh	r3, [r7, #10]
70000b5e:	e008      	b.n	70000b72 <USBD_VIDEO_Setup+0xee>
            }
            else if (req->wValue == (VS_COMMIT_CONTROL << 8))
70000b60:	683b      	ldr	r3, [r7, #0]
70000b62:	885b      	ldrh	r3, [r3, #2]
70000b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70000b68:	d103      	bne.n	70000b72 <USBD_VIDEO_Setup+0xee>
            {
              pbuf = (uint8_t *)&videoCommitControl;
70000b6a:	4b65      	ldr	r3, [pc, #404]	@ (70000d00 <USBD_VIDEO_Setup+0x27c>)
70000b6c:	617b      	str	r3, [r7, #20]
              len = sizeof(videoCommitControl);
70000b6e:	2322      	movs	r3, #34	@ 0x22
70000b70:	817b      	strh	r3, [r7, #10]
            }
          }

          if (pbuf != NULL)
70000b72:	697b      	ldr	r3, [r7, #20]
70000b74:	2b00      	cmp	r3, #0
70000b76:	d04c      	beq.n	70000c12 <USBD_VIDEO_Setup+0x18e>
          {
            len = MIN(len, req->wLength);
70000b78:	683b      	ldr	r3, [r7, #0]
70000b7a:	88da      	ldrh	r2, [r3, #6]
70000b7c:	897b      	ldrh	r3, [r7, #10]
70000b7e:	4293      	cmp	r3, r2
70000b80:	bf28      	it	cs
70000b82:	4613      	movcs	r3, r2
70000b84:	b29b      	uxth	r3, r3
70000b86:	817b      	strh	r3, [r7, #10]
            (void)USBD_CtlSendData(pdev, pbuf, len);
70000b88:	897b      	ldrh	r3, [r7, #10]
70000b8a:	461a      	mov	r2, r3
70000b8c:	6979      	ldr	r1, [r7, #20]
70000b8e:	6878      	ldr	r0, [r7, #4]
70000b90:	f006 fb62 	bl	70007258 <USBD_CtlSendData>
          }
          break;
70000b94:	e03d      	b.n	70000c12 <USBD_VIDEO_Setup+0x18e>

        case GET_MIN:
        case GET_MAX:
        case GET_DEF:
          if (req->wIndex == 0x0001)  /* VideoStreaming Interface */
70000b96:	683b      	ldr	r3, [r7, #0]
70000b98:	889b      	ldrh	r3, [r3, #4]
70000b9a:	2b01      	cmp	r3, #1
70000b9c:	d108      	bne.n	70000bb0 <USBD_VIDEO_Setup+0x12c>
          {
            if (req->wValue == (VS_PROBE_CONTROL << 8))
70000b9e:	683b      	ldr	r3, [r7, #0]
70000ba0:	885b      	ldrh	r3, [r3, #2]
70000ba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70000ba6:	d103      	bne.n	70000bb0 <USBD_VIDEO_Setup+0x12c>
            {
              pbuf = (uint8_t *)&videoProbeControl;
70000ba8:	4b54      	ldr	r3, [pc, #336]	@ (70000cfc <USBD_VIDEO_Setup+0x278>)
70000baa:	617b      	str	r3, [r7, #20]
              len = sizeof(videoProbeControl);
70000bac:	2322      	movs	r3, #34	@ 0x22
70000bae:	817b      	strh	r3, [r7, #10]
            }
          }

          if (pbuf != NULL)
70000bb0:	697b      	ldr	r3, [r7, #20]
70000bb2:	2b00      	cmp	r3, #0
70000bb4:	d02f      	beq.n	70000c16 <USBD_VIDEO_Setup+0x192>
          {
            len = MIN(len, req->wLength);
70000bb6:	683b      	ldr	r3, [r7, #0]
70000bb8:	88da      	ldrh	r2, [r3, #6]
70000bba:	897b      	ldrh	r3, [r7, #10]
70000bbc:	4293      	cmp	r3, r2
70000bbe:	bf28      	it	cs
70000bc0:	4613      	movcs	r3, r2
70000bc2:	b29b      	uxth	r3, r3
70000bc4:	817b      	strh	r3, [r7, #10]
            (void)USBD_CtlSendData(pdev, pbuf, len);
70000bc6:	897b      	ldrh	r3, [r7, #10]
70000bc8:	461a      	mov	r2, r3
70000bca:	6979      	ldr	r1, [r7, #20]
70000bcc:	6878      	ldr	r0, [r7, #4]
70000bce:	f006 fb43 	bl	70007258 <USBD_CtlSendData>
          }
          break;
70000bd2:	e020      	b.n	70000c16 <USBD_VIDEO_Setup+0x192>

        case GET_LEN:
          len = sizeof(videoProbeControl);
70000bd4:	2322      	movs	r3, #34	@ 0x22
70000bd6:	817b      	strh	r3, [r7, #10]
          pbuf = (uint8_t *)&len;
70000bd8:	f107 030a 	add.w	r3, r7, #10
70000bdc:	617b      	str	r3, [r7, #20]
          (void)USBD_CtlSendData(pdev, pbuf, 2);
70000bde:	2202      	movs	r2, #2
70000be0:	6979      	ldr	r1, [r7, #20]
70000be2:	6878      	ldr	r0, [r7, #4]
70000be4:	f006 fb38 	bl	70007258 <USBD_CtlSendData>
          break;
70000be8:	e016      	b.n	70000c18 <USBD_VIDEO_Setup+0x194>

        case GET_INFO:
          pbuf = (uint8_t *)&status_info;
70000bea:	f107 0308 	add.w	r3, r7, #8
70000bee:	617b      	str	r3, [r7, #20]
          status_info = 0x0003;  /* GET/SET supported */
70000bf0:	2303      	movs	r3, #3
70000bf2:	813b      	strh	r3, [r7, #8]
          (void)USBD_CtlSendData(pdev, pbuf, 2);
70000bf4:	2202      	movs	r2, #2
70000bf6:	6979      	ldr	r1, [r7, #20]
70000bf8:	6878      	ldr	r0, [r7, #4]
70000bfa:	f006 fb2d 	bl	70007258 <USBD_CtlSendData>
          break;
70000bfe:	e00b      	b.n	70000c18 <USBD_VIDEO_Setup+0x194>

        default:
          USBD_CtlError(pdev, req);
70000c00:	6839      	ldr	r1, [r7, #0]
70000c02:	6878      	ldr	r0, [r7, #4]
70000c04:	f006 fb17 	bl	70007236 <USBD_CtlError>
          ret = USBD_FAIL;
70000c08:	2303      	movs	r3, #3
70000c0a:	74fb      	strb	r3, [r7, #19]
          break;
70000c0c:	e004      	b.n	70000c18 <USBD_VIDEO_Setup+0x194>
          break;
70000c0e:	bf00      	nop
70000c10:	e06f      	b.n	70000cf2 <USBD_VIDEO_Setup+0x26e>
          break;
70000c12:	bf00      	nop
70000c14:	e06d      	b.n	70000cf2 <USBD_VIDEO_Setup+0x26e>
          break;
70000c16:	bf00      	nop
      }
      break;
70000c18:	e06b      	b.n	70000cf2 <USBD_VIDEO_Setup+0x26e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
70000c1a:	683b      	ldr	r3, [r7, #0]
70000c1c:	785b      	ldrb	r3, [r3, #1]
70000c1e:	2b0b      	cmp	r3, #11
70000c20:	d857      	bhi.n	70000cd2 <USBD_VIDEO_Setup+0x24e>
70000c22:	a201      	add	r2, pc, #4	@ (adr r2, 70000c28 <USBD_VIDEO_Setup+0x1a4>)
70000c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70000c28:	70000c59 	.word	0x70000c59
70000c2c:	70000ce1 	.word	0x70000ce1
70000c30:	70000cd3 	.word	0x70000cd3
70000c34:	70000cd3 	.word	0x70000cd3
70000c38:	70000cd3 	.word	0x70000cd3
70000c3c:	70000cd3 	.word	0x70000cd3
70000c40:	70000cd3 	.word	0x70000cd3
70000c44:	70000cd3 	.word	0x70000cd3
70000c48:	70000cd3 	.word	0x70000cd3
70000c4c:	70000cd3 	.word	0x70000cd3
70000c50:	70000c83 	.word	0x70000c83
70000c54:	70000cad 	.word	0x70000cad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70000c58:	687b      	ldr	r3, [r7, #4]
70000c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70000c5e:	b2db      	uxtb	r3, r3
70000c60:	2b03      	cmp	r3, #3
70000c62:	d107      	bne.n	70000c74 <USBD_VIDEO_Setup+0x1f0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
70000c64:	f107 0308 	add.w	r3, r7, #8
70000c68:	2202      	movs	r2, #2
70000c6a:	4619      	mov	r1, r3
70000c6c:	6878      	ldr	r0, [r7, #4]
70000c6e:	f006 faf3 	bl	70007258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
70000c72:	e036      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>
            USBD_CtlError(pdev, req);
70000c74:	6839      	ldr	r1, [r7, #0]
70000c76:	6878      	ldr	r0, [r7, #4]
70000c78:	f006 fadd 	bl	70007236 <USBD_CtlError>
            ret = USBD_FAIL;
70000c7c:	2303      	movs	r3, #3
70000c7e:	74fb      	strb	r3, [r7, #19]
          break;
70000c80:	e02f      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70000c82:	687b      	ldr	r3, [r7, #4]
70000c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70000c88:	b2db      	uxtb	r3, r3
70000c8a:	2b03      	cmp	r3, #3
70000c8c:	d107      	bne.n	70000c9e <USBD_VIDEO_Setup+0x21a>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hVideo->streaming_state, 1U);
70000c8e:	68fb      	ldr	r3, [r7, #12]
70000c90:	330f      	adds	r3, #15
70000c92:	2201      	movs	r2, #1
70000c94:	4619      	mov	r1, r3
70000c96:	6878      	ldr	r0, [r7, #4]
70000c98:	f006 fade 	bl	70007258 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
70000c9c:	e021      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>
            USBD_CtlError(pdev, req);
70000c9e:	6839      	ldr	r1, [r7, #0]
70000ca0:	6878      	ldr	r0, [r7, #4]
70000ca2:	f006 fac8 	bl	70007236 <USBD_CtlError>
            ret = USBD_FAIL;
70000ca6:	2303      	movs	r3, #3
70000ca8:	74fb      	strb	r3, [r7, #19]
          break;
70000caa:	e01a      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70000cac:	687b      	ldr	r3, [r7, #4]
70000cae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70000cb2:	b2db      	uxtb	r3, r3
70000cb4:	2b03      	cmp	r3, #3
70000cb6:	d105      	bne.n	70000cc4 <USBD_VIDEO_Setup+0x240>
          {
            hVideo->streaming_state = (uint8_t)(req->wValue);
70000cb8:	683b      	ldr	r3, [r7, #0]
70000cba:	885b      	ldrh	r3, [r3, #2]
70000cbc:	b2da      	uxtb	r2, r3
70000cbe:	68fb      	ldr	r3, [r7, #12]
70000cc0:	73da      	strb	r2, [r3, #15]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
70000cc2:	e00e      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>
            USBD_CtlError(pdev, req);
70000cc4:	6839      	ldr	r1, [r7, #0]
70000cc6:	6878      	ldr	r0, [r7, #4]
70000cc8:	f006 fab5 	bl	70007236 <USBD_CtlError>
            ret = USBD_FAIL;
70000ccc:	2303      	movs	r3, #3
70000cce:	74fb      	strb	r3, [r7, #19]
          break;
70000cd0:	e007      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
70000cd2:	6839      	ldr	r1, [r7, #0]
70000cd4:	6878      	ldr	r0, [r7, #4]
70000cd6:	f006 faae 	bl	70007236 <USBD_CtlError>
          ret = USBD_FAIL;
70000cda:	2303      	movs	r3, #3
70000cdc:	74fb      	strb	r3, [r7, #19]
          break;
70000cde:	e000      	b.n	70000ce2 <USBD_VIDEO_Setup+0x25e>
          break;
70000ce0:	bf00      	nop
      }
      break;
70000ce2:	e006      	b.n	70000cf2 <USBD_VIDEO_Setup+0x26e>

    default:
      USBD_CtlError(pdev, req);
70000ce4:	6839      	ldr	r1, [r7, #0]
70000ce6:	6878      	ldr	r0, [r7, #4]
70000ce8:	f006 faa5 	bl	70007236 <USBD_CtlError>
      ret = USBD_FAIL;
70000cec:	2303      	movs	r3, #3
70000cee:	74fb      	strb	r3, [r7, #19]
      break;
70000cf0:	bf00      	nop
  }

  return (uint8_t)ret;
70000cf2:	7cfb      	ldrb	r3, [r7, #19]
}
70000cf4:	4618      	mov	r0, r3
70000cf6:	3718      	adds	r7, #24
70000cf8:	46bd      	mov	sp, r7
70000cfa:	bd80      	pop	{r7, pc}
70000cfc:	24000040 	.word	0x24000040
70000d00:	24027540 	.word	0x24027540

70000d04 <USBD_VIDEO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_VIDEO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
70000d04:	b580      	push	{r7, lr}
70000d06:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
70000d0a:	af00      	add	r7, sp, #0
70000d0c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d10:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
70000d14:	6018      	str	r0, [r3, #0]
70000d16:	460a      	mov	r2, r1
70000d18:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d1c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
70000d20:	701a      	strb	r2, [r3, #0]
  USBD_VIDEO_HandleTypeDef *hVideo = (USBD_VIDEO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
70000d22:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d26:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
70000d2a:	681b      	ldr	r3, [r3, #0]
70000d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000d30:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d34:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
70000d38:	681b      	ldr	r3, [r3, #0]
70000d3a:	32b0      	adds	r2, #176	@ 0xb0
70000d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000d40:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

  if (epnum == (VIDEO_IN_EP & 0x7F))
70000d44:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d48:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
70000d4c:	781b      	ldrb	r3, [r3, #0]
70000d4e:	2b01      	cmp	r3, #1
70000d50:	d176      	bne.n	70000e40 <USBD_VIDEO_DataIn+0x13c>
  {
    /* Continue sending frame data if there's more to send */
    if (hVideo->bytes_sent < hVideo->data_length)
70000d52:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000d56:	685a      	ldr	r2, [r3, #4]
70000d58:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000d5c:	681b      	ldr	r3, [r3, #0]
70000d5e:	429a      	cmp	r2, r3
70000d60:	d25d      	bcs.n	70000e1e <USBD_VIDEO_DataIn+0x11a>
    {
      uint32_t remaining = hVideo->data_length - hVideo->bytes_sent;
70000d62:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000d66:	681a      	ldr	r2, [r3, #0]
70000d68:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000d6c:	685b      	ldr	r3, [r3, #4]
70000d6e:	1ad3      	subs	r3, r2, r3
70000d70:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
      uint32_t packet_size = (remaining > (VIDEO_PACKET_SIZE - UVC_PAYLOAD_HEADER_SIZE)) ?
70000d74:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
70000d78:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
70000d7c:	bf28      	it	cs
70000d7e:	f44f 73ff 	movcs.w	r3, #510	@ 0x1fe
70000d82:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

      /* Prepare packet with header */
      uint8_t packet[VIDEO_PACKET_SIZE];

      /* Copy header */
      packet[0] = UVC_PAYLOAD_HEADER_SIZE;
70000d86:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d8a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000d8e:	2202      	movs	r2, #2
70000d90:	701a      	strb	r2, [r3, #0]
      packet[1] = hVideo->header[1];
70000d92:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000d96:	7b5a      	ldrb	r2, [r3, #13]
70000d98:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000d9c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000da0:	705a      	strb	r2, [r3, #1]

      /* Check if this is the last packet */
      if (hVideo->bytes_sent + packet_size >= hVideo->data_length)
70000da2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000da6:	685a      	ldr	r2, [r3, #4]
70000da8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
70000dac:	441a      	add	r2, r3
70000dae:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000db2:	681b      	ldr	r3, [r3, #0]
70000db4:	429a      	cmp	r2, r3
70000db6:	d30c      	bcc.n	70000dd2 <USBD_VIDEO_DataIn+0xce>
      {
        packet[1] |= UVC_HEADER_EOF;  /* Mark end of frame */
70000db8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000dbc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000dc0:	785b      	ldrb	r3, [r3, #1]
70000dc2:	f043 0302 	orr.w	r3, r3, #2
70000dc6:	b2da      	uxtb	r2, r3
70000dc8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000dcc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000dd0:	705a      	strb	r2, [r3, #1]
      }

      /* Copy data */
      memcpy(&packet[UVC_PAYLOAD_HEADER_SIZE],
             &hVideo->data_buffer[hVideo->bytes_sent],
70000dd2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000dd6:	689a      	ldr	r2, [r3, #8]
70000dd8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000ddc:	685b      	ldr	r3, [r3, #4]
70000dde:	18d1      	adds	r1, r2, r3
      memcpy(&packet[UVC_PAYLOAD_HEADER_SIZE],
70000de0:	f107 030c 	add.w	r3, r7, #12
70000de4:	3302      	adds	r3, #2
70000de6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
70000dea:	4618      	mov	r0, r3
70000dec:	f006 fd52 	bl	70007894 <memcpy>
             packet_size);

      /* Send packet */
      USBD_LL_Transmit(pdev, VIDEO_IN_EP, packet, packet_size + UVC_PAYLOAD_HEADER_SIZE);
70000df0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
70000df4:	3302      	adds	r3, #2
70000df6:	f107 020c 	add.w	r2, r7, #12
70000dfa:	f507 7106 	add.w	r1, r7, #536	@ 0x218
70000dfe:	f5a1 7005 	sub.w	r0, r1, #532	@ 0x214
70000e02:	2181      	movs	r1, #129	@ 0x81
70000e04:	6800      	ldr	r0, [r0, #0]
70000e06:	f006 fc92 	bl	7000772e <USBD_LL_Transmit>

      hVideo->bytes_sent += packet_size;
70000e0a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000e0e:	685a      	ldr	r2, [r3, #4]
70000e10:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
70000e14:	441a      	add	r2, r3
70000e16:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000e1a:	605a      	str	r2, [r3, #4]
70000e1c:	e010      	b.n	70000e40 <USBD_VIDEO_DataIn+0x13c>
    }
    else
    {
      /* Frame transmission complete, toggle frame ID */
      hVideo->frame_id ^= 1;
70000e1e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000e22:	7b9b      	ldrb	r3, [r3, #14]
70000e24:	f083 0301 	eor.w	r3, r3, #1
70000e28:	b2da      	uxtb	r2, r3
70000e2a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000e2e:	739a      	strb	r2, [r3, #14]
      hVideo->bytes_sent = 0;
70000e30:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000e34:	2200      	movs	r2, #0
70000e36:	605a      	str	r2, [r3, #4]
      hVideo->data_length = 0;
70000e38:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000e3c:	2200      	movs	r2, #0
70000e3e:	601a      	str	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
70000e40:	2300      	movs	r3, #0
}
70000e42:	4618      	mov	r0, r3
70000e44:	f507 7706 	add.w	r7, r7, #536	@ 0x218
70000e48:	46bd      	mov	sp, r7
70000e4a:	bd80      	pop	{r7, pc}

70000e4c <USBD_VIDEO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_VIDEO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
70000e4c:	b480      	push	{r7}
70000e4e:	b083      	sub	sp, #12
70000e50:	af00      	add	r7, sp, #0
70000e52:	6078      	str	r0, [r7, #4]
70000e54:	460b      	mov	r3, r1
70000e56:	70fb      	strb	r3, [r7, #3]
  return (uint8_t)USBD_OK;
70000e58:	2300      	movs	r3, #0
}
70000e5a:	4618      	mov	r0, r3
70000e5c:	370c      	adds	r7, #12
70000e5e:	46bd      	mov	sp, r7
70000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
70000e64:	4770      	bx	lr

70000e66 <USBD_VIDEO_EP0_RxReady>:
  * @brief  USBD_VIDEO_EP0_RxReady
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_VIDEO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
70000e66:	b580      	push	{r7, lr}
70000e68:	b084      	sub	sp, #16
70000e6a:	af00      	add	r7, sp, #0
70000e6c:	6078      	str	r0, [r7, #4]
  USBD_VIDEO_HandleTypeDef *hVideo = (USBD_VIDEO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
70000e6e:	687b      	ldr	r3, [r7, #4]
70000e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000e74:	687b      	ldr	r3, [r7, #4]
70000e76:	32b0      	adds	r2, #176	@ 0xb0
70000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000e7c:	60fb      	str	r3, [r7, #12]

  if (hVideo->streaming_state == 1U)
70000e7e:	68fb      	ldr	r3, [r7, #12]
70000e80:	7bdb      	ldrb	r3, [r3, #15]
70000e82:	2b01      	cmp	r3, #1
70000e84:	d10c      	bne.n	70000ea0 <USBD_VIDEO_EP0_RxReady+0x3a>
  {
    /* Streaming interface is active */
    ((USBD_VIDEO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(0, NULL, 0);
70000e86:	687b      	ldr	r3, [r7, #4]
70000e88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
70000e8c:	687a      	ldr	r2, [r7, #4]
70000e8e:	33b0      	adds	r3, #176	@ 0xb0
70000e90:	009b      	lsls	r3, r3, #2
70000e92:	4413      	add	r3, r2
70000e94:	685b      	ldr	r3, [r3, #4]
70000e96:	689b      	ldr	r3, [r3, #8]
70000e98:	2200      	movs	r2, #0
70000e9a:	2100      	movs	r1, #0
70000e9c:	2000      	movs	r0, #0
70000e9e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
70000ea0:	2300      	movs	r3, #0
}
70000ea2:	4618      	mov	r0, r3
70000ea4:	3710      	adds	r7, #16
70000ea6:	46bd      	mov	sp, r7
70000ea8:	bd80      	pop	{r7, pc}
	...

70000eac <USBD_VIDEO_GetFSCfgDesc>:
  * @brief  USBD_VIDEO_GetFSCfgDesc
  * @param  length: pointer to data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_VIDEO_GetFSCfgDesc(uint16_t *length)
{
70000eac:	b480      	push	{r7}
70000eae:	b083      	sub	sp, #12
70000eb0:	af00      	add	r7, sp, #0
70000eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_VIDEO_CfgDesc);
70000eb4:	687b      	ldr	r3, [r7, #4]
70000eb6:	22a9      	movs	r2, #169	@ 0xa9
70000eb8:	801a      	strh	r2, [r3, #0]
  return USBD_VIDEO_CfgDesc;
70000eba:	4b03      	ldr	r3, [pc, #12]	@ (70000ec8 <USBD_VIDEO_GetFSCfgDesc+0x1c>)
}
70000ebc:	4618      	mov	r0, r3
70000ebe:	370c      	adds	r7, #12
70000ec0:	46bd      	mov	sp, r7
70000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
70000ec6:	4770      	bx	lr
70000ec8:	24000064 	.word	0x24000064

70000ecc <USBD_VIDEO_GetHSCfgDesc>:
  * @brief  USBD_VIDEO_GetHSCfgDesc
  * @param  length: pointer to data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_VIDEO_GetHSCfgDesc(uint16_t *length)
{
70000ecc:	b480      	push	{r7}
70000ece:	b083      	sub	sp, #12
70000ed0:	af00      	add	r7, sp, #0
70000ed2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_VIDEO_CfgDesc);
70000ed4:	687b      	ldr	r3, [r7, #4]
70000ed6:	22a9      	movs	r2, #169	@ 0xa9
70000ed8:	801a      	strh	r2, [r3, #0]
  return USBD_VIDEO_CfgDesc;
70000eda:	4b03      	ldr	r3, [pc, #12]	@ (70000ee8 <USBD_VIDEO_GetHSCfgDesc+0x1c>)
}
70000edc:	4618      	mov	r0, r3
70000ede:	370c      	adds	r7, #12
70000ee0:	46bd      	mov	sp, r7
70000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
70000ee6:	4770      	bx	lr
70000ee8:	24000064 	.word	0x24000064

70000eec <USBD_VIDEO_GetDeviceQualifierDesc>:
  * @brief  USBD_VIDEO_GetDeviceQualifierDesc
  * @param  length: pointer to data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_VIDEO_GetDeviceQualifierDesc(uint16_t *length)
{
70000eec:	b480      	push	{r7}
70000eee:	b083      	sub	sp, #12
70000ef0:	af00      	add	r7, sp, #0
70000ef2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_VIDEO_DeviceQualifierDesc);
70000ef4:	687b      	ldr	r3, [r7, #4]
70000ef6:	220a      	movs	r2, #10
70000ef8:	801a      	strh	r2, [r3, #0]
  return USBD_VIDEO_DeviceQualifierDesc;
70000efa:	4b03      	ldr	r3, [pc, #12]	@ (70000f08 <USBD_VIDEO_GetDeviceQualifierDesc+0x1c>)
}
70000efc:	4618      	mov	r0, r3
70000efe:	370c      	adds	r7, #12
70000f00:	46bd      	mov	sp, r7
70000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
70000f06:	4770      	bx	lr
70000f08:	24000110 	.word	0x24000110

70000f0c <USBD_VIDEO_RegisterInterface>:
  * @param  pdev: device instance
  * @param  fops: Video Interface callback
  * @retval status
  */
uint8_t USBD_VIDEO_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_VIDEO_ItfTypeDef *fops)
{
70000f0c:	b480      	push	{r7}
70000f0e:	b083      	sub	sp, #12
70000f10:	af00      	add	r7, sp, #0
70000f12:	6078      	str	r0, [r7, #4]
70000f14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
70000f16:	683b      	ldr	r3, [r7, #0]
70000f18:	2b00      	cmp	r3, #0
70000f1a:	d101      	bne.n	70000f20 <USBD_VIDEO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
70000f1c:	2303      	movs	r3, #3
70000f1e:	e009      	b.n	70000f34 <USBD_VIDEO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
70000f20:	687b      	ldr	r3, [r7, #4]
70000f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
70000f26:	687a      	ldr	r2, [r7, #4]
70000f28:	33b0      	adds	r3, #176	@ 0xb0
70000f2a:	009b      	lsls	r3, r3, #2
70000f2c:	4413      	add	r3, r2
70000f2e:	683a      	ldr	r2, [r7, #0]
70000f30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
70000f32:	2300      	movs	r3, #0
}
70000f34:	4618      	mov	r0, r3
70000f36:	370c      	adds	r7, #12
70000f38:	46bd      	mov	sp, r7
70000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
70000f3e:	4770      	bx	lr

70000f40 <USBD_VIDEO_SendFrame>:
  * @param  pbuf: pointer to frame buffer
  * @param  size: frame size
  * @retval status
  */
uint8_t USBD_VIDEO_SendFrame(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t size)
{
70000f40:	b580      	push	{r7, lr}
70000f42:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
70000f46:	af00      	add	r7, sp, #0
70000f48:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000f4c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000f50:	6018      	str	r0, [r3, #0]
70000f52:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000f56:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
70000f5a:	6019      	str	r1, [r3, #0]
70000f5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000f60:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
70000f64:	601a      	str	r2, [r3, #0]
  USBD_VIDEO_HandleTypeDef *hVideo = (USBD_VIDEO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
70000f66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000f6a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000f6e:	681b      	ldr	r3, [r3, #0]
70000f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70000f74:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70000f78:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
70000f7c:	681b      	ldr	r3, [r3, #0]
70000f7e:	32b0      	adds	r2, #176	@ 0xb0
70000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70000f84:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214

  if (hVideo == NULL)
70000f88:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000f8c:	2b00      	cmp	r3, #0
70000f8e:	d101      	bne.n	70000f94 <USBD_VIDEO_SendFrame+0x54>
  {
    return (uint8_t)USBD_FAIL;
70000f90:	2303      	movs	r3, #3
70000f92:	e088      	b.n	700010a6 <USBD_VIDEO_SendFrame+0x166>
  }

  /* Check if streaming is active */
  if (hVideo->streaming_state != 1U)
70000f94:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000f98:	7bdb      	ldrb	r3, [r3, #15]
70000f9a:	2b01      	cmp	r3, #1
70000f9c:	d001      	beq.n	70000fa2 <USBD_VIDEO_SendFrame+0x62>
  {
    return (uint8_t)USBD_BUSY;
70000f9e:	2301      	movs	r3, #1
70000fa0:	e081      	b.n	700010a6 <USBD_VIDEO_SendFrame+0x166>
  }

  /* Check if previous frame is still being transmitted */
  if (hVideo->data_length != 0)
70000fa2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fa6:	681b      	ldr	r3, [r3, #0]
70000fa8:	2b00      	cmp	r3, #0
70000faa:	d001      	beq.n	70000fb0 <USBD_VIDEO_SendFrame+0x70>
  {
    return (uint8_t)USBD_BUSY;
70000fac:	2301      	movs	r3, #1
70000fae:	e07a      	b.n	700010a6 <USBD_VIDEO_SendFrame+0x166>
  }

  /* Store frame information */
  hVideo->data_buffer = pbuf;
70000fb0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fb4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
70000fb8:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
70000fbc:	6812      	ldr	r2, [r2, #0]
70000fbe:	609a      	str	r2, [r3, #8]
  hVideo->data_length = size;
70000fc0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fc4:	f507 7206 	add.w	r2, r7, #536	@ 0x218
70000fc8:	f5a2 7205 	sub.w	r2, r2, #532	@ 0x214
70000fcc:	6812      	ldr	r2, [r2, #0]
70000fce:	601a      	str	r2, [r3, #0]
  hVideo->bytes_sent = 0;
70000fd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fd4:	2200      	movs	r2, #0
70000fd6:	605a      	str	r2, [r3, #4]

  /* Prepare header */
  hVideo->header[0] = UVC_PAYLOAD_HEADER_SIZE;
70000fd8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fdc:	2202      	movs	r2, #2
70000fde:	731a      	strb	r2, [r3, #12]
  hVideo->header[1] = UVC_HEADER_FID;
70000fe0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fe4:	2201      	movs	r2, #1
70000fe6:	735a      	strb	r2, [r3, #13]

  if (hVideo->frame_id)
70000fe8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000fec:	7b9b      	ldrb	r3, [r3, #14]
70000fee:	2b00      	cmp	r3, #0
70000ff0:	d008      	beq.n	70001004 <USBD_VIDEO_SendFrame+0xc4>
  {
    hVideo->header[1] |= UVC_HEADER_FID;
70000ff2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70000ff6:	7b5b      	ldrb	r3, [r3, #13]
70000ff8:	f043 0301 	orr.w	r3, r3, #1
70000ffc:	b2da      	uxtb	r2, r3
70000ffe:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70001002:	735a      	strb	r2, [r3, #13]
  }

  /* Send first packet */
  uint32_t first_packet_size = (size > (VIDEO_PACKET_SIZE - UVC_PAYLOAD_HEADER_SIZE)) ?
70001004:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70001008:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
7000100c:	681b      	ldr	r3, [r3, #0]
7000100e:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
70001012:	bf28      	it	cs
70001014:	f44f 73ff 	movcs.w	r3, #510	@ 0x1fe
70001018:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
                                (VIDEO_PACKET_SIZE - UVC_PAYLOAD_HEADER_SIZE) : size;

  uint8_t packet[VIDEO_PACKET_SIZE];

  /* Copy header */
  packet[0] = hVideo->header[0];
7000101c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70001020:	7b1a      	ldrb	r2, [r3, #12]
70001022:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70001026:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
7000102a:	701a      	strb	r2, [r3, #0]
  packet[1] = hVideo->header[1];
7000102c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
70001030:	7b5a      	ldrb	r2, [r3, #13]
70001032:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70001036:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
7000103a:	705a      	strb	r2, [r3, #1]

  /* Check if entire frame fits in one packet */
  if (first_packet_size >= size)
7000103c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70001040:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
70001044:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
70001048:	681b      	ldr	r3, [r3, #0]
7000104a:	429a      	cmp	r2, r3
7000104c:	d30c      	bcc.n	70001068 <USBD_VIDEO_SendFrame+0x128>
  {
    packet[1] |= UVC_HEADER_EOF;  /* Mark end of frame */
7000104e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70001052:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
70001056:	785b      	ldrb	r3, [r3, #1]
70001058:	f043 0302 	orr.w	r3, r3, #2
7000105c:	b2da      	uxtb	r2, r3
7000105e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
70001062:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
70001066:	705a      	strb	r2, [r3, #1]
  }

  /* Copy data */
  memcpy(&packet[UVC_PAYLOAD_HEADER_SIZE], pbuf, first_packet_size);
70001068:	f507 7306 	add.w	r3, r7, #536	@ 0x218
7000106c:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
70001070:	f107 0210 	add.w	r2, r7, #16
70001074:	1c90      	adds	r0, r2, #2
70001076:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
7000107a:	6819      	ldr	r1, [r3, #0]
7000107c:	f006 fc0a 	bl	70007894 <memcpy>

  /* Transmit */
  USBD_LL_Transmit(pdev, VIDEO_IN_EP, packet, first_packet_size + UVC_PAYLOAD_HEADER_SIZE);
70001080:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
70001084:	3302      	adds	r3, #2
70001086:	f107 0210 	add.w	r2, r7, #16
7000108a:	f507 7106 	add.w	r1, r7, #536	@ 0x218
7000108e:	f5a1 7003 	sub.w	r0, r1, #524	@ 0x20c
70001092:	2181      	movs	r1, #129	@ 0x81
70001094:	6800      	ldr	r0, [r0, #0]
70001096:	f006 fb4a 	bl	7000772e <USBD_LL_Transmit>

  hVideo->bytes_sent = first_packet_size;
7000109a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
7000109e:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
700010a2:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
700010a4:	2300      	movs	r3, #0
}
700010a6:	4618      	mov	r0, r3
700010a8:	f507 7706 	add.w	r7, r7, #536	@ 0x218
700010ac:	46bd      	mov	sp, r7
700010ae:	bd80      	pop	{r7, pc}

700010b0 <VIDEO_Init_FS>:
/**
  * @brief  Initializes the VIDEO media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t VIDEO_Init_FS(void)
{
700010b0:	b580      	push	{r7, lr}
700010b2:	af00      	add	r7, sp, #0
  if (camera_initialized)
700010b4:	4b18      	ldr	r3, [pc, #96]	@ (70001118 <VIDEO_Init_FS+0x68>)
700010b6:	781b      	ldrb	r3, [r3, #0]
700010b8:	2b00      	cmp	r3, #0
700010ba:	d001      	beq.n	700010c0 <VIDEO_Init_FS+0x10>
  {
    return (USBD_OK);
700010bc:	2300      	movs	r3, #0
700010be:	e029      	b.n	70001114 <VIDEO_Init_FS+0x64>
  }

  /* Initialize camera control structure with defaults */
  camera_control.brightness = DEFAULT_BRIGHTNESS;
700010c0:	4b16      	ldr	r3, [pc, #88]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010c2:	2200      	movs	r2, #0
700010c4:	801a      	strh	r2, [r3, #0]
  camera_control.contrast = DEFAULT_CONTRAST;
700010c6:	4b15      	ldr	r3, [pc, #84]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010c8:	2264      	movs	r2, #100	@ 0x64
700010ca:	805a      	strh	r2, [r3, #2]
  camera_control.hue = DEFAULT_HUE;
700010cc:	4b13      	ldr	r3, [pc, #76]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010ce:	2200      	movs	r2, #0
700010d0:	809a      	strh	r2, [r3, #4]
  camera_control.saturation = DEFAULT_SATURATION;
700010d2:	4b12      	ldr	r3, [pc, #72]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010d4:	2264      	movs	r2, #100	@ 0x64
700010d6:	80da      	strh	r2, [r3, #6]
  camera_control.sharpness = DEFAULT_SHARPNESS;
700010d8:	4b10      	ldr	r3, [pc, #64]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010da:	2264      	movs	r2, #100	@ 0x64
700010dc:	811a      	strh	r2, [r3, #8]
  camera_control.gamma = DEFAULT_GAMMA;
700010de:	4b0f      	ldr	r3, [pc, #60]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010e0:	2264      	movs	r2, #100	@ 0x64
700010e2:	815a      	strh	r2, [r3, #10]
  camera_control.white_balance_temp = DEFAULT_WHITE_BALANCE;
700010e4:	4b0d      	ldr	r3, [pc, #52]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010e6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
700010ea:	819a      	strh	r2, [r3, #12]
  camera_control.white_balance_auto = 1;  /* Auto white balance ON */
700010ec:	4b0b      	ldr	r3, [pc, #44]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010ee:	2201      	movs	r2, #1
700010f0:	739a      	strb	r2, [r3, #14]
  camera_control.power_line_freq = 1;     /* 50Hz */
700010f2:	4b0a      	ldr	r3, [pc, #40]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010f4:	2201      	movs	r2, #1
700010f6:	73da      	strb	r2, [r3, #15]
  camera_control.backlight_comp = 0;      /* OFF */
700010f8:	4b08      	ldr	r3, [pc, #32]	@ (7000111c <VIDEO_Init_FS+0x6c>)
700010fa:	2200      	movs	r2, #0
700010fc:	741a      	strb	r2, [r3, #16]
  camera_control.gain = DEFAULT_GAIN;
700010fe:	4b07      	ldr	r3, [pc, #28]	@ (7000111c <VIDEO_Init_FS+0x6c>)
70001100:	2232      	movs	r2, #50	@ 0x32
70001102:	825a      	strh	r2, [r3, #18]

  /* Initialize camera sensor */
  VIDEO_InitCameraSensor();
70001104:	f000 f8c6 	bl	70001294 <VIDEO_InitCameraSensor>

  /* Apply default settings */
  VIDEO_ApplyCameraSettings();
70001108:	f000 f8cb 	bl	700012a2 <VIDEO_ApplyCameraSettings>

  camera_initialized = 1;
7000110c:	4b02      	ldr	r3, [pc, #8]	@ (70001118 <VIDEO_Init_FS+0x68>)
7000110e:	2201      	movs	r2, #1
70001110:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
70001112:	2300      	movs	r3, #0
}
70001114:	4618      	mov	r0, r3
70001116:	bd80      	pop	{r7, pc}
70001118:	24027578 	.word	0x24027578
7000111c:	24027564 	.word	0x24027564

70001120 <VIDEO_DeInit_FS>:
/**
  * @brief  DeInitializes the VIDEO media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t VIDEO_DeInit_FS(void)
{
70001120:	b480      	push	{r7}
70001122:	af00      	add	r7, sp, #0
  camera_initialized = 0;
70001124:	4b04      	ldr	r3, [pc, #16]	@ (70001138 <VIDEO_DeInit_FS+0x18>)
70001126:	2200      	movs	r2, #0
70001128:	701a      	strb	r2, [r3, #0]
   * - Disable camera sensor via I2C
   * - Turn off camera power supply
   * - Release GPIO resources
   */

  return (USBD_OK);
7000112a:	2300      	movs	r3, #0
}
7000112c:	4618      	mov	r0, r3
7000112e:	46bd      	mov	sp, r7
70001130:	f85d 7b04 	ldr.w	r7, [sp], #4
70001134:	4770      	bx	lr
70001136:	bf00      	nop
70001138:	24027578 	.word	0x24027578

7000113c <VIDEO_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t VIDEO_Control_FS(uint8_t req, uint8_t *pbuf, uint16_t length)
{
7000113c:	b580      	push	{r7, lr}
7000113e:	b084      	sub	sp, #16
70001140:	af00      	add	r7, sp, #0
70001142:	4603      	mov	r3, r0
70001144:	6039      	str	r1, [r7, #0]
70001146:	71fb      	strb	r3, [r7, #7]
70001148:	4613      	mov	r3, r2
7000114a:	80bb      	strh	r3, [r7, #4]
  int16_t value;

  switch (req)
7000114c:	79fb      	ldrb	r3, [r7, #7]
7000114e:	2b01      	cmp	r3, #1
70001150:	d01a      	beq.n	70001188 <VIDEO_Control_FS+0x4c>
70001152:	2b00      	cmp	r3, #0
70001154:	dd7b      	ble.n	7000124e <VIDEO_Control_FS+0x112>
70001156:	2b87      	cmp	r3, #135	@ 0x87
70001158:	dc79      	bgt.n	7000124e <VIDEO_Control_FS+0x112>
7000115a:	2b81      	cmp	r3, #129	@ 0x81
7000115c:	db77      	blt.n	7000124e <VIDEO_Control_FS+0x112>
7000115e:	3b81      	subs	r3, #129	@ 0x81
70001160:	2b06      	cmp	r3, #6
70001162:	d874      	bhi.n	7000124e <VIDEO_Control_FS+0x112>
70001164:	a201      	add	r2, pc, #4	@ (adr r2, 7000116c <VIDEO_Control_FS+0x30>)
70001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000116a:	bf00      	nop
7000116c:	700011c3 	.word	0x700011c3
70001170:	700011e9 	.word	0x700011e9
70001174:	700011ff 	.word	0x700011ff
70001178:	70001215 	.word	0x70001215
7000117c:	7000124f 	.word	0x7000124f
70001180:	70001241 	.word	0x70001241
70001184:	7000122b 	.word	0x7000122b
  {
    case SET_CUR:
      /* Process SET_CUR request */
      if (length >= 2)
70001188:	88bb      	ldrh	r3, [r7, #4]
7000118a:	2b01      	cmp	r3, #1
7000118c:	d961      	bls.n	70001252 <VIDEO_Control_FS+0x116>
      {
        value = (int16_t)(pbuf[0] | (pbuf[1] << 8));
7000118e:	683b      	ldr	r3, [r7, #0]
70001190:	781b      	ldrb	r3, [r3, #0]
70001192:	b21a      	sxth	r2, r3
70001194:	683b      	ldr	r3, [r7, #0]
70001196:	3301      	adds	r3, #1
70001198:	781b      	ldrb	r3, [r3, #0]
7000119a:	b21b      	sxth	r3, r3
7000119c:	021b      	lsls	r3, r3, #8
7000119e:	b21b      	sxth	r3, r3
700011a0:	4313      	orrs	r3, r2
700011a2:	81fb      	strh	r3, [r7, #14]
         * This is simplified - in a complete implementation you'd check the
         * actual control selector from the setup packet
         */

        /* For now, we'll handle brightness as an example */
        if (value >= MIN_BRIGHTNESS && value <= MAX_BRIGHTNESS)
700011a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
700011a8:	f113 0f80 	cmn.w	r3, #128	@ 0x80
700011ac:	db51      	blt.n	70001252 <VIDEO_Control_FS+0x116>
700011ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
700011b2:	2b7f      	cmp	r3, #127	@ 0x7f
700011b4:	dc4d      	bgt.n	70001252 <VIDEO_Control_FS+0x116>
        {
          camera_control.brightness = value;
700011b6:	4a30      	ldr	r2, [pc, #192]	@ (70001278 <VIDEO_Control_FS+0x13c>)
700011b8:	89fb      	ldrh	r3, [r7, #14]
700011ba:	8013      	strh	r3, [r2, #0]
          VIDEO_ApplyCameraSettings();
700011bc:	f000 f871 	bl	700012a2 <VIDEO_ApplyCameraSettings>
        }
      }
      break;
700011c0:	e047      	b.n	70001252 <VIDEO_Control_FS+0x116>

    case GET_CUR:
      /* Process GET_CUR request - return current value */
      if (length >= 2)
700011c2:	88bb      	ldrh	r3, [r7, #4]
700011c4:	2b01      	cmp	r3, #1
700011c6:	d946      	bls.n	70001256 <VIDEO_Control_FS+0x11a>
      {
        /* Return brightness as example */
        pbuf[0] = (uint8_t)(camera_control.brightness & 0xFF);
700011c8:	4b2b      	ldr	r3, [pc, #172]	@ (70001278 <VIDEO_Control_FS+0x13c>)
700011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
700011ce:	b2da      	uxtb	r2, r3
700011d0:	683b      	ldr	r3, [r7, #0]
700011d2:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)((camera_control.brightness >> 8) & 0xFF);
700011d4:	4b28      	ldr	r3, [pc, #160]	@ (70001278 <VIDEO_Control_FS+0x13c>)
700011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
700011da:	121b      	asrs	r3, r3, #8
700011dc:	b21a      	sxth	r2, r3
700011de:	683b      	ldr	r3, [r7, #0]
700011e0:	3301      	adds	r3, #1
700011e2:	b2d2      	uxtb	r2, r2
700011e4:	701a      	strb	r2, [r3, #0]
      }
      break;
700011e6:	e036      	b.n	70001256 <VIDEO_Control_FS+0x11a>

    case GET_MIN:
      /* Process GET_MIN request - return minimum value */
      if (length >= 2)
700011e8:	88bb      	ldrh	r3, [r7, #4]
700011ea:	2b01      	cmp	r3, #1
700011ec:	d935      	bls.n	7000125a <VIDEO_Control_FS+0x11e>
      {
        pbuf[0] = (uint8_t)(MIN_BRIGHTNESS & 0xFF);
700011ee:	683b      	ldr	r3, [r7, #0]
700011f0:	2280      	movs	r2, #128	@ 0x80
700011f2:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)((MIN_BRIGHTNESS >> 8) & 0xFF);
700011f4:	683b      	ldr	r3, [r7, #0]
700011f6:	3301      	adds	r3, #1
700011f8:	22ff      	movs	r2, #255	@ 0xff
700011fa:	701a      	strb	r2, [r3, #0]
      }
      break;
700011fc:	e02d      	b.n	7000125a <VIDEO_Control_FS+0x11e>

    case GET_MAX:
      /* Process GET_MAX request - return maximum value */
      if (length >= 2)
700011fe:	88bb      	ldrh	r3, [r7, #4]
70001200:	2b01      	cmp	r3, #1
70001202:	d92c      	bls.n	7000125e <VIDEO_Control_FS+0x122>
      {
        pbuf[0] = (uint8_t)(MAX_BRIGHTNESS & 0xFF);
70001204:	683b      	ldr	r3, [r7, #0]
70001206:	227f      	movs	r2, #127	@ 0x7f
70001208:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)((MAX_BRIGHTNESS >> 8) & 0xFF);
7000120a:	683b      	ldr	r3, [r7, #0]
7000120c:	3301      	adds	r3, #1
7000120e:	2200      	movs	r2, #0
70001210:	701a      	strb	r2, [r3, #0]
      }
      break;
70001212:	e024      	b.n	7000125e <VIDEO_Control_FS+0x122>

    case GET_RES:
      /* Process GET_RES request - return resolution/step */
      if (length >= 2)
70001214:	88bb      	ldrh	r3, [r7, #4]
70001216:	2b01      	cmp	r3, #1
70001218:	d923      	bls.n	70001262 <VIDEO_Control_FS+0x126>
      {
        pbuf[0] = 0x01;  /* Step of 1 */
7000121a:	683b      	ldr	r3, [r7, #0]
7000121c:	2201      	movs	r2, #1
7000121e:	701a      	strb	r2, [r3, #0]
        pbuf[1] = 0x00;
70001220:	683b      	ldr	r3, [r7, #0]
70001222:	3301      	adds	r3, #1
70001224:	2200      	movs	r2, #0
70001226:	701a      	strb	r2, [r3, #0]
      }
      break;
70001228:	e01b      	b.n	70001262 <VIDEO_Control_FS+0x126>

    case GET_DEF:
      /* Process GET_DEF request - return default value */
      if (length >= 2)
7000122a:	88bb      	ldrh	r3, [r7, #4]
7000122c:	2b01      	cmp	r3, #1
7000122e:	d91a      	bls.n	70001266 <VIDEO_Control_FS+0x12a>
      {
        pbuf[0] = (uint8_t)(DEFAULT_BRIGHTNESS & 0xFF);
70001230:	683b      	ldr	r3, [r7, #0]
70001232:	2200      	movs	r2, #0
70001234:	701a      	strb	r2, [r3, #0]
        pbuf[1] = (uint8_t)((DEFAULT_BRIGHTNESS >> 8) & 0xFF);
70001236:	683b      	ldr	r3, [r7, #0]
70001238:	3301      	adds	r3, #1
7000123a:	2200      	movs	r2, #0
7000123c:	701a      	strb	r2, [r3, #0]
      }
      break;
7000123e:	e012      	b.n	70001266 <VIDEO_Control_FS+0x12a>

    case GET_INFO:
      /* Return capability info - GET/SET supported */
      if (length >= 1)
70001240:	88bb      	ldrh	r3, [r7, #4]
70001242:	2b00      	cmp	r3, #0
70001244:	d011      	beq.n	7000126a <VIDEO_Control_FS+0x12e>
      {
        pbuf[0] = 0x03;  /* Supports GET and SET */
70001246:	683b      	ldr	r3, [r7, #0]
70001248:	2203      	movs	r2, #3
7000124a:	701a      	strb	r2, [r3, #0]
      }
      break;
7000124c:	e00d      	b.n	7000126a <VIDEO_Control_FS+0x12e>

    default:
      break;
7000124e:	bf00      	nop
70001250:	e00c      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
70001252:	bf00      	nop
70001254:	e00a      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
70001256:	bf00      	nop
70001258:	e008      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
7000125a:	bf00      	nop
7000125c:	e006      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
7000125e:	bf00      	nop
70001260:	e004      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
70001262:	bf00      	nop
70001264:	e002      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
70001266:	bf00      	nop
70001268:	e000      	b.n	7000126c <VIDEO_Control_FS+0x130>
      break;
7000126a:	bf00      	nop
  }

  return (USBD_OK);
7000126c:	2300      	movs	r3, #0
}
7000126e:	4618      	mov	r0, r3
70001270:	3710      	adds	r7, #16
70001272:	46bd      	mov	sp, r7
70001274:	bd80      	pop	{r7, pc}
70001276:	bf00      	nop
70001278:	24027564 	.word	0x24027564

7000127c <VIDEO_PrepareFrame_FS>:
  * @param  pbuf: Pointer to frame buffer pointer
  * @param  psize: Pointer to frame size
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t VIDEO_PrepareFrame_FS(uint8_t **pbuf, uint32_t *psize)
{
7000127c:	b480      	push	{r7}
7000127e:	b083      	sub	sp, #12
70001280:	af00      	add	r7, sp, #0
70001282:	6078      	str	r0, [r7, #4]
70001284:	6039      	str	r1, [r7, #0]
   * - Format conversion
   * - Timestamp addition
   * - Quality adjustment
   */

  return (USBD_OK);
70001286:	2300      	movs	r3, #0
}
70001288:	4618      	mov	r0, r3
7000128a:	370c      	adds	r7, #12
7000128c:	46bd      	mov	sp, r7
7000128e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001292:	4770      	bx	lr

70001294 <VIDEO_InitCameraSensor>:
/**
  * @brief  Initialize camera sensor via I2C or configuration interface
  * @retval None
  */
static void VIDEO_InitCameraSensor(void)
{
70001294:	b580      	push	{r7, lr}
70001296:	af00      	add	r7, sp, #0
   *
   * Example for a generic camera:
   */

  /* Delay for camera power-up */
  HAL_Delay(100);
70001298:	2064      	movs	r0, #100	@ 0x64
7000129a:	f000 f8a7 	bl	700013ec <HAL_Delay>
   * reg_data[1] = 0x01;  // Start
   * HAL_I2C_Master_Transmit(&hi2c1, CAMERA_I2C_ADDRESS, reg_data, 2, 1000);
   */

  /* TODO: Add your camera-specific initialization here */
}
7000129e:	bf00      	nop
700012a0:	bd80      	pop	{r7, pc}

700012a2 <VIDEO_ApplyCameraSettings>:
/**
  * @brief  Apply camera control settings to the sensor
  * @retval None
  */
static void VIDEO_ApplyCameraSettings(void)
{
700012a2:	b480      	push	{r7}
700012a4:	af00      	add	r7, sp, #0
  gain_reg[1] = (uint8_t)camera_control.gain;
  HAL_I2C_Master_Transmit(&hi2c1, CAMERA_I2C_ADDRESS, gain_reg, 2, 1000);
  */

  /* TODO: Add your camera-specific register writes here */
}
700012a6:	bf00      	nop
700012a8:	46bd      	mov	sp, r7
700012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
700012ae:	4770      	bx	lr

700012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
700012b0:	480d      	ldr	r0, [pc, #52]	@ (700012e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
700012b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
700012b4:	f7ff fb34 	bl	70000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
700012b8:	480c      	ldr	r0, [pc, #48]	@ (700012ec <LoopForever+0x6>)
  ldr r1, =_edata
700012ba:	490d      	ldr	r1, [pc, #52]	@ (700012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
700012bc:	4a0d      	ldr	r2, [pc, #52]	@ (700012f4 <LoopForever+0xe>)
  movs r3, #0
700012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
700012c0:	e002      	b.n	700012c8 <LoopCopyDataInit>

700012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
700012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
700012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
700012c6:	3304      	adds	r3, #4

700012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
700012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
700012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
700012cc:	d3f9      	bcc.n	700012c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
700012ce:	4a0a      	ldr	r2, [pc, #40]	@ (700012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
700012d0:	4c0a      	ldr	r4, [pc, #40]	@ (700012fc <LoopForever+0x16>)
  movs r3, #0
700012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
700012d4:	e001      	b.n	700012da <LoopFillZerobss>

700012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
700012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
700012d8:	3204      	adds	r2, #4

700012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
700012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
700012dc:	d3fb      	bcc.n	700012d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
700012de:	f006 fab5 	bl	7000784c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
700012e2:	f7ff f805 	bl	700002f0 <main>

700012e6 <LoopForever>:

LoopForever:
  b LoopForever
700012e6:	e7fe      	b.n	700012e6 <LoopForever>
  ldr   r0, =_estack
700012e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
700012ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
700012f0:	24000134 	.word	0x24000134
  ldr r2, =_sidata
700012f4:	700078d8 	.word	0x700078d8
  ldr r2, =_sbss
700012f8:	24027234 	.word	0x24027234
  ldr r4, =_ebss
700012fc:	24027a84 	.word	0x24027a84

70001300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
70001300:	e7fe      	b.n	70001300 <ADC1_2_IRQHandler>

70001302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
70001302:	b580      	push	{r7, lr}
70001304:	b082      	sub	sp, #8
70001306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
70001308:	2300      	movs	r3, #0
7000130a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
7000130c:	2003      	movs	r0, #3
7000130e:	f000 f981 	bl	70001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
70001312:	200f      	movs	r0, #15
70001314:	f000 f80e 	bl	70001334 <HAL_InitTick>
70001318:	4603      	mov	r3, r0
7000131a:	2b00      	cmp	r3, #0
7000131c:	d002      	beq.n	70001324 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
7000131e:	2301      	movs	r3, #1
70001320:	71fb      	strb	r3, [r7, #7]
70001322:	e001      	b.n	70001328 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
70001324:	f7ff fa1e 	bl	70000764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
70001328:	79fb      	ldrb	r3, [r7, #7]
}
7000132a:	4618      	mov	r0, r3
7000132c:	3708      	adds	r7, #8
7000132e:	46bd      	mov	sp, r7
70001330:	bd80      	pop	{r7, pc}
	...

70001334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
70001334:	b580      	push	{r7, lr}
70001336:	b084      	sub	sp, #16
70001338:	af00      	add	r7, sp, #0
7000133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
7000133c:	2300      	movs	r3, #0
7000133e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
70001340:	4b17      	ldr	r3, [pc, #92]	@ (700013a0 <HAL_InitTick+0x6c>)
70001342:	781b      	ldrb	r3, [r3, #0]
70001344:	2b00      	cmp	r3, #0
70001346:	d023      	beq.n	70001390 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
70001348:	4b16      	ldr	r3, [pc, #88]	@ (700013a4 <HAL_InitTick+0x70>)
7000134a:	681a      	ldr	r2, [r3, #0]
7000134c:	4b14      	ldr	r3, [pc, #80]	@ (700013a0 <HAL_InitTick+0x6c>)
7000134e:	781b      	ldrb	r3, [r3, #0]
70001350:	4619      	mov	r1, r3
70001352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
70001356:	fbb3 f3f1 	udiv	r3, r3, r1
7000135a:	fbb2 f3f3 	udiv	r3, r2, r3
7000135e:	4618      	mov	r0, r3
70001360:	f000 f98b 	bl	7000167a <HAL_SYSTICK_Config>
70001364:	4603      	mov	r3, r0
70001366:	2b00      	cmp	r3, #0
70001368:	d10f      	bne.n	7000138a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
7000136a:	687b      	ldr	r3, [r7, #4]
7000136c:	2b0f      	cmp	r3, #15
7000136e:	d809      	bhi.n	70001384 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
70001370:	2200      	movs	r2, #0
70001372:	6879      	ldr	r1, [r7, #4]
70001374:	f04f 30ff 	mov.w	r0, #4294967295
70001378:	f000 f957 	bl	7000162a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
7000137c:	4a0a      	ldr	r2, [pc, #40]	@ (700013a8 <HAL_InitTick+0x74>)
7000137e:	687b      	ldr	r3, [r7, #4]
70001380:	6013      	str	r3, [r2, #0]
70001382:	e007      	b.n	70001394 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
70001384:	2301      	movs	r3, #1
70001386:	73fb      	strb	r3, [r7, #15]
70001388:	e004      	b.n	70001394 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
7000138a:	2301      	movs	r3, #1
7000138c:	73fb      	strb	r3, [r7, #15]
7000138e:	e001      	b.n	70001394 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
70001390:	2301      	movs	r3, #1
70001392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
70001394:	7bfb      	ldrb	r3, [r7, #15]
}
70001396:	4618      	mov	r0, r3
70001398:	3710      	adds	r7, #16
7000139a:	46bd      	mov	sp, r7
7000139c:	bd80      	pop	{r7, pc}
7000139e:	bf00      	nop
700013a0:	24000130 	.word	0x24000130
700013a4:	24000004 	.word	0x24000004
700013a8:	2400012c 	.word	0x2400012c

700013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
700013ac:	b480      	push	{r7}
700013ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
700013b0:	4b06      	ldr	r3, [pc, #24]	@ (700013cc <HAL_IncTick+0x20>)
700013b2:	781b      	ldrb	r3, [r3, #0]
700013b4:	461a      	mov	r2, r3
700013b6:	4b06      	ldr	r3, [pc, #24]	@ (700013d0 <HAL_IncTick+0x24>)
700013b8:	681b      	ldr	r3, [r3, #0]
700013ba:	4413      	add	r3, r2
700013bc:	4a04      	ldr	r2, [pc, #16]	@ (700013d0 <HAL_IncTick+0x24>)
700013be:	6013      	str	r3, [r2, #0]
}
700013c0:	bf00      	nop
700013c2:	46bd      	mov	sp, r7
700013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
700013c8:	4770      	bx	lr
700013ca:	bf00      	nop
700013cc:	24000130 	.word	0x24000130
700013d0:	2402757c 	.word	0x2402757c

700013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
700013d4:	b480      	push	{r7}
700013d6:	af00      	add	r7, sp, #0
  return uwTick;
700013d8:	4b03      	ldr	r3, [pc, #12]	@ (700013e8 <HAL_GetTick+0x14>)
700013da:	681b      	ldr	r3, [r3, #0]
}
700013dc:	4618      	mov	r0, r3
700013de:	46bd      	mov	sp, r7
700013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
700013e4:	4770      	bx	lr
700013e6:	bf00      	nop
700013e8:	2402757c 	.word	0x2402757c

700013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
700013ec:	b580      	push	{r7, lr}
700013ee:	b084      	sub	sp, #16
700013f0:	af00      	add	r7, sp, #0
700013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
700013f4:	f7ff ffee 	bl	700013d4 <HAL_GetTick>
700013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
700013fa:	687b      	ldr	r3, [r7, #4]
700013fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
700013fe:	68fb      	ldr	r3, [r7, #12]
70001400:	f1b3 3fff 	cmp.w	r3, #4294967295
70001404:	d005      	beq.n	70001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
70001406:	4b0a      	ldr	r3, [pc, #40]	@ (70001430 <HAL_Delay+0x44>)
70001408:	781b      	ldrb	r3, [r3, #0]
7000140a:	461a      	mov	r2, r3
7000140c:	68fb      	ldr	r3, [r7, #12]
7000140e:	4413      	add	r3, r2
70001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
70001412:	bf00      	nop
70001414:	f7ff ffde 	bl	700013d4 <HAL_GetTick>
70001418:	4602      	mov	r2, r0
7000141a:	68bb      	ldr	r3, [r7, #8]
7000141c:	1ad3      	subs	r3, r2, r3
7000141e:	68fa      	ldr	r2, [r7, #12]
70001420:	429a      	cmp	r2, r3
70001422:	d8f7      	bhi.n	70001414 <HAL_Delay+0x28>
  {
  }
}
70001424:	bf00      	nop
70001426:	bf00      	nop
70001428:	3710      	adds	r7, #16
7000142a:	46bd      	mov	sp, r7
7000142c:	bd80      	pop	{r7, pc}
7000142e:	bf00      	nop
70001430:	24000130 	.word	0x24000130

70001434 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
70001434:	b480      	push	{r7}
70001436:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
70001438:	4b05      	ldr	r3, [pc, #20]	@ (70001450 <HAL_SuspendTick+0x1c>)
7000143a:	681b      	ldr	r3, [r3, #0]
7000143c:	4a04      	ldr	r2, [pc, #16]	@ (70001450 <HAL_SuspendTick+0x1c>)
7000143e:	f023 0302 	bic.w	r3, r3, #2
70001442:	6013      	str	r3, [r2, #0]
}
70001444:	bf00      	nop
70001446:	46bd      	mov	sp, r7
70001448:	f85d 7b04 	ldr.w	r7, [sp], #4
7000144c:	4770      	bx	lr
7000144e:	bf00      	nop
70001450:	e000e010 	.word	0xe000e010

70001454 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
70001454:	b480      	push	{r7}
70001456:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
70001458:	4b05      	ldr	r3, [pc, #20]	@ (70001470 <HAL_ResumeTick+0x1c>)
7000145a:	681b      	ldr	r3, [r3, #0]
7000145c:	4a04      	ldr	r2, [pc, #16]	@ (70001470 <HAL_ResumeTick+0x1c>)
7000145e:	f043 0302 	orr.w	r3, r3, #2
70001462:	6013      	str	r3, [r2, #0]
}
70001464:	bf00      	nop
70001466:	46bd      	mov	sp, r7
70001468:	f85d 7b04 	ldr.w	r7, [sp], #4
7000146c:	4770      	bx	lr
7000146e:	bf00      	nop
70001470:	e000e010 	.word	0xe000e010

70001474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70001474:	b480      	push	{r7}
70001476:	b085      	sub	sp, #20
70001478:	af00      	add	r7, sp, #0
7000147a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
7000147c:	687b      	ldr	r3, [r7, #4]
7000147e:	f003 0307 	and.w	r3, r3, #7
70001482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
70001484:	4b0b      	ldr	r3, [pc, #44]	@ (700014b4 <__NVIC_SetPriorityGrouping+0x40>)
70001486:	68db      	ldr	r3, [r3, #12]
70001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
7000148a:	68ba      	ldr	r2, [r7, #8]
7000148c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
70001490:	4013      	ands	r3, r2
70001492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
70001494:	68fb      	ldr	r3, [r7, #12]
70001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
70001498:	68bb      	ldr	r3, [r7, #8]
7000149a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
7000149c:	4b06      	ldr	r3, [pc, #24]	@ (700014b8 <__NVIC_SetPriorityGrouping+0x44>)
7000149e:	4313      	orrs	r3, r2
700014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
700014a2:	4a04      	ldr	r2, [pc, #16]	@ (700014b4 <__NVIC_SetPriorityGrouping+0x40>)
700014a4:	68bb      	ldr	r3, [r7, #8]
700014a6:	60d3      	str	r3, [r2, #12]
}
700014a8:	bf00      	nop
700014aa:	3714      	adds	r7, #20
700014ac:	46bd      	mov	sp, r7
700014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
700014b2:	4770      	bx	lr
700014b4:	e000ed00 	.word	0xe000ed00
700014b8:	05fa0000 	.word	0x05fa0000

700014bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
700014bc:	b480      	push	{r7}
700014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
700014c0:	4b04      	ldr	r3, [pc, #16]	@ (700014d4 <__NVIC_GetPriorityGrouping+0x18>)
700014c2:	68db      	ldr	r3, [r3, #12]
700014c4:	0a1b      	lsrs	r3, r3, #8
700014c6:	f003 0307 	and.w	r3, r3, #7
}
700014ca:	4618      	mov	r0, r3
700014cc:	46bd      	mov	sp, r7
700014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
700014d2:	4770      	bx	lr
700014d4:	e000ed00 	.word	0xe000ed00

700014d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
700014d8:	b480      	push	{r7}
700014da:	b083      	sub	sp, #12
700014dc:	af00      	add	r7, sp, #0
700014de:	4603      	mov	r3, r0
700014e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
700014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
700014e6:	2b00      	cmp	r3, #0
700014e8:	db0b      	blt.n	70001502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
700014ea:	88fb      	ldrh	r3, [r7, #6]
700014ec:	f003 021f 	and.w	r2, r3, #31
700014f0:	4907      	ldr	r1, [pc, #28]	@ (70001510 <__NVIC_EnableIRQ+0x38>)
700014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
700014f6:	095b      	lsrs	r3, r3, #5
700014f8:	2001      	movs	r0, #1
700014fa:	fa00 f202 	lsl.w	r2, r0, r2
700014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
70001502:	bf00      	nop
70001504:	370c      	adds	r7, #12
70001506:	46bd      	mov	sp, r7
70001508:	f85d 7b04 	ldr.w	r7, [sp], #4
7000150c:	4770      	bx	lr
7000150e:	bf00      	nop
70001510:	e000e100 	.word	0xe000e100

70001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
70001514:	b480      	push	{r7}
70001516:	b083      	sub	sp, #12
70001518:	af00      	add	r7, sp, #0
7000151a:	4603      	mov	r3, r0
7000151c:	6039      	str	r1, [r7, #0]
7000151e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70001520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001524:	2b00      	cmp	r3, #0
70001526:	db0a      	blt.n	7000153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70001528:	683b      	ldr	r3, [r7, #0]
7000152a:	b2da      	uxtb	r2, r3
7000152c:	490c      	ldr	r1, [pc, #48]	@ (70001560 <__NVIC_SetPriority+0x4c>)
7000152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
70001532:	0112      	lsls	r2, r2, #4
70001534:	b2d2      	uxtb	r2, r2
70001536:	440b      	add	r3, r1
70001538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
7000153c:	e00a      	b.n	70001554 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
7000153e:	683b      	ldr	r3, [r7, #0]
70001540:	b2da      	uxtb	r2, r3
70001542:	4908      	ldr	r1, [pc, #32]	@ (70001564 <__NVIC_SetPriority+0x50>)
70001544:	88fb      	ldrh	r3, [r7, #6]
70001546:	f003 030f 	and.w	r3, r3, #15
7000154a:	3b04      	subs	r3, #4
7000154c:	0112      	lsls	r2, r2, #4
7000154e:	b2d2      	uxtb	r2, r2
70001550:	440b      	add	r3, r1
70001552:	761a      	strb	r2, [r3, #24]
}
70001554:	bf00      	nop
70001556:	370c      	adds	r7, #12
70001558:	46bd      	mov	sp, r7
7000155a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000155e:	4770      	bx	lr
70001560:	e000e100 	.word	0xe000e100
70001564:	e000ed00 	.word	0xe000ed00

70001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
70001568:	b480      	push	{r7}
7000156a:	b089      	sub	sp, #36	@ 0x24
7000156c:	af00      	add	r7, sp, #0
7000156e:	60f8      	str	r0, [r7, #12]
70001570:	60b9      	str	r1, [r7, #8]
70001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
70001574:	68fb      	ldr	r3, [r7, #12]
70001576:	f003 0307 	and.w	r3, r3, #7
7000157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
7000157c:	69fb      	ldr	r3, [r7, #28]
7000157e:	f1c3 0307 	rsb	r3, r3, #7
70001582:	2b04      	cmp	r3, #4
70001584:	bf28      	it	cs
70001586:	2304      	movcs	r3, #4
70001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
7000158a:	69fb      	ldr	r3, [r7, #28]
7000158c:	3304      	adds	r3, #4
7000158e:	2b06      	cmp	r3, #6
70001590:	d902      	bls.n	70001598 <NVIC_EncodePriority+0x30>
70001592:	69fb      	ldr	r3, [r7, #28]
70001594:	3b03      	subs	r3, #3
70001596:	e000      	b.n	7000159a <NVIC_EncodePriority+0x32>
70001598:	2300      	movs	r3, #0
7000159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
7000159c:	f04f 32ff 	mov.w	r2, #4294967295
700015a0:	69bb      	ldr	r3, [r7, #24]
700015a2:	fa02 f303 	lsl.w	r3, r2, r3
700015a6:	43da      	mvns	r2, r3
700015a8:	68bb      	ldr	r3, [r7, #8]
700015aa:	401a      	ands	r2, r3
700015ac:	697b      	ldr	r3, [r7, #20]
700015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
700015b0:	f04f 31ff 	mov.w	r1, #4294967295
700015b4:	697b      	ldr	r3, [r7, #20]
700015b6:	fa01 f303 	lsl.w	r3, r1, r3
700015ba:	43d9      	mvns	r1, r3
700015bc:	687b      	ldr	r3, [r7, #4]
700015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700015c0:	4313      	orrs	r3, r2
         );
}
700015c2:	4618      	mov	r0, r3
700015c4:	3724      	adds	r7, #36	@ 0x24
700015c6:	46bd      	mov	sp, r7
700015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700015cc:	4770      	bx	lr
	...

700015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
700015d0:	b580      	push	{r7, lr}
700015d2:	b082      	sub	sp, #8
700015d4:	af00      	add	r7, sp, #0
700015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
700015d8:	687b      	ldr	r3, [r7, #4]
700015da:	3b01      	subs	r3, #1
700015dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
700015e0:	d301      	bcc.n	700015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
700015e2:	2301      	movs	r3, #1
700015e4:	e00f      	b.n	70001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
700015e6:	4a0a      	ldr	r2, [pc, #40]	@ (70001610 <SysTick_Config+0x40>)
700015e8:	687b      	ldr	r3, [r7, #4]
700015ea:	3b01      	subs	r3, #1
700015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
700015ee:	210f      	movs	r1, #15
700015f0:	f04f 30ff 	mov.w	r0, #4294967295
700015f4:	f7ff ff8e 	bl	70001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
700015f8:	4b05      	ldr	r3, [pc, #20]	@ (70001610 <SysTick_Config+0x40>)
700015fa:	2200      	movs	r2, #0
700015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
700015fe:	4b04      	ldr	r3, [pc, #16]	@ (70001610 <SysTick_Config+0x40>)
70001600:	2207      	movs	r2, #7
70001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
70001604:	2300      	movs	r3, #0
}
70001606:	4618      	mov	r0, r3
70001608:	3708      	adds	r7, #8
7000160a:	46bd      	mov	sp, r7
7000160c:	bd80      	pop	{r7, pc}
7000160e:	bf00      	nop
70001610:	e000e010 	.word	0xe000e010

70001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70001614:	b580      	push	{r7, lr}
70001616:	b082      	sub	sp, #8
70001618:	af00      	add	r7, sp, #0
7000161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
7000161c:	6878      	ldr	r0, [r7, #4]
7000161e:	f7ff ff29 	bl	70001474 <__NVIC_SetPriorityGrouping>
}
70001622:	bf00      	nop
70001624:	3708      	adds	r7, #8
70001626:	46bd      	mov	sp, r7
70001628:	bd80      	pop	{r7, pc}

7000162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
7000162a:	b580      	push	{r7, lr}
7000162c:	b086      	sub	sp, #24
7000162e:	af00      	add	r7, sp, #0
70001630:	4603      	mov	r3, r0
70001632:	60b9      	str	r1, [r7, #8]
70001634:	607a      	str	r2, [r7, #4]
70001636:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
70001638:	f7ff ff40 	bl	700014bc <__NVIC_GetPriorityGrouping>
7000163c:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
7000163e:	687a      	ldr	r2, [r7, #4]
70001640:	68b9      	ldr	r1, [r7, #8]
70001642:	6978      	ldr	r0, [r7, #20]
70001644:	f7ff ff90 	bl	70001568 <NVIC_EncodePriority>
70001648:	4602      	mov	r2, r0
7000164a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
7000164e:	4611      	mov	r1, r2
70001650:	4618      	mov	r0, r3
70001652:	f7ff ff5f 	bl	70001514 <__NVIC_SetPriority>
}
70001656:	bf00      	nop
70001658:	3718      	adds	r7, #24
7000165a:	46bd      	mov	sp, r7
7000165c:	bd80      	pop	{r7, pc}

7000165e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *         to the appropriate CMSIS device file (stm32h7rsxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
7000165e:	b580      	push	{r7, lr}
70001660:	b082      	sub	sp, #8
70001662:	af00      	add	r7, sp, #0
70001664:	4603      	mov	r3, r0
70001666:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
70001668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000166c:	4618      	mov	r0, r3
7000166e:	f7ff ff33 	bl	700014d8 <__NVIC_EnableIRQ>
}
70001672:	bf00      	nop
70001674:	3708      	adds	r7, #8
70001676:	46bd      	mov	sp, r7
70001678:	bd80      	pop	{r7, pc}

7000167a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
7000167a:	b580      	push	{r7, lr}
7000167c:	b082      	sub	sp, #8
7000167e:	af00      	add	r7, sp, #0
70001680:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
70001682:	6878      	ldr	r0, [r7, #4]
70001684:	f7ff ffa4 	bl	700015d0 <SysTick_Config>
70001688:	4603      	mov	r3, r0
}
7000168a:	4618      	mov	r0, r3
7000168c:	3708      	adds	r7, #8
7000168e:	46bd      	mov	sp, r7
70001690:	bd80      	pop	{r7, pc}
	...

70001694 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
70001694:	b480      	push	{r7}
70001696:	b083      	sub	sp, #12
70001698:	af00      	add	r7, sp, #0
7000169a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dmb 0xF":::"memory");
7000169c:	f3bf 8f5f 	dmb	sy
}
700016a0:	bf00      	nop
  /* Force any outstanding transfers to complete before enabling MPU */
  __DMB();

  /* Enable the MPU */
  MPU->CTRL = (MPU_Control | MPU_CTRL_ENABLE_Msk);
700016a2:	4a0b      	ldr	r2, [pc, #44]	@ (700016d0 <HAL_MPU_Enable+0x3c>)
700016a4:	687b      	ldr	r3, [r7, #4]
700016a6:	f043 0301 	orr.w	r3, r3, #1
700016aa:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
700016ac:	4b09      	ldr	r3, [pc, #36]	@ (700016d4 <HAL_MPU_Enable+0x40>)
700016ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700016b0:	4a08      	ldr	r2, [pc, #32]	@ (700016d4 <HAL_MPU_Enable+0x40>)
700016b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700016b6:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
700016b8:	f3bf 8f4f 	dsb	sy
}
700016bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700016be:	f3bf 8f6f 	isb	sy
}
700016c2:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
700016c4:	bf00      	nop
700016c6:	370c      	adds	r7, #12
700016c8:	46bd      	mov	sp, r7
700016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
700016ce:	4770      	bx	lr
700016d0:	e000ed90 	.word	0xe000ed90
700016d4:	e000ed00 	.word	0xe000ed00

700016d8 <HAL_MPU_Disable>:
/**
  * @brief  Disable the MPU.
  * @retval None
  */
void HAL_MPU_Disable(void)
{
700016d8:	b480      	push	{r7}
700016da:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
700016dc:	f3bf 8f5f 	dmb	sy
}
700016e0:	bf00      	nop
  /* Force any outstanding transfers to complete before disabling MPU */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
700016e2:	4b0a      	ldr	r3, [pc, #40]	@ (7000170c <HAL_MPU_Disable+0x34>)
700016e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700016e6:	4a09      	ldr	r2, [pc, #36]	@ (7000170c <HAL_MPU_Disable+0x34>)
700016e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
700016ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register */
  MPU->CTRL = 0U;
700016ee:	4b08      	ldr	r3, [pc, #32]	@ (70001710 <HAL_MPU_Disable+0x38>)
700016f0:	2200      	movs	r2, #0
700016f2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
700016f4:	f3bf 8f4f 	dsb	sy
}
700016f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
700016fa:	f3bf 8f6f 	isb	sy
}
700016fe:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
70001700:	bf00      	nop
70001702:	46bd      	mov	sp, r7
70001704:	f85d 7b04 	ldr.w	r7, [sp], #4
70001708:	4770      	bx	lr
7000170a:	bf00      	nop
7000170c:	e000ed00 	.word	0xe000ed00
70001710:	e000ed90 	.word	0xe000ed90

70001714 <HAL_MPU_ConfigRegion>:
  *                  the initialization and configuration information.
  * @note   The region base address must be aligned to the size of the region.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *pMPU_RegionInit)
{
70001714:	b480      	push	{r7}
70001716:	b083      	sub	sp, #12
70001718:	af00      	add	r7, sp, #0
7000171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(pMPU_RegionInit->Number));
  assert_param(IS_MPU_REGION_ENABLE(pMPU_RegionInit->Enable));

  /* Set the Region number */
  MPU->RNR = pMPU_RegionInit->Number;
7000171c:	687b      	ldr	r3, [r7, #4]
7000171e:	785a      	ldrb	r2, [r3, #1]
70001720:	4b1e      	ldr	r3, [pc, #120]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
70001722:	609a      	str	r2, [r3, #8]
  assert_param(IS_MPU_SUB_REGION_DISABLE(pMPU_RegionInit->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(pMPU_RegionInit->Size));
  assert_param(IS_MPU_ADDRESS_MULTIPLE_SIZE(pMPU_RegionInit->BaseAddress, pMPU_RegionInit->Size));

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
70001724:	4b1d      	ldr	r3, [pc, #116]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
70001726:	691b      	ldr	r3, [r3, #16]
70001728:	4a1c      	ldr	r2, [pc, #112]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
7000172a:	f023 0301 	bic.w	r3, r3, #1
7000172e:	6113      	str	r3, [r2, #16]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
70001730:	4b1a      	ldr	r3, [pc, #104]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
70001732:	691b      	ldr	r3, [r3, #16]
70001734:	4a19      	ldr	r2, [pc, #100]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
70001736:	f023 0301 	bic.w	r3, r3, #1
7000173a:	6113      	str	r3, [r2, #16]
  MPU->RBAR = pMPU_RegionInit->BaseAddress;
7000173c:	4a17      	ldr	r2, [pc, #92]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
7000173e:	687b      	ldr	r3, [r7, #4]
70001740:	685b      	ldr	r3, [r3, #4]
70001742:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001744:	687b      	ldr	r3, [r7, #4]
70001746:	7b1b      	ldrb	r3, [r3, #12]
70001748:	071a      	lsls	r2, r3, #28
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
7000174a:	687b      	ldr	r3, [r7, #4]
7000174c:	7adb      	ldrb	r3, [r3, #11]
7000174e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001750:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
70001752:	687b      	ldr	r3, [r7, #4]
70001754:	7a9b      	ldrb	r3, [r3, #10]
70001756:	04db      	lsls	r3, r3, #19
              ((uint32_t)pMPU_RegionInit->AccessPermission << MPU_RASR_AP_Pos)   |
70001758:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
7000175a:	687b      	ldr	r3, [r7, #4]
7000175c:	7b5b      	ldrb	r3, [r3, #13]
7000175e:	049b      	lsls	r3, r3, #18
              ((uint32_t)pMPU_RegionInit->TypeExtField     << MPU_RASR_TEX_Pos)  |
70001760:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
70001762:	687b      	ldr	r3, [r7, #4]
70001764:	7b9b      	ldrb	r3, [r3, #14]
70001766:	045b      	lsls	r3, r3, #17
              ((uint32_t)pMPU_RegionInit->IsShareable      << MPU_RASR_S_Pos)    |
70001768:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
7000176a:	687b      	ldr	r3, [r7, #4]
7000176c:	7bdb      	ldrb	r3, [r3, #15]
7000176e:	041b      	lsls	r3, r3, #16
              ((uint32_t)pMPU_RegionInit->IsCacheable      << MPU_RASR_C_Pos)    |
70001770:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
70001772:	687b      	ldr	r3, [r7, #4]
70001774:	7a5b      	ldrb	r3, [r3, #9]
70001776:	021b      	lsls	r3, r3, #8
              ((uint32_t)pMPU_RegionInit->IsBufferable     << MPU_RASR_B_Pos)    |
70001778:	431a      	orrs	r2, r3
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
7000177a:	687b      	ldr	r3, [r7, #4]
7000177c:	7a1b      	ldrb	r3, [r3, #8]
7000177e:	005b      	lsls	r3, r3, #1
              ((uint32_t)pMPU_RegionInit->SubRegionDisable << MPU_RASR_SRD_Pos)  |
70001780:	4313      	orrs	r3, r2
              ((uint32_t)pMPU_RegionInit->Enable           << MPU_RASR_ENABLE_Pos);
70001782:	687a      	ldr	r2, [r7, #4]
70001784:	7812      	ldrb	r2, [r2, #0]
70001786:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
70001788:	4a04      	ldr	r2, [pc, #16]	@ (7000179c <HAL_MPU_ConfigRegion+0x88>)
              ((uint32_t)pMPU_RegionInit->Size             << MPU_RASR_SIZE_Pos) |
7000178a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)pMPU_RegionInit->DisableExec      << MPU_RASR_XN_Pos)   |
7000178c:	6113      	str	r3, [r2, #16]
}
7000178e:	bf00      	nop
70001790:	370c      	adds	r7, #12
70001792:	46bd      	mov	sp, r7
70001794:	f85d 7b04 	ldr.w	r7, [sp], #4
70001798:	4770      	bx	lr
7000179a:	bf00      	nop
7000179c:	e000ed90 	.word	0xe000ed90

700017a0 <HAL_DCMIPP_Init>:
  * @brief  Initialize the selected HAL DCMIPP handle and associate a DCMIPP peripheral instance.
  * @param  hdcmipp  Pointer to DCMIPP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_Init(DCMIPP_HandleTypeDef *hdcmipp)
{
700017a0:	b580      	push	{r7, lr}
700017a2:	b084      	sub	sp, #16
700017a4:	af00      	add	r7, sp, #0
700017a6:	6078      	str	r0, [r7, #4]
  uint32_t pipe_index;

  /* Check pointer validity */
  if (hdcmipp == NULL)
700017a8:	687b      	ldr	r3, [r7, #4]
700017aa:	2b00      	cmp	r3, #0
700017ac:	d101      	bne.n	700017b2 <HAL_DCMIPP_Init+0x12>
  {
    return HAL_ERROR;
700017ae:	2301      	movs	r3, #1
700017b0:	e020      	b.n	700017f4 <HAL_DCMIPP_Init+0x54>
  }

  /* Check function parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));

  if (hdcmipp->State == HAL_DCMIPP_STATE_RESET)
700017b2:	687b      	ldr	r3, [r7, #4]
700017b4:	791b      	ldrb	r3, [r3, #4]
700017b6:	b2db      	uxtb	r3, r3
700017b8:	2b00      	cmp	r3, #0
700017ba:	d102      	bne.n	700017c2 <HAL_DCMIPP_Init+0x22>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmipp->MspInitCallback(hdcmipp);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMIPP_MspInit(hdcmipp);
700017bc:	6878      	ldr	r0, [r7, #4]
700017be:	f7fe ffe7 	bl	70000790 <HAL_DCMIPP_MspInit>
#endif /* (USE_HAL_DCMIPP_REGISTER_CALLBACKS) */
  }

  /* Change the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_BUSY;
700017c2:	687b      	ldr	r3, [r7, #4]
700017c4:	2203      	movs	r2, #3
700017c6:	711a      	strb	r2, [r3, #4]

  /* Reset DCMIPP Pipe state */
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
700017c8:	2300      	movs	r3, #0
700017ca:	60fb      	str	r3, [r7, #12]
700017cc:	e008      	b.n	700017e0 <HAL_DCMIPP_Init+0x40>
  {
    hdcmipp->PipeState[pipe_index] = HAL_DCMIPP_PIPE_STATE_RESET;
700017ce:	687a      	ldr	r2, [r7, #4]
700017d0:	68fb      	ldr	r3, [r7, #12]
700017d2:	4413      	add	r3, r2
700017d4:	3305      	adds	r3, #5
700017d6:	2200      	movs	r2, #0
700017d8:	701a      	strb	r2, [r3, #0]
  for (pipe_index = 0U; pipe_index < DCMIPP_NUM_OF_PIPES; pipe_index++)
700017da:	68fb      	ldr	r3, [r7, #12]
700017dc:	3301      	adds	r3, #1
700017de:	60fb      	str	r3, [r7, #12]
700017e0:	68fb      	ldr	r3, [r7, #12]
700017e2:	2b00      	cmp	r3, #0
700017e4:	d0f3      	beq.n	700017ce <HAL_DCMIPP_Init+0x2e>
  }

  /* Update error code */
  hdcmipp->ErrorCode = HAL_DCMIPP_ERROR_NONE;
700017e6:	687b      	ldr	r3, [r7, #4]
700017e8:	2200      	movs	r2, #0
700017ea:	609a      	str	r2, [r3, #8]

  /* Update the DCMIPP state*/
  hdcmipp->State = HAL_DCMIPP_STATE_INIT;
700017ec:	687b      	ldr	r3, [r7, #4]
700017ee:	2201      	movs	r2, #1
700017f0:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
700017f2:	2300      	movs	r3, #0
}
700017f4:	4618      	mov	r0, r3
700017f6:	3710      	adds	r7, #16
700017f8:	46bd      	mov	sp, r7
700017fa:	bd80      	pop	{r7, pc}

700017fc <HAL_DCMIPP_PARALLEL_SetConfig>:
  *                         the parallel Interface configuration information for DCMIPP.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PARALLEL_SetConfig(DCMIPP_HandleTypeDef *hdcmipp,
                                                const DCMIPP_ParallelConfTypeDef *pParallelConfig)
{
700017fc:	b480      	push	{r7}
700017fe:	b085      	sub	sp, #20
70001800:	af00      	add	r7, sp, #0
70001802:	6078      	str	r0, [r7, #4]
70001804:	6039      	str	r1, [r7, #0]
  uint32_t prcr_reg;
  uint32_t prescr_reg;

  /* Check parameters */
  if ((hdcmipp == NULL) || (pParallelConfig == NULL))
70001806:	687b      	ldr	r3, [r7, #4]
70001808:	2b00      	cmp	r3, #0
7000180a:	d002      	beq.n	70001812 <HAL_DCMIPP_PARALLEL_SetConfig+0x16>
7000180c:	683b      	ldr	r3, [r7, #0]
7000180e:	2b00      	cmp	r3, #0
70001810:	d101      	bne.n	70001816 <HAL_DCMIPP_PARALLEL_SetConfig+0x1a>
  {
    return HAL_ERROR;
70001812:	2301      	movs	r3, #1
70001814:	e059      	b.n	700018ca <HAL_DCMIPP_PARALLEL_SetConfig+0xce>
  assert_param(IS_DCMIPP_SYNC_MODE(pParallelConfig->SynchroMode));
  assert_param(IS_DCMIPP_SWAP_BITS(pParallelConfig->SwapBits));
  assert_param(IS_DCMIPP_SWAP_CYCLES(pParallelConfig->SwapCycles));

  /* Check DCMIPP state */
  if (hdcmipp->State != HAL_DCMIPP_STATE_INIT)
70001816:	687b      	ldr	r3, [r7, #4]
70001818:	791b      	ldrb	r3, [r3, #4]
7000181a:	b2db      	uxtb	r3, r3
7000181c:	2b01      	cmp	r3, #1
7000181e:	d001      	beq.n	70001824 <HAL_DCMIPP_PARALLEL_SetConfig+0x28>
  {
    return HAL_ERROR;
70001820:	2301      	movs	r3, #1
70001822:	e052      	b.n	700018ca <HAL_DCMIPP_PARALLEL_SetConfig+0xce>
  }
  else
  {
    /* Configures the Format, VS, HS, PCK polarity, ExtendedDataMode, SynchronisationMode, Swap Cycles and bits */
    prcr_reg  = ((pParallelConfig->Format)           | \
70001824:	683b      	ldr	r3, [r7, #0]
70001826:	681a      	ldr	r2, [r3, #0]
                 (pParallelConfig->VSPolarity)       | \
70001828:	683b      	ldr	r3, [r7, #0]
7000182a:	685b      	ldr	r3, [r3, #4]
    prcr_reg  = ((pParallelConfig->Format)           | \
7000182c:	431a      	orrs	r2, r3
                 (pParallelConfig->HSPolarity)       | \
7000182e:	683b      	ldr	r3, [r7, #0]
70001830:	689b      	ldr	r3, [r3, #8]
                 (pParallelConfig->VSPolarity)       | \
70001832:	431a      	orrs	r2, r3
                 (pParallelConfig->PCKPolarity)      | \
70001834:	683b      	ldr	r3, [r7, #0]
70001836:	68db      	ldr	r3, [r3, #12]
                 (pParallelConfig->HSPolarity)       | \
70001838:	431a      	orrs	r2, r3
                 (pParallelConfig->ExtendedDataMode) | \
7000183a:	683b      	ldr	r3, [r7, #0]
7000183c:	691b      	ldr	r3, [r3, #16]
                 (pParallelConfig->PCKPolarity)      | \
7000183e:	431a      	orrs	r2, r3
                 (pParallelConfig->SynchroMode)      | \
70001840:	683b      	ldr	r3, [r7, #0]
70001842:	695b      	ldr	r3, [r3, #20]
                 (pParallelConfig->ExtendedDataMode) | \
70001844:	431a      	orrs	r2, r3
                 (pParallelConfig->SwapCycles)       | \
70001846:	683b      	ldr	r3, [r7, #0]
70001848:	6a1b      	ldr	r3, [r3, #32]
                 (pParallelConfig->SynchroMode)      | \
7000184a:	431a      	orrs	r2, r3
                 (pParallelConfig->SwapBits));
7000184c:	683b      	ldr	r3, [r7, #0]
7000184e:	69db      	ldr	r3, [r3, #28]
    prcr_reg  = ((pParallelConfig->Format)           | \
70001850:	4313      	orrs	r3, r2
70001852:	60fb      	str	r3, [r7, #12]

    WRITE_REG(hdcmipp->Instance->PRCR, prcr_reg);
70001854:	687b      	ldr	r3, [r7, #4]
70001856:	681b      	ldr	r3, [r3, #0]
70001858:	68fa      	ldr	r2, [r7, #12]
7000185a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    if (pParallelConfig->SynchroMode == DCMIPP_SYNCHRO_EMBEDDED)
7000185e:	683b      	ldr	r3, [r7, #0]
70001860:	695b      	ldr	r3, [r3, #20]
70001862:	2b10      	cmp	r3, #16
70001864:	d119      	bne.n	7000189a <HAL_DCMIPP_PARALLEL_SetConfig+0x9e>
    {
      /* Set Embedded Sync codes */
      prescr_reg = (((uint32_t)pParallelConfig->SynchroCodes.FrameEndCode << DCMIPP_PRESCR_FEC_Pos)   | \
70001866:	683b      	ldr	r3, [r7, #0]
70001868:	7edb      	ldrb	r3, [r3, #27]
7000186a:	061a      	lsls	r2, r3, #24
                    ((uint32_t)pParallelConfig->SynchroCodes.LineEndCode << DCMIPP_PRESCR_LEC_Pos)    | \
7000186c:	683b      	ldr	r3, [r7, #0]
7000186e:	7e9b      	ldrb	r3, [r3, #26]
70001870:	041b      	lsls	r3, r3, #16
      prescr_reg = (((uint32_t)pParallelConfig->SynchroCodes.FrameEndCode << DCMIPP_PRESCR_FEC_Pos)   | \
70001872:	4313      	orrs	r3, r2
                    ((uint32_t)pParallelConfig->SynchroCodes.FrameStartCode << DCMIPP_PRESCR_FSC_Pos) | \
70001874:	683a      	ldr	r2, [r7, #0]
70001876:	7e12      	ldrb	r2, [r2, #24]
                    ((uint32_t)pParallelConfig->SynchroCodes.LineEndCode << DCMIPP_PRESCR_LEC_Pos)    | \
70001878:	431a      	orrs	r2, r3
                    ((uint32_t)pParallelConfig->SynchroCodes.LineStartCode << DCMIPP_PRESCR_LSC_Pos));
7000187a:	683b      	ldr	r3, [r7, #0]
7000187c:	7e5b      	ldrb	r3, [r3, #25]
7000187e:	021b      	lsls	r3, r3, #8
      prescr_reg = (((uint32_t)pParallelConfig->SynchroCodes.FrameEndCode << DCMIPP_PRESCR_FEC_Pos)   | \
70001880:	4313      	orrs	r3, r2
70001882:	60bb      	str	r3, [r7, #8]

      WRITE_REG(hdcmipp->Instance->PRESCR, prescr_reg);
70001884:	687b      	ldr	r3, [r7, #4]
70001886:	681b      	ldr	r3, [r3, #0]
70001888:	68ba      	ldr	r2, [r7, #8]
7000188a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

      /* Set Embedded Sync Unmask codes : All codes are unmasked */
      WRITE_REG(hdcmipp->Instance->PRESUR, 0xFFFFFFFFU);
7000188e:	687b      	ldr	r3, [r7, #4]
70001890:	681b      	ldr	r3, [r3, #0]
70001892:	f04f 32ff 	mov.w	r2, #4294967295
70001896:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    }

    /* Enable the Synchronization error interrupt on parallel interface */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PARALLEL_SYNC_ERROR);
7000189a:	687b      	ldr	r3, [r7, #4]
7000189c:	681b      	ldr	r3, [r3, #0]
7000189e:	f8d3 23f0 	ldr.w	r2, [r3, #1008]	@ 0x3f0
700018a2:	687b      	ldr	r3, [r7, #4]
700018a4:	681b      	ldr	r3, [r3, #0]
700018a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
700018aa:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0

    /* Enable Parallel interface */
    SET_BIT(hdcmipp->Instance->PRCR, DCMIPP_PRCR_ENABLE);
700018ae:	687b      	ldr	r3, [r7, #4]
700018b0:	681b      	ldr	r3, [r3, #0]
700018b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
700018b6:	687b      	ldr	r3, [r7, #4]
700018b8:	681b      	ldr	r3, [r3, #0]
700018ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
700018be:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

  }

  /* Update the DCMIPP state */
  hdcmipp->State = HAL_DCMIPP_STATE_READY;
700018c2:	687b      	ldr	r3, [r7, #4]
700018c4:	2202      	movs	r2, #2
700018c6:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
700018c8:	2300      	movs	r3, #0
}
700018ca:	4618      	mov	r0, r3
700018cc:	3714      	adds	r7, #20
700018ce:	46bd      	mov	sp, r7
700018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
700018d4:	4770      	bx	lr

700018d6 <HAL_DCMIPP_PIPE_SetConfig>:
  * @param  pPipeConfig pointer to pipe configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe,
                                            const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
700018d6:	b580      	push	{r7, lr}
700018d8:	b086      	sub	sp, #24
700018da:	af00      	add	r7, sp, #0
700018dc:	60f8      	str	r0, [r7, #12]
700018de:	60b9      	str	r1, [r7, #8]
700018e0:	607a      	str	r2, [r7, #4]
  HAL_DCMIPP_PipeStateTypeDef pipe_state;

  /* Check the DCMIPP peripheral handle parameter and pPipeConfig parameter */
  if ((hdcmipp == NULL) || (pPipeConfig == NULL))
700018e2:	68fb      	ldr	r3, [r7, #12]
700018e4:	2b00      	cmp	r3, #0
700018e6:	d002      	beq.n	700018ee <HAL_DCMIPP_PIPE_SetConfig+0x18>
700018e8:	687b      	ldr	r3, [r7, #4]
700018ea:	2b00      	cmp	r3, #0
700018ec:	d101      	bne.n	700018f2 <HAL_DCMIPP_PIPE_SetConfig+0x1c>
  {
    return HAL_ERROR;
700018ee:	2301      	movs	r3, #1
700018f0:	e026      	b.n	70001940 <HAL_DCMIPP_PIPE_SetConfig+0x6a>
  /* Check the parameters */
  assert_param(IS_DCMIPP_ALL_INSTANCE(hdcmipp->Instance));
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_FRAME_RATE(pPipeConfig->FrameRate));
  /* Get Pipe State */
  pipe_state = hdcmipp->PipeState[Pipe];
700018f2:	68fa      	ldr	r2, [r7, #12]
700018f4:	68bb      	ldr	r3, [r7, #8]
700018f6:	4413      	add	r3, r2
700018f8:	3305      	adds	r3, #5
700018fa:	781b      	ldrb	r3, [r3, #0]
700018fc:	75fb      	strb	r3, [r7, #23]

  if (hdcmipp->State == HAL_DCMIPP_STATE_READY)
700018fe:	68fb      	ldr	r3, [r7, #12]
70001900:	791b      	ldrb	r3, [r3, #4]
70001902:	b2db      	uxtb	r3, r3
70001904:	2b02      	cmp	r3, #2
70001906:	d11a      	bne.n	7000193e <HAL_DCMIPP_PIPE_SetConfig+0x68>
  {
    if ((pipe_state == HAL_DCMIPP_PIPE_STATE_RESET) || (pipe_state == HAL_DCMIPP_PIPE_STATE_ERROR))
70001908:	7dfb      	ldrb	r3, [r7, #23]
7000190a:	2b00      	cmp	r3, #0
7000190c:	d002      	beq.n	70001914 <HAL_DCMIPP_PIPE_SetConfig+0x3e>
7000190e:	7dfb      	ldrb	r3, [r7, #23]
70001910:	2b04      	cmp	r3, #4
70001912:	d112      	bne.n	7000193a <HAL_DCMIPP_PIPE_SetConfig+0x64>
    {
      /* Update the DCMIPP PIPE state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
70001914:	68fa      	ldr	r2, [r7, #12]
70001916:	68bb      	ldr	r3, [r7, #8]
70001918:	4413      	add	r3, r2
7000191a:	3305      	adds	r3, #5
7000191c:	2202      	movs	r2, #2
7000191e:	701a      	strb	r2, [r3, #0]

      /* Initialize the DCMIPP Pipe registers */
      Pipe_Config(hdcmipp, Pipe, pPipeConfig);
70001920:	687a      	ldr	r2, [r7, #4]
70001922:	68b9      	ldr	r1, [r7, #8]
70001924:	68f8      	ldr	r0, [r7, #12]
70001926:	f000 f839 	bl	7000199c <Pipe_Config>

      /* Update the DCMIPP pipe state */
      hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_READY;
7000192a:	68fa      	ldr	r2, [r7, #12]
7000192c:	68bb      	ldr	r3, [r7, #8]
7000192e:	4413      	add	r3, r2
70001930:	3305      	adds	r3, #5
70001932:	2201      	movs	r2, #1
70001934:	701a      	strb	r2, [r3, #0]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
70001936:	2300      	movs	r3, #0
70001938:	e002      	b.n	70001940 <HAL_DCMIPP_PIPE_SetConfig+0x6a>
      return HAL_ERROR;
7000193a:	2301      	movs	r3, #1
7000193c:	e000      	b.n	70001940 <HAL_DCMIPP_PIPE_SetConfig+0x6a>
    return HAL_ERROR;
7000193e:	2301      	movs	r3, #1
}
70001940:	4618      	mov	r0, r3
70001942:	3718      	adds	r7, #24
70001944:	46bd      	mov	sp, r7
70001946:	bd80      	pop	{r7, pc}

70001948 <HAL_DCMIPP_PIPE_Start>:
  * @param  CaptureMode DCMIPP capture mode for the pipe can be a value from @ref DCMIPP_Capture_Mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMIPP_PIPE_Start(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress,
                                        uint32_t CaptureMode)
{
70001948:	b580      	push	{r7, lr}
7000194a:	b084      	sub	sp, #16
7000194c:	af00      	add	r7, sp, #0
7000194e:	60f8      	str	r0, [r7, #12]
70001950:	60b9      	str	r1, [r7, #8]
70001952:	607a      	str	r2, [r7, #4]
70001954:	603b      	str	r3, [r7, #0]
  assert_param(IS_DCMIPP_PIPE(Pipe));
  assert_param(IS_DCMIPP_CAPTURE_MODE(CaptureMode));

  /* Check pointer validity */
  if ((hdcmipp == NULL) || ((DstAddress & 0xFU) != 0U))
70001956:	68fb      	ldr	r3, [r7, #12]
70001958:	2b00      	cmp	r3, #0
7000195a:	d004      	beq.n	70001966 <HAL_DCMIPP_PIPE_Start+0x1e>
7000195c:	687b      	ldr	r3, [r7, #4]
7000195e:	f003 030f 	and.w	r3, r3, #15
70001962:	2b00      	cmp	r3, #0
70001964:	d001      	beq.n	7000196a <HAL_DCMIPP_PIPE_Start+0x22>
  {
    return HAL_ERROR;
70001966:	2301      	movs	r3, #1
70001968:	e014      	b.n	70001994 <HAL_DCMIPP_PIPE_Start+0x4c>
  }

  /* Check DCMIPP pipe state */
  if (hdcmipp->PipeState[Pipe]  != HAL_DCMIPP_PIPE_STATE_READY)
7000196a:	68fa      	ldr	r2, [r7, #12]
7000196c:	68bb      	ldr	r3, [r7, #8]
7000196e:	4413      	add	r3, r2
70001970:	3305      	adds	r3, #5
70001972:	781b      	ldrb	r3, [r3, #0]
70001974:	b2db      	uxtb	r3, r3
70001976:	2b01      	cmp	r3, #1
70001978:	d001      	beq.n	7000197e <HAL_DCMIPP_PIPE_Start+0x36>
  {
    return HAL_ERROR;
7000197a:	2301      	movs	r3, #1
7000197c:	e00a      	b.n	70001994 <HAL_DCMIPP_PIPE_Start+0x4c>
  }

  /* Set Capture Mode and Destination address for the selected pipe */
  DCMIPP_SetConfig(hdcmipp, Pipe, DstAddress, CaptureMode);
7000197e:	683b      	ldr	r3, [r7, #0]
70001980:	687a      	ldr	r2, [r7, #4]
70001982:	68b9      	ldr	r1, [r7, #8]
70001984:	68f8      	ldr	r0, [r7, #12]
70001986:	f000 f825 	bl	700019d4 <DCMIPP_SetConfig>

  /* Enable Capture for the selected Pipe */
  DCMIPP_EnableCapture(hdcmipp, Pipe);
7000198a:	68b9      	ldr	r1, [r7, #8]
7000198c:	68f8      	ldr	r0, [r7, #12]
7000198e:	f000 f851 	bl	70001a34 <DCMIPP_EnableCapture>

  return HAL_OK;
70001992:	2300      	movs	r3, #0
}
70001994:	4618      	mov	r0, r3
70001996:	3710      	adds	r7, #16
70001998:	46bd      	mov	sp, r7
7000199a:	bd80      	pop	{r7, pc}

7000199c <Pipe_Config>:
  * @param  pPipeConfig pointer to the DCMIPP_PipeConfTypeDef structure that contains
  *                     the configuration information for the pipe.
  * @retval None
  */
static void Pipe_Config(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, const DCMIPP_PipeConfTypeDef *pPipeConfig)
{
7000199c:	b480      	push	{r7}
7000199e:	b085      	sub	sp, #20
700019a0:	af00      	add	r7, sp, #0
700019a2:	60f8      	str	r0, [r7, #12]
700019a4:	60b9      	str	r1, [r7, #8]
700019a6:	607a      	str	r2, [r7, #4]
  if (Pipe == DCMIPP_PIPE0)
700019a8:	68bb      	ldr	r3, [r7, #8]
700019aa:	2b00      	cmp	r3, #0
700019ac:	d10c      	bne.n	700019c8 <Pipe_Config+0x2c>
  {
    /* Configure Pipe0 */
    /* Configure Frame Rate */
    MODIFY_REG(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_FRATE, pPipeConfig->FrameRate);
700019ae:	68fb      	ldr	r3, [r7, #12]
700019b0:	681b      	ldr	r3, [r3, #0]
700019b2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
700019b6:	f023 0103 	bic.w	r1, r3, #3
700019ba:	687b      	ldr	r3, [r7, #4]
700019bc:	681a      	ldr	r2, [r3, #0]
700019be:	68fb      	ldr	r3, [r7, #12]
700019c0:	681b      	ldr	r3, [r3, #0]
700019c2:	430a      	orrs	r2, r1
700019c4:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  }
}
700019c8:	bf00      	nop
700019ca:	3714      	adds	r7, #20
700019cc:	46bd      	mov	sp, r7
700019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
700019d2:	4770      	bx	lr

700019d4 <DCMIPP_SetConfig>:
  * @param  DstAddress  Specifies the destination memory address for the captured data.
  * @param  CaptureMode Specifies the capture mode to be set for the pipe.
  * @retval None
  */
static void DCMIPP_SetConfig(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe, uint32_t DstAddress, uint32_t CaptureMode)
{
700019d4:	b480      	push	{r7}
700019d6:	b085      	sub	sp, #20
700019d8:	af00      	add	r7, sp, #0
700019da:	60f8      	str	r0, [r7, #12]
700019dc:	60b9      	str	r1, [r7, #8]
700019de:	607a      	str	r2, [r7, #4]
700019e0:	603b      	str	r3, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
700019e2:	68bb      	ldr	r3, [r7, #8]
700019e4:	2b00      	cmp	r3, #0
700019e6:	d11f      	bne.n	70001a28 <DCMIPP_SetConfig+0x54>
  {
    /* Update the DCMIPP pipe State */
    hdcmipp->PipeState[Pipe] = HAL_DCMIPP_PIPE_STATE_BUSY;
700019e8:	68fa      	ldr	r2, [r7, #12]
700019ea:	68bb      	ldr	r3, [r7, #8]
700019ec:	4413      	add	r3, r2
700019ee:	3305      	adds	r3, #5
700019f0:	2202      	movs	r2, #2
700019f2:	701a      	strb	r2, [r3, #0]

    /* Set the capture mode */
    hdcmipp->Instance->P0FCTCR |= CaptureMode;
700019f4:	68fb      	ldr	r3, [r7, #12]
700019f6:	681b      	ldr	r3, [r3, #0]
700019f8:	f8d3 1500 	ldr.w	r1, [r3, #1280]	@ 0x500
700019fc:	68fb      	ldr	r3, [r7, #12]
700019fe:	681b      	ldr	r3, [r3, #0]
70001a00:	683a      	ldr	r2, [r7, #0]
70001a02:	430a      	orrs	r2, r1
70001a04:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500

    /* Set the destination address */
    WRITE_REG(hdcmipp->Instance->P0PPM0AR1, DstAddress);
70001a08:	68fb      	ldr	r3, [r7, #12]
70001a0a:	681b      	ldr	r3, [r3, #0]
70001a0c:	687a      	ldr	r2, [r7, #4]
70001a0e:	f8c3 25c4 	str.w	r2, [r3, #1476]	@ 0x5c4

    /* Enable all required interrupts lines for the PIPE0 */
    __HAL_DCMIPP_ENABLE_IT(hdcmipp, DCMIPP_IT_PIPE0_FRAME | DCMIPP_IT_PIPE0_VSYNC | DCMIPP_IT_PIPE0_OVR |
70001a12:	68fb      	ldr	r3, [r7, #12]
70001a14:	681b      	ldr	r3, [r3, #0]
70001a16:	f8d3 13f0 	ldr.w	r1, [r3, #1008]	@ 0x3f0
70001a1a:	68fb      	ldr	r3, [r7, #12]
70001a1c:	681a      	ldr	r2, [r3, #0]
70001a1e:	f248 6320 	movw	r3, #34336	@ 0x8620
70001a22:	430b      	orrs	r3, r1
70001a24:	f8c2 33f0 	str.w	r3, [r2, #1008]	@ 0x3f0
                           DCMIPP_IT_AXI_TRANSFER_ERROR);
  }
}
70001a28:	bf00      	nop
70001a2a:	3714      	adds	r7, #20
70001a2c:	46bd      	mov	sp, r7
70001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001a32:	4770      	bx	lr

70001a34 <DCMIPP_EnableCapture>:
  * @param  hdcmipp     Pointer to DCMIPP handle
  * @param  Pipe        Specifies the DCMIPP pipe, can be a value from @ref DCMIPP_Pipes
  * @retval None
  */
static void DCMIPP_EnableCapture(DCMIPP_HandleTypeDef *hdcmipp, uint32_t Pipe)
{
70001a34:	b480      	push	{r7}
70001a36:	b083      	sub	sp, #12
70001a38:	af00      	add	r7, sp, #0
70001a3a:	6078      	str	r0, [r7, #4]
70001a3c:	6039      	str	r1, [r7, #0]
  if (Pipe == DCMIPP_PIPE0)
70001a3e:	683b      	ldr	r3, [r7, #0]
70001a40:	2b00      	cmp	r3, #0
70001a42:	d113      	bne.n	70001a6c <DCMIPP_EnableCapture+0x38>
  {
    /* Activate the Pipe */
    SET_BIT(hdcmipp->Instance->P0FSCR, DCMIPP_P0FSCR_PIPEN);
70001a44:	687b      	ldr	r3, [r7, #4]
70001a46:	681b      	ldr	r3, [r3, #0]
70001a48:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
70001a4c:	687b      	ldr	r3, [r7, #4]
70001a4e:	681b      	ldr	r3, [r3, #0]
70001a50:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
70001a54:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

    /* Start the capture */
    SET_BIT(hdcmipp->Instance->P0FCTCR, DCMIPP_P0FCTCR_CPTREQ);
70001a58:	687b      	ldr	r3, [r7, #4]
70001a5a:	681b      	ldr	r3, [r3, #0]
70001a5c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
70001a60:	687b      	ldr	r3, [r7, #4]
70001a62:	681b      	ldr	r3, [r3, #0]
70001a64:	f042 0208 	orr.w	r2, r2, #8
70001a68:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  }
}
70001a6c:	bf00      	nop
70001a6e:	370c      	adds	r7, #12
70001a70:	46bd      	mov	sp, r7
70001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
70001a76:	4770      	bx	lr

70001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
70001a78:	b480      	push	{r7}
70001a7a:	b087      	sub	sp, #28
70001a7c:	af00      	add	r7, sp, #0
70001a7e:	6078      	str	r0, [r7, #4]
70001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
70001a82:	2300      	movs	r3, #0
70001a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70001a86:	e143      	b.n	70001d10 <HAL_GPIO_Init+0x298>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
70001a88:	683b      	ldr	r3, [r7, #0]
70001a8a:	681a      	ldr	r2, [r3, #0]
70001a8c:	2101      	movs	r1, #1
70001a8e:	697b      	ldr	r3, [r7, #20]
70001a90:	fa01 f303 	lsl.w	r3, r1, r3
70001a94:	4013      	ands	r3, r2
70001a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
70001a98:	68fb      	ldr	r3, [r7, #12]
70001a9a:	2b00      	cmp	r3, #0
70001a9c:	f000 8135 	beq.w	70001d0a <HAL_GPIO_Init+0x292>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
70001aa0:	683b      	ldr	r3, [r7, #0]
70001aa2:	685b      	ldr	r3, [r3, #4]
70001aa4:	f003 0303 	and.w	r3, r3, #3
70001aa8:	2b01      	cmp	r3, #1
70001aaa:	d005      	beq.n	70001ab8 <HAL_GPIO_Init+0x40>
70001aac:	683b      	ldr	r3, [r7, #0]
70001aae:	685b      	ldr	r3, [r3, #4]
70001ab0:	f003 0303 	and.w	r3, r3, #3
70001ab4:	2b02      	cmp	r3, #2
70001ab6:	d130      	bne.n	70001b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
70001ab8:	687b      	ldr	r3, [r7, #4]
70001aba:	689b      	ldr	r3, [r3, #8]
70001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70001abe:	697b      	ldr	r3, [r7, #20]
70001ac0:	005b      	lsls	r3, r3, #1
70001ac2:	2203      	movs	r2, #3
70001ac4:	fa02 f303 	lsl.w	r3, r2, r3
70001ac8:	43db      	mvns	r3, r3
70001aca:	693a      	ldr	r2, [r7, #16]
70001acc:	4013      	ands	r3, r2
70001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
70001ad0:	683b      	ldr	r3, [r7, #0]
70001ad2:	68da      	ldr	r2, [r3, #12]
70001ad4:	697b      	ldr	r3, [r7, #20]
70001ad6:	005b      	lsls	r3, r3, #1
70001ad8:	fa02 f303 	lsl.w	r3, r2, r3
70001adc:	693a      	ldr	r2, [r7, #16]
70001ade:	4313      	orrs	r3, r2
70001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
70001ae2:	687b      	ldr	r3, [r7, #4]
70001ae4:	693a      	ldr	r2, [r7, #16]
70001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
70001ae8:	687b      	ldr	r3, [r7, #4]
70001aea:	685b      	ldr	r3, [r3, #4]
70001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
70001aee:	2201      	movs	r2, #1
70001af0:	697b      	ldr	r3, [r7, #20]
70001af2:	fa02 f303 	lsl.w	r3, r2, r3
70001af6:	43db      	mvns	r3, r3
70001af8:	693a      	ldr	r2, [r7, #16]
70001afa:	4013      	ands	r3, r2
70001afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
70001afe:	683b      	ldr	r3, [r7, #0]
70001b00:	685b      	ldr	r3, [r3, #4]
70001b02:	091b      	lsrs	r3, r3, #4
70001b04:	f003 0201 	and.w	r2, r3, #1
70001b08:	697b      	ldr	r3, [r7, #20]
70001b0a:	fa02 f303 	lsl.w	r3, r2, r3
70001b0e:	693a      	ldr	r2, [r7, #16]
70001b10:	4313      	orrs	r3, r2
70001b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
70001b14:	687b      	ldr	r3, [r7, #4]
70001b16:	693a      	ldr	r2, [r7, #16]
70001b18:	605a      	str	r2, [r3, #4]
      }

      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
70001b1a:	683b      	ldr	r3, [r7, #0]
70001b1c:	685b      	ldr	r3, [r3, #4]
70001b1e:	f003 0303 	and.w	r3, r3, #3
70001b22:	2b03      	cmp	r3, #3
70001b24:	d109      	bne.n	70001b3a <HAL_GPIO_Init+0xc2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
70001b26:	683b      	ldr	r3, [r7, #0]
70001b28:	685b      	ldr	r3, [r3, #4]
70001b2a:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
70001b2e:	2b03      	cmp	r3, #3
70001b30:	d11b      	bne.n	70001b6a <HAL_GPIO_Init+0xf2>
          (((GPIO_Init->Mode & GPIO_MODE) == MODE_ANALOG) && (GPIO_Init->Pull != GPIO_PULLUP)))
70001b32:	683b      	ldr	r3, [r7, #0]
70001b34:	689b      	ldr	r3, [r3, #8]
70001b36:	2b01      	cmp	r3, #1
70001b38:	d017      	beq.n	70001b6a <HAL_GPIO_Init+0xf2>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
70001b3a:	687b      	ldr	r3, [r7, #4]
70001b3c:	68db      	ldr	r3, [r3, #12]
70001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
70001b40:	697b      	ldr	r3, [r7, #20]
70001b42:	005b      	lsls	r3, r3, #1
70001b44:	2203      	movs	r2, #3
70001b46:	fa02 f303 	lsl.w	r3, r2, r3
70001b4a:	43db      	mvns	r3, r3
70001b4c:	693a      	ldr	r2, [r7, #16]
70001b4e:	4013      	ands	r3, r2
70001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
70001b52:	683b      	ldr	r3, [r7, #0]
70001b54:	689a      	ldr	r2, [r3, #8]
70001b56:	697b      	ldr	r3, [r7, #20]
70001b58:	005b      	lsls	r3, r3, #1
70001b5a:	fa02 f303 	lsl.w	r3, r2, r3
70001b5e:	693a      	ldr	r2, [r7, #16]
70001b60:	4313      	orrs	r3, r2
70001b62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
70001b64:	687b      	ldr	r3, [r7, #4]
70001b66:	693a      	ldr	r2, [r7, #16]
70001b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
70001b6a:	683b      	ldr	r3, [r7, #0]
70001b6c:	685b      	ldr	r3, [r3, #4]
70001b6e:	f003 0303 	and.w	r3, r3, #3
70001b72:	2b02      	cmp	r3, #2
70001b74:	d123      	bne.n	70001bbe <HAL_GPIO_Init+0x146>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
70001b76:	697b      	ldr	r3, [r7, #20]
70001b78:	08da      	lsrs	r2, r3, #3
70001b7a:	687b      	ldr	r3, [r7, #4]
70001b7c:	3208      	adds	r2, #8
70001b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70001b84:	697b      	ldr	r3, [r7, #20]
70001b86:	f003 0307 	and.w	r3, r3, #7
70001b8a:	009b      	lsls	r3, r3, #2
70001b8c:	220f      	movs	r2, #15
70001b8e:	fa02 f303 	lsl.w	r3, r2, r3
70001b92:	43db      	mvns	r3, r3
70001b94:	693a      	ldr	r2, [r7, #16]
70001b96:	4013      	ands	r3, r2
70001b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
70001b9a:	683b      	ldr	r3, [r7, #0]
70001b9c:	691a      	ldr	r2, [r3, #16]
70001b9e:	697b      	ldr	r3, [r7, #20]
70001ba0:	f003 0307 	and.w	r3, r3, #7
70001ba4:	009b      	lsls	r3, r3, #2
70001ba6:	fa02 f303 	lsl.w	r3, r2, r3
70001baa:	693a      	ldr	r2, [r7, #16]
70001bac:	4313      	orrs	r3, r2
70001bae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
70001bb0:	697b      	ldr	r3, [r7, #20]
70001bb2:	08da      	lsrs	r2, r3, #3
70001bb4:	687b      	ldr	r3, [r7, #4]
70001bb6:	3208      	adds	r2, #8
70001bb8:	6939      	ldr	r1, [r7, #16]
70001bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
70001bbe:	687b      	ldr	r3, [r7, #4]
70001bc0:	681b      	ldr	r3, [r3, #0]
70001bc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
70001bc4:	697b      	ldr	r3, [r7, #20]
70001bc6:	005b      	lsls	r3, r3, #1
70001bc8:	2203      	movs	r2, #3
70001bca:	fa02 f303 	lsl.w	r3, r2, r3
70001bce:	43db      	mvns	r3, r3
70001bd0:	693a      	ldr	r2, [r7, #16]
70001bd2:	4013      	ands	r3, r2
70001bd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
70001bd6:	683b      	ldr	r3, [r7, #0]
70001bd8:	685b      	ldr	r3, [r3, #4]
70001bda:	f003 0203 	and.w	r2, r3, #3
70001bde:	697b      	ldr	r3, [r7, #20]
70001be0:	005b      	lsls	r3, r3, #1
70001be2:	fa02 f303 	lsl.w	r3, r2, r3
70001be6:	693a      	ldr	r2, [r7, #16]
70001be8:	4313      	orrs	r3, r2
70001bea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
70001bec:	687b      	ldr	r3, [r7, #4]
70001bee:	693a      	ldr	r2, [r7, #16]
70001bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
70001bf2:	683b      	ldr	r3, [r7, #0]
70001bf4:	685b      	ldr	r3, [r3, #4]
70001bf6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
70001bfa:	2b00      	cmp	r3, #0
70001bfc:	f000 8085 	beq.w	70001d0a <HAL_GPIO_Init+0x292>
      {
        temp = SBS->EXTICR[position >> 2u];
70001c00:	4a4b      	ldr	r2, [pc, #300]	@ (70001d30 <HAL_GPIO_Init+0x2b8>)
70001c02:	697b      	ldr	r3, [r7, #20]
70001c04:	089b      	lsrs	r3, r3, #2
70001c06:	334c      	adds	r3, #76	@ 0x4c
70001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
70001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70001c0e:	697b      	ldr	r3, [r7, #20]
70001c10:	f003 0303 	and.w	r3, r3, #3
70001c14:	009b      	lsls	r3, r3, #2
70001c16:	220f      	movs	r2, #15
70001c18:	fa02 f303 	lsl.w	r3, r2, r3
70001c1c:	43db      	mvns	r3, r3
70001c1e:	693a      	ldr	r2, [r7, #16]
70001c20:	4013      	ands	r3, r2
70001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * SBS_EXTICR1_PC_EXTI1_Pos));
70001c24:	687b      	ldr	r3, [r7, #4]
70001c26:	0a9a      	lsrs	r2, r3, #10
70001c28:	4b42      	ldr	r3, [pc, #264]	@ (70001d34 <HAL_GPIO_Init+0x2bc>)
70001c2a:	4013      	ands	r3, r2
70001c2c:	697a      	ldr	r2, [r7, #20]
70001c2e:	f002 0203 	and.w	r2, r2, #3
70001c32:	0092      	lsls	r2, r2, #2
70001c34:	4093      	lsls	r3, r2
70001c36:	693a      	ldr	r2, [r7, #16]
70001c38:	4313      	orrs	r3, r2
70001c3a:	613b      	str	r3, [r7, #16]
        SBS->EXTICR[position >> 2u] = temp;
70001c3c:	493c      	ldr	r1, [pc, #240]	@ (70001d30 <HAL_GPIO_Init+0x2b8>)
70001c3e:	697b      	ldr	r3, [r7, #20]
70001c40:	089b      	lsrs	r3, r3, #2
70001c42:	334c      	adds	r3, #76	@ 0x4c
70001c44:	693a      	ldr	r2, [r7, #16]
70001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
70001c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001c4e:	681b      	ldr	r3, [r3, #0]
70001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70001c52:	68fb      	ldr	r3, [r7, #12]
70001c54:	43db      	mvns	r3, r3
70001c56:	693a      	ldr	r2, [r7, #16]
70001c58:	4013      	ands	r3, r2
70001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
70001c5c:	683b      	ldr	r3, [r7, #0]
70001c5e:	685b      	ldr	r3, [r3, #4]
70001c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70001c64:	2b00      	cmp	r3, #0
70001c66:	d003      	beq.n	70001c70 <HAL_GPIO_Init+0x1f8>
        {
          temp |= iocurrent;
70001c68:	693a      	ldr	r2, [r7, #16]
70001c6a:	68fb      	ldr	r3, [r7, #12]
70001c6c:	4313      	orrs	r3, r2
70001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
70001c70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70001c74:	693b      	ldr	r3, [r7, #16]
70001c76:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
70001c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001c7c:	685b      	ldr	r3, [r3, #4]
70001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70001c80:	68fb      	ldr	r3, [r7, #12]
70001c82:	43db      	mvns	r3, r3
70001c84:	693a      	ldr	r2, [r7, #16]
70001c86:	4013      	ands	r3, r2
70001c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
70001c8a:	683b      	ldr	r3, [r7, #0]
70001c8c:	685b      	ldr	r3, [r3, #4]
70001c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70001c92:	2b00      	cmp	r3, #0
70001c94:	d003      	beq.n	70001c9e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
70001c96:	693a      	ldr	r2, [r7, #16]
70001c98:	68fb      	ldr	r3, [r7, #12]
70001c9a:	4313      	orrs	r3, r2
70001c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
70001c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70001ca2:	693b      	ldr	r3, [r7, #16]
70001ca4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
70001ca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70001cb0:	68fb      	ldr	r3, [r7, #12]
70001cb2:	43db      	mvns	r3, r3
70001cb4:	693a      	ldr	r2, [r7, #16]
70001cb6:	4013      	ands	r3, r2
70001cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
70001cba:	683b      	ldr	r3, [r7, #0]
70001cbc:	685b      	ldr	r3, [r3, #4]
70001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70001cc2:	2b00      	cmp	r3, #0
70001cc4:	d003      	beq.n	70001cce <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
70001cc6:	693a      	ldr	r2, [r7, #16]
70001cc8:	68fb      	ldr	r3, [r7, #12]
70001cca:	4313      	orrs	r3, r2
70001ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
70001cce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70001cd2:	693b      	ldr	r3, [r7, #16]
70001cd4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
70001cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70001cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
70001ce2:	68fb      	ldr	r3, [r7, #12]
70001ce4:	43db      	mvns	r3, r3
70001ce6:	693a      	ldr	r2, [r7, #16]
70001ce8:	4013      	ands	r3, r2
70001cea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
70001cec:	683b      	ldr	r3, [r7, #0]
70001cee:	685b      	ldr	r3, [r3, #4]
70001cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70001cf4:	2b00      	cmp	r3, #0
70001cf6:	d003      	beq.n	70001d00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
70001cf8:	693a      	ldr	r2, [r7, #16]
70001cfa:	68fb      	ldr	r3, [r7, #12]
70001cfc:	4313      	orrs	r3, r2
70001cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
70001d00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70001d04:	693b      	ldr	r3, [r7, #16]
70001d06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
70001d0a:	697b      	ldr	r3, [r7, #20]
70001d0c:	3301      	adds	r3, #1
70001d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
70001d10:	683b      	ldr	r3, [r7, #0]
70001d12:	681a      	ldr	r2, [r3, #0]
70001d14:	697b      	ldr	r3, [r7, #20]
70001d16:	fa22 f303 	lsr.w	r3, r2, r3
70001d1a:	2b00      	cmp	r3, #0
70001d1c:	f47f aeb4 	bne.w	70001a88 <HAL_GPIO_Init+0x10>
  }
}
70001d20:	bf00      	nop
70001d22:	bf00      	nop
70001d24:	371c      	adds	r7, #28
70001d26:	46bd      	mov	sp, r7
70001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d2c:	4770      	bx	lr
70001d2e:	bf00      	nop
70001d30:	58000400 	.word	0x58000400
70001d34:	0029ff7f 	.word	0x0029ff7f

70001d38 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
70001d38:	b580      	push	{r7, lr}
70001d3a:	b084      	sub	sp, #16
70001d3c:	af00      	add	r7, sp, #0
70001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70001d40:	687b      	ldr	r3, [r7, #4]
70001d42:	681b      	ldr	r3, [r3, #0]
70001d44:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
70001d46:	687b      	ldr	r3, [r7, #4]
70001d48:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70001d4c:	2b01      	cmp	r3, #1
70001d4e:	d101      	bne.n	70001d54 <HAL_PCD_Start+0x1c>
70001d50:	2302      	movs	r3, #2
70001d52:	e022      	b.n	70001d9a <HAL_PCD_Start+0x62>
70001d54:	687b      	ldr	r3, [r7, #4]
70001d56:	2201      	movs	r2, #1
70001d58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
70001d5c:	68fb      	ldr	r3, [r7, #12]
70001d5e:	68db      	ldr	r3, [r3, #12]
70001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70001d64:	2b00      	cmp	r3, #0
70001d66:	d009      	beq.n	70001d7c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
70001d68:	687b      	ldr	r3, [r7, #4]
70001d6a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
70001d6c:	2b01      	cmp	r3, #1
70001d6e:	d105      	bne.n	70001d7c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
70001d70:	68fb      	ldr	r3, [r7, #12]
70001d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
70001d74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
70001d78:	68fb      	ldr	r3, [r7, #12]
70001d7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
70001d7c:	687b      	ldr	r3, [r7, #4]
70001d7e:	681b      	ldr	r3, [r3, #0]
70001d80:	4618      	mov	r0, r3
70001d82:	f003 f8bf 	bl	70004f04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
70001d86:	687b      	ldr	r3, [r7, #4]
70001d88:	681b      	ldr	r3, [r3, #0]
70001d8a:	4618      	mov	r0, r3
70001d8c:	f003 ff64 	bl	70005c58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
70001d90:	687b      	ldr	r3, [r7, #4]
70001d92:	2200      	movs	r2, #0
70001d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
70001d98:	2300      	movs	r3, #0
}
70001d9a:	4618      	mov	r0, r3
70001d9c:	3710      	adds	r7, #16
70001d9e:	46bd      	mov	sp, r7
70001da0:	bd80      	pop	{r7, pc}

70001da2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
70001da2:	b590      	push	{r4, r7, lr}
70001da4:	b08d      	sub	sp, #52	@ 0x34
70001da6:	af00      	add	r7, sp, #0
70001da8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70001daa:	687b      	ldr	r3, [r7, #4]
70001dac:	681b      	ldr	r3, [r3, #0]
70001dae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001db0:	6a3b      	ldr	r3, [r7, #32]
70001db2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
70001db4:	687b      	ldr	r3, [r7, #4]
70001db6:	681b      	ldr	r3, [r3, #0]
70001db8:	4618      	mov	r0, r3
70001dba:	f004 f801 	bl	70005dc0 <USB_GetMode>
70001dbe:	4603      	mov	r3, r0
70001dc0:	2b00      	cmp	r3, #0
70001dc2:	f040 84b9 	bne.w	70002738 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
70001dc6:	687b      	ldr	r3, [r7, #4]
70001dc8:	681b      	ldr	r3, [r3, #0]
70001dca:	4618      	mov	r0, r3
70001dcc:	f003 ff65 	bl	70005c9a <USB_ReadInterrupts>
70001dd0:	4603      	mov	r3, r0
70001dd2:	2b00      	cmp	r3, #0
70001dd4:	f000 84af 	beq.w	70002736 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
70001dd8:	69fb      	ldr	r3, [r7, #28]
70001dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001dde:	689b      	ldr	r3, [r3, #8]
70001de0:	0a1b      	lsrs	r3, r3, #8
70001de2:	f3c3 020d 	ubfx	r2, r3, #0, #14
70001de6:	687b      	ldr	r3, [r7, #4]
70001de8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
70001dec:	687b      	ldr	r3, [r7, #4]
70001dee:	681b      	ldr	r3, [r3, #0]
70001df0:	4618      	mov	r0, r3
70001df2:	f003 ff52 	bl	70005c9a <USB_ReadInterrupts>
70001df6:	4603      	mov	r3, r0
70001df8:	f003 0302 	and.w	r3, r3, #2
70001dfc:	2b02      	cmp	r3, #2
70001dfe:	d107      	bne.n	70001e10 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
70001e00:	687b      	ldr	r3, [r7, #4]
70001e02:	681b      	ldr	r3, [r3, #0]
70001e04:	695a      	ldr	r2, [r3, #20]
70001e06:	687b      	ldr	r3, [r7, #4]
70001e08:	681b      	ldr	r3, [r3, #0]
70001e0a:	f002 0202 	and.w	r2, r2, #2
70001e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
70001e10:	687b      	ldr	r3, [r7, #4]
70001e12:	681b      	ldr	r3, [r3, #0]
70001e14:	4618      	mov	r0, r3
70001e16:	f003 ff40 	bl	70005c9a <USB_ReadInterrupts>
70001e1a:	4603      	mov	r3, r0
70001e1c:	f003 0310 	and.w	r3, r3, #16
70001e20:	2b10      	cmp	r3, #16
70001e22:	d161      	bne.n	70001ee8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
70001e24:	687b      	ldr	r3, [r7, #4]
70001e26:	681b      	ldr	r3, [r3, #0]
70001e28:	699a      	ldr	r2, [r3, #24]
70001e2a:	687b      	ldr	r3, [r7, #4]
70001e2c:	681b      	ldr	r3, [r3, #0]
70001e2e:	f022 0210 	bic.w	r2, r2, #16
70001e32:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
70001e34:	6a3b      	ldr	r3, [r7, #32]
70001e36:	6a1b      	ldr	r3, [r3, #32]
70001e38:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
70001e3a:	69bb      	ldr	r3, [r7, #24]
70001e3c:	f003 020f 	and.w	r2, r3, #15
70001e40:	4613      	mov	r3, r2
70001e42:	00db      	lsls	r3, r3, #3
70001e44:	4413      	add	r3, r2
70001e46:	009b      	lsls	r3, r3, #2
70001e48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70001e4c:	687a      	ldr	r2, [r7, #4]
70001e4e:	4413      	add	r3, r2
70001e50:	3304      	adds	r3, #4
70001e52:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
70001e54:	69bb      	ldr	r3, [r7, #24]
70001e56:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
70001e5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70001e5e:	d124      	bne.n	70001eaa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
70001e60:	69ba      	ldr	r2, [r7, #24]
70001e62:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
70001e66:	4013      	ands	r3, r2
70001e68:	2b00      	cmp	r3, #0
70001e6a:	d035      	beq.n	70001ed8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
70001e6c:	697b      	ldr	r3, [r7, #20]
70001e6e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
70001e70:	69bb      	ldr	r3, [r7, #24]
70001e72:	091b      	lsrs	r3, r3, #4
70001e74:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
70001e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
70001e7a:	b29b      	uxth	r3, r3
70001e7c:	461a      	mov	r2, r3
70001e7e:	6a38      	ldr	r0, [r7, #32]
70001e80:	f003 fd98 	bl	700059b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
70001e84:	697b      	ldr	r3, [r7, #20]
70001e86:	68da      	ldr	r2, [r3, #12]
70001e88:	69bb      	ldr	r3, [r7, #24]
70001e8a:	091b      	lsrs	r3, r3, #4
70001e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
70001e90:	441a      	add	r2, r3
70001e92:	697b      	ldr	r3, [r7, #20]
70001e94:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
70001e96:	697b      	ldr	r3, [r7, #20]
70001e98:	695a      	ldr	r2, [r3, #20]
70001e9a:	69bb      	ldr	r3, [r7, #24]
70001e9c:	091b      	lsrs	r3, r3, #4
70001e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
70001ea2:	441a      	add	r2, r3
70001ea4:	697b      	ldr	r3, [r7, #20]
70001ea6:	615a      	str	r2, [r3, #20]
70001ea8:	e016      	b.n	70001ed8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
70001eaa:	69bb      	ldr	r3, [r7, #24]
70001eac:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
70001eb0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
70001eb4:	d110      	bne.n	70001ed8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
70001eb6:	687b      	ldr	r3, [r7, #4]
70001eb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70001ebc:	2208      	movs	r2, #8
70001ebe:	4619      	mov	r1, r3
70001ec0:	6a38      	ldr	r0, [r7, #32]
70001ec2:	f003 fd77 	bl	700059b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
70001ec6:	697b      	ldr	r3, [r7, #20]
70001ec8:	695a      	ldr	r2, [r3, #20]
70001eca:	69bb      	ldr	r3, [r7, #24]
70001ecc:	091b      	lsrs	r3, r3, #4
70001ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
70001ed2:	441a      	add	r2, r3
70001ed4:	697b      	ldr	r3, [r7, #20]
70001ed6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
70001ed8:	687b      	ldr	r3, [r7, #4]
70001eda:	681b      	ldr	r3, [r3, #0]
70001edc:	699a      	ldr	r2, [r3, #24]
70001ede:	687b      	ldr	r3, [r7, #4]
70001ee0:	681b      	ldr	r3, [r3, #0]
70001ee2:	f042 0210 	orr.w	r2, r2, #16
70001ee6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
70001ee8:	687b      	ldr	r3, [r7, #4]
70001eea:	681b      	ldr	r3, [r3, #0]
70001eec:	4618      	mov	r0, r3
70001eee:	f003 fed4 	bl	70005c9a <USB_ReadInterrupts>
70001ef2:	4603      	mov	r3, r0
70001ef4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70001ef8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
70001efc:	f040 80a7 	bne.w	7000204e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
70001f00:	2300      	movs	r3, #0
70001f02:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
70001f04:	687b      	ldr	r3, [r7, #4]
70001f06:	681b      	ldr	r3, [r3, #0]
70001f08:	4618      	mov	r0, r3
70001f0a:	f003 fed9 	bl	70005cc0 <USB_ReadDevAllOutEpInterrupt>
70001f0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
70001f10:	e099      	b.n	70002046 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
70001f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70001f14:	f003 0301 	and.w	r3, r3, #1
70001f18:	2b00      	cmp	r3, #0
70001f1a:	f000 808e 	beq.w	7000203a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
70001f1e:	687b      	ldr	r3, [r7, #4]
70001f20:	681b      	ldr	r3, [r3, #0]
70001f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70001f24:	b2d2      	uxtb	r2, r2
70001f26:	4611      	mov	r1, r2
70001f28:	4618      	mov	r0, r3
70001f2a:	f003 fefd 	bl	70005d28 <USB_ReadDevOutEPInterrupt>
70001f2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
70001f30:	693b      	ldr	r3, [r7, #16]
70001f32:	f003 0301 	and.w	r3, r3, #1
70001f36:	2b00      	cmp	r3, #0
70001f38:	d00c      	beq.n	70001f54 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
70001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001f3c:	015a      	lsls	r2, r3, #5
70001f3e:	69fb      	ldr	r3, [r7, #28]
70001f40:	4413      	add	r3, r2
70001f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001f46:	461a      	mov	r2, r3
70001f48:	2301      	movs	r3, #1
70001f4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
70001f4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70001f4e:	6878      	ldr	r0, [r7, #4]
70001f50:	f000 feb8 	bl	70002cc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
70001f54:	693b      	ldr	r3, [r7, #16]
70001f56:	f003 0308 	and.w	r3, r3, #8
70001f5a:	2b00      	cmp	r3, #0
70001f5c:	d00c      	beq.n	70001f78 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
70001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001f60:	015a      	lsls	r2, r3, #5
70001f62:	69fb      	ldr	r3, [r7, #28]
70001f64:	4413      	add	r3, r2
70001f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001f6a:	461a      	mov	r2, r3
70001f6c:	2308      	movs	r3, #8
70001f6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
70001f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70001f72:	6878      	ldr	r0, [r7, #4]
70001f74:	f000 ff8e 	bl	70002e94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
70001f78:	693b      	ldr	r3, [r7, #16]
70001f7a:	f003 0310 	and.w	r3, r3, #16
70001f7e:	2b00      	cmp	r3, #0
70001f80:	d008      	beq.n	70001f94 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
70001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001f84:	015a      	lsls	r2, r3, #5
70001f86:	69fb      	ldr	r3, [r7, #28]
70001f88:	4413      	add	r3, r2
70001f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001f8e:	461a      	mov	r2, r3
70001f90:	2310      	movs	r3, #16
70001f92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
70001f94:	693b      	ldr	r3, [r7, #16]
70001f96:	f003 0302 	and.w	r3, r3, #2
70001f9a:	2b00      	cmp	r3, #0
70001f9c:	d030      	beq.n	70002000 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
70001f9e:	6a3b      	ldr	r3, [r7, #32]
70001fa0:	695b      	ldr	r3, [r3, #20]
70001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70001fa6:	2b80      	cmp	r3, #128	@ 0x80
70001fa8:	d109      	bne.n	70001fbe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
70001faa:	69fb      	ldr	r3, [r7, #28]
70001fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001fb0:	685b      	ldr	r3, [r3, #4]
70001fb2:	69fa      	ldr	r2, [r7, #28]
70001fb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70001fb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
70001fbc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
70001fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70001fc0:	4613      	mov	r3, r2
70001fc2:	00db      	lsls	r3, r3, #3
70001fc4:	4413      	add	r3, r2
70001fc6:	009b      	lsls	r3, r3, #2
70001fc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70001fcc:	687a      	ldr	r2, [r7, #4]
70001fce:	4413      	add	r3, r2
70001fd0:	3304      	adds	r3, #4
70001fd2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
70001fd4:	697b      	ldr	r3, [r7, #20]
70001fd6:	78db      	ldrb	r3, [r3, #3]
70001fd8:	2b01      	cmp	r3, #1
70001fda:	d108      	bne.n	70001fee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
70001fdc:	697b      	ldr	r3, [r7, #20]
70001fde:	2200      	movs	r2, #0
70001fe0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
70001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001fe4:	b2db      	uxtb	r3, r3
70001fe6:	4619      	mov	r1, r3
70001fe8:	6878      	ldr	r0, [r7, #4]
70001fea:	f005 fa77 	bl	700074dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
70001fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001ff0:	015a      	lsls	r2, r3, #5
70001ff2:	69fb      	ldr	r3, [r7, #28]
70001ff4:	4413      	add	r3, r2
70001ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001ffa:	461a      	mov	r2, r3
70001ffc:	2302      	movs	r3, #2
70001ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
70002000:	693b      	ldr	r3, [r7, #16]
70002002:	f003 0320 	and.w	r3, r3, #32
70002006:	2b00      	cmp	r3, #0
70002008:	d008      	beq.n	7000201c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
7000200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000200c:	015a      	lsls	r2, r3, #5
7000200e:	69fb      	ldr	r3, [r7, #28]
70002010:	4413      	add	r3, r2
70002012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002016:	461a      	mov	r2, r3
70002018:	2320      	movs	r3, #32
7000201a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
7000201c:	693b      	ldr	r3, [r7, #16]
7000201e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70002022:	2b00      	cmp	r3, #0
70002024:	d009      	beq.n	7000203a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
70002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002028:	015a      	lsls	r2, r3, #5
7000202a:	69fb      	ldr	r3, [r7, #28]
7000202c:	4413      	add	r3, r2
7000202e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002032:	461a      	mov	r2, r3
70002034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70002038:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
7000203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000203c:	3301      	adds	r3, #1
7000203e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
70002040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002042:	085b      	lsrs	r3, r3, #1
70002044:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
70002046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002048:	2b00      	cmp	r3, #0
7000204a:	f47f af62 	bne.w	70001f12 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
7000204e:	687b      	ldr	r3, [r7, #4]
70002050:	681b      	ldr	r3, [r3, #0]
70002052:	4618      	mov	r0, r3
70002054:	f003 fe21 	bl	70005c9a <USB_ReadInterrupts>
70002058:	4603      	mov	r3, r0
7000205a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
7000205e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70002062:	f040 80db 	bne.w	7000221c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
70002066:	687b      	ldr	r3, [r7, #4]
70002068:	681b      	ldr	r3, [r3, #0]
7000206a:	4618      	mov	r0, r3
7000206c:	f003 fe42 	bl	70005cf4 <USB_ReadDevAllInEpInterrupt>
70002070:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
70002072:	2300      	movs	r3, #0
70002074:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
70002076:	e0cd      	b.n	70002214 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
70002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000207a:	f003 0301 	and.w	r3, r3, #1
7000207e:	2b00      	cmp	r3, #0
70002080:	f000 80c2 	beq.w	70002208 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
70002084:	687b      	ldr	r3, [r7, #4]
70002086:	681b      	ldr	r3, [r3, #0]
70002088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000208a:	b2d2      	uxtb	r2, r2
7000208c:	4611      	mov	r1, r2
7000208e:	4618      	mov	r0, r3
70002090:	f003 fe68 	bl	70005d64 <USB_ReadDevInEPInterrupt>
70002094:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
70002096:	693b      	ldr	r3, [r7, #16]
70002098:	f003 0301 	and.w	r3, r3, #1
7000209c:	2b00      	cmp	r3, #0
7000209e:	d057      	beq.n	70002150 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
700020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700020a2:	f003 030f 	and.w	r3, r3, #15
700020a6:	2201      	movs	r2, #1
700020a8:	fa02 f303 	lsl.w	r3, r2, r3
700020ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
700020ae:	69fb      	ldr	r3, [r7, #28]
700020b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700020b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
700020b6:	68fb      	ldr	r3, [r7, #12]
700020b8:	43db      	mvns	r3, r3
700020ba:	69f9      	ldr	r1, [r7, #28]
700020bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
700020c0:	4013      	ands	r3, r2
700020c2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
700020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700020c6:	015a      	lsls	r2, r3, #5
700020c8:	69fb      	ldr	r3, [r7, #28]
700020ca:	4413      	add	r3, r2
700020cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700020d0:	461a      	mov	r2, r3
700020d2:	2301      	movs	r3, #1
700020d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
700020d6:	687b      	ldr	r3, [r7, #4]
700020d8:	799b      	ldrb	r3, [r3, #6]
700020da:	2b01      	cmp	r3, #1
700020dc:	d132      	bne.n	70002144 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
700020de:	6879      	ldr	r1, [r7, #4]
700020e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700020e2:	4613      	mov	r3, r2
700020e4:	00db      	lsls	r3, r3, #3
700020e6:	4413      	add	r3, r2
700020e8:	009b      	lsls	r3, r3, #2
700020ea:	440b      	add	r3, r1
700020ec:	3320      	adds	r3, #32
700020ee:	6819      	ldr	r1, [r3, #0]
700020f0:	6878      	ldr	r0, [r7, #4]
700020f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700020f4:	4613      	mov	r3, r2
700020f6:	00db      	lsls	r3, r3, #3
700020f8:	4413      	add	r3, r2
700020fa:	009b      	lsls	r3, r3, #2
700020fc:	4403      	add	r3, r0
700020fe:	331c      	adds	r3, #28
70002100:	681b      	ldr	r3, [r3, #0]
70002102:	4419      	add	r1, r3
70002104:	6878      	ldr	r0, [r7, #4]
70002106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002108:	4613      	mov	r3, r2
7000210a:	00db      	lsls	r3, r3, #3
7000210c:	4413      	add	r3, r2
7000210e:	009b      	lsls	r3, r3, #2
70002110:	4403      	add	r3, r0
70002112:	3320      	adds	r3, #32
70002114:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
70002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002118:	2b00      	cmp	r3, #0
7000211a:	d113      	bne.n	70002144 <HAL_PCD_IRQHandler+0x3a2>
7000211c:	6879      	ldr	r1, [r7, #4]
7000211e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002120:	4613      	mov	r3, r2
70002122:	00db      	lsls	r3, r3, #3
70002124:	4413      	add	r3, r2
70002126:	009b      	lsls	r3, r3, #2
70002128:	440b      	add	r3, r1
7000212a:	3324      	adds	r3, #36	@ 0x24
7000212c:	681b      	ldr	r3, [r3, #0]
7000212e:	2b00      	cmp	r3, #0
70002130:	d108      	bne.n	70002144 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
70002132:	687b      	ldr	r3, [r7, #4]
70002134:	6818      	ldr	r0, [r3, #0]
70002136:	687b      	ldr	r3, [r7, #4]
70002138:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
7000213c:	461a      	mov	r2, r3
7000213e:	2101      	movs	r1, #1
70002140:	f003 fe70 	bl	70005e24 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
70002144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002146:	b2db      	uxtb	r3, r3
70002148:	4619      	mov	r1, r3
7000214a:	6878      	ldr	r0, [r7, #4]
7000214c:	f005 f931 	bl	700073b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
70002150:	693b      	ldr	r3, [r7, #16]
70002152:	f003 0308 	and.w	r3, r3, #8
70002156:	2b00      	cmp	r3, #0
70002158:	d008      	beq.n	7000216c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
7000215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000215c:	015a      	lsls	r2, r3, #5
7000215e:	69fb      	ldr	r3, [r7, #28]
70002160:	4413      	add	r3, r2
70002162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002166:	461a      	mov	r2, r3
70002168:	2308      	movs	r3, #8
7000216a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
7000216c:	693b      	ldr	r3, [r7, #16]
7000216e:	f003 0310 	and.w	r3, r3, #16
70002172:	2b00      	cmp	r3, #0
70002174:	d008      	beq.n	70002188 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
70002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002178:	015a      	lsls	r2, r3, #5
7000217a:	69fb      	ldr	r3, [r7, #28]
7000217c:	4413      	add	r3, r2
7000217e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002182:	461a      	mov	r2, r3
70002184:	2310      	movs	r3, #16
70002186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
70002188:	693b      	ldr	r3, [r7, #16]
7000218a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7000218e:	2b00      	cmp	r3, #0
70002190:	d008      	beq.n	700021a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
70002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002194:	015a      	lsls	r2, r3, #5
70002196:	69fb      	ldr	r3, [r7, #28]
70002198:	4413      	add	r3, r2
7000219a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000219e:	461a      	mov	r2, r3
700021a0:	2340      	movs	r3, #64	@ 0x40
700021a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
700021a4:	693b      	ldr	r3, [r7, #16]
700021a6:	f003 0302 	and.w	r3, r3, #2
700021aa:	2b00      	cmp	r3, #0
700021ac:	d023      	beq.n	700021f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
700021ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
700021b0:	6a38      	ldr	r0, [r7, #32]
700021b2:	f002 feb8 	bl	70004f26 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
700021b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700021b8:	4613      	mov	r3, r2
700021ba:	00db      	lsls	r3, r3, #3
700021bc:	4413      	add	r3, r2
700021be:	009b      	lsls	r3, r3, #2
700021c0:	3310      	adds	r3, #16
700021c2:	687a      	ldr	r2, [r7, #4]
700021c4:	4413      	add	r3, r2
700021c6:	3304      	adds	r3, #4
700021c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
700021ca:	697b      	ldr	r3, [r7, #20]
700021cc:	78db      	ldrb	r3, [r3, #3]
700021ce:	2b01      	cmp	r3, #1
700021d0:	d108      	bne.n	700021e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
700021d2:	697b      	ldr	r3, [r7, #20]
700021d4:	2200      	movs	r2, #0
700021d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
700021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700021da:	b2db      	uxtb	r3, r3
700021dc:	4619      	mov	r1, r3
700021de:	6878      	ldr	r0, [r7, #4]
700021e0:	f005 f98e 	bl	70007500 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
700021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700021e6:	015a      	lsls	r2, r3, #5
700021e8:	69fb      	ldr	r3, [r7, #28]
700021ea:	4413      	add	r3, r2
700021ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700021f0:	461a      	mov	r2, r3
700021f2:	2302      	movs	r3, #2
700021f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
700021f6:	693b      	ldr	r3, [r7, #16]
700021f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700021fc:	2b00      	cmp	r3, #0
700021fe:	d003      	beq.n	70002208 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
70002200:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70002202:	6878      	ldr	r0, [r7, #4]
70002204:	f000 fcd2 	bl	70002bac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
70002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000220a:	3301      	adds	r3, #1
7000220c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
7000220e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002210:	085b      	lsrs	r3, r3, #1
70002212:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
70002214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70002216:	2b00      	cmp	r3, #0
70002218:	f47f af2e 	bne.w	70002078 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
7000221c:	687b      	ldr	r3, [r7, #4]
7000221e:	681b      	ldr	r3, [r3, #0]
70002220:	4618      	mov	r0, r3
70002222:	f003 fd3a 	bl	70005c9a <USB_ReadInterrupts>
70002226:	4603      	mov	r3, r0
70002228:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
7000222c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002230:	d122      	bne.n	70002278 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
70002232:	69fb      	ldr	r3, [r7, #28]
70002234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002238:	685b      	ldr	r3, [r3, #4]
7000223a:	69fa      	ldr	r2, [r7, #28]
7000223c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70002240:	f023 0301 	bic.w	r3, r3, #1
70002244:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
70002246:	687b      	ldr	r3, [r7, #4]
70002248:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
7000224c:	2b01      	cmp	r3, #1
7000224e:	d108      	bne.n	70002262 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
70002250:	687b      	ldr	r3, [r7, #4]
70002252:	2200      	movs	r2, #0
70002254:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
70002258:	2100      	movs	r1, #0
7000225a:	6878      	ldr	r0, [r7, #4]
7000225c:	f000 fe60 	bl	70002f20 <HAL_PCDEx_LPM_Callback>
70002260:	e002      	b.n	70002268 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
70002262:	6878      	ldr	r0, [r7, #4]
70002264:	f005 f912 	bl	7000748c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
70002268:	687b      	ldr	r3, [r7, #4]
7000226a:	681b      	ldr	r3, [r3, #0]
7000226c:	695a      	ldr	r2, [r3, #20]
7000226e:	687b      	ldr	r3, [r7, #4]
70002270:	681b      	ldr	r3, [r3, #0]
70002272:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
70002276:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
70002278:	687b      	ldr	r3, [r7, #4]
7000227a:	681b      	ldr	r3, [r3, #0]
7000227c:	4618      	mov	r0, r3
7000227e:	f003 fd0c 	bl	70005c9a <USB_ReadInterrupts>
70002282:	4603      	mov	r3, r0
70002284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70002288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
7000228c:	d112      	bne.n	700022b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
7000228e:	69fb      	ldr	r3, [r7, #28]
70002290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002294:	689b      	ldr	r3, [r3, #8]
70002296:	f003 0301 	and.w	r3, r3, #1
7000229a:	2b01      	cmp	r3, #1
7000229c:	d102      	bne.n	700022a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
7000229e:	6878      	ldr	r0, [r7, #4]
700022a0:	f005 f8d8 	bl	70007454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
700022a4:	687b      	ldr	r3, [r7, #4]
700022a6:	681b      	ldr	r3, [r3, #0]
700022a8:	695a      	ldr	r2, [r3, #20]
700022aa:	687b      	ldr	r3, [r7, #4]
700022ac:	681b      	ldr	r3, [r3, #0]
700022ae:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
700022b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
700022b4:	687b      	ldr	r3, [r7, #4]
700022b6:	681b      	ldr	r3, [r3, #0]
700022b8:	4618      	mov	r0, r3
700022ba:	f003 fcee 	bl	70005c9a <USB_ReadInterrupts>
700022be:	4603      	mov	r3, r0
700022c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
700022c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
700022c8:	d121      	bne.n	7000230e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
700022ca:	687b      	ldr	r3, [r7, #4]
700022cc:	681b      	ldr	r3, [r3, #0]
700022ce:	695a      	ldr	r2, [r3, #20]
700022d0:	687b      	ldr	r3, [r7, #4]
700022d2:	681b      	ldr	r3, [r3, #0]
700022d4:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
700022d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
700022da:	687b      	ldr	r3, [r7, #4]
700022dc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
700022e0:	2b00      	cmp	r3, #0
700022e2:	d111      	bne.n	70002308 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
700022e4:	687b      	ldr	r3, [r7, #4]
700022e6:	2201      	movs	r2, #1
700022e8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
700022ec:	687b      	ldr	r3, [r7, #4]
700022ee:	681b      	ldr	r3, [r3, #0]
700022f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
700022f2:	089b      	lsrs	r3, r3, #2
700022f4:	f003 020f 	and.w	r2, r3, #15
700022f8:	687b      	ldr	r3, [r7, #4]
700022fa:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
700022fe:	2101      	movs	r1, #1
70002300:	6878      	ldr	r0, [r7, #4]
70002302:	f000 fe0d 	bl	70002f20 <HAL_PCDEx_LPM_Callback>
70002306:	e002      	b.n	7000230e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
70002308:	6878      	ldr	r0, [r7, #4]
7000230a:	f005 f8a3 	bl	70007454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
7000230e:	687b      	ldr	r3, [r7, #4]
70002310:	681b      	ldr	r3, [r3, #0]
70002312:	4618      	mov	r0, r3
70002314:	f003 fcc1 	bl	70005c9a <USB_ReadInterrupts>
70002318:	4603      	mov	r3, r0
7000231a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
7000231e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70002322:	f040 80b7 	bne.w	70002494 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
70002326:	69fb      	ldr	r3, [r7, #28]
70002328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000232c:	685b      	ldr	r3, [r3, #4]
7000232e:	69fa      	ldr	r2, [r7, #28]
70002330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70002334:	f023 0301 	bic.w	r3, r3, #1
70002338:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
7000233a:	687b      	ldr	r3, [r7, #4]
7000233c:	681b      	ldr	r3, [r3, #0]
7000233e:	2110      	movs	r1, #16
70002340:	4618      	mov	r0, r3
70002342:	f002 fdf0 	bl	70004f26 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
70002346:	2300      	movs	r3, #0
70002348:	62fb      	str	r3, [r7, #44]	@ 0x2c
7000234a:	e046      	b.n	700023da <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
7000234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
7000234e:	015a      	lsls	r2, r3, #5
70002350:	69fb      	ldr	r3, [r7, #28]
70002352:	4413      	add	r3, r2
70002354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002358:	461a      	mov	r2, r3
7000235a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
7000235e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
70002360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002362:	015a      	lsls	r2, r3, #5
70002364:	69fb      	ldr	r3, [r7, #28]
70002366:	4413      	add	r3, r2
70002368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000236c:	681b      	ldr	r3, [r3, #0]
7000236e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70002370:	0151      	lsls	r1, r2, #5
70002372:	69fa      	ldr	r2, [r7, #28]
70002374:	440a      	add	r2, r1
70002376:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000237a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
7000237e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
70002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002382:	015a      	lsls	r2, r3, #5
70002384:	69fb      	ldr	r3, [r7, #28]
70002386:	4413      	add	r3, r2
70002388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000238c:	461a      	mov	r2, r3
7000238e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
70002392:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
70002394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70002396:	015a      	lsls	r2, r3, #5
70002398:	69fb      	ldr	r3, [r7, #28]
7000239a:	4413      	add	r3, r2
7000239c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700023a0:	681b      	ldr	r3, [r3, #0]
700023a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700023a4:	0151      	lsls	r1, r2, #5
700023a6:	69fa      	ldr	r2, [r7, #28]
700023a8:	440a      	add	r2, r1
700023aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700023ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
700023b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
700023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700023b6:	015a      	lsls	r2, r3, #5
700023b8:	69fb      	ldr	r3, [r7, #28]
700023ba:	4413      	add	r3, r2
700023bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700023c0:	681b      	ldr	r3, [r3, #0]
700023c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
700023c4:	0151      	lsls	r1, r2, #5
700023c6:	69fa      	ldr	r2, [r7, #28]
700023c8:	440a      	add	r2, r1
700023ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700023ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700023d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
700023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700023d6:	3301      	adds	r3, #1
700023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
700023da:	687b      	ldr	r3, [r7, #4]
700023dc:	791b      	ldrb	r3, [r3, #4]
700023de:	461a      	mov	r2, r3
700023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
700023e2:	4293      	cmp	r3, r2
700023e4:	d3b2      	bcc.n	7000234c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
700023e6:	69fb      	ldr	r3, [r7, #28]
700023e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700023ec:	69db      	ldr	r3, [r3, #28]
700023ee:	69fa      	ldr	r2, [r7, #28]
700023f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
700023f4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
700023f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
700023fa:	687b      	ldr	r3, [r7, #4]
700023fc:	7bdb      	ldrb	r3, [r3, #15]
700023fe:	2b00      	cmp	r3, #0
70002400:	d016      	beq.n	70002430 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
70002402:	69fb      	ldr	r3, [r7, #28]
70002404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002408:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
7000240c:	69fa      	ldr	r2, [r7, #28]
7000240e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70002412:	f043 030b 	orr.w	r3, r3, #11
70002416:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
7000241a:	69fb      	ldr	r3, [r7, #28]
7000241c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70002422:	69fa      	ldr	r2, [r7, #28]
70002424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70002428:	f043 030b 	orr.w	r3, r3, #11
7000242c:	6453      	str	r3, [r2, #68]	@ 0x44
7000242e:	e015      	b.n	7000245c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
70002430:	69fb      	ldr	r3, [r7, #28]
70002432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002436:	695a      	ldr	r2, [r3, #20]
70002438:	69fb      	ldr	r3, [r7, #28]
7000243a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000243e:	4619      	mov	r1, r3
70002440:	f242 032b 	movw	r3, #8235	@ 0x202b
70002444:	4313      	orrs	r3, r2
70002446:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
70002448:	69fb      	ldr	r3, [r7, #28]
7000244a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000244e:	691b      	ldr	r3, [r3, #16]
70002450:	69fa      	ldr	r2, [r7, #28]
70002452:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70002456:	f043 030b 	orr.w	r3, r3, #11
7000245a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
7000245c:	69fb      	ldr	r3, [r7, #28]
7000245e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002462:	681b      	ldr	r3, [r3, #0]
70002464:	69fa      	ldr	r2, [r7, #28]
70002466:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
7000246a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
7000246e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
70002470:	687b      	ldr	r3, [r7, #4]
70002472:	6818      	ldr	r0, [r3, #0]
70002474:	687b      	ldr	r3, [r7, #4]
70002476:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
70002478:	687b      	ldr	r3, [r7, #4]
7000247a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
7000247e:	461a      	mov	r2, r3
70002480:	f003 fcd0 	bl	70005e24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
70002484:	687b      	ldr	r3, [r7, #4]
70002486:	681b      	ldr	r3, [r3, #0]
70002488:	695a      	ldr	r2, [r3, #20]
7000248a:	687b      	ldr	r3, [r7, #4]
7000248c:	681b      	ldr	r3, [r3, #0]
7000248e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
70002492:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
70002494:	687b      	ldr	r3, [r7, #4]
70002496:	681b      	ldr	r3, [r3, #0]
70002498:	4618      	mov	r0, r3
7000249a:	f003 fbfe 	bl	70005c9a <USB_ReadInterrupts>
7000249e:	4603      	mov	r3, r0
700024a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
700024a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
700024a8:	d123      	bne.n	700024f2 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
700024aa:	687b      	ldr	r3, [r7, #4]
700024ac:	681b      	ldr	r3, [r3, #0]
700024ae:	4618      	mov	r0, r3
700024b0:	f003 fc94 	bl	70005ddc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
700024b4:	687b      	ldr	r3, [r7, #4]
700024b6:	681b      	ldr	r3, [r3, #0]
700024b8:	4618      	mov	r0, r3
700024ba:	f002 fd66 	bl	70004f8a <USB_GetDevSpeed>
700024be:	4603      	mov	r3, r0
700024c0:	461a      	mov	r2, r3
700024c2:	687b      	ldr	r3, [r7, #4]
700024c4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
700024c6:	687b      	ldr	r3, [r7, #4]
700024c8:	681c      	ldr	r4, [r3, #0]
700024ca:	f001 fbf7 	bl	70003cbc <HAL_RCC_GetHCLKFreq>
700024ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
700024d0:	687b      	ldr	r3, [r7, #4]
700024d2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
700024d4:	461a      	mov	r2, r3
700024d6:	4620      	mov	r0, r4
700024d8:	f002 fc72 	bl	70004dc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
700024dc:	6878      	ldr	r0, [r7, #4]
700024de:	f004 ff90 	bl	70007402 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
700024e2:	687b      	ldr	r3, [r7, #4]
700024e4:	681b      	ldr	r3, [r3, #0]
700024e6:	695a      	ldr	r2, [r3, #20]
700024e8:	687b      	ldr	r3, [r7, #4]
700024ea:	681b      	ldr	r3, [r3, #0]
700024ec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
700024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
700024f2:	687b      	ldr	r3, [r7, #4]
700024f4:	681b      	ldr	r3, [r3, #0]
700024f6:	4618      	mov	r0, r3
700024f8:	f003 fbcf 	bl	70005c9a <USB_ReadInterrupts>
700024fc:	4603      	mov	r3, r0
700024fe:	f003 0308 	and.w	r3, r3, #8
70002502:	2b08      	cmp	r3, #8
70002504:	d10a      	bne.n	7000251c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
70002506:	6878      	ldr	r0, [r7, #4]
70002508:	f004 ff6d 	bl	700073e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
7000250c:	687b      	ldr	r3, [r7, #4]
7000250e:	681b      	ldr	r3, [r3, #0]
70002510:	695a      	ldr	r2, [r3, #20]
70002512:	687b      	ldr	r3, [r7, #4]
70002514:	681b      	ldr	r3, [r3, #0]
70002516:	f002 0208 	and.w	r2, r2, #8
7000251a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
7000251c:	687b      	ldr	r3, [r7, #4]
7000251e:	681b      	ldr	r3, [r3, #0]
70002520:	4618      	mov	r0, r3
70002522:	f003 fbba 	bl	70005c9a <USB_ReadInterrupts>
70002526:	4603      	mov	r3, r0
70002528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000252c:	2b80      	cmp	r3, #128	@ 0x80
7000252e:	d123      	bne.n	70002578 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
70002530:	6a3b      	ldr	r3, [r7, #32]
70002532:	699b      	ldr	r3, [r3, #24]
70002534:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
70002538:	6a3b      	ldr	r3, [r7, #32]
7000253a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
7000253c:	2301      	movs	r3, #1
7000253e:	627b      	str	r3, [r7, #36]	@ 0x24
70002540:	e014      	b.n	7000256c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
70002542:	6879      	ldr	r1, [r7, #4]
70002544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002546:	4613      	mov	r3, r2
70002548:	00db      	lsls	r3, r3, #3
7000254a:	4413      	add	r3, r2
7000254c:	009b      	lsls	r3, r3, #2
7000254e:	440b      	add	r3, r1
70002550:	f203 2357 	addw	r3, r3, #599	@ 0x257
70002554:	781b      	ldrb	r3, [r3, #0]
70002556:	2b01      	cmp	r3, #1
70002558:	d105      	bne.n	70002566 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
7000255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000255c:	b2db      	uxtb	r3, r3
7000255e:	4619      	mov	r1, r3
70002560:	6878      	ldr	r0, [r7, #4]
70002562:	f000 faf2 	bl	70002b4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70002566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002568:	3301      	adds	r3, #1
7000256a:	627b      	str	r3, [r7, #36]	@ 0x24
7000256c:	687b      	ldr	r3, [r7, #4]
7000256e:	791b      	ldrb	r3, [r3, #4]
70002570:	461a      	mov	r2, r3
70002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002574:	4293      	cmp	r3, r2
70002576:	d3e4      	bcc.n	70002542 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
70002578:	687b      	ldr	r3, [r7, #4]
7000257a:	681b      	ldr	r3, [r3, #0]
7000257c:	4618      	mov	r0, r3
7000257e:	f003 fb8c 	bl	70005c9a <USB_ReadInterrupts>
70002582:	4603      	mov	r3, r0
70002584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70002588:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
7000258c:	d13c      	bne.n	70002608 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
7000258e:	2301      	movs	r3, #1
70002590:	627b      	str	r3, [r7, #36]	@ 0x24
70002592:	e02b      	b.n	700025ec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
70002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002596:	015a      	lsls	r2, r3, #5
70002598:	69fb      	ldr	r3, [r7, #28]
7000259a:	4413      	add	r3, r2
7000259c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700025a0:	681b      	ldr	r3, [r3, #0]
700025a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
700025a4:	6879      	ldr	r1, [r7, #4]
700025a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700025a8:	4613      	mov	r3, r2
700025aa:	00db      	lsls	r3, r3, #3
700025ac:	4413      	add	r3, r2
700025ae:	009b      	lsls	r3, r3, #2
700025b0:	440b      	add	r3, r1
700025b2:	3318      	adds	r3, #24
700025b4:	781b      	ldrb	r3, [r3, #0]
700025b6:	2b01      	cmp	r3, #1
700025b8:	d115      	bne.n	700025e6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
700025ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
700025bc:	2b00      	cmp	r3, #0
700025be:	da12      	bge.n	700025e6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
700025c0:	6879      	ldr	r1, [r7, #4]
700025c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700025c4:	4613      	mov	r3, r2
700025c6:	00db      	lsls	r3, r3, #3
700025c8:	4413      	add	r3, r2
700025ca:	009b      	lsls	r3, r3, #2
700025cc:	440b      	add	r3, r1
700025ce:	3317      	adds	r3, #23
700025d0:	2201      	movs	r2, #1
700025d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
700025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700025d6:	b2db      	uxtb	r3, r3
700025d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
700025dc:	b2db      	uxtb	r3, r3
700025de:	4619      	mov	r1, r3
700025e0:	6878      	ldr	r0, [r7, #4]
700025e2:	f000 fab2 	bl	70002b4a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
700025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700025e8:	3301      	adds	r3, #1
700025ea:	627b      	str	r3, [r7, #36]	@ 0x24
700025ec:	687b      	ldr	r3, [r7, #4]
700025ee:	791b      	ldrb	r3, [r3, #4]
700025f0:	461a      	mov	r2, r3
700025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700025f4:	4293      	cmp	r3, r2
700025f6:	d3cd      	bcc.n	70002594 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
700025f8:	687b      	ldr	r3, [r7, #4]
700025fa:	681b      	ldr	r3, [r3, #0]
700025fc:	695a      	ldr	r2, [r3, #20]
700025fe:	687b      	ldr	r3, [r7, #4]
70002600:	681b      	ldr	r3, [r3, #0]
70002602:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
70002606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
70002608:	687b      	ldr	r3, [r7, #4]
7000260a:	681b      	ldr	r3, [r3, #0]
7000260c:	4618      	mov	r0, r3
7000260e:	f003 fb44 	bl	70005c9a <USB_ReadInterrupts>
70002612:	4603      	mov	r3, r0
70002614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70002618:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
7000261c:	d156      	bne.n	700026cc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
7000261e:	2301      	movs	r3, #1
70002620:	627b      	str	r3, [r7, #36]	@ 0x24
70002622:	e045      	b.n	700026b0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
70002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002626:	015a      	lsls	r2, r3, #5
70002628:	69fb      	ldr	r3, [r7, #28]
7000262a:	4413      	add	r3, r2
7000262c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002630:	681b      	ldr	r3, [r3, #0]
70002632:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
70002634:	6879      	ldr	r1, [r7, #4]
70002636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70002638:	4613      	mov	r3, r2
7000263a:	00db      	lsls	r3, r3, #3
7000263c:	4413      	add	r3, r2
7000263e:	009b      	lsls	r3, r3, #2
70002640:	440b      	add	r3, r1
70002642:	f503 7316 	add.w	r3, r3, #600	@ 0x258
70002646:	781b      	ldrb	r3, [r3, #0]
70002648:	2b01      	cmp	r3, #1
7000264a:	d12e      	bne.n	700026aa <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
7000264c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
7000264e:	2b00      	cmp	r3, #0
70002650:	da2b      	bge.n	700026aa <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
70002652:	69bb      	ldr	r3, [r7, #24]
70002654:	0c1a      	lsrs	r2, r3, #16
70002656:	687b      	ldr	r3, [r7, #4]
70002658:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
7000265c:	4053      	eors	r3, r2
7000265e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
70002662:	2b00      	cmp	r3, #0
70002664:	d121      	bne.n	700026aa <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
70002666:	6879      	ldr	r1, [r7, #4]
70002668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
7000266a:	4613      	mov	r3, r2
7000266c:	00db      	lsls	r3, r3, #3
7000266e:	4413      	add	r3, r2
70002670:	009b      	lsls	r3, r3, #2
70002672:	440b      	add	r3, r1
70002674:	f203 2357 	addw	r3, r3, #599	@ 0x257
70002678:	2201      	movs	r2, #1
7000267a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
7000267c:	6a3b      	ldr	r3, [r7, #32]
7000267e:	699b      	ldr	r3, [r3, #24]
70002680:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
70002684:	6a3b      	ldr	r3, [r7, #32]
70002686:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
70002688:	6a3b      	ldr	r3, [r7, #32]
7000268a:	695b      	ldr	r3, [r3, #20]
7000268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70002690:	2b00      	cmp	r3, #0
70002692:	d10a      	bne.n	700026aa <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
70002694:	69fb      	ldr	r3, [r7, #28]
70002696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000269a:	685b      	ldr	r3, [r3, #4]
7000269c:	69fa      	ldr	r2, [r7, #28]
7000269e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
700026a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
700026a6:	6053      	str	r3, [r2, #4]
            break;
700026a8:	e008      	b.n	700026bc <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
700026aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700026ac:	3301      	adds	r3, #1
700026ae:	627b      	str	r3, [r7, #36]	@ 0x24
700026b0:	687b      	ldr	r3, [r7, #4]
700026b2:	791b      	ldrb	r3, [r3, #4]
700026b4:	461a      	mov	r2, r3
700026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700026b8:	4293      	cmp	r3, r2
700026ba:	d3b3      	bcc.n	70002624 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
700026bc:	687b      	ldr	r3, [r7, #4]
700026be:	681b      	ldr	r3, [r3, #0]
700026c0:	695a      	ldr	r2, [r3, #20]
700026c2:	687b      	ldr	r3, [r7, #4]
700026c4:	681b      	ldr	r3, [r3, #0]
700026c6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
700026ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
700026cc:	687b      	ldr	r3, [r7, #4]
700026ce:	681b      	ldr	r3, [r3, #0]
700026d0:	4618      	mov	r0, r3
700026d2:	f003 fae2 	bl	70005c9a <USB_ReadInterrupts>
700026d6:	4603      	mov	r3, r0
700026d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
700026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
700026e0:	d10a      	bne.n	700026f8 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
700026e2:	6878      	ldr	r0, [r7, #4]
700026e4:	f004 ff1e 	bl	70007524 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
700026e8:	687b      	ldr	r3, [r7, #4]
700026ea:	681b      	ldr	r3, [r3, #0]
700026ec:	695a      	ldr	r2, [r3, #20]
700026ee:	687b      	ldr	r3, [r7, #4]
700026f0:	681b      	ldr	r3, [r3, #0]
700026f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
700026f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
700026f8:	687b      	ldr	r3, [r7, #4]
700026fa:	681b      	ldr	r3, [r3, #0]
700026fc:	4618      	mov	r0, r3
700026fe:	f003 facc 	bl	70005c9a <USB_ReadInterrupts>
70002702:	4603      	mov	r3, r0
70002704:	f003 0304 	and.w	r3, r3, #4
70002708:	2b04      	cmp	r3, #4
7000270a:	d115      	bne.n	70002738 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
7000270c:	687b      	ldr	r3, [r7, #4]
7000270e:	681b      	ldr	r3, [r3, #0]
70002710:	685b      	ldr	r3, [r3, #4]
70002712:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
70002714:	69bb      	ldr	r3, [r7, #24]
70002716:	f003 0304 	and.w	r3, r3, #4
7000271a:	2b00      	cmp	r3, #0
7000271c:	d002      	beq.n	70002724 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
7000271e:	6878      	ldr	r0, [r7, #4]
70002720:	f004 ff0e 	bl	70007540 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
70002724:	687b      	ldr	r3, [r7, #4]
70002726:	681b      	ldr	r3, [r3, #0]
70002728:	6859      	ldr	r1, [r3, #4]
7000272a:	687b      	ldr	r3, [r7, #4]
7000272c:	681b      	ldr	r3, [r3, #0]
7000272e:	69ba      	ldr	r2, [r7, #24]
70002730:	430a      	orrs	r2, r1
70002732:	605a      	str	r2, [r3, #4]
70002734:	e000      	b.n	70002738 <HAL_PCD_IRQHandler+0x996>
      return;
70002736:	bf00      	nop
    }
  }
}
70002738:	3734      	adds	r7, #52	@ 0x34
7000273a:	46bd      	mov	sp, r7
7000273c:	bd90      	pop	{r4, r7, pc}

7000273e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
7000273e:	b580      	push	{r7, lr}
70002740:	b082      	sub	sp, #8
70002742:	af00      	add	r7, sp, #0
70002744:	6078      	str	r0, [r7, #4]
70002746:	460b      	mov	r3, r1
70002748:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
7000274a:	687b      	ldr	r3, [r7, #4]
7000274c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70002750:	2b01      	cmp	r3, #1
70002752:	d101      	bne.n	70002758 <HAL_PCD_SetAddress+0x1a>
70002754:	2302      	movs	r3, #2
70002756:	e012      	b.n	7000277e <HAL_PCD_SetAddress+0x40>
70002758:	687b      	ldr	r3, [r7, #4]
7000275a:	2201      	movs	r2, #1
7000275c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
70002760:	687b      	ldr	r3, [r7, #4]
70002762:	78fa      	ldrb	r2, [r7, #3]
70002764:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
70002766:	687b      	ldr	r3, [r7, #4]
70002768:	681b      	ldr	r3, [r3, #0]
7000276a:	78fa      	ldrb	r2, [r7, #3]
7000276c:	4611      	mov	r1, r2
7000276e:	4618      	mov	r0, r3
70002770:	f003 fa4c 	bl	70005c0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
70002774:	687b      	ldr	r3, [r7, #4]
70002776:	2200      	movs	r2, #0
70002778:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
7000277c:	2300      	movs	r3, #0
}
7000277e:	4618      	mov	r0, r3
70002780:	3708      	adds	r7, #8
70002782:	46bd      	mov	sp, r7
70002784:	bd80      	pop	{r7, pc}

70002786 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
70002786:	b580      	push	{r7, lr}
70002788:	b084      	sub	sp, #16
7000278a:	af00      	add	r7, sp, #0
7000278c:	6078      	str	r0, [r7, #4]
7000278e:	4608      	mov	r0, r1
70002790:	4611      	mov	r1, r2
70002792:	461a      	mov	r2, r3
70002794:	4603      	mov	r3, r0
70002796:	70fb      	strb	r3, [r7, #3]
70002798:	460b      	mov	r3, r1
7000279a:	803b      	strh	r3, [r7, #0]
7000279c:	4613      	mov	r3, r2
7000279e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
700027a0:	2300      	movs	r3, #0
700027a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
700027a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
700027a8:	2b00      	cmp	r3, #0
700027aa:	da0f      	bge.n	700027cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700027ac:	78fb      	ldrb	r3, [r7, #3]
700027ae:	f003 020f 	and.w	r2, r3, #15
700027b2:	4613      	mov	r3, r2
700027b4:	00db      	lsls	r3, r3, #3
700027b6:	4413      	add	r3, r2
700027b8:	009b      	lsls	r3, r3, #2
700027ba:	3310      	adds	r3, #16
700027bc:	687a      	ldr	r2, [r7, #4]
700027be:	4413      	add	r3, r2
700027c0:	3304      	adds	r3, #4
700027c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
700027c4:	68fb      	ldr	r3, [r7, #12]
700027c6:	2201      	movs	r2, #1
700027c8:	705a      	strb	r2, [r3, #1]
700027ca:	e00f      	b.n	700027ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
700027cc:	78fb      	ldrb	r3, [r7, #3]
700027ce:	f003 020f 	and.w	r2, r3, #15
700027d2:	4613      	mov	r3, r2
700027d4:	00db      	lsls	r3, r3, #3
700027d6:	4413      	add	r3, r2
700027d8:	009b      	lsls	r3, r3, #2
700027da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700027de:	687a      	ldr	r2, [r7, #4]
700027e0:	4413      	add	r3, r2
700027e2:	3304      	adds	r3, #4
700027e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
700027e6:	68fb      	ldr	r3, [r7, #12]
700027e8:	2200      	movs	r2, #0
700027ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
700027ec:	78fb      	ldrb	r3, [r7, #3]
700027ee:	f003 030f 	and.w	r3, r3, #15
700027f2:	b2da      	uxtb	r2, r3
700027f4:	68fb      	ldr	r3, [r7, #12]
700027f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
700027f8:	883b      	ldrh	r3, [r7, #0]
700027fa:	f3c3 020a 	ubfx	r2, r3, #0, #11
700027fe:	68fb      	ldr	r3, [r7, #12]
70002800:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
70002802:	68fb      	ldr	r3, [r7, #12]
70002804:	78ba      	ldrb	r2, [r7, #2]
70002806:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
70002808:	68fb      	ldr	r3, [r7, #12]
7000280a:	785b      	ldrb	r3, [r3, #1]
7000280c:	2b00      	cmp	r3, #0
7000280e:	d004      	beq.n	7000281a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
70002810:	68fb      	ldr	r3, [r7, #12]
70002812:	781b      	ldrb	r3, [r3, #0]
70002814:	461a      	mov	r2, r3
70002816:	68fb      	ldr	r3, [r7, #12]
70002818:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
7000281a:	78bb      	ldrb	r3, [r7, #2]
7000281c:	2b02      	cmp	r3, #2
7000281e:	d102      	bne.n	70002826 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
70002820:	68fb      	ldr	r3, [r7, #12]
70002822:	2200      	movs	r2, #0
70002824:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
70002826:	687b      	ldr	r3, [r7, #4]
70002828:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
7000282c:	2b01      	cmp	r3, #1
7000282e:	d101      	bne.n	70002834 <HAL_PCD_EP_Open+0xae>
70002830:	2302      	movs	r3, #2
70002832:	e00e      	b.n	70002852 <HAL_PCD_EP_Open+0xcc>
70002834:	687b      	ldr	r3, [r7, #4]
70002836:	2201      	movs	r2, #1
70002838:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
7000283c:	687b      	ldr	r3, [r7, #4]
7000283e:	681b      	ldr	r3, [r3, #0]
70002840:	68f9      	ldr	r1, [r7, #12]
70002842:	4618      	mov	r0, r3
70002844:	f002 fbc6 	bl	70004fd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
70002848:	687b      	ldr	r3, [r7, #4]
7000284a:	2200      	movs	r2, #0
7000284c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
70002850:	7afb      	ldrb	r3, [r7, #11]
}
70002852:	4618      	mov	r0, r3
70002854:	3710      	adds	r7, #16
70002856:	46bd      	mov	sp, r7
70002858:	bd80      	pop	{r7, pc}

7000285a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
7000285a:	b580      	push	{r7, lr}
7000285c:	b084      	sub	sp, #16
7000285e:	af00      	add	r7, sp, #0
70002860:	6078      	str	r0, [r7, #4]
70002862:	460b      	mov	r3, r1
70002864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
70002866:	f997 3003 	ldrsb.w	r3, [r7, #3]
7000286a:	2b00      	cmp	r3, #0
7000286c:	da0f      	bge.n	7000288e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
7000286e:	78fb      	ldrb	r3, [r7, #3]
70002870:	f003 020f 	and.w	r2, r3, #15
70002874:	4613      	mov	r3, r2
70002876:	00db      	lsls	r3, r3, #3
70002878:	4413      	add	r3, r2
7000287a:	009b      	lsls	r3, r3, #2
7000287c:	3310      	adds	r3, #16
7000287e:	687a      	ldr	r2, [r7, #4]
70002880:	4413      	add	r3, r2
70002882:	3304      	adds	r3, #4
70002884:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
70002886:	68fb      	ldr	r3, [r7, #12]
70002888:	2201      	movs	r2, #1
7000288a:	705a      	strb	r2, [r3, #1]
7000288c:	e00f      	b.n	700028ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
7000288e:	78fb      	ldrb	r3, [r7, #3]
70002890:	f003 020f 	and.w	r2, r3, #15
70002894:	4613      	mov	r3, r2
70002896:	00db      	lsls	r3, r3, #3
70002898:	4413      	add	r3, r2
7000289a:	009b      	lsls	r3, r3, #2
7000289c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700028a0:	687a      	ldr	r2, [r7, #4]
700028a2:	4413      	add	r3, r2
700028a4:	3304      	adds	r3, #4
700028a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
700028a8:	68fb      	ldr	r3, [r7, #12]
700028aa:	2200      	movs	r2, #0
700028ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
700028ae:	78fb      	ldrb	r3, [r7, #3]
700028b0:	f003 030f 	and.w	r3, r3, #15
700028b4:	b2da      	uxtb	r2, r3
700028b6:	68fb      	ldr	r3, [r7, #12]
700028b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
700028ba:	687b      	ldr	r3, [r7, #4]
700028bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
700028c0:	2b01      	cmp	r3, #1
700028c2:	d101      	bne.n	700028c8 <HAL_PCD_EP_Close+0x6e>
700028c4:	2302      	movs	r3, #2
700028c6:	e00e      	b.n	700028e6 <HAL_PCD_EP_Close+0x8c>
700028c8:	687b      	ldr	r3, [r7, #4]
700028ca:	2201      	movs	r2, #1
700028cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
700028d0:	687b      	ldr	r3, [r7, #4]
700028d2:	681b      	ldr	r3, [r3, #0]
700028d4:	68f9      	ldr	r1, [r7, #12]
700028d6:	4618      	mov	r0, r3
700028d8:	f002 fc04 	bl	700050e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
700028dc:	687b      	ldr	r3, [r7, #4]
700028de:	2200      	movs	r2, #0
700028e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
700028e4:	2300      	movs	r3, #0
}
700028e6:	4618      	mov	r0, r3
700028e8:	3710      	adds	r7, #16
700028ea:	46bd      	mov	sp, r7
700028ec:	bd80      	pop	{r7, pc}

700028ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
700028ee:	b580      	push	{r7, lr}
700028f0:	b086      	sub	sp, #24
700028f2:	af00      	add	r7, sp, #0
700028f4:	60f8      	str	r0, [r7, #12]
700028f6:	607a      	str	r2, [r7, #4]
700028f8:	603b      	str	r3, [r7, #0]
700028fa:	460b      	mov	r3, r1
700028fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
700028fe:	7afb      	ldrb	r3, [r7, #11]
70002900:	f003 020f 	and.w	r2, r3, #15
70002904:	4613      	mov	r3, r2
70002906:	00db      	lsls	r3, r3, #3
70002908:	4413      	add	r3, r2
7000290a:	009b      	lsls	r3, r3, #2
7000290c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70002910:	68fa      	ldr	r2, [r7, #12]
70002912:	4413      	add	r3, r2
70002914:	3304      	adds	r3, #4
70002916:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
70002918:	697b      	ldr	r3, [r7, #20]
7000291a:	687a      	ldr	r2, [r7, #4]
7000291c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
7000291e:	697b      	ldr	r3, [r7, #20]
70002920:	683a      	ldr	r2, [r7, #0]
70002922:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
70002924:	697b      	ldr	r3, [r7, #20]
70002926:	2200      	movs	r2, #0
70002928:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
7000292a:	697b      	ldr	r3, [r7, #20]
7000292c:	2200      	movs	r2, #0
7000292e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
70002930:	7afb      	ldrb	r3, [r7, #11]
70002932:	f003 030f 	and.w	r3, r3, #15
70002936:	b2da      	uxtb	r2, r3
70002938:	697b      	ldr	r3, [r7, #20]
7000293a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
7000293c:	68fb      	ldr	r3, [r7, #12]
7000293e:	799b      	ldrb	r3, [r3, #6]
70002940:	2b01      	cmp	r3, #1
70002942:	d102      	bne.n	7000294a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
70002944:	687a      	ldr	r2, [r7, #4]
70002946:	697b      	ldr	r3, [r7, #20]
70002948:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
7000294a:	68fb      	ldr	r3, [r7, #12]
7000294c:	6818      	ldr	r0, [r3, #0]
7000294e:	68fb      	ldr	r3, [r7, #12]
70002950:	799b      	ldrb	r3, [r3, #6]
70002952:	461a      	mov	r2, r3
70002954:	6979      	ldr	r1, [r7, #20]
70002956:	f002 fca1 	bl	7000529c <USB_EPStartXfer>

  return HAL_OK;
7000295a:	2300      	movs	r3, #0
}
7000295c:	4618      	mov	r0, r3
7000295e:	3718      	adds	r7, #24
70002960:	46bd      	mov	sp, r7
70002962:	bd80      	pop	{r7, pc}

70002964 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
70002964:	b580      	push	{r7, lr}
70002966:	b086      	sub	sp, #24
70002968:	af00      	add	r7, sp, #0
7000296a:	60f8      	str	r0, [r7, #12]
7000296c:	607a      	str	r2, [r7, #4]
7000296e:	603b      	str	r3, [r7, #0]
70002970:	460b      	mov	r3, r1
70002972:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
70002974:	7afb      	ldrb	r3, [r7, #11]
70002976:	f003 020f 	and.w	r2, r3, #15
7000297a:	4613      	mov	r3, r2
7000297c:	00db      	lsls	r3, r3, #3
7000297e:	4413      	add	r3, r2
70002980:	009b      	lsls	r3, r3, #2
70002982:	3310      	adds	r3, #16
70002984:	68fa      	ldr	r2, [r7, #12]
70002986:	4413      	add	r3, r2
70002988:	3304      	adds	r3, #4
7000298a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
7000298c:	697b      	ldr	r3, [r7, #20]
7000298e:	687a      	ldr	r2, [r7, #4]
70002990:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
70002992:	697b      	ldr	r3, [r7, #20]
70002994:	683a      	ldr	r2, [r7, #0]
70002996:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
70002998:	697b      	ldr	r3, [r7, #20]
7000299a:	2200      	movs	r2, #0
7000299c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
7000299e:	697b      	ldr	r3, [r7, #20]
700029a0:	2201      	movs	r2, #1
700029a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
700029a4:	7afb      	ldrb	r3, [r7, #11]
700029a6:	f003 030f 	and.w	r3, r3, #15
700029aa:	b2da      	uxtb	r2, r3
700029ac:	697b      	ldr	r3, [r7, #20]
700029ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
700029b0:	68fb      	ldr	r3, [r7, #12]
700029b2:	799b      	ldrb	r3, [r3, #6]
700029b4:	2b01      	cmp	r3, #1
700029b6:	d102      	bne.n	700029be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
700029b8:	687a      	ldr	r2, [r7, #4]
700029ba:	697b      	ldr	r3, [r7, #20]
700029bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
700029be:	68fb      	ldr	r3, [r7, #12]
700029c0:	6818      	ldr	r0, [r3, #0]
700029c2:	68fb      	ldr	r3, [r7, #12]
700029c4:	799b      	ldrb	r3, [r3, #6]
700029c6:	461a      	mov	r2, r3
700029c8:	6979      	ldr	r1, [r7, #20]
700029ca:	f002 fc67 	bl	7000529c <USB_EPStartXfer>

  return HAL_OK;
700029ce:	2300      	movs	r3, #0
}
700029d0:	4618      	mov	r0, r3
700029d2:	3718      	adds	r7, #24
700029d4:	46bd      	mov	sp, r7
700029d6:	bd80      	pop	{r7, pc}

700029d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
700029d8:	b580      	push	{r7, lr}
700029da:	b084      	sub	sp, #16
700029dc:	af00      	add	r7, sp, #0
700029de:	6078      	str	r0, [r7, #4]
700029e0:	460b      	mov	r3, r1
700029e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
700029e4:	78fb      	ldrb	r3, [r7, #3]
700029e6:	f003 030f 	and.w	r3, r3, #15
700029ea:	687a      	ldr	r2, [r7, #4]
700029ec:	7912      	ldrb	r2, [r2, #4]
700029ee:	4293      	cmp	r3, r2
700029f0:	d901      	bls.n	700029f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
700029f2:	2301      	movs	r3, #1
700029f4:	e04f      	b.n	70002a96 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
700029f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
700029fa:	2b00      	cmp	r3, #0
700029fc:	da0f      	bge.n	70002a1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700029fe:	78fb      	ldrb	r3, [r7, #3]
70002a00:	f003 020f 	and.w	r2, r3, #15
70002a04:	4613      	mov	r3, r2
70002a06:	00db      	lsls	r3, r3, #3
70002a08:	4413      	add	r3, r2
70002a0a:	009b      	lsls	r3, r3, #2
70002a0c:	3310      	adds	r3, #16
70002a0e:	687a      	ldr	r2, [r7, #4]
70002a10:	4413      	add	r3, r2
70002a12:	3304      	adds	r3, #4
70002a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
70002a16:	68fb      	ldr	r3, [r7, #12]
70002a18:	2201      	movs	r2, #1
70002a1a:	705a      	strb	r2, [r3, #1]
70002a1c:	e00d      	b.n	70002a3a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
70002a1e:	78fa      	ldrb	r2, [r7, #3]
70002a20:	4613      	mov	r3, r2
70002a22:	00db      	lsls	r3, r3, #3
70002a24:	4413      	add	r3, r2
70002a26:	009b      	lsls	r3, r3, #2
70002a28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70002a2c:	687a      	ldr	r2, [r7, #4]
70002a2e:	4413      	add	r3, r2
70002a30:	3304      	adds	r3, #4
70002a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
70002a34:	68fb      	ldr	r3, [r7, #12]
70002a36:	2200      	movs	r2, #0
70002a38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
70002a3a:	68fb      	ldr	r3, [r7, #12]
70002a3c:	2201      	movs	r2, #1
70002a3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
70002a40:	78fb      	ldrb	r3, [r7, #3]
70002a42:	f003 030f 	and.w	r3, r3, #15
70002a46:	b2da      	uxtb	r2, r3
70002a48:	68fb      	ldr	r3, [r7, #12]
70002a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
70002a4c:	687b      	ldr	r3, [r7, #4]
70002a4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70002a52:	2b01      	cmp	r3, #1
70002a54:	d101      	bne.n	70002a5a <HAL_PCD_EP_SetStall+0x82>
70002a56:	2302      	movs	r3, #2
70002a58:	e01d      	b.n	70002a96 <HAL_PCD_EP_SetStall+0xbe>
70002a5a:	687b      	ldr	r3, [r7, #4]
70002a5c:	2201      	movs	r2, #1
70002a5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
70002a62:	687b      	ldr	r3, [r7, #4]
70002a64:	681b      	ldr	r3, [r3, #0]
70002a66:	68f9      	ldr	r1, [r7, #12]
70002a68:	4618      	mov	r0, r3
70002a6a:	f002 fffb 	bl	70005a64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
70002a6e:	78fb      	ldrb	r3, [r7, #3]
70002a70:	f003 030f 	and.w	r3, r3, #15
70002a74:	2b00      	cmp	r3, #0
70002a76:	d109      	bne.n	70002a8c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
70002a78:	687b      	ldr	r3, [r7, #4]
70002a7a:	6818      	ldr	r0, [r3, #0]
70002a7c:	687b      	ldr	r3, [r7, #4]
70002a7e:	7999      	ldrb	r1, [r3, #6]
70002a80:	687b      	ldr	r3, [r7, #4]
70002a82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70002a86:	461a      	mov	r2, r3
70002a88:	f003 f9cc 	bl	70005e24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
70002a8c:	687b      	ldr	r3, [r7, #4]
70002a8e:	2200      	movs	r2, #0
70002a90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
70002a94:	2300      	movs	r3, #0
}
70002a96:	4618      	mov	r0, r3
70002a98:	3710      	adds	r7, #16
70002a9a:	46bd      	mov	sp, r7
70002a9c:	bd80      	pop	{r7, pc}

70002a9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
70002a9e:	b580      	push	{r7, lr}
70002aa0:	b084      	sub	sp, #16
70002aa2:	af00      	add	r7, sp, #0
70002aa4:	6078      	str	r0, [r7, #4]
70002aa6:	460b      	mov	r3, r1
70002aa8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
70002aaa:	78fb      	ldrb	r3, [r7, #3]
70002aac:	f003 030f 	and.w	r3, r3, #15
70002ab0:	687a      	ldr	r2, [r7, #4]
70002ab2:	7912      	ldrb	r2, [r2, #4]
70002ab4:	4293      	cmp	r3, r2
70002ab6:	d901      	bls.n	70002abc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
70002ab8:	2301      	movs	r3, #1
70002aba:	e042      	b.n	70002b42 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
70002abc:	f997 3003 	ldrsb.w	r3, [r7, #3]
70002ac0:	2b00      	cmp	r3, #0
70002ac2:	da0f      	bge.n	70002ae4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
70002ac4:	78fb      	ldrb	r3, [r7, #3]
70002ac6:	f003 020f 	and.w	r2, r3, #15
70002aca:	4613      	mov	r3, r2
70002acc:	00db      	lsls	r3, r3, #3
70002ace:	4413      	add	r3, r2
70002ad0:	009b      	lsls	r3, r3, #2
70002ad2:	3310      	adds	r3, #16
70002ad4:	687a      	ldr	r2, [r7, #4]
70002ad6:	4413      	add	r3, r2
70002ad8:	3304      	adds	r3, #4
70002ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
70002adc:	68fb      	ldr	r3, [r7, #12]
70002ade:	2201      	movs	r2, #1
70002ae0:	705a      	strb	r2, [r3, #1]
70002ae2:	e00f      	b.n	70002b04 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
70002ae4:	78fb      	ldrb	r3, [r7, #3]
70002ae6:	f003 020f 	and.w	r2, r3, #15
70002aea:	4613      	mov	r3, r2
70002aec:	00db      	lsls	r3, r3, #3
70002aee:	4413      	add	r3, r2
70002af0:	009b      	lsls	r3, r3, #2
70002af2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70002af6:	687a      	ldr	r2, [r7, #4]
70002af8:	4413      	add	r3, r2
70002afa:	3304      	adds	r3, #4
70002afc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
70002afe:	68fb      	ldr	r3, [r7, #12]
70002b00:	2200      	movs	r2, #0
70002b02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
70002b04:	68fb      	ldr	r3, [r7, #12]
70002b06:	2200      	movs	r2, #0
70002b08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
70002b0a:	78fb      	ldrb	r3, [r7, #3]
70002b0c:	f003 030f 	and.w	r3, r3, #15
70002b10:	b2da      	uxtb	r2, r3
70002b12:	68fb      	ldr	r3, [r7, #12]
70002b14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
70002b16:	687b      	ldr	r3, [r7, #4]
70002b18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70002b1c:	2b01      	cmp	r3, #1
70002b1e:	d101      	bne.n	70002b24 <HAL_PCD_EP_ClrStall+0x86>
70002b20:	2302      	movs	r3, #2
70002b22:	e00e      	b.n	70002b42 <HAL_PCD_EP_ClrStall+0xa4>
70002b24:	687b      	ldr	r3, [r7, #4]
70002b26:	2201      	movs	r2, #1
70002b28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
70002b2c:	687b      	ldr	r3, [r7, #4]
70002b2e:	681b      	ldr	r3, [r3, #0]
70002b30:	68f9      	ldr	r1, [r7, #12]
70002b32:	4618      	mov	r0, r3
70002b34:	f003 f804 	bl	70005b40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
70002b38:	687b      	ldr	r3, [r7, #4]
70002b3a:	2200      	movs	r2, #0
70002b3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
70002b40:	2300      	movs	r3, #0
}
70002b42:	4618      	mov	r0, r3
70002b44:	3710      	adds	r7, #16
70002b46:	46bd      	mov	sp, r7
70002b48:	bd80      	pop	{r7, pc}

70002b4a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
70002b4a:	b580      	push	{r7, lr}
70002b4c:	b084      	sub	sp, #16
70002b4e:	af00      	add	r7, sp, #0
70002b50:	6078      	str	r0, [r7, #4]
70002b52:	460b      	mov	r3, r1
70002b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
70002b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
70002b5a:	2b00      	cmp	r3, #0
70002b5c:	da0c      	bge.n	70002b78 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
70002b5e:	78fb      	ldrb	r3, [r7, #3]
70002b60:	f003 020f 	and.w	r2, r3, #15
70002b64:	4613      	mov	r3, r2
70002b66:	00db      	lsls	r3, r3, #3
70002b68:	4413      	add	r3, r2
70002b6a:	009b      	lsls	r3, r3, #2
70002b6c:	3310      	adds	r3, #16
70002b6e:	687a      	ldr	r2, [r7, #4]
70002b70:	4413      	add	r3, r2
70002b72:	3304      	adds	r3, #4
70002b74:	60fb      	str	r3, [r7, #12]
70002b76:	e00c      	b.n	70002b92 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
70002b78:	78fb      	ldrb	r3, [r7, #3]
70002b7a:	f003 020f 	and.w	r2, r3, #15
70002b7e:	4613      	mov	r3, r2
70002b80:	00db      	lsls	r3, r3, #3
70002b82:	4413      	add	r3, r2
70002b84:	009b      	lsls	r3, r3, #2
70002b86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70002b8a:	687a      	ldr	r2, [r7, #4]
70002b8c:	4413      	add	r3, r2
70002b8e:	3304      	adds	r3, #4
70002b90:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
70002b92:	687b      	ldr	r3, [r7, #4]
70002b94:	681b      	ldr	r3, [r3, #0]
70002b96:	68f9      	ldr	r1, [r7, #12]
70002b98:	4618      	mov	r0, r3
70002b9a:	f002 fe23 	bl	700057e4 <USB_EPStopXfer>
70002b9e:	4603      	mov	r3, r0
70002ba0:	72fb      	strb	r3, [r7, #11]

  return ret;
70002ba2:	7afb      	ldrb	r3, [r7, #11]
}
70002ba4:	4618      	mov	r0, r3
70002ba6:	3710      	adds	r7, #16
70002ba8:	46bd      	mov	sp, r7
70002baa:	bd80      	pop	{r7, pc}

70002bac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
70002bac:	b580      	push	{r7, lr}
70002bae:	b08a      	sub	sp, #40	@ 0x28
70002bb0:	af02      	add	r7, sp, #8
70002bb2:	6078      	str	r0, [r7, #4]
70002bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70002bb6:	687b      	ldr	r3, [r7, #4]
70002bb8:	681b      	ldr	r3, [r3, #0]
70002bba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002bbc:	697b      	ldr	r3, [r7, #20]
70002bbe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
70002bc0:	683a      	ldr	r2, [r7, #0]
70002bc2:	4613      	mov	r3, r2
70002bc4:	00db      	lsls	r3, r3, #3
70002bc6:	4413      	add	r3, r2
70002bc8:	009b      	lsls	r3, r3, #2
70002bca:	3310      	adds	r3, #16
70002bcc:	687a      	ldr	r2, [r7, #4]
70002bce:	4413      	add	r3, r2
70002bd0:	3304      	adds	r3, #4
70002bd2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
70002bd4:	68fb      	ldr	r3, [r7, #12]
70002bd6:	695a      	ldr	r2, [r3, #20]
70002bd8:	68fb      	ldr	r3, [r7, #12]
70002bda:	691b      	ldr	r3, [r3, #16]
70002bdc:	429a      	cmp	r2, r3
70002bde:	d901      	bls.n	70002be4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
70002be0:	2301      	movs	r3, #1
70002be2:	e06b      	b.n	70002cbc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
70002be4:	68fb      	ldr	r3, [r7, #12]
70002be6:	691a      	ldr	r2, [r3, #16]
70002be8:	68fb      	ldr	r3, [r7, #12]
70002bea:	695b      	ldr	r3, [r3, #20]
70002bec:	1ad3      	subs	r3, r2, r3
70002bee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
70002bf0:	68fb      	ldr	r3, [r7, #12]
70002bf2:	689b      	ldr	r3, [r3, #8]
70002bf4:	69fa      	ldr	r2, [r7, #28]
70002bf6:	429a      	cmp	r2, r3
70002bf8:	d902      	bls.n	70002c00 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
70002bfa:	68fb      	ldr	r3, [r7, #12]
70002bfc:	689b      	ldr	r3, [r3, #8]
70002bfe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
70002c00:	69fb      	ldr	r3, [r7, #28]
70002c02:	3303      	adds	r3, #3
70002c04:	089b      	lsrs	r3, r3, #2
70002c06:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
70002c08:	e02a      	b.n	70002c60 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
70002c0a:	68fb      	ldr	r3, [r7, #12]
70002c0c:	691a      	ldr	r2, [r3, #16]
70002c0e:	68fb      	ldr	r3, [r7, #12]
70002c10:	695b      	ldr	r3, [r3, #20]
70002c12:	1ad3      	subs	r3, r2, r3
70002c14:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
70002c16:	68fb      	ldr	r3, [r7, #12]
70002c18:	689b      	ldr	r3, [r3, #8]
70002c1a:	69fa      	ldr	r2, [r7, #28]
70002c1c:	429a      	cmp	r2, r3
70002c1e:	d902      	bls.n	70002c26 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
70002c20:	68fb      	ldr	r3, [r7, #12]
70002c22:	689b      	ldr	r3, [r3, #8]
70002c24:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
70002c26:	69fb      	ldr	r3, [r7, #28]
70002c28:	3303      	adds	r3, #3
70002c2a:	089b      	lsrs	r3, r3, #2
70002c2c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
70002c2e:	68fb      	ldr	r3, [r7, #12]
70002c30:	68d9      	ldr	r1, [r3, #12]
70002c32:	683b      	ldr	r3, [r7, #0]
70002c34:	b2da      	uxtb	r2, r3
70002c36:	69fb      	ldr	r3, [r7, #28]
70002c38:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
70002c3a:	687b      	ldr	r3, [r7, #4]
70002c3c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
70002c3e:	9300      	str	r3, [sp, #0]
70002c40:	4603      	mov	r3, r0
70002c42:	6978      	ldr	r0, [r7, #20]
70002c44:	f002 fe78 	bl	70005938 <USB_WritePacket>

    ep->xfer_buff  += len;
70002c48:	68fb      	ldr	r3, [r7, #12]
70002c4a:	68da      	ldr	r2, [r3, #12]
70002c4c:	69fb      	ldr	r3, [r7, #28]
70002c4e:	441a      	add	r2, r3
70002c50:	68fb      	ldr	r3, [r7, #12]
70002c52:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
70002c54:	68fb      	ldr	r3, [r7, #12]
70002c56:	695a      	ldr	r2, [r3, #20]
70002c58:	69fb      	ldr	r3, [r7, #28]
70002c5a:	441a      	add	r2, r3
70002c5c:	68fb      	ldr	r3, [r7, #12]
70002c5e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
70002c60:	683b      	ldr	r3, [r7, #0]
70002c62:	015a      	lsls	r2, r3, #5
70002c64:	693b      	ldr	r3, [r7, #16]
70002c66:	4413      	add	r3, r2
70002c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002c6c:	699b      	ldr	r3, [r3, #24]
70002c6e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
70002c70:	69ba      	ldr	r2, [r7, #24]
70002c72:	429a      	cmp	r2, r3
70002c74:	d809      	bhi.n	70002c8a <PCD_WriteEmptyTxFifo+0xde>
70002c76:	68fb      	ldr	r3, [r7, #12]
70002c78:	695a      	ldr	r2, [r3, #20]
70002c7a:	68fb      	ldr	r3, [r7, #12]
70002c7c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
70002c7e:	429a      	cmp	r2, r3
70002c80:	d203      	bcs.n	70002c8a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
70002c82:	68fb      	ldr	r3, [r7, #12]
70002c84:	691b      	ldr	r3, [r3, #16]
70002c86:	2b00      	cmp	r3, #0
70002c88:	d1bf      	bne.n	70002c0a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
70002c8a:	68fb      	ldr	r3, [r7, #12]
70002c8c:	691a      	ldr	r2, [r3, #16]
70002c8e:	68fb      	ldr	r3, [r7, #12]
70002c90:	695b      	ldr	r3, [r3, #20]
70002c92:	429a      	cmp	r2, r3
70002c94:	d811      	bhi.n	70002cba <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
70002c96:	683b      	ldr	r3, [r7, #0]
70002c98:	f003 030f 	and.w	r3, r3, #15
70002c9c:	2201      	movs	r2, #1
70002c9e:	fa02 f303 	lsl.w	r3, r2, r3
70002ca2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
70002ca4:	693b      	ldr	r3, [r7, #16]
70002ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70002cac:	68bb      	ldr	r3, [r7, #8]
70002cae:	43db      	mvns	r3, r3
70002cb0:	6939      	ldr	r1, [r7, #16]
70002cb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70002cb6:	4013      	ands	r3, r2
70002cb8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
70002cba:	2300      	movs	r3, #0
}
70002cbc:	4618      	mov	r0, r3
70002cbe:	3720      	adds	r7, #32
70002cc0:	46bd      	mov	sp, r7
70002cc2:	bd80      	pop	{r7, pc}

70002cc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
70002cc4:	b580      	push	{r7, lr}
70002cc6:	b088      	sub	sp, #32
70002cc8:	af00      	add	r7, sp, #0
70002cca:	6078      	str	r0, [r7, #4]
70002ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70002cce:	687b      	ldr	r3, [r7, #4]
70002cd0:	681b      	ldr	r3, [r3, #0]
70002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002cd4:	69fb      	ldr	r3, [r7, #28]
70002cd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70002cd8:	69fb      	ldr	r3, [r7, #28]
70002cda:	333c      	adds	r3, #60	@ 0x3c
70002cdc:	3304      	adds	r3, #4
70002cde:	681b      	ldr	r3, [r3, #0]
70002ce0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
70002ce2:	683b      	ldr	r3, [r7, #0]
70002ce4:	015a      	lsls	r2, r3, #5
70002ce6:	69bb      	ldr	r3, [r7, #24]
70002ce8:	4413      	add	r3, r2
70002cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002cee:	689b      	ldr	r3, [r3, #8]
70002cf0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
70002cf2:	687b      	ldr	r3, [r7, #4]
70002cf4:	799b      	ldrb	r3, [r3, #6]
70002cf6:	2b01      	cmp	r3, #1
70002cf8:	d17b      	bne.n	70002df2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
70002cfa:	693b      	ldr	r3, [r7, #16]
70002cfc:	f003 0308 	and.w	r3, r3, #8
70002d00:	2b00      	cmp	r3, #0
70002d02:	d015      	beq.n	70002d30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70002d04:	697b      	ldr	r3, [r7, #20]
70002d06:	4a61      	ldr	r2, [pc, #388]	@ (70002e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
70002d08:	4293      	cmp	r3, r2
70002d0a:	f240 80b9 	bls.w	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
70002d0e:	693b      	ldr	r3, [r7, #16]
70002d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70002d14:	2b00      	cmp	r3, #0
70002d16:	f000 80b3 	beq.w	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
70002d1a:	683b      	ldr	r3, [r7, #0]
70002d1c:	015a      	lsls	r2, r3, #5
70002d1e:	69bb      	ldr	r3, [r7, #24]
70002d20:	4413      	add	r3, r2
70002d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002d26:	461a      	mov	r2, r3
70002d28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70002d2c:	6093      	str	r3, [r2, #8]
70002d2e:	e0a7      	b.n	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
70002d30:	693b      	ldr	r3, [r7, #16]
70002d32:	f003 0320 	and.w	r3, r3, #32
70002d36:	2b00      	cmp	r3, #0
70002d38:	d009      	beq.n	70002d4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
70002d3a:	683b      	ldr	r3, [r7, #0]
70002d3c:	015a      	lsls	r2, r3, #5
70002d3e:	69bb      	ldr	r3, [r7, #24]
70002d40:	4413      	add	r3, r2
70002d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002d46:	461a      	mov	r2, r3
70002d48:	2320      	movs	r3, #32
70002d4a:	6093      	str	r3, [r2, #8]
70002d4c:	e098      	b.n	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
70002d4e:	693b      	ldr	r3, [r7, #16]
70002d50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
70002d54:	2b00      	cmp	r3, #0
70002d56:	f040 8093 	bne.w	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70002d5a:	697b      	ldr	r3, [r7, #20]
70002d5c:	4a4b      	ldr	r2, [pc, #300]	@ (70002e8c <PCD_EP_OutXfrComplete_int+0x1c8>)
70002d5e:	4293      	cmp	r3, r2
70002d60:	d90f      	bls.n	70002d82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
70002d62:	693b      	ldr	r3, [r7, #16]
70002d64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70002d68:	2b00      	cmp	r3, #0
70002d6a:	d00a      	beq.n	70002d82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
70002d6c:	683b      	ldr	r3, [r7, #0]
70002d6e:	015a      	lsls	r2, r3, #5
70002d70:	69bb      	ldr	r3, [r7, #24]
70002d72:	4413      	add	r3, r2
70002d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002d78:	461a      	mov	r2, r3
70002d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70002d7e:	6093      	str	r3, [r2, #8]
70002d80:	e07e      	b.n	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
70002d82:	683a      	ldr	r2, [r7, #0]
70002d84:	4613      	mov	r3, r2
70002d86:	00db      	lsls	r3, r3, #3
70002d88:	4413      	add	r3, r2
70002d8a:	009b      	lsls	r3, r3, #2
70002d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70002d90:	687a      	ldr	r2, [r7, #4]
70002d92:	4413      	add	r3, r2
70002d94:	3304      	adds	r3, #4
70002d96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
70002d98:	68fb      	ldr	r3, [r7, #12]
70002d9a:	6a1a      	ldr	r2, [r3, #32]
70002d9c:	683b      	ldr	r3, [r7, #0]
70002d9e:	0159      	lsls	r1, r3, #5
70002da0:	69bb      	ldr	r3, [r7, #24]
70002da2:	440b      	add	r3, r1
70002da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002da8:	691b      	ldr	r3, [r3, #16]
70002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
70002dae:	1ad2      	subs	r2, r2, r3
70002db0:	68fb      	ldr	r3, [r7, #12]
70002db2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
70002db4:	683b      	ldr	r3, [r7, #0]
70002db6:	2b00      	cmp	r3, #0
70002db8:	d114      	bne.n	70002de4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
70002dba:	68fb      	ldr	r3, [r7, #12]
70002dbc:	691b      	ldr	r3, [r3, #16]
70002dbe:	2b00      	cmp	r3, #0
70002dc0:	d109      	bne.n	70002dd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
70002dc2:	687b      	ldr	r3, [r7, #4]
70002dc4:	6818      	ldr	r0, [r3, #0]
70002dc6:	687b      	ldr	r3, [r7, #4]
70002dc8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70002dcc:	461a      	mov	r2, r3
70002dce:	2101      	movs	r1, #1
70002dd0:	f003 f828 	bl	70005e24 <USB_EP0_OutStart>
70002dd4:	e006      	b.n	70002de4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
70002dd6:	68fb      	ldr	r3, [r7, #12]
70002dd8:	68da      	ldr	r2, [r3, #12]
70002dda:	68fb      	ldr	r3, [r7, #12]
70002ddc:	695b      	ldr	r3, [r3, #20]
70002dde:	441a      	add	r2, r3
70002de0:	68fb      	ldr	r3, [r7, #12]
70002de2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
70002de4:	683b      	ldr	r3, [r7, #0]
70002de6:	b2db      	uxtb	r3, r3
70002de8:	4619      	mov	r1, r3
70002dea:	6878      	ldr	r0, [r7, #4]
70002dec:	f004 fac6 	bl	7000737c <HAL_PCD_DataOutStageCallback>
70002df0:	e046      	b.n	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
70002df2:	697b      	ldr	r3, [r7, #20]
70002df4:	4a26      	ldr	r2, [pc, #152]	@ (70002e90 <PCD_EP_OutXfrComplete_int+0x1cc>)
70002df6:	4293      	cmp	r3, r2
70002df8:	d124      	bne.n	70002e44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
70002dfa:	693b      	ldr	r3, [r7, #16]
70002dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70002e00:	2b00      	cmp	r3, #0
70002e02:	d00a      	beq.n	70002e1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
70002e04:	683b      	ldr	r3, [r7, #0]
70002e06:	015a      	lsls	r2, r3, #5
70002e08:	69bb      	ldr	r3, [r7, #24]
70002e0a:	4413      	add	r3, r2
70002e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002e10:	461a      	mov	r2, r3
70002e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70002e16:	6093      	str	r3, [r2, #8]
70002e18:	e032      	b.n	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
70002e1a:	693b      	ldr	r3, [r7, #16]
70002e1c:	f003 0320 	and.w	r3, r3, #32
70002e20:	2b00      	cmp	r3, #0
70002e22:	d008      	beq.n	70002e36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
70002e24:	683b      	ldr	r3, [r7, #0]
70002e26:	015a      	lsls	r2, r3, #5
70002e28:	69bb      	ldr	r3, [r7, #24]
70002e2a:	4413      	add	r3, r2
70002e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002e30:	461a      	mov	r2, r3
70002e32:	2320      	movs	r3, #32
70002e34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
70002e36:	683b      	ldr	r3, [r7, #0]
70002e38:	b2db      	uxtb	r3, r3
70002e3a:	4619      	mov	r1, r3
70002e3c:	6878      	ldr	r0, [r7, #4]
70002e3e:	f004 fa9d 	bl	7000737c <HAL_PCD_DataOutStageCallback>
70002e42:	e01d      	b.n	70002e80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
70002e44:	683b      	ldr	r3, [r7, #0]
70002e46:	2b00      	cmp	r3, #0
70002e48:	d114      	bne.n	70002e74 <PCD_EP_OutXfrComplete_int+0x1b0>
70002e4a:	6879      	ldr	r1, [r7, #4]
70002e4c:	683a      	ldr	r2, [r7, #0]
70002e4e:	4613      	mov	r3, r2
70002e50:	00db      	lsls	r3, r3, #3
70002e52:	4413      	add	r3, r2
70002e54:	009b      	lsls	r3, r3, #2
70002e56:	440b      	add	r3, r1
70002e58:	f503 7319 	add.w	r3, r3, #612	@ 0x264
70002e5c:	681b      	ldr	r3, [r3, #0]
70002e5e:	2b00      	cmp	r3, #0
70002e60:	d108      	bne.n	70002e74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
70002e62:	687b      	ldr	r3, [r7, #4]
70002e64:	6818      	ldr	r0, [r3, #0]
70002e66:	687b      	ldr	r3, [r7, #4]
70002e68:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70002e6c:	461a      	mov	r2, r3
70002e6e:	2100      	movs	r1, #0
70002e70:	f002 ffd8 	bl	70005e24 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
70002e74:	683b      	ldr	r3, [r7, #0]
70002e76:	b2db      	uxtb	r3, r3
70002e78:	4619      	mov	r1, r3
70002e7a:	6878      	ldr	r0, [r7, #4]
70002e7c:	f004 fa7e 	bl	7000737c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
70002e80:	2300      	movs	r3, #0
}
70002e82:	4618      	mov	r0, r3
70002e84:	3720      	adds	r7, #32
70002e86:	46bd      	mov	sp, r7
70002e88:	bd80      	pop	{r7, pc}
70002e8a:	bf00      	nop
70002e8c:	4f54300a 	.word	0x4f54300a
70002e90:	4f54310a 	.word	0x4f54310a

70002e94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
70002e94:	b580      	push	{r7, lr}
70002e96:	b086      	sub	sp, #24
70002e98:	af00      	add	r7, sp, #0
70002e9a:	6078      	str	r0, [r7, #4]
70002e9c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70002e9e:	687b      	ldr	r3, [r7, #4]
70002ea0:	681b      	ldr	r3, [r3, #0]
70002ea2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002ea4:	697b      	ldr	r3, [r7, #20]
70002ea6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70002ea8:	697b      	ldr	r3, [r7, #20]
70002eaa:	333c      	adds	r3, #60	@ 0x3c
70002eac:	3304      	adds	r3, #4
70002eae:	681b      	ldr	r3, [r3, #0]
70002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
70002eb2:	683b      	ldr	r3, [r7, #0]
70002eb4:	015a      	lsls	r2, r3, #5
70002eb6:	693b      	ldr	r3, [r7, #16]
70002eb8:	4413      	add	r3, r2
70002eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002ebe:	689b      	ldr	r3, [r3, #8]
70002ec0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70002ec2:	68fb      	ldr	r3, [r7, #12]
70002ec4:	4a15      	ldr	r2, [pc, #84]	@ (70002f1c <PCD_EP_OutSetupPacket_int+0x88>)
70002ec6:	4293      	cmp	r3, r2
70002ec8:	d90e      	bls.n	70002ee8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
70002eca:	68bb      	ldr	r3, [r7, #8]
70002ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70002ed0:	2b00      	cmp	r3, #0
70002ed2:	d009      	beq.n	70002ee8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
70002ed4:	683b      	ldr	r3, [r7, #0]
70002ed6:	015a      	lsls	r2, r3, #5
70002ed8:	693b      	ldr	r3, [r7, #16]
70002eda:	4413      	add	r3, r2
70002edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002ee0:	461a      	mov	r2, r3
70002ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70002ee6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
70002ee8:	6878      	ldr	r0, [r7, #4]
70002eea:	f004 fa35 	bl	70007358 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
70002eee:	68fb      	ldr	r3, [r7, #12]
70002ef0:	4a0a      	ldr	r2, [pc, #40]	@ (70002f1c <PCD_EP_OutSetupPacket_int+0x88>)
70002ef2:	4293      	cmp	r3, r2
70002ef4:	d90c      	bls.n	70002f10 <PCD_EP_OutSetupPacket_int+0x7c>
70002ef6:	687b      	ldr	r3, [r7, #4]
70002ef8:	799b      	ldrb	r3, [r3, #6]
70002efa:	2b01      	cmp	r3, #1
70002efc:	d108      	bne.n	70002f10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
70002efe:	687b      	ldr	r3, [r7, #4]
70002f00:	6818      	ldr	r0, [r3, #0]
70002f02:	687b      	ldr	r3, [r7, #4]
70002f04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70002f08:	461a      	mov	r2, r3
70002f0a:	2101      	movs	r1, #1
70002f0c:	f002 ff8a 	bl	70005e24 <USB_EP0_OutStart>
  }

  return HAL_OK;
70002f10:	2300      	movs	r3, #0
}
70002f12:	4618      	mov	r0, r3
70002f14:	3718      	adds	r7, #24
70002f16:	46bd      	mov	sp, r7
70002f18:	bd80      	pop	{r7, pc}
70002f1a:	bf00      	nop
70002f1c:	4f54300a 	.word	0x4f54300a

70002f20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
70002f20:	b480      	push	{r7}
70002f22:	b083      	sub	sp, #12
70002f24:	af00      	add	r7, sp, #0
70002f26:	6078      	str	r0, [r7, #4]
70002f28:	460b      	mov	r3, r1
70002f2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
70002f2c:	bf00      	nop
70002f2e:	370c      	adds	r7, #12
70002f30:	46bd      	mov	sp, r7
70002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
70002f36:	4770      	bx	lr

70002f38 <HAL_PWR_ConfigPVD>:
  *         configure will replace a possible previous configuration done through
  *         HAL_PWREx_ConfigAVD.
  * @retval None.
  */
void HAL_PWR_ConfigPVD(const PWR_PVDTypeDef *sConfigPVD)
{
70002f38:	b480      	push	{r7}
70002f3a:	b083      	sub	sp, #12
70002f3c:	af00      	add	r7, sp, #0
70002f3e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
70002f40:	687b      	ldr	r3, [r7, #4]
70002f42:	2b00      	cmp	r3, #0
70002f44:	d069      	beq.n	7000301a <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
70002f46:	4b38      	ldr	r3, [pc, #224]	@ (70003028 <HAL_PWR_ConfigPVD+0xf0>)
70002f48:	681b      	ldr	r3, [r3, #0]
70002f4a:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
70002f4e:	687b      	ldr	r3, [r7, #4]
70002f50:	681b      	ldr	r3, [r3, #0]
70002f52:	4935      	ldr	r1, [pc, #212]	@ (70003028 <HAL_PWR_ConfigPVD+0xf0>)
70002f54:	4313      	orrs	r3, r2
70002f56:	600b      	str	r3, [r1, #0]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
70002f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70002f60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
70002f68:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
70002f6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70002f74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
70002f7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
70002f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002f84:	681b      	ldr	r3, [r3, #0]
70002f86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002f8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
70002f8e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
70002f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002f94:	685b      	ldr	r3, [r3, #4]
70002f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
70002f9e:	6053      	str	r3, [r2, #4]

  /* Configure the PVD in interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
70002fa0:	687b      	ldr	r3, [r7, #4]
70002fa2:	685b      	ldr	r3, [r3, #4]
70002fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70002fa8:	2b00      	cmp	r3, #0
70002faa:	d009      	beq.n	70002fc0 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
70002fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70002fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70002fbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the PVD in event mode */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
70002fc0:	687b      	ldr	r3, [r7, #4]
70002fc2:	685b      	ldr	r3, [r3, #4]
70002fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70002fc8:	2b00      	cmp	r3, #0
70002fca:	d009      	beq.n	70002fe0 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
70002fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70002fd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70002fdc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  }

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
70002fe0:	687b      	ldr	r3, [r7, #4]
70002fe2:	685b      	ldr	r3, [r3, #4]
70002fe4:	f003 0301 	and.w	r3, r3, #1
70002fe8:	2b00      	cmp	r3, #0
70002fea:	d007      	beq.n	70002ffc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
70002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
70002ff0:	681b      	ldr	r3, [r3, #0]
70002ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70002ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70002ffa:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
70002ffc:	687b      	ldr	r3, [r7, #4]
70002ffe:	685b      	ldr	r3, [r3, #4]
70003000:	f003 0302 	and.w	r3, r3, #2
70003004:	2b00      	cmp	r3, #0
70003006:	d009      	beq.n	7000301c <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
70003008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
7000300c:	685b      	ldr	r3, [r3, #4]
7000300e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
70003012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70003016:	6053      	str	r3, [r2, #4]
70003018:	e000      	b.n	7000301c <HAL_PWR_ConfigPVD+0xe4>
    return;
7000301a:	bf00      	nop
  }
}
7000301c:	370c      	adds	r7, #12
7000301e:	46bd      	mov	sp, r7
70003020:	f85d 7b04 	ldr.w	r7, [sp], #4
70003024:	4770      	bx	lr
70003026:	bf00      	nop
70003028:	58024800 	.word	0x58024800

7000302c <HAL_PWR_EnablePVD>:
/**
  * @brief  Enable the programmable voltage detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD(void)
{
7000302c:	b480      	push	{r7}
7000302e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_PVDE);
70003030:	4b05      	ldr	r3, [pc, #20]	@ (70003048 <HAL_PWR_EnablePVD+0x1c>)
70003032:	681b      	ldr	r3, [r3, #0]
70003034:	4a04      	ldr	r2, [pc, #16]	@ (70003048 <HAL_PWR_EnablePVD+0x1c>)
70003036:	f043 0310 	orr.w	r3, r3, #16
7000303a:	6013      	str	r3, [r2, #0]
}
7000303c:	bf00      	nop
7000303e:	46bd      	mov	sp, r7
70003040:	f85d 7b04 	ldr.w	r7, [sp], #4
70003044:	4770      	bx	lr
70003046:	bf00      	nop
70003048:	58024800 	.word	0x58024800

7000304c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
7000304c:	b580      	push	{r7, lr}
7000304e:	b088      	sub	sp, #32
70003050:	af00      	add	r7, sp, #0
70003052:	6078      	str	r0, [r7, #4]
  uint32_t pllsrc;
  uint32_t pllrdy;
  uint32_t tmpreg1;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
70003054:	687b      	ldr	r3, [r7, #4]
70003056:	2b00      	cmp	r3, #0
70003058:	d101      	bne.n	7000305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
7000305a:	2301      	movs	r3, #1
7000305c:	e328      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
7000305e:	4b97      	ldr	r3, [pc, #604]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003060:	691b      	ldr	r3, [r3, #16]
70003062:	f003 0338 	and.w	r3, r3, #56	@ 0x38
70003066:	61fb      	str	r3, [r7, #28]
  pllsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
70003068:	4b94      	ldr	r3, [pc, #592]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000306a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7000306c:	f003 0303 	and.w	r3, r3, #3
70003070:	61bb      	str	r3, [r7, #24]
  pllrdy = RCC->CR & (RCC_CR_PLL1RDY | RCC_CR_PLL2RDY | RCC_CR_PLL3RDY);
70003072:	4b92      	ldr	r3, [pc, #584]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003074:	681b      	ldr	r3, [r3, #0]
70003076:	f003 5328 	and.w	r3, r3, #704643072	@ 0x2a000000
7000307a:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
7000307c:	687b      	ldr	r3, [r7, #4]
7000307e:	681b      	ldr	r3, [r3, #0]
70003080:	f003 0301 	and.w	r3, r3, #1
70003084:	2b00      	cmp	r3, #0
70003086:	f000 809c 	beq.w	700031c2 <HAL_RCC_OscConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
7000308a:	69fb      	ldr	r3, [r7, #28]
7000308c:	2b10      	cmp	r3, #16
7000308e:	d005      	beq.n	7000309c <HAL_RCC_OscConfig+0x50>
70003090:	697b      	ldr	r3, [r7, #20]
70003092:	2b00      	cmp	r3, #0
70003094:	d009      	beq.n	700030aa <HAL_RCC_OscConfig+0x5e>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSE)))
70003096:	69bb      	ldr	r3, [r7, #24]
70003098:	2b02      	cmp	r3, #2
7000309a:	d106      	bne.n	700030aa <HAL_RCC_OscConfig+0x5e>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
7000309c:	687b      	ldr	r3, [r7, #4]
7000309e:	685b      	ldr	r3, [r3, #4]
700030a0:	2b00      	cmp	r3, #0
700030a2:	f040 808e 	bne.w	700031c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
700030a6:	2301      	movs	r3, #1
700030a8:	e302      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
700030aa:	687b      	ldr	r3, [r7, #4]
700030ac:	685b      	ldr	r3, [r3, #4]
700030ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
700030b2:	d106      	bne.n	700030c2 <HAL_RCC_OscConfig+0x76>
700030b4:	4b81      	ldr	r3, [pc, #516]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030b6:	681b      	ldr	r3, [r3, #0]
700030b8:	4a80      	ldr	r2, [pc, #512]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700030be:	6013      	str	r3, [r2, #0]
700030c0:	e058      	b.n	70003174 <HAL_RCC_OscConfig+0x128>
700030c2:	687b      	ldr	r3, [r7, #4]
700030c4:	685b      	ldr	r3, [r3, #4]
700030c6:	2b00      	cmp	r3, #0
700030c8:	d112      	bne.n	700030f0 <HAL_RCC_OscConfig+0xa4>
700030ca:	4b7c      	ldr	r3, [pc, #496]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030cc:	681b      	ldr	r3, [r3, #0]
700030ce:	4a7b      	ldr	r2, [pc, #492]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
700030d4:	6013      	str	r3, [r2, #0]
700030d6:	4b79      	ldr	r3, [pc, #484]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030d8:	681b      	ldr	r3, [r3, #0]
700030da:	4a78      	ldr	r2, [pc, #480]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030dc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
700030e0:	6013      	str	r3, [r2, #0]
700030e2:	4b76      	ldr	r3, [pc, #472]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030e4:	681b      	ldr	r3, [r3, #0]
700030e6:	4a75      	ldr	r2, [pc, #468]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
700030ec:	6013      	str	r3, [r2, #0]
700030ee:	e041      	b.n	70003174 <HAL_RCC_OscConfig+0x128>
700030f0:	687b      	ldr	r3, [r7, #4]
700030f2:	685b      	ldr	r3, [r3, #4]
700030f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
700030f8:	d112      	bne.n	70003120 <HAL_RCC_OscConfig+0xd4>
700030fa:	4b70      	ldr	r3, [pc, #448]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700030fc:	681b      	ldr	r3, [r3, #0]
700030fe:	4a6f      	ldr	r2, [pc, #444]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
70003104:	6013      	str	r3, [r2, #0]
70003106:	4b6d      	ldr	r3, [pc, #436]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003108:	681b      	ldr	r3, [r3, #0]
7000310a:	4a6c      	ldr	r2, [pc, #432]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000310c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
70003110:	6013      	str	r3, [r2, #0]
70003112:	4b6a      	ldr	r3, [pc, #424]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003114:	681b      	ldr	r3, [r3, #0]
70003116:	4a69      	ldr	r2, [pc, #420]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000311c:	6013      	str	r3, [r2, #0]
7000311e:	e029      	b.n	70003174 <HAL_RCC_OscConfig+0x128>
70003120:	687b      	ldr	r3, [r7, #4]
70003122:	685b      	ldr	r3, [r3, #4]
70003124:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
70003128:	d112      	bne.n	70003150 <HAL_RCC_OscConfig+0x104>
7000312a:	4b64      	ldr	r3, [pc, #400]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000312c:	681b      	ldr	r3, [r3, #0]
7000312e:	4a63      	ldr	r2, [pc, #396]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
70003134:	6013      	str	r3, [r2, #0]
70003136:	4b61      	ldr	r3, [pc, #388]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003138:	681b      	ldr	r3, [r3, #0]
7000313a:	4a60      	ldr	r2, [pc, #384]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000313c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70003140:	6013      	str	r3, [r2, #0]
70003142:	4b5e      	ldr	r3, [pc, #376]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003144:	681b      	ldr	r3, [r3, #0]
70003146:	4a5d      	ldr	r2, [pc, #372]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000314c:	6013      	str	r3, [r2, #0]
7000314e:	e011      	b.n	70003174 <HAL_RCC_OscConfig+0x128>
70003150:	4b5a      	ldr	r3, [pc, #360]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003152:	681b      	ldr	r3, [r3, #0]
70003154:	4a59      	ldr	r2, [pc, #356]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
7000315a:	6013      	str	r3, [r2, #0]
7000315c:	4b57      	ldr	r3, [pc, #348]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000315e:	681b      	ldr	r3, [r3, #0]
70003160:	4a56      	ldr	r2, [pc, #344]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
70003166:	6013      	str	r3, [r2, #0]
70003168:	4b54      	ldr	r3, [pc, #336]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000316a:	681b      	ldr	r3, [r3, #0]
7000316c:	4a53      	ldr	r2, [pc, #332]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000316e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
70003172:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
70003174:	f7fe f92e 	bl	700013d4 <HAL_GetTick>
70003178:	6138      	str	r0, [r7, #16]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
7000317a:	687b      	ldr	r3, [r7, #4]
7000317c:	685b      	ldr	r3, [r3, #4]
7000317e:	2b00      	cmp	r3, #0
70003180:	d019      	beq.n	700031b6 <HAL_RCC_OscConfig+0x16a>
      {
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
70003182:	e008      	b.n	70003196 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
70003184:	f7fe f926 	bl	700013d4 <HAL_GetTick>
70003188:	4602      	mov	r2, r0
7000318a:	693b      	ldr	r3, [r7, #16]
7000318c:	1ad3      	subs	r3, r2, r3
7000318e:	2b64      	cmp	r3, #100	@ 0x64
70003190:	d901      	bls.n	70003196 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
70003192:	2303      	movs	r3, #3
70003194:	e28c      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
70003196:	4b49      	ldr	r3, [pc, #292]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003198:	681b      	ldr	r3, [r3, #0]
7000319a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
7000319e:	2b00      	cmp	r3, #0
700031a0:	d0f0      	beq.n	70003184 <HAL_RCC_OscConfig+0x138>
700031a2:	e00e      	b.n	700031c2 <HAL_RCC_OscConfig+0x176>
      else
      {
        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
700031a4:	f7fe f916 	bl	700013d4 <HAL_GetTick>
700031a8:	4602      	mov	r2, r0
700031aa:	693b      	ldr	r3, [r7, #16]
700031ac:	1ad3      	subs	r3, r2, r3
700031ae:	2b64      	cmp	r3, #100	@ 0x64
700031b0:	d901      	bls.n	700031b6 <HAL_RCC_OscConfig+0x16a>
          {
            return HAL_TIMEOUT;
700031b2:	2303      	movs	r3, #3
700031b4:	e27c      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
700031b6:	4b41      	ldr	r3, [pc, #260]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700031b8:	681b      	ldr	r3, [r3, #0]
700031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
700031be:	2b00      	cmp	r3, #0
700031c0:	d1f0      	bne.n	700031a4 <HAL_RCC_OscConfig+0x158>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
700031c2:	687b      	ldr	r3, [r7, #4]
700031c4:	681b      	ldr	r3, [r3, #0]
700031c6:	f003 0302 	and.w	r3, r3, #2
700031ca:	2b00      	cmp	r3, #0
700031cc:	f000 809e 	beq.w	7000330c <HAL_RCC_OscConfig+0x2c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL1 source when PLL1 is selected as system clock */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
700031d0:	69fb      	ldr	r3, [r7, #28]
700031d2:	2b00      	cmp	r3, #0
700031d4:	d005      	beq.n	700031e2 <HAL_RCC_OscConfig+0x196>
700031d6:	697b      	ldr	r3, [r7, #20]
700031d8:	2b00      	cmp	r3, #0
700031da:	d047      	beq.n	7000326c <HAL_RCC_OscConfig+0x220>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_HSI)))
700031dc:	69bb      	ldr	r3, [r7, #24]
700031de:	2b00      	cmp	r3, #0
700031e0:	d144      	bne.n	7000326c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
700031e2:	687b      	ldr	r3, [r7, #4]
700031e4:	68db      	ldr	r3, [r3, #12]
700031e6:	2b00      	cmp	r3, #0
700031e8:	d101      	bne.n	700031ee <HAL_RCC_OscConfig+0x1a2>
      {
        return HAL_ERROR;
700031ea:	2301      	movs	r3, #1
700031ec:	e260      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      }
      /* Otherwise, calibration is allowed, divider update also unless used for any enabled PLL */
      else
      {
        /* HSI must not be used as reference clock for any enabled PLL clock source */
        tmpreg1 = (RCC->CR & RCC_CR_HSIDIV);
700031ee:	4b33      	ldr	r3, [pc, #204]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
700031f0:	681b      	ldr	r3, [r3, #0]
700031f2:	f003 0318 	and.w	r3, r3, #24
700031f6:	60fb      	str	r3, [r7, #12]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
700031f8:	69bb      	ldr	r3, [r7, #24]
700031fa:	2b00      	cmp	r3, #0
700031fc:	d109      	bne.n	70003212 <HAL_RCC_OscConfig+0x1c6>
700031fe:	697b      	ldr	r3, [r7, #20]
70003200:	2b00      	cmp	r3, #0
70003202:	d006      	beq.n	70003212 <HAL_RCC_OscConfig+0x1c6>
            (tmpreg1 != RCC_OscInitStruct->HSIDiv))
70003204:	687b      	ldr	r3, [r7, #4]
70003206:	691b      	ldr	r3, [r3, #16]
        if ((pllsrc == RCC_PLLSOURCE_HSI) && (pllrdy != 0U) && \
70003208:	68fa      	ldr	r2, [r7, #12]
7000320a:	429a      	cmp	r2, r3
7000320c:	d001      	beq.n	70003212 <HAL_RCC_OscConfig+0x1c6>
        {
          return HAL_ERROR;
7000320e:	2301      	movs	r3, #1
70003210:	e24e      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        }

        assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

        /* Set the Internal High Speed oscillator new divider */
        __HAL_RCC_HSI_CONFIG(RCC_HSI_ON | RCC_OscInitStruct->HSIDiv);
70003212:	4b2a      	ldr	r3, [pc, #168]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003214:	681b      	ldr	r3, [r3, #0]
70003216:	f023 0219 	bic.w	r2, r3, #25
7000321a:	687b      	ldr	r3, [r7, #4]
7000321c:	691b      	ldr	r3, [r3, #16]
7000321e:	4313      	orrs	r3, r2
70003220:	4a26      	ldr	r2, [pc, #152]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003222:	f043 0301 	orr.w	r3, r3, #1
70003226:	6013      	str	r3, [r2, #0]

        if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
70003228:	69fb      	ldr	r3, [r7, #28]
7000322a:	2b00      	cmp	r3, #0
7000322c:	d109      	bne.n	70003242 <HAL_RCC_OscConfig+0x1f6>
        {
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
7000322e:	4b23      	ldr	r3, [pc, #140]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003230:	681b      	ldr	r3, [r3, #0]
70003232:	08db      	lsrs	r3, r3, #3
70003234:	f003 0303 	and.w	r3, r3, #3
70003238:	4a21      	ldr	r2, [pc, #132]	@ (700032c0 <HAL_RCC_OscConfig+0x274>)
7000323a:	fa22 f303 	lsr.w	r3, r2, r3
7000323e:	4a21      	ldr	r2, [pc, #132]	@ (700032c4 <HAL_RCC_OscConfig+0x278>)
70003240:	6013      	str	r3, [r2, #0]
        }
        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
70003242:	4b21      	ldr	r3, [pc, #132]	@ (700032c8 <HAL_RCC_OscConfig+0x27c>)
70003244:	681b      	ldr	r3, [r3, #0]
70003246:	4618      	mov	r0, r3
70003248:	f7fe f874 	bl	70001334 <HAL_InitTick>
7000324c:	4603      	mov	r3, r0
7000324e:	2b00      	cmp	r3, #0
70003250:	d001      	beq.n	70003256 <HAL_RCC_OscConfig+0x20a>
        {
          return HAL_ERROR;
70003252:	2301      	movs	r3, #1
70003254:	e22c      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        }
      }
      /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
      __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
70003256:	4b19      	ldr	r3, [pc, #100]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003258:	685b      	ldr	r3, [r3, #4]
7000325a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
7000325e:	687b      	ldr	r3, [r7, #4]
70003260:	695b      	ldr	r3, [r3, #20]
70003262:	061b      	lsls	r3, r3, #24
70003264:	4915      	ldr	r1, [pc, #84]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003266:	4313      	orrs	r3, r2
70003268:	604b      	str	r3, [r1, #4]
7000326a:	e04f      	b.n	7000330c <HAL_RCC_OscConfig+0x2c0>
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
7000326c:	687b      	ldr	r3, [r7, #4]
7000326e:	68db      	ldr	r3, [r3, #12]
70003270:	2b00      	cmp	r3, #0
70003272:	d032      	beq.n	700032da <HAL_RCC_OscConfig+0x28e>
      {
        /* Enable the Internal High Speed oscillator */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState | RCC_OscInitStruct->HSIDiv);
70003274:	4b11      	ldr	r3, [pc, #68]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003276:	681b      	ldr	r3, [r3, #0]
70003278:	f023 0219 	bic.w	r2, r3, #25
7000327c:	687b      	ldr	r3, [r7, #4]
7000327e:	68d9      	ldr	r1, [r3, #12]
70003280:	687b      	ldr	r3, [r7, #4]
70003282:	691b      	ldr	r3, [r3, #16]
70003284:	430b      	orrs	r3, r1
70003286:	490d      	ldr	r1, [pc, #52]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
70003288:	4313      	orrs	r3, r2
7000328a:	600b      	str	r3, [r1, #0]

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
7000328c:	4b0b      	ldr	r3, [pc, #44]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000328e:	685b      	ldr	r3, [r3, #4]
70003290:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
70003294:	687b      	ldr	r3, [r7, #4]
70003296:	695b      	ldr	r3, [r3, #20]
70003298:	061b      	lsls	r3, r3, #24
7000329a:	4908      	ldr	r1, [pc, #32]	@ (700032bc <HAL_RCC_OscConfig+0x270>)
7000329c:	4313      	orrs	r3, r2
7000329e:	604b      	str	r3, [r1, #4]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
700032a0:	f7fe f898 	bl	700013d4 <HAL_GetTick>
700032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
700032a6:	e011      	b.n	700032cc <HAL_RCC_OscConfig+0x280>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
700032a8:	f7fe f894 	bl	700013d4 <HAL_GetTick>
700032ac:	4602      	mov	r2, r0
700032ae:	693b      	ldr	r3, [r7, #16]
700032b0:	1ad3      	subs	r3, r2, r3
700032b2:	2b01      	cmp	r3, #1
700032b4:	d90a      	bls.n	700032cc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
700032b6:	2303      	movs	r3, #3
700032b8:	e1fa      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
700032ba:	bf00      	nop
700032bc:	58024400 	.word	0x58024400
700032c0:	03d09000 	.word	0x03d09000
700032c4:	24000004 	.word	0x24000004
700032c8:	2400012c 	.word	0x2400012c
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
700032cc:	4b95      	ldr	r3, [pc, #596]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700032ce:	681b      	ldr	r3, [r3, #0]
700032d0:	f003 0304 	and.w	r3, r3, #4
700032d4:	2b00      	cmp	r3, #0
700032d6:	d0e7      	beq.n	700032a8 <HAL_RCC_OscConfig+0x25c>
700032d8:	e018      	b.n	7000330c <HAL_RCC_OscConfig+0x2c0>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
700032da:	4b92      	ldr	r3, [pc, #584]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700032dc:	681b      	ldr	r3, [r3, #0]
700032de:	4a91      	ldr	r2, [pc, #580]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700032e0:	f023 0301 	bic.w	r3, r3, #1
700032e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
700032e6:	f7fe f875 	bl	700013d4 <HAL_GetTick>
700032ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
700032ec:	e008      	b.n	70003300 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
700032ee:	f7fe f871 	bl	700013d4 <HAL_GetTick>
700032f2:	4602      	mov	r2, r0
700032f4:	693b      	ldr	r3, [r7, #16]
700032f6:	1ad3      	subs	r3, r2, r3
700032f8:	2b01      	cmp	r3, #1
700032fa:	d901      	bls.n	70003300 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
700032fc:	2303      	movs	r3, #3
700032fe:	e1d7      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
70003300:	4b88      	ldr	r3, [pc, #544]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003302:	681b      	ldr	r3, [r3, #0]
70003304:	f003 0304 	and.w	r3, r3, #4
70003308:	2b00      	cmp	r3, #0
7000330a:	d1f0      	bne.n	700032ee <HAL_RCC_OscConfig+0x2a2>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
7000330c:	687b      	ldr	r3, [r7, #4]
7000330e:	681b      	ldr	r3, [r3, #0]
70003310:	f003 0310 	and.w	r3, r3, #16
70003314:	2b00      	cmp	r3, #0
70003316:	d045      	beq.n	700033a4 <HAL_RCC_OscConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));

    /* When the CSI is used as system clock it will not disabled */
    if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
70003318:	69fb      	ldr	r3, [r7, #28]
7000331a:	2b08      	cmp	r3, #8
7000331c:	d005      	beq.n	7000332a <HAL_RCC_OscConfig+0x2de>
7000331e:	697b      	ldr	r3, [r7, #20]
70003320:	2b00      	cmp	r3, #0
70003322:	d008      	beq.n	70003336 <HAL_RCC_OscConfig+0x2ea>
        ((pllrdy != 0U) && (pllsrc == RCC_PLLSOURCE_CSI)))
70003324:	69bb      	ldr	r3, [r7, #24]
70003326:	2b01      	cmp	r3, #1
70003328:	d105      	bne.n	70003336 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if (RCC_OscInitStruct->CSIState == RCC_CSI_OFF)
7000332a:	687b      	ldr	r3, [r7, #4]
7000332c:	6a1b      	ldr	r3, [r3, #32]
7000332e:	2b00      	cmp	r3, #0
70003330:	d138      	bne.n	700033a4 <HAL_RCC_OscConfig+0x358>
      {
        return HAL_ERROR;
70003332:	2301      	movs	r3, #1
70003334:	e1bc      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
70003336:	687b      	ldr	r3, [r7, #4]
70003338:	6a1b      	ldr	r3, [r3, #32]
7000333a:	2b00      	cmp	r3, #0
7000333c:	d019      	beq.n	70003372 <HAL_RCC_OscConfig+0x326>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
7000333e:	4b79      	ldr	r3, [pc, #484]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003340:	681b      	ldr	r3, [r3, #0]
70003342:	4a78      	ldr	r2, [pc, #480]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
70003348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
7000334a:	f7fe f843 	bl	700013d4 <HAL_GetTick>
7000334e:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
70003350:	e008      	b.n	70003364 <HAL_RCC_OscConfig+0x318>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
70003352:	f7fe f83f 	bl	700013d4 <HAL_GetTick>
70003356:	4602      	mov	r2, r0
70003358:	693b      	ldr	r3, [r7, #16]
7000335a:	1ad3      	subs	r3, r2, r3
7000335c:	2b01      	cmp	r3, #1
7000335e:	d901      	bls.n	70003364 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
70003360:	2303      	movs	r3, #3
70003362:	e1a5      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
70003364:	4b6f      	ldr	r3, [pc, #444]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003366:	681b      	ldr	r3, [r3, #0]
70003368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000336c:	2b00      	cmp	r3, #0
7000336e:	d0f0      	beq.n	70003352 <HAL_RCC_OscConfig+0x306>
70003370:	e018      	b.n	700033a4 <HAL_RCC_OscConfig+0x358>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
70003372:	4b6c      	ldr	r3, [pc, #432]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003374:	681b      	ldr	r3, [r3, #0]
70003376:	4a6b      	ldr	r2, [pc, #428]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
7000337c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
7000337e:	f7fe f829 	bl	700013d4 <HAL_GetTick>
70003382:	6138      	str	r0, [r7, #16]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
70003384:	e008      	b.n	70003398 <HAL_RCC_OscConfig+0x34c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
70003386:	f7fe f825 	bl	700013d4 <HAL_GetTick>
7000338a:	4602      	mov	r2, r0
7000338c:	693b      	ldr	r3, [r7, #16]
7000338e:	1ad3      	subs	r3, r2, r3
70003390:	2b01      	cmp	r3, #1
70003392:	d901      	bls.n	70003398 <HAL_RCC_OscConfig+0x34c>
          {
            return HAL_TIMEOUT;
70003394:	2303      	movs	r3, #3
70003396:	e18b      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
70003398:	4b62      	ldr	r3, [pc, #392]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
7000339a:	681b      	ldr	r3, [r3, #0]
7000339c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700033a0:	2b00      	cmp	r3, #0
700033a2:	d1f0      	bne.n	70003386 <HAL_RCC_OscConfig+0x33a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
700033a4:	687b      	ldr	r3, [r7, #4]
700033a6:	681b      	ldr	r3, [r3, #0]
700033a8:	f003 0308 	and.w	r3, r3, #8
700033ac:	2b00      	cmp	r3, #0
700033ae:	d036      	beq.n	7000341e <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
700033b0:	687b      	ldr	r3, [r7, #4]
700033b2:	699b      	ldr	r3, [r3, #24]
700033b4:	2b00      	cmp	r3, #0
700033b6:	d019      	beq.n	700033ec <HAL_RCC_OscConfig+0x3a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
700033b8:	4b5a      	ldr	r3, [pc, #360]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700033ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700033bc:	4a59      	ldr	r2, [pc, #356]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700033be:	f043 0301 	orr.w	r3, r3, #1
700033c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
700033c4:	f7fe f806 	bl	700013d4 <HAL_GetTick>
700033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
700033ca:	e008      	b.n	700033de <HAL_RCC_OscConfig+0x392>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
700033cc:	f7fe f802 	bl	700013d4 <HAL_GetTick>
700033d0:	4602      	mov	r2, r0
700033d2:	693b      	ldr	r3, [r7, #16]
700033d4:	1ad3      	subs	r3, r2, r3
700033d6:	2b01      	cmp	r3, #1
700033d8:	d901      	bls.n	700033de <HAL_RCC_OscConfig+0x392>
        {
          return HAL_TIMEOUT;
700033da:	2303      	movs	r3, #3
700033dc:	e168      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
700033de:	4b51      	ldr	r3, [pc, #324]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700033e2:	f003 0302 	and.w	r3, r3, #2
700033e6:	2b00      	cmp	r3, #0
700033e8:	d0f0      	beq.n	700033cc <HAL_RCC_OscConfig+0x380>
700033ea:	e018      	b.n	7000341e <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
700033ec:	4b4d      	ldr	r3, [pc, #308]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700033ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
700033f0:	4a4c      	ldr	r2, [pc, #304]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700033f2:	f023 0301 	bic.w	r3, r3, #1
700033f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
700033f8:	f7fd ffec 	bl	700013d4 <HAL_GetTick>
700033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
700033fe:	e008      	b.n	70003412 <HAL_RCC_OscConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
70003400:	f7fd ffe8 	bl	700013d4 <HAL_GetTick>
70003404:	4602      	mov	r2, r0
70003406:	693b      	ldr	r3, [r7, #16]
70003408:	1ad3      	subs	r3, r2, r3
7000340a:	2b01      	cmp	r3, #1
7000340c:	d901      	bls.n	70003412 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
7000340e:	2303      	movs	r3, #3
70003410:	e14e      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
70003412:	4b44      	ldr	r3, [pc, #272]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70003416:	f003 0302 	and.w	r3, r3, #2
7000341a:	2b00      	cmp	r3, #0
7000341c:	d1f0      	bne.n	70003400 <HAL_RCC_OscConfig+0x3b4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
7000341e:	687b      	ldr	r3, [r7, #4]
70003420:	681b      	ldr	r3, [r3, #0]
70003422:	f003 0320 	and.w	r3, r3, #32
70003426:	2b00      	cmp	r3, #0
70003428:	d036      	beq.n	70003498 <HAL_RCC_OscConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
7000342a:	687b      	ldr	r3, [r7, #4]
7000342c:	69db      	ldr	r3, [r3, #28]
7000342e:	2b00      	cmp	r3, #0
70003430:	d019      	beq.n	70003466 <HAL_RCC_OscConfig+0x41a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
70003432:	4b3c      	ldr	r3, [pc, #240]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003434:	681b      	ldr	r3, [r3, #0]
70003436:	4a3b      	ldr	r2, [pc, #236]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003438:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
7000343c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
7000343e:	f7fd ffc9 	bl	700013d4 <HAL_GetTick>
70003442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
70003444:	e008      	b.n	70003458 <HAL_RCC_OscConfig+0x40c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
70003446:	f7fd ffc5 	bl	700013d4 <HAL_GetTick>
7000344a:	4602      	mov	r2, r0
7000344c:	693b      	ldr	r3, [r7, #16]
7000344e:	1ad3      	subs	r3, r2, r3
70003450:	2b01      	cmp	r3, #1
70003452:	d901      	bls.n	70003458 <HAL_RCC_OscConfig+0x40c>
        {
          return HAL_TIMEOUT;
70003454:	2303      	movs	r3, #3
70003456:	e12b      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
70003458:	4b32      	ldr	r3, [pc, #200]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
7000345a:	681b      	ldr	r3, [r3, #0]
7000345c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70003460:	2b00      	cmp	r3, #0
70003462:	d0f0      	beq.n	70003446 <HAL_RCC_OscConfig+0x3fa>
70003464:	e018      	b.n	70003498 <HAL_RCC_OscConfig+0x44c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
70003466:	4b2f      	ldr	r3, [pc, #188]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003468:	681b      	ldr	r3, [r3, #0]
7000346a:	4a2e      	ldr	r2, [pc, #184]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
7000346c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
70003470:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
70003472:	f7fd ffaf 	bl	700013d4 <HAL_GetTick>
70003476:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
70003478:	e008      	b.n	7000348c <HAL_RCC_OscConfig+0x440>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
7000347a:	f7fd ffab 	bl	700013d4 <HAL_GetTick>
7000347e:	4602      	mov	r2, r0
70003480:	693b      	ldr	r3, [r7, #16]
70003482:	1ad3      	subs	r3, r2, r3
70003484:	2b01      	cmp	r3, #1
70003486:	d901      	bls.n	7000348c <HAL_RCC_OscConfig+0x440>
        {
          return HAL_TIMEOUT;
70003488:	2303      	movs	r3, #3
7000348a:	e111      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
7000348c:	4b25      	ldr	r3, [pc, #148]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
7000348e:	681b      	ldr	r3, [r3, #0]
70003490:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70003494:	2b00      	cmp	r3, #0
70003496:	d1f0      	bne.n	7000347a <HAL_RCC_OscConfig+0x42e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
70003498:	687b      	ldr	r3, [r7, #4]
7000349a:	681b      	ldr	r3, [r3, #0]
7000349c:	f003 0304 	and.w	r3, r3, #4
700034a0:	2b00      	cmp	r3, #0
700034a2:	f000 809b 	beq.w	700035dc <HAL_RCC_OscConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
700034a6:	4b20      	ldr	r3, [pc, #128]	@ (70003528 <HAL_RCC_OscConfig+0x4dc>)
700034a8:	681b      	ldr	r3, [r3, #0]
700034aa:	4a1f      	ldr	r2, [pc, #124]	@ (70003528 <HAL_RCC_OscConfig+0x4dc>)
700034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
700034b0:	6013      	str	r3, [r2, #0]

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
700034b2:	687b      	ldr	r3, [r7, #4]
700034b4:	689b      	ldr	r3, [r3, #8]
700034b6:	2b01      	cmp	r3, #1
700034b8:	d106      	bne.n	700034c8 <HAL_RCC_OscConfig+0x47c>
700034ba:	4b1a      	ldr	r3, [pc, #104]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700034be:	4a19      	ldr	r2, [pc, #100]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034c0:	f043 0301 	orr.w	r3, r3, #1
700034c4:	6713      	str	r3, [r2, #112]	@ 0x70
700034c6:	e05a      	b.n	7000357e <HAL_RCC_OscConfig+0x532>
700034c8:	687b      	ldr	r3, [r7, #4]
700034ca:	689b      	ldr	r3, [r3, #8]
700034cc:	2b00      	cmp	r3, #0
700034ce:	d112      	bne.n	700034f6 <HAL_RCC_OscConfig+0x4aa>
700034d0:	4b14      	ldr	r3, [pc, #80]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700034d4:	4a13      	ldr	r2, [pc, #76]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034d6:	f023 0301 	bic.w	r3, r3, #1
700034da:	6713      	str	r3, [r2, #112]	@ 0x70
700034dc:	4b11      	ldr	r3, [pc, #68]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700034e0:	4a10      	ldr	r2, [pc, #64]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
700034e6:	6713      	str	r3, [r2, #112]	@ 0x70
700034e8:	4b0e      	ldr	r3, [pc, #56]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700034ec:	4a0d      	ldr	r2, [pc, #52]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
700034ee:	f023 0304 	bic.w	r3, r3, #4
700034f2:	6713      	str	r3, [r2, #112]	@ 0x70
700034f4:	e043      	b.n	7000357e <HAL_RCC_OscConfig+0x532>
700034f6:	687b      	ldr	r3, [r7, #4]
700034f8:	689b      	ldr	r3, [r3, #8]
700034fa:	2b05      	cmp	r3, #5
700034fc:	d116      	bne.n	7000352c <HAL_RCC_OscConfig+0x4e0>
700034fe:	4b09      	ldr	r3, [pc, #36]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003502:	4a08      	ldr	r2, [pc, #32]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003504:	f043 0304 	orr.w	r3, r3, #4
70003508:	6713      	str	r3, [r2, #112]	@ 0x70
7000350a:	4b06      	ldr	r3, [pc, #24]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
7000350c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000350e:	4a05      	ldr	r2, [pc, #20]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
70003514:	6713      	str	r3, [r2, #112]	@ 0x70
70003516:	4b03      	ldr	r3, [pc, #12]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
70003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000351a:	4a02      	ldr	r2, [pc, #8]	@ (70003524 <HAL_RCC_OscConfig+0x4d8>)
7000351c:	f043 0301 	orr.w	r3, r3, #1
70003520:	6713      	str	r3, [r2, #112]	@ 0x70
70003522:	e02c      	b.n	7000357e <HAL_RCC_OscConfig+0x532>
70003524:	58024400 	.word	0x58024400
70003528:	58024800 	.word	0x58024800
7000352c:	687b      	ldr	r3, [r7, #4]
7000352e:	689b      	ldr	r3, [r3, #8]
70003530:	2b85      	cmp	r3, #133	@ 0x85
70003532:	d112      	bne.n	7000355a <HAL_RCC_OscConfig+0x50e>
70003534:	4b60      	ldr	r3, [pc, #384]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003538:	4a5f      	ldr	r2, [pc, #380]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000353a:	f043 0304 	orr.w	r3, r3, #4
7000353e:	6713      	str	r3, [r2, #112]	@ 0x70
70003540:	4b5d      	ldr	r3, [pc, #372]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003544:	4a5c      	ldr	r2, [pc, #368]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
7000354a:	6713      	str	r3, [r2, #112]	@ 0x70
7000354c:	4b5a      	ldr	r3, [pc, #360]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000354e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003550:	4a59      	ldr	r2, [pc, #356]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003552:	f043 0301 	orr.w	r3, r3, #1
70003556:	6713      	str	r3, [r2, #112]	@ 0x70
70003558:	e011      	b.n	7000357e <HAL_RCC_OscConfig+0x532>
7000355a:	4b57      	ldr	r3, [pc, #348]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000355c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000355e:	4a56      	ldr	r2, [pc, #344]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003560:	f023 0301 	bic.w	r3, r3, #1
70003564:	6713      	str	r3, [r2, #112]	@ 0x70
70003566:	4b54      	ldr	r3, [pc, #336]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000356a:	4a53      	ldr	r2, [pc, #332]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000356c:	f023 0304 	bic.w	r3, r3, #4
70003570:	6713      	str	r3, [r2, #112]	@ 0x70
70003572:	4b51      	ldr	r3, [pc, #324]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003576:	4a50      	ldr	r2, [pc, #320]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003578:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
7000357c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
7000357e:	687b      	ldr	r3, [r7, #4]
70003580:	689b      	ldr	r3, [r3, #8]
70003582:	2b00      	cmp	r3, #0
70003584:	d015      	beq.n	700035b2 <HAL_RCC_OscConfig+0x566>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
70003586:	f7fd ff25 	bl	700013d4 <HAL_GetTick>
7000358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
7000358c:	e00a      	b.n	700035a4 <HAL_RCC_OscConfig+0x558>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
7000358e:	f7fd ff21 	bl	700013d4 <HAL_GetTick>
70003592:	4602      	mov	r2, r0
70003594:	693b      	ldr	r3, [r7, #16]
70003596:	1ad3      	subs	r3, r2, r3
70003598:	f241 3288 	movw	r2, #5000	@ 0x1388
7000359c:	4293      	cmp	r3, r2
7000359e:	d901      	bls.n	700035a4 <HAL_RCC_OscConfig+0x558>
        {
          return HAL_TIMEOUT;
700035a0:	2303      	movs	r3, #3
700035a2:	e085      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
700035a4:	4b44      	ldr	r3, [pc, #272]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
700035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700035a8:	f003 0302 	and.w	r3, r3, #2
700035ac:	2b00      	cmp	r3, #0
700035ae:	d0ee      	beq.n	7000358e <HAL_RCC_OscConfig+0x542>
700035b0:	e014      	b.n	700035dc <HAL_RCC_OscConfig+0x590>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
700035b2:	f7fd ff0f 	bl	700013d4 <HAL_GetTick>
700035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
700035b8:	e00a      	b.n	700035d0 <HAL_RCC_OscConfig+0x584>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
700035ba:	f7fd ff0b 	bl	700013d4 <HAL_GetTick>
700035be:	4602      	mov	r2, r0
700035c0:	693b      	ldr	r3, [r7, #16]
700035c2:	1ad3      	subs	r3, r2, r3
700035c4:	f241 3288 	movw	r2, #5000	@ 0x1388
700035c8:	4293      	cmp	r3, r2
700035ca:	d901      	bls.n	700035d0 <HAL_RCC_OscConfig+0x584>
        {
          return HAL_TIMEOUT;
700035cc:	2303      	movs	r3, #3
700035ce:	e06f      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
700035d0:	4b39      	ldr	r3, [pc, #228]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
700035d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700035d4:	f003 0302 	and.w	r3, r3, #2
700035d8:	2b00      	cmp	r3, #0
700035da:	d1ee      	bne.n	700035ba <HAL_RCC_OscConfig+0x56e>

  /*-------------------------------- PLL1 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL1.PLLState));

  if (RCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
700035dc:	687b      	ldr	r3, [r7, #4]
700035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700035e0:	2b00      	cmp	r3, #0
700035e2:	d042      	beq.n	7000366a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
700035e4:	69fb      	ldr	r3, [r7, #28]
700035e6:	2b18      	cmp	r3, #24
700035e8:	d131      	bne.n	7000364e <HAL_RCC_OscConfig+0x602>
    {
      /* No PLL off possible */
      if (RCC_OscInitStruct->PLL1.PLLState == RCC_PLL_OFF)
700035ea:	687b      	ldr	r3, [r7, #4]
700035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700035ee:	2b01      	cmp	r3, #1
700035f0:	d101      	bne.n	700035f6 <HAL_RCC_OscConfig+0x5aa>
      {
        return HAL_ERROR;
700035f2:	2301      	movs	r3, #1
700035f4:	e05c      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        tmpreg1 = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> RCC_PLL1FRACR_FRACN_Pos);
700035f6:	4b30      	ldr	r3, [pc, #192]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
700035f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
700035fa:	08db      	lsrs	r3, r3, #3
700035fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
70003600:	60fb      	str	r3, [r7, #12]

        if (RCC_OscInitStruct->PLL1.PLLFractional != tmpreg1)
70003602:	687b      	ldr	r3, [r7, #4]
70003604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
70003606:	68fa      	ldr	r2, [r7, #12]
70003608:	429a      	cmp	r2, r3
7000360a:	d02e      	beq.n	7000366a <HAL_RCC_OscConfig+0x61e>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL1.PLLFractional));

          /* Disable PLL1FRACLE */
          __HAL_RCC_PLL1_FRACN_DISABLE();
7000360c:	4b2a      	ldr	r3, [pc, #168]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003610:	4a29      	ldr	r2, [pc, #164]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003612:	f023 0301 	bic.w	r3, r3, #1
70003616:	62d3      	str	r3, [r2, #44]	@ 0x2c

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
70003618:	f7fd fedc 	bl	700013d4 <HAL_GetTick>
7000361c:	6138      	str	r0, [r7, #16]

          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
7000361e:	bf00      	nop
70003620:	f7fd fed8 	bl	700013d4 <HAL_GetTick>
70003624:	4602      	mov	r2, r0
70003626:	693b      	ldr	r3, [r7, #16]
70003628:	4293      	cmp	r3, r2
7000362a:	d0f9      	beq.n	70003620 <HAL_RCC_OscConfig+0x5d4>
          {
            /* Do nothing */
          }

          /* Configure PLL1FRACN */
          __HAL_RCC_PLL1_FRACN_CONFIG(RCC_OscInitStruct->PLL1.PLLFractional);
7000362c:	4b22      	ldr	r3, [pc, #136]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000362e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70003630:	4b22      	ldr	r3, [pc, #136]	@ (700036bc <HAL_RCC_OscConfig+0x670>)
70003632:	4013      	ands	r3, r2
70003634:	687a      	ldr	r2, [r7, #4]
70003636:	6c92      	ldr	r2, [r2, #72]	@ 0x48
70003638:	00d2      	lsls	r2, r2, #3
7000363a:	491f      	ldr	r1, [pc, #124]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
7000363c:	4313      	orrs	r3, r2
7000363e:	634b      	str	r3, [r1, #52]	@ 0x34

          /* Enable PLL1FRACLE to latch new value . */
          __HAL_RCC_PLL1_FRACN_ENABLE();
70003640:	4b1d      	ldr	r3, [pc, #116]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003644:	4a1c      	ldr	r2, [pc, #112]	@ (700036b8 <HAL_RCC_OscConfig+0x66c>)
70003646:	f043 0301 	orr.w	r3, r3, #1
7000364a:	62d3      	str	r3, [r2, #44]	@ 0x2c
7000364c:	e00d      	b.n	7000366a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Initialize PLL1T to 1 to use common PLL initialization function */
      RCC_OscInitStruct->PLL1.PLLT = 1U;
7000364e:	687b      	ldr	r3, [r7, #4]
70003650:	2201      	movs	r2, #1
70003652:	645a      	str	r2, [r3, #68]	@ 0x44
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(RCC_OscInitStruct->PLL1)) != HAL_OK)
70003654:	687b      	ldr	r3, [r7, #4]
70003656:	3324      	adds	r3, #36	@ 0x24
70003658:	4619      	mov	r1, r3
7000365a:	2000      	movs	r0, #0
7000365c:	f000 fb56 	bl	70003d0c <RCC_PLL_Config>
70003660:	4603      	mov	r3, r0
70003662:	2b00      	cmp	r3, #0
70003664:	d001      	beq.n	7000366a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
70003666:	2301      	movs	r3, #1
70003668:	e022      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL2 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL2.PLLState));

  if (RCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
7000366a:	687b      	ldr	r3, [r7, #4]
7000366c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000366e:	2b00      	cmp	r3, #0
70003670:	d00a      	beq.n	70003688 <HAL_RCC_OscConfig+0x63c>
  {
    if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(RCC_OscInitStruct->PLL2)) != HAL_OK)
70003672:	687b      	ldr	r3, [r7, #4]
70003674:	334c      	adds	r3, #76	@ 0x4c
70003676:	4619      	mov	r1, r3
70003678:	2001      	movs	r0, #1
7000367a:	f000 fb47 	bl	70003d0c <RCC_PLL_Config>
7000367e:	4603      	mov	r3, r0
70003680:	2b00      	cmp	r3, #0
70003682:	d001      	beq.n	70003688 <HAL_RCC_OscConfig+0x63c>
    {
      return HAL_ERROR;
70003684:	2301      	movs	r3, #1
70003686:	e013      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>

  /*-------------------------------- PLL3 Configuration ----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL3.PLLState));

  if (RCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
70003688:	687b      	ldr	r3, [r7, #4]
7000368a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
7000368c:	2b00      	cmp	r3, #0
7000368e:	d00e      	beq.n	700036ae <HAL_RCC_OscConfig+0x662>
  {
    /* Initialize PLL3T to 1 to use common PLL initialization function */
    RCC_OscInitStruct->PLL3.PLLT = 1U;
70003690:	687b      	ldr	r3, [r7, #4]
70003692:	2201      	movs	r2, #1
70003694:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(RCC_OscInitStruct->PLL3)) != HAL_OK)
70003698:	687b      	ldr	r3, [r7, #4]
7000369a:	3374      	adds	r3, #116	@ 0x74
7000369c:	4619      	mov	r1, r3
7000369e:	2002      	movs	r0, #2
700036a0:	f000 fb34 	bl	70003d0c <RCC_PLL_Config>
700036a4:	4603      	mov	r3, r0
700036a6:	2b00      	cmp	r3, #0
700036a8:	d001      	beq.n	700036ae <HAL_RCC_OscConfig+0x662>
    {
      return HAL_ERROR;
700036aa:	2301      	movs	r3, #1
700036ac:	e000      	b.n	700036b0 <HAL_RCC_OscConfig+0x664>
    }
  }

  return HAL_OK;
700036ae:	2300      	movs	r3, #0
}
700036b0:	4618      	mov	r0, r3
700036b2:	3720      	adds	r7, #32
700036b4:	46bd      	mov	sp, r7
700036b6:	bd80      	pop	{r7, pc}
700036b8:	58024400 	.word	0x58024400
700036bc:	ffff0007 	.word	0xffff0007

700036c0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
700036c0:	b580      	push	{r7, lr}
700036c2:	b084      	sub	sp, #16
700036c4:	af00      	add	r7, sp, #0
700036c6:	6078      	str	r0, [r7, #4]
700036c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
700036ca:	687b      	ldr	r3, [r7, #4]
700036cc:	2b00      	cmp	r3, #0
700036ce:	d101      	bne.n	700036d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
700036d0:	2301      	movs	r3, #1
700036d2:	e182      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
700036d4:	4b8a      	ldr	r3, [pc, #552]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700036d6:	681b      	ldr	r3, [r3, #0]
700036d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
700036dc:	683a      	ldr	r2, [r7, #0]
700036de:	429a      	cmp	r2, r3
700036e0:	d910      	bls.n	70003704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
700036e2:	4b87      	ldr	r3, [pc, #540]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700036e4:	681b      	ldr	r3, [r3, #0]
700036e6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
700036ea:	4985      	ldr	r1, [pc, #532]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700036ec:	683b      	ldr	r3, [r7, #0]
700036ee:	4313      	orrs	r3, r2
700036f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
700036f2:	4b83      	ldr	r3, [pc, #524]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700036f4:	681b      	ldr	r3, [r3, #0]
700036f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
700036fa:	683a      	ldr	r2, [r7, #0]
700036fc:	429a      	cmp	r2, r3
700036fe:	d001      	beq.n	70003704 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
70003700:	2301      	movs	r3, #1
70003702:	e16a      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
  }

  /* Increasing the BUS frequency divider ? */

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
70003704:	687b      	ldr	r3, [r7, #4]
70003706:	681b      	ldr	r3, [r3, #0]
70003708:	f003 0304 	and.w	r3, r3, #4
7000370c:	2b00      	cmp	r3, #0
7000370e:	d010      	beq.n	70003732 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
70003710:	687b      	ldr	r3, [r7, #4]
70003712:	691a      	ldr	r2, [r3, #16]
70003714:	4b7b      	ldr	r3, [pc, #492]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003716:	6a1b      	ldr	r3, [r3, #32]
70003718:	f003 0307 	and.w	r3, r3, #7
7000371c:	429a      	cmp	r2, r3
7000371e:	d908      	bls.n	70003732 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
70003720:	4b78      	ldr	r3, [pc, #480]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003722:	6a1b      	ldr	r3, [r3, #32]
70003724:	f023 0207 	bic.w	r2, r3, #7
70003728:	687b      	ldr	r3, [r7, #4]
7000372a:	691b      	ldr	r3, [r3, #16]
7000372c:	4975      	ldr	r1, [pc, #468]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
7000372e:	4313      	orrs	r3, r2
70003730:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
70003732:	687b      	ldr	r3, [r7, #4]
70003734:	681b      	ldr	r3, [r3, #0]
70003736:	f003 0308 	and.w	r3, r3, #8
7000373a:	2b00      	cmp	r3, #0
7000373c:	d010      	beq.n	70003760 <HAL_RCC_ClockConfig+0xa0>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
7000373e:	687b      	ldr	r3, [r7, #4]
70003740:	695a      	ldr	r2, [r3, #20]
70003742:	4b70      	ldr	r3, [pc, #448]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003744:	6a1b      	ldr	r3, [r3, #32]
70003746:	f003 0370 	and.w	r3, r3, #112	@ 0x70
7000374a:	429a      	cmp	r2, r3
7000374c:	d908      	bls.n	70003760 <HAL_RCC_ClockConfig+0xa0>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
7000374e:	4b6d      	ldr	r3, [pc, #436]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003750:	6a1b      	ldr	r3, [r3, #32]
70003752:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
70003756:	687b      	ldr	r3, [r7, #4]
70003758:	695b      	ldr	r3, [r3, #20]
7000375a:	496a      	ldr	r1, [pc, #424]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
7000375c:	4313      	orrs	r3, r2
7000375e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
70003760:	687b      	ldr	r3, [r7, #4]
70003762:	681b      	ldr	r3, [r3, #0]
70003764:	f003 0310 	and.w	r3, r3, #16
70003768:	2b00      	cmp	r3, #0
7000376a:	d010      	beq.n	7000378e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
7000376c:	687b      	ldr	r3, [r7, #4]
7000376e:	699a      	ldr	r2, [r3, #24]
70003770:	4b64      	ldr	r3, [pc, #400]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003772:	6a1b      	ldr	r3, [r3, #32]
70003774:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
70003778:	429a      	cmp	r2, r3
7000377a:	d908      	bls.n	7000378e <HAL_RCC_ClockConfig+0xce>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
7000377c:	4b61      	ldr	r3, [pc, #388]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
7000377e:	6a1b      	ldr	r3, [r3, #32]
70003780:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70003784:	687b      	ldr	r3, [r7, #4]
70003786:	699b      	ldr	r3, [r3, #24]
70003788:	495e      	ldr	r1, [pc, #376]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
7000378a:	4313      	orrs	r3, r2
7000378c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
7000378e:	687b      	ldr	r3, [r7, #4]
70003790:	681b      	ldr	r3, [r3, #0]
70003792:	f003 0320 	and.w	r3, r3, #32
70003796:	2b00      	cmp	r3, #0
70003798:	d010      	beq.n	700037bc <HAL_RCC_ClockConfig+0xfc>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) > (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
7000379a:	687b      	ldr	r3, [r7, #4]
7000379c:	69da      	ldr	r2, [r3, #28]
7000379e:	4b59      	ldr	r3, [pc, #356]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037a0:	6a1b      	ldr	r3, [r3, #32]
700037a2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
700037a6:	429a      	cmp	r2, r3
700037a8:	d908      	bls.n	700037bc <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
700037aa:	4b56      	ldr	r3, [pc, #344]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037ac:	6a1b      	ldr	r3, [r3, #32]
700037ae:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
700037b2:	687b      	ldr	r3, [r7, #4]
700037b4:	69db      	ldr	r3, [r3, #28]
700037b6:	4953      	ldr	r1, [pc, #332]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037b8:	4313      	orrs	r3, r2
700037ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
700037bc:	687b      	ldr	r3, [r7, #4]
700037be:	681b      	ldr	r3, [r3, #0]
700037c0:	f003 0302 	and.w	r3, r3, #2
700037c4:	2b00      	cmp	r3, #0
700037c6:	d010      	beq.n	700037ea <HAL_RCC_ClockConfig+0x12a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
700037c8:	687b      	ldr	r3, [r7, #4]
700037ca:	68da      	ldr	r2, [r3, #12]
700037cc:	4b4d      	ldr	r3, [pc, #308]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037ce:	69db      	ldr	r3, [r3, #28]
700037d0:	f003 030f 	and.w	r3, r3, #15
700037d4:	429a      	cmp	r2, r3
700037d6:	d908      	bls.n	700037ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
700037d8:	4b4a      	ldr	r3, [pc, #296]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037da:	69db      	ldr	r3, [r3, #28]
700037dc:	f023 020f 	bic.w	r2, r3, #15
700037e0:	687b      	ldr	r3, [r7, #4]
700037e2:	68db      	ldr	r3, [r3, #12]
700037e4:	4947      	ldr	r1, [pc, #284]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037e6:	4313      	orrs	r3, r2
700037e8:	61cb      	str	r3, [r1, #28]
    }
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
700037ea:	687b      	ldr	r3, [r7, #4]
700037ec:	681b      	ldr	r3, [r3, #0]
700037ee:	f003 0301 	and.w	r3, r3, #1
700037f2:	2b00      	cmp	r3, #0
700037f4:	d055      	beq.n	700038a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    MODIFY_REG(RCC->CDCFGR, RCC_CDCFGR_CPRE, RCC_ClkInitStruct->SYSCLKDivider);
700037f6:	4b43      	ldr	r3, [pc, #268]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700037f8:	699b      	ldr	r3, [r3, #24]
700037fa:	f023 020f 	bic.w	r2, r3, #15
700037fe:	687b      	ldr	r3, [r7, #4]
70003800:	689b      	ldr	r3, [r3, #8]
70003802:	4940      	ldr	r1, [pc, #256]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003804:	4313      	orrs	r3, r2
70003806:	618b      	str	r3, [r1, #24]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
70003808:	687b      	ldr	r3, [r7, #4]
7000380a:	685b      	ldr	r3, [r3, #4]
7000380c:	2b02      	cmp	r3, #2
7000380e:	d107      	bne.n	70003820 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
70003810:	4b3c      	ldr	r3, [pc, #240]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003812:	681b      	ldr	r3, [r3, #0]
70003814:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
70003818:	2b00      	cmp	r3, #0
7000381a:	d121      	bne.n	70003860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
7000381c:	2301      	movs	r3, #1
7000381e:	e0dc      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
70003820:	687b      	ldr	r3, [r7, #4]
70003822:	685b      	ldr	r3, [r3, #4]
70003824:	2b03      	cmp	r3, #3
70003826:	d107      	bne.n	70003838 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
70003828:	4b36      	ldr	r3, [pc, #216]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
7000382a:	681b      	ldr	r3, [r3, #0]
7000382c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
70003830:	2b00      	cmp	r3, #0
70003832:	d115      	bne.n	70003860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
70003834:	2301      	movs	r3, #1
70003836:	e0d0      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
70003838:	687b      	ldr	r3, [r7, #4]
7000383a:	685b      	ldr	r3, [r3, #4]
7000383c:	2b01      	cmp	r3, #1
7000383e:	d107      	bne.n	70003850 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
70003840:	4b30      	ldr	r3, [pc, #192]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003842:	681b      	ldr	r3, [r3, #0]
70003844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70003848:	2b00      	cmp	r3, #0
7000384a:	d109      	bne.n	70003860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
7000384c:	2301      	movs	r3, #1
7000384e:	e0c4      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
70003850:	4b2c      	ldr	r3, [pc, #176]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003852:	681b      	ldr	r3, [r3, #0]
70003854:	f003 0304 	and.w	r3, r3, #4
70003858:	2b00      	cmp	r3, #0
7000385a:	d101      	bne.n	70003860 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
7000385c:	2301      	movs	r3, #1
7000385e:	e0bc      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
70003860:	4b28      	ldr	r3, [pc, #160]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003862:	691b      	ldr	r3, [r3, #16]
70003864:	f023 0207 	bic.w	r2, r3, #7
70003868:	687b      	ldr	r3, [r7, #4]
7000386a:	685b      	ldr	r3, [r3, #4]
7000386c:	4925      	ldr	r1, [pc, #148]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
7000386e:	4313      	orrs	r3, r2
70003870:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
70003872:	f7fd fdaf 	bl	700013d4 <HAL_GetTick>
70003876:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
70003878:	e00a      	b.n	70003890 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
7000387a:	f7fd fdab 	bl	700013d4 <HAL_GetTick>
7000387e:	4602      	mov	r2, r0
70003880:	68fb      	ldr	r3, [r7, #12]
70003882:	1ad3      	subs	r3, r2, r3
70003884:	f241 3288 	movw	r2, #5000	@ 0x1388
70003888:	4293      	cmp	r3, r2
7000388a:	d901      	bls.n	70003890 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
7000388c:	2303      	movs	r3, #3
7000388e:	e0a4      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
70003890:	4b1c      	ldr	r3, [pc, #112]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
70003892:	691b      	ldr	r3, [r3, #16]
70003894:	f003 0238 	and.w	r2, r3, #56	@ 0x38
70003898:	687b      	ldr	r3, [r7, #4]
7000389a:	685b      	ldr	r3, [r3, #4]
7000389c:	00db      	lsls	r3, r3, #3
7000389e:	429a      	cmp	r2, r3
700038a0:	d1eb      	bne.n	7000387a <HAL_RCC_ClockConfig+0x1ba>
  }

  /* Decreasing the BUS frequency divider ? */

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
700038a2:	687b      	ldr	r3, [r7, #4]
700038a4:	681b      	ldr	r3, [r3, #0]
700038a6:	f003 0302 	and.w	r3, r3, #2
700038aa:	2b00      	cmp	r3, #0
700038ac:	d010      	beq.n	700038d0 <HAL_RCC_ClockConfig+0x210>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->BMCFGR & RCC_BMCFGR_BMPRE))
700038ae:	687b      	ldr	r3, [r7, #4]
700038b0:	68da      	ldr	r2, [r3, #12]
700038b2:	4b14      	ldr	r3, [pc, #80]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700038b4:	69db      	ldr	r3, [r3, #28]
700038b6:	f003 030f 	and.w	r3, r3, #15
700038ba:	429a      	cmp	r2, r3
700038bc:	d208      	bcs.n	700038d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      MODIFY_REG(RCC->BMCFGR, RCC_BMCFGR_BMPRE, RCC_ClkInitStruct->AHBCLKDivider);
700038be:	4b11      	ldr	r3, [pc, #68]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700038c0:	69db      	ldr	r3, [r3, #28]
700038c2:	f023 020f 	bic.w	r2, r3, #15
700038c6:	687b      	ldr	r3, [r7, #4]
700038c8:	68db      	ldr	r3, [r3, #12]
700038ca:	490e      	ldr	r1, [pc, #56]	@ (70003904 <HAL_RCC_ClockConfig+0x244>)
700038cc:	4313      	orrs	r3, r2
700038ce:	61cb      	str	r3, [r1, #28]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
700038d0:	4b0b      	ldr	r3, [pc, #44]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700038d2:	681b      	ldr	r3, [r3, #0]
700038d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
700038d8:	683a      	ldr	r2, [r7, #0]
700038da:	429a      	cmp	r2, r3
700038dc:	d214      	bcs.n	70003908 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
700038de:	4b08      	ldr	r3, [pc, #32]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700038e0:	681b      	ldr	r3, [r3, #0]
700038e2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
700038e6:	4906      	ldr	r1, [pc, #24]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700038e8:	683b      	ldr	r3, [r7, #0]
700038ea:	4313      	orrs	r3, r2
700038ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
700038ee:	4b04      	ldr	r3, [pc, #16]	@ (70003900 <HAL_RCC_ClockConfig+0x240>)
700038f0:	681b      	ldr	r3, [r3, #0]
700038f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
700038f6:	683a      	ldr	r2, [r7, #0]
700038f8:	429a      	cmp	r2, r3
700038fa:	d005      	beq.n	70003908 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
700038fc:	2301      	movs	r3, #1
700038fe:	e06c      	b.n	700039da <HAL_RCC_ClockConfig+0x31a>
70003900:	52002000 	.word	0x52002000
70003904:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
70003908:	687b      	ldr	r3, [r7, #4]
7000390a:	681b      	ldr	r3, [r3, #0]
7000390c:	f003 0304 	and.w	r3, r3, #4
70003910:	2b00      	cmp	r3, #0
70003912:	d010      	beq.n	70003936 <HAL_RCC_ClockConfig+0x276>
  {
    assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE1))
70003914:	687b      	ldr	r3, [r7, #4]
70003916:	691a      	ldr	r2, [r3, #16]
70003918:	4b32      	ldr	r3, [pc, #200]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
7000391a:	6a1b      	ldr	r3, [r3, #32]
7000391c:	f003 0307 	and.w	r3, r3, #7
70003920:	429a      	cmp	r2, r3
70003922:	d208      	bcs.n	70003936 <HAL_RCC_ClockConfig+0x276>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
70003924:	4b2f      	ldr	r3, [pc, #188]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003926:	6a1b      	ldr	r3, [r3, #32]
70003928:	f023 0207 	bic.w	r2, r3, #7
7000392c:	687b      	ldr	r3, [r7, #4]
7000392e:	691b      	ldr	r3, [r3, #16]
70003930:	492c      	ldr	r1, [pc, #176]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003932:	4313      	orrs	r3, r2
70003934:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
70003936:	687b      	ldr	r3, [r7, #4]
70003938:	681b      	ldr	r3, [r3, #0]
7000393a:	f003 0308 	and.w	r3, r3, #8
7000393e:	2b00      	cmp	r3, #0
70003940:	d010      	beq.n	70003964 <HAL_RCC_ClockConfig+0x2a4>
  {
    assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE2))
70003942:	687b      	ldr	r3, [r7, #4]
70003944:	695a      	ldr	r2, [r3, #20]
70003946:	4b27      	ldr	r3, [pc, #156]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003948:	6a1b      	ldr	r3, [r3, #32]
7000394a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
7000394e:	429a      	cmp	r2, r3
70003950:	d208      	bcs.n	70003964 <HAL_RCC_ClockConfig+0x2a4>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
70003952:	4b24      	ldr	r3, [pc, #144]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003954:	6a1b      	ldr	r3, [r3, #32]
70003956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
7000395a:	687b      	ldr	r3, [r7, #4]
7000395c:	695b      	ldr	r3, [r3, #20]
7000395e:	4921      	ldr	r1, [pc, #132]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003960:	4313      	orrs	r3, r2
70003962:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK4 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
70003964:	687b      	ldr	r3, [r7, #4]
70003966:	681b      	ldr	r3, [r3, #0]
70003968:	f003 0310 	and.w	r3, r3, #16
7000396c:	2b00      	cmp	r3, #0
7000396e:	d010      	beq.n	70003992 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK4(RCC_ClkInitStruct->APB4CLKDivider));
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE4))
70003970:	687b      	ldr	r3, [r7, #4]
70003972:	699a      	ldr	r2, [r3, #24]
70003974:	4b1b      	ldr	r3, [pc, #108]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003976:	6a1b      	ldr	r3, [r3, #32]
70003978:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
7000397c:	429a      	cmp	r2, r3
7000397e:	d208      	bcs.n	70003992 <HAL_RCC_ClockConfig+0x2d2>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE4, (RCC_ClkInitStruct->APB4CLKDivider));
70003980:	4b18      	ldr	r3, [pc, #96]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
70003982:	6a1b      	ldr	r3, [r3, #32]
70003984:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70003988:	687b      	ldr	r3, [r7, #4]
7000398a:	699b      	ldr	r3, [r3, #24]
7000398c:	4915      	ldr	r1, [pc, #84]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
7000398e:	4313      	orrs	r3, r2
70003990:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK5 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
70003992:	687b      	ldr	r3, [r7, #4]
70003994:	681b      	ldr	r3, [r3, #0]
70003996:	f003 0320 	and.w	r3, r3, #32
7000399a:	2b00      	cmp	r3, #0
7000399c:	d010      	beq.n	700039c0 <HAL_RCC_ClockConfig+0x300>
  {
    assert_param(IS_RCC_PCLK5(RCC_ClkInitStruct->APB5CLKDivider));
    if ((RCC_ClkInitStruct->APB5CLKDivider) < (RCC->APBCFGR & RCC_APBCFGR_PPRE5))
7000399e:	687b      	ldr	r3, [r7, #4]
700039a0:	69da      	ldr	r2, [r3, #28]
700039a2:	4b10      	ldr	r3, [pc, #64]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
700039a4:	6a1b      	ldr	r3, [r3, #32]
700039a6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
700039aa:	429a      	cmp	r2, r3
700039ac:	d208      	bcs.n	700039c0 <HAL_RCC_ClockConfig+0x300>
    {
      MODIFY_REG(RCC->APBCFGR, RCC_APBCFGR_PPRE5, (RCC_ClkInitStruct->APB5CLKDivider));
700039ae:	4b0d      	ldr	r3, [pc, #52]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
700039b0:	6a1b      	ldr	r3, [r3, #32]
700039b2:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
700039b6:	687b      	ldr	r3, [r7, #4]
700039b8:	69db      	ldr	r3, [r3, #28]
700039ba:	490a      	ldr	r1, [pc, #40]	@ (700039e4 <HAL_RCC_ClockConfig+0x324>)
700039bc:	4313      	orrs	r3, r2
700039be:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable with the System CPU clock */
  SystemCoreClock = HAL_RCC_GetSysClockFreq();
700039c0:	f000 f816 	bl	700039f0 <HAL_RCC_GetSysClockFreq>
700039c4:	4603      	mov	r3, r0
700039c6:	4a08      	ldr	r2, [pc, #32]	@ (700039e8 <HAL_RCC_ClockConfig+0x328>)
700039c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
700039ca:	4b08      	ldr	r3, [pc, #32]	@ (700039ec <HAL_RCC_ClockConfig+0x32c>)
700039cc:	681b      	ldr	r3, [r3, #0]
700039ce:	4618      	mov	r0, r3
700039d0:	f7fd fcb0 	bl	70001334 <HAL_InitTick>
700039d4:	4603      	mov	r3, r0
700039d6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
700039d8:	7afb      	ldrb	r3, [r7, #11]
}
700039da:	4618      	mov	r0, r3
700039dc:	3710      	adds	r7, #16
700039de:	46bd      	mov	sp, r7
700039e0:	bd80      	pop	{r7, pc}
700039e2:	bf00      	nop
700039e4:	58024400 	.word	0x58024400
700039e8:	24000004 	.word	0x24000004
700039ec:	2400012c 	.word	0x2400012c

700039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
700039f0:	b480      	push	{r7}
700039f2:	b08b      	sub	sp, #44	@ 0x2c
700039f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
700039f6:	4baa      	ldr	r3, [pc, #680]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
700039f8:	691b      	ldr	r3, [r3, #16]
700039fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
700039fe:	2b18      	cmp	r3, #24
70003a00:	f200 8136 	bhi.w	70003c70 <HAL_RCC_GetSysClockFreq+0x280>
70003a04:	a201      	add	r2, pc, #4	@ (adr r2, 70003a0c <HAL_RCC_GetSysClockFreq+0x1c>)
70003a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003a0a:	bf00      	nop
70003a0c:	70003a71 	.word	0x70003a71
70003a10:	70003c71 	.word	0x70003c71
70003a14:	70003c71 	.word	0x70003c71
70003a18:	70003c71 	.word	0x70003c71
70003a1c:	70003c71 	.word	0x70003c71
70003a20:	70003c71 	.word	0x70003c71
70003a24:	70003c71 	.word	0x70003c71
70003a28:	70003c71 	.word	0x70003c71
70003a2c:	70003a97 	.word	0x70003a97
70003a30:	70003c71 	.word	0x70003c71
70003a34:	70003c71 	.word	0x70003c71
70003a38:	70003c71 	.word	0x70003c71
70003a3c:	70003c71 	.word	0x70003c71
70003a40:	70003c71 	.word	0x70003c71
70003a44:	70003c71 	.word	0x70003c71
70003a48:	70003c71 	.word	0x70003c71
70003a4c:	70003a9d 	.word	0x70003a9d
70003a50:	70003c71 	.word	0x70003c71
70003a54:	70003c71 	.word	0x70003c71
70003a58:	70003c71 	.word	0x70003c71
70003a5c:	70003c71 	.word	0x70003c71
70003a60:	70003c71 	.word	0x70003c71
70003a64:	70003c71 	.word	0x70003c71
70003a68:	70003c71 	.word	0x70003c71
70003a6c:	70003aa3 	.word	0x70003aa3
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70003a70:	4b8b      	ldr	r3, [pc, #556]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003a72:	681b      	ldr	r3, [r3, #0]
70003a74:	f003 0320 	and.w	r3, r3, #32
70003a78:	2b00      	cmp	r3, #0
70003a7a:	d009      	beq.n	70003a90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
70003a7c:	4b88      	ldr	r3, [pc, #544]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003a7e:	681b      	ldr	r3, [r3, #0]
70003a80:	08db      	lsrs	r3, r3, #3
70003a82:	f003 0303 	and.w	r3, r3, #3
70003a86:	4a87      	ldr	r2, [pc, #540]	@ (70003ca4 <HAL_RCC_GetSysClockFreq+0x2b4>)
70003a88:	fa22 f303 	lsr.w	r3, r2, r3
70003a8c:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
70003a8e:	e0f2      	b.n	70003c76 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70003a90:	2300      	movs	r3, #0
70003a92:	623b      	str	r3, [r7, #32]
      break;
70003a94:	e0ef      	b.n	70003c76 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
70003a96:	4b84      	ldr	r3, [pc, #528]	@ (70003ca8 <HAL_RCC_GetSysClockFreq+0x2b8>)
70003a98:	623b      	str	r3, [r7, #32]
      break;
70003a9a:	e0ec      	b.n	70003c76 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
70003a9c:	4b83      	ldr	r3, [pc, #524]	@ (70003cac <HAL_RCC_GetSysClockFreq+0x2bc>)
70003a9e:	623b      	str	r3, [r7, #32]
      break;
70003aa0:	e0e9      	b.n	70003c76 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70003aa2:	4b7f      	ldr	r3, [pc, #508]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003aa6:	f003 0303 	and.w	r3, r3, #3
70003aaa:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
70003aac:	4b7c      	ldr	r3, [pc, #496]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003ab0:	091b      	lsrs	r3, r3, #4
70003ab2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70003ab6:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
70003ab8:	4b79      	ldr	r3, [pc, #484]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003abc:	f003 0301 	and.w	r3, r3, #1
70003ac0:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
70003ac2:	4b77      	ldr	r3, [pc, #476]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70003ac6:	08db      	lsrs	r3, r3, #3
70003ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
70003acc:	697a      	ldr	r2, [r7, #20]
70003ace:	fb02 f303 	mul.w	r3, r2, r3
70003ad2:	ee07 3a90 	vmov	s15, r3
70003ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003ada:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
70003ade:	69bb      	ldr	r3, [r7, #24]
70003ae0:	2b00      	cmp	r3, #0
70003ae2:	f000 80c2 	beq.w	70003c6a <HAL_RCC_GetSysClockFreq+0x27a>
      {
        switch (pllsource)
70003ae6:	69fb      	ldr	r3, [r7, #28]
70003ae8:	2b02      	cmp	r3, #2
70003aea:	d064      	beq.n	70003bb6 <HAL_RCC_GetSysClockFreq+0x1c6>
70003aec:	69fb      	ldr	r3, [r7, #28]
70003aee:	2b02      	cmp	r3, #2
70003af0:	f200 8083 	bhi.w	70003bfa <HAL_RCC_GetSysClockFreq+0x20a>
70003af4:	69fb      	ldr	r3, [r7, #28]
70003af6:	2b00      	cmp	r3, #0
70003af8:	d003      	beq.n	70003b02 <HAL_RCC_GetSysClockFreq+0x112>
70003afa:	69fb      	ldr	r3, [r7, #28]
70003afc:	2b01      	cmp	r3, #1
70003afe:	d038      	beq.n	70003b72 <HAL_RCC_GetSysClockFreq+0x182>
70003b00:	e07b      	b.n	70003bfa <HAL_RCC_GetSysClockFreq+0x20a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70003b02:	4b67      	ldr	r3, [pc, #412]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003b04:	681b      	ldr	r3, [r3, #0]
70003b06:	f003 0320 	and.w	r3, r3, #32
70003b0a:	2b00      	cmp	r3, #0
70003b0c:	d02d      	beq.n	70003b6a <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
70003b0e:	4b64      	ldr	r3, [pc, #400]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003b10:	681b      	ldr	r3, [r3, #0]
70003b12:	08db      	lsrs	r3, r3, #3
70003b14:	f003 0303 	and.w	r3, r3, #3
70003b18:	4a62      	ldr	r2, [pc, #392]	@ (70003ca4 <HAL_RCC_GetSysClockFreq+0x2b4>)
70003b1a:	fa22 f303 	lsr.w	r3, r2, r3
70003b1e:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003b20:	68fb      	ldr	r3, [r7, #12]
70003b22:	ee07 3a90 	vmov	s15, r3
70003b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003b2a:	69bb      	ldr	r3, [r7, #24]
70003b2c:	ee07 3a90 	vmov	s15, r3
70003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003b38:	4b59      	ldr	r3, [pc, #356]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003b40:	ee07 3a90 	vmov	s15, r3
70003b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003b48:	ed97 6a04 	vldr	s12, [r7, #16]
70003b4c:	eddf 5a58 	vldr	s11, [pc, #352]	@ 70003cb0 <HAL_RCC_GetSysClockFreq+0x2c0>
70003b50:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003b54:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003b5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003b60:	ee67 7a27 	vmul.f32	s15, s14, s15
70003b64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
70003b68:	e069      	b.n	70003c3e <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
70003b6a:	f04f 0300 	mov.w	r3, #0
70003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
70003b70:	e065      	b.n	70003c3e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003b72:	69bb      	ldr	r3, [r7, #24]
70003b74:	ee07 3a90 	vmov	s15, r3
70003b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003b7c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 70003cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
70003b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003b84:	4b46      	ldr	r3, [pc, #280]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003b8c:	ee07 3a90 	vmov	s15, r3
70003b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003b94:	ed97 6a04 	vldr	s12, [r7, #16]
70003b98:	eddf 5a45 	vldr	s11, [pc, #276]	@ 70003cb0 <HAL_RCC_GetSysClockFreq+0x2c0>
70003b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003ba4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003bac:	ee67 7a27 	vmul.f32	s15, s14, s15
70003bb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003bb4:	e043      	b.n	70003c3e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003bb6:	69bb      	ldr	r3, [r7, #24]
70003bb8:	ee07 3a90 	vmov	s15, r3
70003bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003bc0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 70003cb8 <HAL_RCC_GetSysClockFreq+0x2c8>
70003bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003bc8:	4b35      	ldr	r3, [pc, #212]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003bd0:	ee07 3a90 	vmov	s15, r3
70003bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003bd8:	ed97 6a04 	vldr	s12, [r7, #16]
70003bdc:	eddf 5a34 	vldr	s11, [pc, #208]	@ 70003cb0 <HAL_RCC_GetSysClockFreq+0x2c0>
70003be0:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003be4:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003be8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
70003bf4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003bf8:	e021      	b.n	70003c3e <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70003bfa:	69bb      	ldr	r3, [r7, #24]
70003bfc:	ee07 3a90 	vmov	s15, r3
70003c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
70003c04:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 70003cb4 <HAL_RCC_GetSysClockFreq+0x2c4>
70003c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70003c0c:	4b24      	ldr	r3, [pc, #144]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
70003c14:	ee07 3a90 	vmov	s15, r3
70003c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
70003c1c:	ed97 6a04 	vldr	s12, [r7, #16]
70003c20:	eddf 5a23 	vldr	s11, [pc, #140]	@ 70003cb0 <HAL_RCC_GetSysClockFreq+0x2c0>
70003c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
70003c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
70003c2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70003c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
70003c34:	ee67 7a27 	vmul.f32	s15, s14, s15
70003c38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70003c3c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
70003c3e:	4b18      	ldr	r3, [pc, #96]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70003c42:	0a5b      	lsrs	r3, r3, #9
70003c44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70003c48:	3301      	adds	r3, #1
70003c4a:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
70003c4c:	68bb      	ldr	r3, [r7, #8]
70003c4e:	ee07 3a90 	vmov	s15, r3
70003c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70003c56:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
70003c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
70003c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70003c62:	ee17 3a90 	vmov	r3, s15
70003c66:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
70003c68:	e005      	b.n	70003c76 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70003c6a:	2300      	movs	r3, #0
70003c6c:	623b      	str	r3, [r7, #32]
      break;
70003c6e:	e002      	b.n	70003c76 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
70003c70:	4b0d      	ldr	r3, [pc, #52]	@ (70003ca8 <HAL_RCC_GetSysClockFreq+0x2b8>)
70003c72:	623b      	str	r3, [r7, #32]
      break;
70003c74:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
70003c76:	4b0a      	ldr	r3, [pc, #40]	@ (70003ca0 <HAL_RCC_GetSysClockFreq+0x2b0>)
70003c78:	699b      	ldr	r3, [r3, #24]
70003c7a:	f003 030f 	and.w	r3, r3, #15
70003c7e:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
70003c80:	687b      	ldr	r3, [r7, #4]
70003c82:	2b07      	cmp	r3, #7
70003c84:	d905      	bls.n	70003c92 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
70003c86:	687b      	ldr	r3, [r7, #4]
70003c88:	3b07      	subs	r3, #7
70003c8a:	6a3a      	ldr	r2, [r7, #32]
70003c8c:	fa22 f303 	lsr.w	r3, r2, r3
70003c90:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
70003c92:	6a3b      	ldr	r3, [r7, #32]
}
70003c94:	4618      	mov	r0, r3
70003c96:	372c      	adds	r7, #44	@ 0x2c
70003c98:	46bd      	mov	sp, r7
70003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
70003c9e:	4770      	bx	lr
70003ca0:	58024400 	.word	0x58024400
70003ca4:	03d09000 	.word	0x03d09000
70003ca8:	003d0900 	.word	0x003d0900
70003cac:	016e3600 	.word	0x016e3600
70003cb0:	46000000 	.word	0x46000000
70003cb4:	4a742400 	.word	0x4a742400
70003cb8:	4bb71b00 	.word	0x4bb71b00

70003cbc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
70003cbc:	b580      	push	{r7, lr}
70003cbe:	b084      	sub	sp, #16
70003cc0:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
70003cc2:	4a10      	ldr	r2, [pc, #64]	@ (70003d04 <HAL_RCC_GetHCLKFreq+0x48>)
70003cc4:	463b      	mov	r3, r7
70003cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
70003cca:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
70003cce:	f7ff fe8f 	bl	700039f0 <HAL_RCC_GetSysClockFreq>
70003cd2:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
70003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (70003d08 <HAL_RCC_GetHCLKFreq+0x4c>)
70003cd6:	69db      	ldr	r3, [r3, #28]
70003cd8:	f003 030f 	and.w	r3, r3, #15
70003cdc:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
70003cde:	68bb      	ldr	r3, [r7, #8]
70003ce0:	2b07      	cmp	r3, #7
70003ce2:	d909      	bls.n	70003cf8 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
70003ce4:	68bb      	ldr	r3, [r7, #8]
70003ce6:	3b08      	subs	r3, #8
70003ce8:	3310      	adds	r3, #16
70003cea:	443b      	add	r3, r7
70003cec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
70003cf0:	461a      	mov	r2, r3
70003cf2:	68fb      	ldr	r3, [r7, #12]
70003cf4:	40d3      	lsrs	r3, r2
70003cf6:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
70003cf8:	68fb      	ldr	r3, [r7, #12]
}
70003cfa:	4618      	mov	r0, r3
70003cfc:	3710      	adds	r7, #16
70003cfe:	46bd      	mov	sp, r7
70003d00:	bd80      	pop	{r7, pc}
70003d02:	bf00      	nop
70003d04:	700078c8 	.word	0x700078c8
70003d08:	58024400 	.word	0x58024400

70003d0c <RCC_PLL_Config>:
  * @note   PLL is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_PLL_Config(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
70003d0c:	b580      	push	{r7, lr}
70003d0e:	b08a      	sub	sp, #40	@ 0x28
70003d10:	af00      	add	r7, sp, #0
70003d12:	6078      	str	r0, [r7, #4]
70003d14:	6039      	str	r1, [r7, #0]
  __IO uint32_t *p_rcc_pll_divr1_reg;
  __IO uint32_t *p_rcc_pll_divr2_reg;
  __IO uint32_t *p_rcc_pll_fracr_reg;
  HAL_StatusTypeDef ret = HAL_OK;
70003d16:	2300      	movs	r3, #0
70003d18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tickstart;
  uint32_t pllsrc;
  uint32_t pllvco;

  p_rcc_pll_divr1_reg = &(RCC->PLL1DIVR1) + (((uint32_t)0x02) * PLLnumber);
70003d1c:	687b      	ldr	r3, [r7, #4]
70003d1e:	00da      	lsls	r2, r3, #3
70003d20:	4b9a      	ldr	r3, [pc, #616]	@ (70003f8c <RCC_PLL_Config+0x280>)
70003d22:	4413      	add	r3, r2
70003d24:	61fb      	str	r3, [r7, #28]
  p_rcc_pll_divr2_reg = &(RCC->PLL1DIVR2) + (((uint32_t)0x01) * PLLnumber);
70003d26:	687b      	ldr	r3, [r7, #4]
70003d28:	009a      	lsls	r2, r3, #2
70003d2a:	4b99      	ldr	r3, [pc, #612]	@ (70003f90 <RCC_PLL_Config+0x284>)
70003d2c:	4413      	add	r3, r2
70003d2e:	61bb      	str	r3, [r7, #24]

  /* Disable the post-dividers */
  CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1PEN | RCC_PLLCFGR_PLL1QEN | RCC_PLLCFGR_PLL1REN | RCC_PLLCFGR_PLL1SEN |
70003d30:	4b98      	ldr	r3, [pc, #608]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003d32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
70003d34:	687a      	ldr	r2, [r7, #4]
70003d36:	4613      	mov	r3, r2
70003d38:	009b      	lsls	r3, r3, #2
70003d3a:	4413      	add	r3, r2
70003d3c:	005b      	lsls	r3, r3, #1
70003d3e:	4413      	add	r3, r2
70003d40:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
70003d44:	fa02 f303 	lsl.w	r3, r2, r3
70003d48:	43db      	mvns	r3, r3
70003d4a:	4a92      	ldr	r2, [pc, #584]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003d4c:	400b      	ands	r3, r1
70003d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
                           0x00000200U) /* Hardcoded because no definition in CMSIS */
            << ((RCC_PLLCFGR_PLL2PEN_Pos - RCC_PLLCFGR_PLL1PEN_Pos)*PLLnumber));

  /* Ensure PLLx is disabled */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
70003d50:	4b90      	ldr	r3, [pc, #576]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003d52:	681a      	ldr	r2, [r3, #0]
70003d54:	687b      	ldr	r3, [r7, #4]
70003d56:	005b      	lsls	r3, r3, #1
70003d58:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
70003d5c:	fa01 f303 	lsl.w	r3, r1, r3
70003d60:	43db      	mvns	r3, r3
70003d62:	498c      	ldr	r1, [pc, #560]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003d64:	4013      	ands	r3, r2
70003d66:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
70003d68:	f7fd fb34 	bl	700013d4 <HAL_GetTick>
70003d6c:	6178      	str	r0, [r7, #20]

  /* Wait till PLLx is disabled */
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
70003d6e:	e008      	b.n	70003d82 <RCC_PLL_Config+0x76>
  {
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
70003d70:	f7fd fb30 	bl	700013d4 <HAL_GetTick>
70003d74:	4602      	mov	r2, r0
70003d76:	697b      	ldr	r3, [r7, #20]
70003d78:	1ad3      	subs	r3, r2, r3
70003d7a:	2b32      	cmp	r3, #50	@ 0x32
70003d7c:	d901      	bls.n	70003d82 <RCC_PLL_Config+0x76>
    {
      return HAL_TIMEOUT;
70003d7e:	2303      	movs	r3, #3
70003d80:	e0ff      	b.n	70003f82 <RCC_PLL_Config+0x276>
  while (READ_BIT(RCC->CR, (RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber))) != 0U)
70003d82:	4b84      	ldr	r3, [pc, #528]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003d84:	681a      	ldr	r2, [r3, #0]
70003d86:	687b      	ldr	r3, [r7, #4]
70003d88:	005b      	lsls	r3, r3, #1
70003d8a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
70003d8e:	fa01 f303 	lsl.w	r3, r1, r3
70003d92:	4013      	ands	r3, r2
70003d94:	2b00      	cmp	r3, #0
70003d96:	d1eb      	bne.n	70003d70 <RCC_PLL_Config+0x64>
    }
  }

  if (pPLLInit->PLLState == RCC_PLL_ON)
70003d98:	683b      	ldr	r3, [r7, #0]
70003d9a:	681b      	ldr	r3, [r3, #0]
70003d9c:	2b02      	cmp	r3, #2
70003d9e:	f040 80dd 	bne.w	70003f5c <RCC_PLL_Config+0x250>
    assert_param(IS_RCC_PLLQ_VALUE(pPLLInit->PLLQ));
    assert_param(IS_RCC_PLLR_VALUE(pPLLInit->PLLR));
    assert_param(IS_RCC_PLLS_VALUE(pPLLInit->PLLS));
    assert_param(IS_RCC_PLLT_VALUE(pPLLInit->PLLT));

    pllsrc = pPLLInit->PLLSource;
70003da2:	683b      	ldr	r3, [r7, #0]
70003da4:	685b      	ldr	r3, [r3, #4]
70003da6:	613b      	str	r3, [r7, #16]

    /* Compute VCO input frequency and define range accordingly. First check clock source frequency */
    if (pllsrc == RCC_PLLSOURCE_HSI)
70003da8:	693b      	ldr	r3, [r7, #16]
70003daa:	2b00      	cmp	r3, #0
70003dac:	d109      	bne.n	70003dc2 <RCC_PLL_Config+0xb6>
    {
      /* Clock source is HSI or HSI/HSIDIV */
      pllvco = HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV) >> RCC_CR_HSIDIV_Pos);
70003dae:	4b79      	ldr	r3, [pc, #484]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003db0:	681b      	ldr	r3, [r3, #0]
70003db2:	08db      	lsrs	r3, r3, #3
70003db4:	f003 0303 	and.w	r3, r3, #3
70003db8:	4a77      	ldr	r2, [pc, #476]	@ (70003f98 <RCC_PLL_Config+0x28c>)
70003dba:	fa22 f303 	lsr.w	r3, r2, r3
70003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
70003dc0:	e007      	b.n	70003dd2 <RCC_PLL_Config+0xc6>
    }
    else if (pllsrc == RCC_PLLSOURCE_HSE)
70003dc2:	693b      	ldr	r3, [r7, #16]
70003dc4:	2b02      	cmp	r3, #2
70003dc6:	d102      	bne.n	70003dce <RCC_PLL_Config+0xc2>
    {
      /* Clock source is HSE */
      pllvco = HSE_VALUE;
70003dc8:	4b74      	ldr	r3, [pc, #464]	@ (70003f9c <RCC_PLL_Config+0x290>)
70003dca:	627b      	str	r3, [r7, #36]	@ 0x24
70003dcc:	e001      	b.n	70003dd2 <RCC_PLL_Config+0xc6>
    }
    else
    {
      /* Clock source is CSI */
      pllvco = CSI_VALUE;
70003dce:	4b74      	ldr	r3, [pc, #464]	@ (70003fa0 <RCC_PLL_Config+0x294>)
70003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Compute VCO input frequency depending on M divider */
    pllvco = (pllvco / pPLLInit->PLLM);
70003dd2:	683b      	ldr	r3, [r7, #0]
70003dd4:	689b      	ldr	r3, [r3, #8]
70003dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
70003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
    assert_param(IS_RCC_PLL_VCOINPUTFREQ(pllvco));

    if (pllvco >= RCC_PLL_INPUTRANGE2_FREQMAX)
70003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70003de0:	4a70      	ldr	r2, [pc, #448]	@ (70003fa4 <RCC_PLL_Config+0x298>)
70003de2:	4293      	cmp	r3, r2
70003de4:	d302      	bcc.n	70003dec <RCC_PLL_Config+0xe0>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE3 | RCC_PLL_VCO_HIGH;
70003de6:	2318      	movs	r3, #24
70003de8:	627b      	str	r3, [r7, #36]	@ 0x24
70003dea:	e00f      	b.n	70003e0c <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE1_FREQMAX)
70003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70003dee:	4a6e      	ldr	r2, [pc, #440]	@ (70003fa8 <RCC_PLL_Config+0x29c>)
70003df0:	4293      	cmp	r3, r2
70003df2:	d902      	bls.n	70003dfa <RCC_PLL_Config+0xee>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE2 | RCC_PLL_VCO_HIGH;
70003df4:	2310      	movs	r3, #16
70003df6:	627b      	str	r3, [r7, #36]	@ 0x24
70003df8:	e008      	b.n	70003e0c <RCC_PLL_Config+0x100>
    }
    else if (pllvco >= RCC_PLL_INPUTRANGE0_FREQMAX)
70003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70003dfc:	4a6b      	ldr	r2, [pc, #428]	@ (70003fac <RCC_PLL_Config+0x2a0>)
70003dfe:	4293      	cmp	r3, r2
70003e00:	d902      	bls.n	70003e08 <RCC_PLL_Config+0xfc>
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE1 | RCC_PLL_VCO_HIGH;
70003e02:	2308      	movs	r3, #8
70003e04:	627b      	str	r3, [r7, #36]	@ 0x24
70003e06:	e001      	b.n	70003e0c <RCC_PLL_Config+0x100>
    }
    else
    {
      pllvco = RCC_PLL_VCOINPUT_RANGE0 | RCC_PLL_VCO_LOW;
70003e08:	2302      	movs	r3, #2
70003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    pllvco = (pllvco << ((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos) * PLLnumber));
70003e0c:	687a      	ldr	r2, [r7, #4]
70003e0e:	4613      	mov	r3, r2
70003e10:	009b      	lsls	r3, r3, #2
70003e12:	4413      	add	r3, r2
70003e14:	005b      	lsls	r3, r3, #1
70003e16:	4413      	add	r3, r2
70003e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70003e1a:	fa02 f303 	lsl.w	r3, r2, r3
70003e1e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Configure PLL source and PLLM divider */
    MODIFY_REG(RCC->PLLCKSELR, (RCC_PLLCKSELR_PLLSRC | (RCC_PLLCKSELR_DIVM1 << ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))), \
70003e20:	4b5c      	ldr	r3, [pc, #368]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003e22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70003e24:	687b      	ldr	r3, [r7, #4]
70003e26:	00db      	lsls	r3, r3, #3
70003e28:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
70003e2c:	fa01 f303 	lsl.w	r3, r1, r3
70003e30:	f043 0303 	orr.w	r3, r3, #3
70003e34:	43db      	mvns	r3, r3
70003e36:	401a      	ands	r2, r3
70003e38:	683b      	ldr	r3, [r7, #0]
70003e3a:	6899      	ldr	r1, [r3, #8]
70003e3c:	687b      	ldr	r3, [r7, #4]
70003e3e:	00db      	lsls	r3, r3, #3
70003e40:	3304      	adds	r3, #4
70003e42:	4099      	lsls	r1, r3
70003e44:	693b      	ldr	r3, [r7, #16]
70003e46:	430b      	orrs	r3, r1
70003e48:	4952      	ldr	r1, [pc, #328]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003e4a:	4313      	orrs	r3, r2
70003e4c:	628b      	str	r3, [r1, #40]	@ 0x28
               pllsrc | (pPLLInit->PLLM << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber))));

    if ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) != pllsrc)
70003e4e:	4b51      	ldr	r3, [pc, #324]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003e52:	f003 0303 	and.w	r3, r3, #3
70003e56:	693a      	ldr	r2, [r7, #16]
70003e58:	429a      	cmp	r2, r3
70003e5a:	d001      	beq.n	70003e60 <RCC_PLL_Config+0x154>
    {
      /* There is another PLL activated with another source */
      return HAL_ERROR;
70003e5c:	2301      	movs	r3, #1
70003e5e:	e090      	b.n	70003f82 <RCC_PLL_Config+0x276>
    }

    /* Configure VCO input range, VCO selection and clear FRACEN */
    MODIFY_REG(RCC->PLLCFGR, (RCC_PLLCFGR_PLL1RGE | RCC_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN) << (((RCC_PLLCFGR_PLL2RGE_Pos - RCC_PLLCFGR_PLL1RGE_Pos)*PLLnumber)), \
70003e60:	4b4c      	ldr	r3, [pc, #304]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003e62:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
70003e64:	687a      	ldr	r2, [r7, #4]
70003e66:	4613      	mov	r3, r2
70003e68:	009b      	lsls	r3, r3, #2
70003e6a:	4413      	add	r3, r2
70003e6c:	005b      	lsls	r3, r3, #1
70003e6e:	4413      	add	r3, r2
70003e70:	221b      	movs	r2, #27
70003e72:	fa02 f303 	lsl.w	r3, r2, r3
70003e76:	43db      	mvns	r3, r3
70003e78:	ea01 0203 	and.w	r2, r1, r3
70003e7c:	4945      	ldr	r1, [pc, #276]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70003e80:	4313      	orrs	r3, r2
70003e82:	62cb      	str	r3, [r1, #44]	@ 0x2c
               pllvco);

    /* Configure PLLN, PLLP, PLLQ, PLLR, PLLS and PLLT dividers */
    WRITE_REG(*p_rcc_pll_divr1_reg, ((pPLLInit->PLLN - 1U) |
70003e84:	683b      	ldr	r3, [r7, #0]
70003e86:	68db      	ldr	r3, [r3, #12]
70003e88:	1e5a      	subs	r2, r3, #1
70003e8a:	683b      	ldr	r3, [r7, #0]
70003e8c:	691b      	ldr	r3, [r3, #16]
70003e8e:	3b01      	subs	r3, #1
70003e90:	025b      	lsls	r3, r3, #9
70003e92:	431a      	orrs	r2, r3
70003e94:	683b      	ldr	r3, [r7, #0]
70003e96:	695b      	ldr	r3, [r3, #20]
70003e98:	3b01      	subs	r3, #1
70003e9a:	041b      	lsls	r3, r3, #16
70003e9c:	431a      	orrs	r2, r3
70003e9e:	683b      	ldr	r3, [r7, #0]
70003ea0:	699b      	ldr	r3, [r3, #24]
70003ea2:	3b01      	subs	r3, #1
70003ea4:	061b      	lsls	r3, r3, #24
70003ea6:	431a      	orrs	r2, r3
70003ea8:	69fb      	ldr	r3, [r7, #28]
70003eaa:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLP - 1U) << RCC_PLL1DIVR1_DIVP_Pos) |
                                     ((pPLLInit->PLLQ - 1U) << RCC_PLL1DIVR1_DIVQ_Pos) |
                                     ((pPLLInit->PLLR - 1U) << RCC_PLL1DIVR1_DIVR_Pos)));
    WRITE_REG(*p_rcc_pll_divr2_reg, ((pPLLInit->PLLS - 1U) |
70003eac:	683b      	ldr	r3, [r7, #0]
70003eae:	69db      	ldr	r3, [r3, #28]
70003eb0:	1e5a      	subs	r2, r3, #1
70003eb2:	683b      	ldr	r3, [r7, #0]
70003eb4:	6a1b      	ldr	r3, [r3, #32]
70003eb6:	3b01      	subs	r3, #1
70003eb8:	021b      	lsls	r3, r3, #8
70003eba:	431a      	orrs	r2, r3
70003ebc:	69bb      	ldr	r3, [r7, #24]
70003ebe:	601a      	str	r2, [r3, #0]
                                     ((pPLLInit->PLLT - 1U) << RCC_PLL2DIVR2_DIVT_Pos)));

    if (PLLnumber == RCC_PLL1_CONFIG)
70003ec0:	687b      	ldr	r3, [r7, #4]
70003ec2:	2b00      	cmp	r3, #0
70003ec4:	d105      	bne.n	70003ed2 <RCC_PLL_Config+0x1c6>
    {
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1PEN);
70003ec6:	4b33      	ldr	r3, [pc, #204]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003eca:	4a32      	ldr	r2, [pc, #200]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003ecc:	f043 0320 	orr.w	r3, r3, #32
70003ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    if (pPLLInit->PLLFractional != 0U)
70003ed2:	683b      	ldr	r3, [r7, #0]
70003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70003ed6:	2b00      	cmp	r3, #0
70003ed8:	d01c      	beq.n	70003f14 <RCC_PLL_Config+0x208>
    {
      assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));

      p_rcc_pll_fracr_reg = &(RCC->PLL1FRACR) + (((uint32_t)0x02) * PLLnumber);
70003eda:	687b      	ldr	r3, [r7, #4]
70003edc:	00da      	lsls	r2, r3, #3
70003ede:	4b34      	ldr	r3, [pc, #208]	@ (70003fb0 <RCC_PLL_Config+0x2a4>)
70003ee0:	4413      	add	r3, r2
70003ee2:	60fb      	str	r3, [r7, #12]

      /* Configure PLLFRACN */
      MODIFY_REG(*p_rcc_pll_fracr_reg, RCC_PLL1FRACR_FRACN, pPLLInit->PLLFractional << RCC_PLL1FRACR_FRACN_Pos);
70003ee4:	68fb      	ldr	r3, [r7, #12]
70003ee6:	681a      	ldr	r2, [r3, #0]
70003ee8:	4b32      	ldr	r3, [pc, #200]	@ (70003fb4 <RCC_PLL_Config+0x2a8>)
70003eea:	4013      	ands	r3, r2
70003eec:	683a      	ldr	r2, [r7, #0]
70003eee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
70003ef0:	00d2      	lsls	r2, r2, #3
70003ef2:	431a      	orrs	r2, r3
70003ef4:	68fb      	ldr	r3, [r7, #12]
70003ef6:	601a      	str	r2, [r3, #0]

      /* Enable PLLFRACLE */
      SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN << ((RCC_PLLCFGR_PLL2FRACEN_Pos - RCC_PLLCFGR_PLL1FRACEN_Pos)*PLLnumber));
70003ef8:	4b26      	ldr	r3, [pc, #152]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003efa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
70003efc:	687a      	ldr	r2, [r7, #4]
70003efe:	4613      	mov	r3, r2
70003f00:	009b      	lsls	r3, r3, #2
70003f02:	4413      	add	r3, r2
70003f04:	005b      	lsls	r3, r3, #1
70003f06:	4413      	add	r3, r2
70003f08:	2201      	movs	r2, #1
70003f0a:	fa02 f303 	lsl.w	r3, r2, r3
70003f0e:	4a21      	ldr	r2, [pc, #132]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003f10:	430b      	orrs	r3, r1
70003f12:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable the PLLx */
    SET_BIT(RCC->CR, RCC_CR_PLL1ON << ((RCC_CR_PLL2ON_Pos - RCC_CR_PLL1ON_Pos)*PLLnumber));
70003f14:	4b1f      	ldr	r3, [pc, #124]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003f16:	681a      	ldr	r2, [r3, #0]
70003f18:	687b      	ldr	r3, [r7, #4]
70003f1a:	005b      	lsls	r3, r3, #1
70003f1c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
70003f20:	fa01 f303 	lsl.w	r3, r1, r3
70003f24:	491b      	ldr	r1, [pc, #108]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003f26:	4313      	orrs	r3, r2
70003f28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
70003f2a:	f7fd fa53 	bl	700013d4 <HAL_GetTick>
70003f2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLx is ready */
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
70003f30:	e008      	b.n	70003f44 <RCC_PLL_Config+0x238>
    {
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
70003f32:	f7fd fa4f 	bl	700013d4 <HAL_GetTick>
70003f36:	4602      	mov	r2, r0
70003f38:	697b      	ldr	r3, [r7, #20]
70003f3a:	1ad3      	subs	r3, r2, r3
70003f3c:	2b32      	cmp	r3, #50	@ 0x32
70003f3e:	d901      	bls.n	70003f44 <RCC_PLL_Config+0x238>
      {
        return HAL_TIMEOUT;
70003f40:	2303      	movs	r3, #3
70003f42:	e01e      	b.n	70003f82 <RCC_PLL_Config+0x276>
    while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY << ((RCC_CR_PLL2RDY_Pos - RCC_CR_PLL1RDY_Pos)*PLLnumber)) == 0U)
70003f44:	4b13      	ldr	r3, [pc, #76]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003f46:	681a      	ldr	r2, [r3, #0]
70003f48:	687b      	ldr	r3, [r7, #4]
70003f4a:	005b      	lsls	r3, r3, #1
70003f4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
70003f50:	fa01 f303 	lsl.w	r3, r1, r3
70003f54:	4013      	ands	r3, r2
70003f56:	2b00      	cmp	r3, #0
70003f58:	d0eb      	beq.n	70003f32 <RCC_PLL_Config+0x226>
70003f5a:	e010      	b.n	70003f7e <RCC_PLL_Config+0x272>
    }
  }
  else
  {
    /* Disable outputs to save power when PLLx is off */
    MODIFY_REG(RCC->PLLCKSELR, ((RCC_PLLCKSELR_DIVM1 << (RCC_PLLCKSELR_DIVM1_Pos + ((RCC_PLLCKSELR_DIVM2_Pos - RCC_PLLCKSELR_DIVM1_Pos)*PLLnumber)))
70003f5c:	4b0d      	ldr	r3, [pc, #52]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003f5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
70003f60:	687b      	ldr	r3, [r7, #4]
70003f62:	00db      	lsls	r3, r3, #3
70003f64:	3304      	adds	r3, #4
70003f66:	f44f 717c 	mov.w	r1, #1008	@ 0x3f0
70003f6a:	fa01 f303 	lsl.w	r3, r1, r3
70003f6e:	f043 0303 	orr.w	r3, r3, #3
70003f72:	43db      	mvns	r3, r3
70003f74:	4013      	ands	r3, r2
70003f76:	4a07      	ldr	r2, [pc, #28]	@ (70003f94 <RCC_PLL_Config+0x288>)
70003f78:	f043 0303 	orr.w	r3, r3, #3
70003f7c:	6293      	str	r3, [r2, #40]	@ 0x28
                                | RCC_PLLCKSELR_PLLSRC), RCC_PLLSOURCE_NONE);
  }

  return ret;
70003f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
70003f82:	4618      	mov	r0, r3
70003f84:	3728      	adds	r7, #40	@ 0x28
70003f86:	46bd      	mov	sp, r7
70003f88:	bd80      	pop	{r7, pc}
70003f8a:	bf00      	nop
70003f8c:	58024430 	.word	0x58024430
70003f90:	580244c0 	.word	0x580244c0
70003f94:	58024400 	.word	0x58024400
70003f98:	03d09000 	.word	0x03d09000
70003f9c:	016e3600 	.word	0x016e3600
70003fa0:	003d0900 	.word	0x003d0900
70003fa4:	007a1200 	.word	0x007a1200
70003fa8:	003d08ff 	.word	0x003d08ff
70003fac:	001e847f 	.word	0x001e847f
70003fb0:	58024434 	.word	0x58024434
70003fb4:	ffff0007 	.word	0xffff0007

70003fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
70003fb8:	b580      	push	{r7, lr}
70003fba:	b086      	sub	sp, #24
70003fbc:	af00      	add	r7, sp, #0
70003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
70003fc0:	2300      	movs	r3, #0
70003fc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
70003fc4:	2300      	movs	r3, #0
70003fc6:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
70003fc8:	687b      	ldr	r3, [r7, #4]
70003fca:	681b      	ldr	r3, [r3, #0]
70003fcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
70003fd0:	2b00      	cmp	r3, #0
70003fd2:	f000 8081 	beq.w	700040d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As the RTC clock source selection can be changed only if the Backup Domain is reset */
    /* reset the Backup domain only if the RTC Clock source selection is modified from default reset value */
    tmpreg = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
70003fd6:	4b8c      	ldr	r3, [pc, #560]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70003fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70003fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70003fde:	613b      	str	r3, [r7, #16]

    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
70003fe0:	693b      	ldr	r3, [r7, #16]
70003fe2:	2b00      	cmp	r3, #0
70003fe4:	d029      	beq.n	7000403a <HAL_RCCEx_PeriphCLKConfig+0x82>
70003fe6:	687b      	ldr	r3, [r7, #4]
70003fe8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70003fea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
70003fee:	693a      	ldr	r2, [r7, #16]
70003ff0:	429a      	cmp	r2, r3
70003ff2:	d022      	beq.n	7000403a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
70003ff4:	4b85      	ldr	r3, [pc, #532]	@ (7000420c <HAL_RCCEx_PeriphCLKConfig+0x254>)
70003ff6:	681b      	ldr	r3, [r3, #0]
70003ff8:	4a84      	ldr	r2, [pc, #528]	@ (7000420c <HAL_RCCEx_PeriphCLKConfig+0x254>)
70003ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
70003ffe:	6013      	str	r3, [r2, #0]

      /* Read back to check Backup domain enabled */
      if (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
70004000:	4b82      	ldr	r3, [pc, #520]	@ (7000420c <HAL_RCCEx_PeriphCLKConfig+0x254>)
70004002:	681b      	ldr	r3, [r3, #0]
70004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70004008:	2b00      	cmp	r3, #0
7000400a:	d102      	bne.n	70004012 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      {
        ret = HAL_ERROR;
7000400c:	2301      	movs	r3, #1
7000400e:	75fb      	strb	r3, [r7, #23]
70004010:	e013      	b.n	7000403a <HAL_RCCEx_PeriphCLKConfig+0x82>
      }
      else
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        /* excepted the RTC clock source selection that will be changed */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
70004012:	4b7d      	ldr	r3, [pc, #500]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70004016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
7000401a:	613b      	str	r3, [r7, #16]
        __HAL_RCC_BACKUPRESET_FORCE();
7000401c:	4b7a      	ldr	r3, [pc, #488]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000401e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70004020:	4a79      	ldr	r2, [pc, #484]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70004026:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
70004028:	4b77      	ldr	r3, [pc, #476]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000402c:	4a76      	ldr	r2, [pc, #472]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000402e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
70004032:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the content of BDCR register */
        WRITE_REG(RCC->BDCR, tmpreg);
70004034:	4a74      	ldr	r2, [pc, #464]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004036:	693b      	ldr	r3, [r7, #16]
70004038:	6713      	str	r3, [r2, #112]	@ 0x70
      }
    }

    if (ret == HAL_OK)
7000403a:	7dfb      	ldrb	r3, [r7, #23]
7000403c:	2b00      	cmp	r3, #0
7000403e:	d149      	bne.n	700040d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
70004040:	687b      	ldr	r3, [r7, #4]
70004042:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70004044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70004048:	d115      	bne.n	70004076 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
7000404a:	f7fd f9c3 	bl	700013d4 <HAL_GetTick>
7000404e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
70004050:	e00b      	b.n	7000406a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
70004052:	f7fd f9bf 	bl	700013d4 <HAL_GetTick>
70004056:	4602      	mov	r2, r0
70004058:	68fb      	ldr	r3, [r7, #12]
7000405a:	1ad3      	subs	r3, r2, r3
7000405c:	f241 3288 	movw	r2, #5000	@ 0x1388
70004060:	4293      	cmp	r3, r2
70004062:	d902      	bls.n	7000406a <HAL_RCCEx_PeriphCLKConfig+0xb2>
          {
            ret = HAL_TIMEOUT;
70004064:	2303      	movs	r3, #3
70004066:	75fb      	strb	r3, [r7, #23]
            break;
70004068:	e005      	b.n	70004076 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
7000406a:	4b67      	ldr	r3, [pc, #412]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
7000406e:	f003 0302 	and.w	r3, r3, #2
70004072:	2b00      	cmp	r3, #0
70004074:	d0ed      	beq.n	70004052 <HAL_RCCEx_PeriphCLKConfig+0x9a>
          }
        }
      }

      if (ret == HAL_OK)
70004076:	7dfb      	ldrb	r3, [r7, #23]
70004078:	2b00      	cmp	r3, #0
7000407a:	d128      	bne.n	700040ce <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
7000407c:	687b      	ldr	r3, [r7, #4]
7000407e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70004080:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
70004084:	2b00      	cmp	r3, #0
70004086:	d00c      	beq.n	700040a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
70004088:	4b5f      	ldr	r3, [pc, #380]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000408a:	691b      	ldr	r3, [r3, #16]
7000408c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
70004090:	687b      	ldr	r3, [r7, #4]
70004092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
70004094:	0919      	lsrs	r1, r3, #4
70004096:	4b5e      	ldr	r3, [pc, #376]	@ (70004210 <HAL_RCCEx_PeriphCLKConfig+0x258>)
70004098:	400b      	ands	r3, r1
7000409a:	495b      	ldr	r1, [pc, #364]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000409c:	4313      	orrs	r3, r2
7000409e:	610b      	str	r3, [r1, #16]
700040a0:	e005      	b.n	700040ae <HAL_RCCEx_PeriphCLKConfig+0xf6>
700040a2:	4b59      	ldr	r3, [pc, #356]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700040a4:	691b      	ldr	r3, [r3, #16]
700040a6:	4a58      	ldr	r2, [pc, #352]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700040a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
700040ac:	6113      	str	r3, [r2, #16]
700040ae:	4b56      	ldr	r3, [pc, #344]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700040b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
700040b2:	687b      	ldr	r3, [r7, #4]
700040b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
700040b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
700040ba:	4953      	ldr	r1, [pc, #332]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700040bc:	4313      	orrs	r3, r2
700040be:	670b      	str	r3, [r1, #112]	@ 0x70
        __HAL_RCC_RTC_ENABLE();
700040c0:	4b51      	ldr	r3, [pc, #324]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700040c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
700040c4:	4a50      	ldr	r2, [pc, #320]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700040c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
700040ca:	6713      	str	r3, [r2, #112]	@ 0x70
700040cc:	e004      	b.n	700040d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
      else
      {
        /* set overall return value */
        status = ret;
700040ce:	7dfb      	ldrb	r3, [r7, #23]
700040d0:	75bb      	strb	r3, [r7, #22]
700040d2:	e001      	b.n	700040d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
700040d4:	7dfb      	ldrb	r3, [r7, #23]
700040d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- FMC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
700040d8:	687b      	ldr	r3, [r7, #4]
700040da:	681b      	ldr	r3, [r3, #0]
700040dc:	f003 0301 	and.w	r3, r3, #1
700040e0:	2b00      	cmp	r3, #0
700040e2:	d030      	beq.n	70004146 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
700040e4:	687b      	ldr	r3, [r7, #4]
700040e6:	685b      	ldr	r3, [r3, #4]
700040e8:	2b03      	cmp	r3, #3
700040ea:	d819      	bhi.n	70004120 <HAL_RCCEx_PeriphCLKConfig+0x168>
700040ec:	a201      	add	r2, pc, #4	@ (adr r2, 700040f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
700040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700040f2:	bf00      	nop
700040f4:	70004127 	.word	0x70004127
700040f8:	70004105 	.word	0x70004105
700040fc:	70004113 	.word	0x70004113
70004100:	70004127 	.word	0x70004127
      case RCC_FMCCLKSOURCE_HCLK:   /* HCLK  clock selected as FMC kernel peripheral clock */
        break;

      case RCC_FMCCLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for FMC kernel */
        /* Enable FMC kernel clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70004104:	4b40      	ldr	r3, [pc, #256]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004108:	4a3f      	ldr	r2, [pc, #252]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000410a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000410e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
70004110:	e00a      	b.n	70004128 <HAL_RCCEx_PeriphCLKConfig+0x170>

      case RCC_FMCCLKSOURCE_PLL2R:  /* PLL2_R is used as clock source for FMC kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
70004112:	4b3d      	ldr	r3, [pc, #244]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004116:	4a3c      	ldr	r2, [pc, #240]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
7000411c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FMC kernel clock source configuration done later after clock selection check */
        break;
7000411e:	e003      	b.n	70004128 <HAL_RCCEx_PeriphCLKConfig+0x170>
      case RCC_FMCCLKSOURCE_HSI:   /* HSI oscillator is used as clock source for FMC kernel */
        /* FMC kernel clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004120:	2301      	movs	r3, #1
70004122:	75fb      	strb	r3, [r7, #23]
        break;
70004124:	e000      	b.n	70004128 <HAL_RCCEx_PeriphCLKConfig+0x170>
        break;
70004126:	bf00      	nop
    }

    if (ret == HAL_OK)
70004128:	7dfb      	ldrb	r3, [r7, #23]
7000412a:	2b00      	cmp	r3, #0
7000412c:	d109      	bne.n	70004142 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    {
      /* Set the source of FMC kernel clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
7000412e:	4b36      	ldr	r3, [pc, #216]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004132:	f023 0203 	bic.w	r2, r3, #3
70004136:	687b      	ldr	r3, [r7, #4]
70004138:	685b      	ldr	r3, [r3, #4]
7000413a:	4933      	ldr	r1, [pc, #204]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000413c:	4313      	orrs	r3, r2
7000413e:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004140:	e001      	b.n	70004146 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004142:	7dfb      	ldrb	r3, [r7, #23]
70004144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI1 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
70004146:	687b      	ldr	r3, [r7, #4]
70004148:	681b      	ldr	r3, [r3, #0]
7000414a:	f003 0302 	and.w	r3, r3, #2
7000414e:	2b00      	cmp	r3, #0
70004150:	d02a      	beq.n	700041a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));

    switch (PeriphClkInit->Xspi1ClockSelection)
70004152:	687b      	ldr	r3, [r7, #4]
70004154:	689b      	ldr	r3, [r3, #8]
70004156:	2b20      	cmp	r3, #32
70004158:	d00c      	beq.n	70004174 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
7000415a:	2b20      	cmp	r3, #32
7000415c:	d811      	bhi.n	70004182 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
7000415e:	2b00      	cmp	r3, #0
70004160:	d012      	beq.n	70004188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
70004162:	2b10      	cmp	r3, #16
70004164:	d10d      	bne.n	70004182 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      case RCC_XSPI1CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi1 */
        /* Nothing to do */
        break;

      case RCC_XSPI1CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
70004166:	4b28      	ldr	r3, [pc, #160]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000416a:	4a27      	ldr	r2, [pc, #156]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000416c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70004170:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
70004172:	e00a      	b.n	7000418a <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      case RCC_XSPI1CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
70004174:	4b24      	ldr	r3, [pc, #144]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004178:	4a23      	ldr	r2, [pc, #140]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000417a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
7000417e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI1 clock source configuration done later after clock selection check */
        break;
70004180:	e003      	b.n	7000418a <HAL_RCCEx_PeriphCLKConfig+0x1d2>

      default:
        ret = HAL_ERROR;
70004182:	2301      	movs	r3, #1
70004184:	75fb      	strb	r3, [r7, #23]
        break;
70004186:	e000      	b.n	7000418a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        break;
70004188:	bf00      	nop
    }

    if (ret == HAL_OK)
7000418a:	7dfb      	ldrb	r3, [r7, #23]
7000418c:	2b00      	cmp	r3, #0
7000418e:	d109      	bne.n	700041a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      /* Configure the XSPI1 clock source */
      __HAL_RCC_XSPI1_CONFIG(PeriphClkInit->Xspi1ClockSelection);
70004190:	4b1d      	ldr	r3, [pc, #116]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004194:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
70004198:	687b      	ldr	r3, [r7, #4]
7000419a:	689b      	ldr	r3, [r3, #8]
7000419c:	491a      	ldr	r1, [pc, #104]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
7000419e:	4313      	orrs	r3, r2
700041a0:	64cb      	str	r3, [r1, #76]	@ 0x4c
700041a2:	e001      	b.n	700041a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    }
    else
    {
      /* set overall return value */
      status = ret;
700041a4:	7dfb      	ldrb	r3, [r7, #23]
700041a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- XSPI2 clock source configuration ----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
700041a8:	687b      	ldr	r3, [r7, #4]
700041aa:	681b      	ldr	r3, [r3, #0]
700041ac:	f003 0304 	and.w	r3, r3, #4
700041b0:	2b00      	cmp	r3, #0
700041b2:	d031      	beq.n	70004218 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));

    switch (PeriphClkInit->Xspi2ClockSelection)
700041b4:	687b      	ldr	r3, [r7, #4]
700041b6:	68db      	ldr	r3, [r3, #12]
700041b8:	2b80      	cmp	r3, #128	@ 0x80
700041ba:	d00c      	beq.n	700041d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
700041bc:	2b80      	cmp	r3, #128	@ 0x80
700041be:	d811      	bhi.n	700041e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
700041c0:	2b00      	cmp	r3, #0
700041c2:	d012      	beq.n	700041ea <HAL_RCCEx_PeriphCLKConfig+0x232>
700041c4:	2b40      	cmp	r3, #64	@ 0x40
700041c6:	d10d      	bne.n	700041e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      case RCC_XSPI2CLKSOURCE_HCLK:   /* HCLK is used as clock source for Xspi2 */
        /* Nothing to do */
        break;

      case RCC_XSPI2CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
700041c8:	4b0f      	ldr	r3, [pc, #60]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700041cc:	4a0e      	ldr	r2, [pc, #56]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700041ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700041d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
700041d4:	e00a      	b.n	700041ec <HAL_RCCEx_PeriphCLKConfig+0x234>

      case RCC_XSPI2CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for Xspi2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
700041d6:	4b0c      	ldr	r3, [pc, #48]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700041da:	4a0b      	ldr	r2, [pc, #44]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700041dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
700041e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* XSPI2 clock source configuration done later after clock selection check */
        break;
700041e2:	e003      	b.n	700041ec <HAL_RCCEx_PeriphCLKConfig+0x234>

      default:
        ret = HAL_ERROR;
700041e4:	2301      	movs	r3, #1
700041e6:	75fb      	strb	r3, [r7, #23]
        break;
700041e8:	e000      	b.n	700041ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        break;
700041ea:	bf00      	nop
    }

    if (ret == HAL_OK)
700041ec:	7dfb      	ldrb	r3, [r7, #23]
700041ee:	2b00      	cmp	r3, #0
700041f0:	d110      	bne.n	70004214 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Configure the XSPI2 clock source */
      __HAL_RCC_XSPI2_CONFIG(PeriphClkInit->Xspi2ClockSelection);
700041f2:	4b05      	ldr	r3, [pc, #20]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
700041f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700041f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
700041fa:	687b      	ldr	r3, [r7, #4]
700041fc:	68db      	ldr	r3, [r3, #12]
700041fe:	4902      	ldr	r1, [pc, #8]	@ (70004208 <HAL_RCCEx_PeriphCLKConfig+0x250>)
70004200:	4313      	orrs	r3, r2
70004202:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004204:	e008      	b.n	70004218 <HAL_RCCEx_PeriphCLKConfig+0x260>
70004206:	bf00      	nop
70004208:	58024400 	.word	0x58024400
7000420c:	58024800 	.word	0x58024800
70004210:	0fffffcf 	.word	0x0fffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
70004214:	7dfb      	ldrb	r3, [r7, #23]
70004216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
70004218:	687b      	ldr	r3, [r7, #4]
7000421a:	681b      	ldr	r3, [r3, #0]
7000421c:	f003 0308 	and.w	r3, r3, #8
70004220:	2b00      	cmp	r3, #0
70004222:	d008      	beq.n	70004236 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
70004224:	4b93      	ldr	r3, [pc, #588]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004228:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
7000422c:	687b      	ldr	r3, [r7, #4]
7000422e:	691b      	ldr	r3, [r3, #16]
70004230:	4990      	ldr	r1, [pc, #576]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004232:	4313      	orrs	r3, r2
70004234:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------------- SDMMC12 Configuration ------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC12) == RCC_PERIPHCLK_SDMMC12)
70004236:	687b      	ldr	r3, [r7, #4]
70004238:	681b      	ldr	r3, [r3, #0]
7000423a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
7000423e:	2b00      	cmp	r3, #0
70004240:	d026      	beq.n	70004290 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
70004242:	687b      	ldr	r3, [r7, #4]
70004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004246:	2b00      	cmp	r3, #0
70004248:	d002      	beq.n	70004250 <HAL_RCCEx_PeriphCLKConfig+0x298>
7000424a:	2b04      	cmp	r3, #4
7000424c:	d007      	beq.n	7000425e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
7000424e:	e00d      	b.n	7000426c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      case RCC_SDMMC12CLKSOURCE_PLL2S:  /* PLL2_S is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_SCLK);
70004250:	4b88      	ldr	r3, [pc, #544]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004254:	4a87      	ldr	r2, [pc, #540]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004256:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
7000425a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
7000425c:	e009      	b.n	70004272 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      case RCC_SDMMC12CLKSOURCE_PLL2T:  /* PLL2_T is used as clock source for SDMMC12 kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_TCLK);
7000425e:	4b85      	ldr	r3, [pc, #532]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004262:	4a84      	ldr	r2, [pc, #528]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
70004268:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SDMMC12 kernel clock source configuration done later after clock selection check */
        break;
7000426a:	e002      	b.n	70004272 <HAL_RCCEx_PeriphCLKConfig+0x2ba>

      default:
        ret = HAL_ERROR;
7000426c:	2301      	movs	r3, #1
7000426e:	75fb      	strb	r3, [r7, #23]
        break;
70004270:	bf00      	nop
    }

    if (ret == HAL_OK)
70004272:	7dfb      	ldrb	r3, [r7, #23]
70004274:	2b00      	cmp	r3, #0
70004276:	d109      	bne.n	7000428c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
    {
      /* Set the source of SDMMC12 clock*/
      __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
70004278:	4b7e      	ldr	r3, [pc, #504]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000427a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000427c:	f023 0204 	bic.w	r2, r3, #4
70004280:	687b      	ldr	r3, [r7, #4]
70004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004284:	497b      	ldr	r1, [pc, #492]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004286:	4313      	orrs	r3, r2
70004288:	64cb      	str	r3, [r1, #76]	@ 0x4c
7000428a:	e001      	b.n	70004290 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000428c:	7dfb      	ldrb	r3, [r7, #23]
7000428e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
70004290:	687b      	ldr	r3, [r7, #4]
70004292:	681b      	ldr	r3, [r3, #0]
70004294:	f003 0310 	and.w	r3, r3, #16
70004298:	2b00      	cmp	r3, #0
7000429a:	d02e      	beq.n	700042fa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
7000429c:	687b      	ldr	r3, [r7, #4]
7000429e:	695b      	ldr	r3, [r3, #20]
700042a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
700042a4:	d019      	beq.n	700042da <HAL_RCCEx_PeriphCLKConfig+0x322>
700042a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
700042aa:	d813      	bhi.n	700042d4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
700042ac:	2b00      	cmp	r3, #0
700042ae:	d003      	beq.n	700042b8 <HAL_RCCEx_PeriphCLKConfig+0x300>
700042b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
700042b4:	d007      	beq.n	700042c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
700042b6:	e00d      	b.n	700042d4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    {

      case RCC_ADCCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for ADC */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700042b8:	4b6e      	ldr	r3, [pc, #440]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700042ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700042bc:	4a6d      	ldr	r2, [pc, #436]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700042be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700042c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
700042c4:	e00a      	b.n	700042dc <HAL_RCCEx_PeriphCLKConfig+0x324>

      case RCC_ADCCLKSOURCE_PLL3R: /* PLL3_R is used as clock source for ADC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
700042c6:	4b6b      	ldr	r3, [pc, #428]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700042c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700042ca:	4a6a      	ldr	r2, [pc, #424]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700042cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700042d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADC clock source configuration done later after clock selection check */
        break;
700042d2:	e003      	b.n	700042dc <HAL_RCCEx_PeriphCLKConfig+0x324>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700042d4:	2301      	movs	r3, #1
700042d6:	75fb      	strb	r3, [r7, #23]
        break;
700042d8:	e000      	b.n	700042dc <HAL_RCCEx_PeriphCLKConfig+0x324>
        break;
700042da:	bf00      	nop
    }

    if (ret == HAL_OK)
700042dc:	7dfb      	ldrb	r3, [r7, #23]
700042de:	2b00      	cmp	r3, #0
700042e0:	d109      	bne.n	700042f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
700042e2:	4b64      	ldr	r3, [pc, #400]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700042e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
700042ea:	687b      	ldr	r3, [r7, #4]
700042ec:	695b      	ldr	r3, [r3, #20]
700042ee:	4961      	ldr	r1, [pc, #388]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700042f0:	4313      	orrs	r3, r2
700042f2:	64cb      	str	r3, [r1, #76]	@ 0x4c
700042f4:	e001      	b.n	700042fa <HAL_RCCEx_PeriphCLKConfig+0x342>
    }
    else
    {
      /* set overall return value */
      status = ret;
700042f6:	7dfb      	ldrb	r3, [r7, #23]
700042f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- ADF1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
700042fa:	687b      	ldr	r3, [r7, #4]
700042fc:	681b      	ldr	r3, [r3, #0]
700042fe:	f003 0320 	and.w	r3, r3, #32
70004302:	2b00      	cmp	r3, #0
70004304:	d03f      	beq.n	70004386 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));

    switch (PeriphClkInit->Adf1ClockSelection)
70004306:	687b      	ldr	r3, [r7, #4]
70004308:	699b      	ldr	r3, [r3, #24]
7000430a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
7000430e:	d02a      	beq.n	70004366 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
70004310:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
70004314:	d824      	bhi.n	70004360 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
70004316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
7000431a:	d024      	beq.n	70004366 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
7000431c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70004320:	d81e      	bhi.n	70004360 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
70004322:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
70004326:	d01e      	beq.n	70004366 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
70004328:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
7000432c:	d818      	bhi.n	70004360 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
7000432e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70004332:	d00e      	beq.n	70004352 <HAL_RCCEx_PeriphCLKConfig+0x39a>
70004334:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70004338:	d812      	bhi.n	70004360 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
7000433a:	2b00      	cmp	r3, #0
7000433c:	d013      	beq.n	70004366 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
7000433e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
70004342:	d10d      	bne.n	70004360 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      case RCC_ADF1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for ADF1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70004344:	4b4b      	ldr	r3, [pc, #300]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004348:	4a4a      	ldr	r2, [pc, #296]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000434a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000434e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
70004350:	e00a      	b.n	70004368 <HAL_RCCEx_PeriphCLKConfig+0x3b0>

      case RCC_ADF1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for ADF1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70004352:	4b48      	ldr	r3, [pc, #288]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004356:	4a47      	ldr	r2, [pc, #284]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004358:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
7000435c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ADF1 clock source configuration done later after clock selection check */
        break;
7000435e:	e003      	b.n	70004368 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      case RCC_ADF1CLKSOURCE_HSI:    /* HSI is used as clock source for ADF1 */
        /* ADF1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004360:	2301      	movs	r3, #1
70004362:	75fb      	strb	r3, [r7, #23]
        break;
70004364:	e000      	b.n	70004368 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        break;
70004366:	bf00      	nop
    }

    if (ret == HAL_OK)
70004368:	7dfb      	ldrb	r3, [r7, #23]
7000436a:	2b00      	cmp	r3, #0
7000436c:	d109      	bne.n	70004382 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    {
      /* Set the source of ADF1 clock*/
      __HAL_RCC_ADF1_CONFIG(PeriphClkInit->Adf1ClockSelection);
7000436e:	4b41      	ldr	r3, [pc, #260]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004372:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
70004376:	687b      	ldr	r3, [r7, #4]
70004378:	699b      	ldr	r3, [r3, #24]
7000437a:	493e      	ldr	r1, [pc, #248]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000437c:	4313      	orrs	r3, r2
7000437e:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004380:	e001      	b.n	70004386 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004382:	7dfb      	ldrb	r3, [r7, #23]
70004384:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- CEC configuration ---------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
70004386:	687b      	ldr	r3, [r7, #4]
70004388:	681b      	ldr	r3, [r3, #0]
7000438a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
7000438e:	2b00      	cmp	r3, #0
70004390:	d008      	beq.n	700043a4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
70004392:	4b38      	ldr	r3, [pc, #224]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004396:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
7000439a:	687b      	ldr	r3, [r7, #4]
7000439c:	69db      	ldr	r3, [r3, #28]
7000439e:	4935      	ldr	r1, [pc, #212]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700043a0:	4313      	orrs	r3, r2
700043a2:	650b      	str	r3, [r1, #80]	@ 0x50
  }

  /*---------------------- ETH1 REF configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1REF) == RCC_PERIPHCLK_ETH1REF)
700043a4:	687b      	ldr	r3, [r7, #4]
700043a6:	681b      	ldr	r3, [r3, #0]
700043a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700043ac:	2b00      	cmp	r3, #0
700043ae:	d008      	beq.n	700043c2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1REFCLKSOURCE(PeriphClkInit->Eth1RefClockSelection));

    /* Configure the ETH1 REF clock source */
    __HAL_RCC_ETH1REF_CONFIG(PeriphClkInit->Eth1RefClockSelection);
700043b0:	4b30      	ldr	r3, [pc, #192]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700043b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
700043b8:	687b      	ldr	r3, [r7, #4]
700043ba:	6a1b      	ldr	r3, [r3, #32]
700043bc:	492d      	ldr	r1, [pc, #180]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700043be:	4313      	orrs	r3, r2
700043c0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*---------------------- ETH1PHY configuration --------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
700043c2:	687b      	ldr	r3, [r7, #4]
700043c4:	681b      	ldr	r3, [r3, #0]
700043c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700043ca:	2b00      	cmp	r3, #0
700043cc:	d020      	beq.n	70004410 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETH1PHYCLKSOURCE(PeriphClkInit->Eth1PhyClockSelection));

    switch (PeriphClkInit->Eth1PhyClockSelection)
700043ce:	687b      	ldr	r3, [r7, #4]
700043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700043d2:	2b00      	cmp	r3, #0
700043d4:	d00c      	beq.n	700043f0 <HAL_RCCEx_PeriphCLKConfig+0x438>
700043d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
700043da:	d106      	bne.n	700043ea <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_ETH1PHYCLKSOURCE_HSE:    /* HSE is used as clock source for ETH PHY */
        /* ETH PHY clock source configuration done later after clock selection check */
        break;

      case RCC_ETH1PHYCLKSOURCE_PLL3S:  /* PLL3_S is used as clock source for ETH PHY */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_SCLK);
700043dc:	4b25      	ldr	r3, [pc, #148]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700043e0:	4a24      	ldr	r2, [pc, #144]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700043e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
700043e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* ETH PHY clock source configuration done later after clock selection check */
        break;
700043e8:	e003      	b.n	700043f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>

      default:
        ret = HAL_ERROR;
700043ea:	2301      	movs	r3, #1
700043ec:	75fb      	strb	r3, [r7, #23]
        break;
700043ee:	e000      	b.n	700043f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        break;
700043f0:	bf00      	nop
    }

    if (ret == HAL_OK)
700043f2:	7dfb      	ldrb	r3, [r7, #23]
700043f4:	2b00      	cmp	r3, #0
700043f6:	d109      	bne.n	7000440c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of ETH PHY clock*/
      __HAL_RCC_ETH1PHY_CONFIG(PeriphClkInit->Eth1PhyClockSelection);
700043f8:	4b1e      	ldr	r3, [pc, #120]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
700043fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700043fc:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
70004400:	687b      	ldr	r3, [r7, #4]
70004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70004404:	491b      	ldr	r1, [pc, #108]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004406:	4313      	orrs	r3, r2
70004408:	64cb      	str	r3, [r1, #76]	@ 0x4c
7000440a:	e001      	b.n	70004410 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
7000440c:	7dfb      	ldrb	r3, [r7, #23]
7000440e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------- FDCAN configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
70004410:	687b      	ldr	r3, [r7, #4]
70004412:	681b      	ldr	r3, [r3, #0]
70004414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
70004418:	2b00      	cmp	r3, #0
7000441a:	d02f      	beq.n	7000447c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
7000441c:	687b      	ldr	r3, [r7, #4]
7000441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70004420:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
70004424:	d00e      	beq.n	70004444 <HAL_RCCEx_PeriphCLKConfig+0x48c>
70004426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
7000442a:	d812      	bhi.n	70004452 <HAL_RCCEx_PeriphCLKConfig+0x49a>
7000442c:	2b00      	cmp	r3, #0
7000442e:	d013      	beq.n	70004458 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
70004430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
70004434:	d10d      	bne.n	70004452 <HAL_RCCEx_PeriphCLKConfig+0x49a>
    {
      case RCC_FDCANCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for FDCAN kernel */
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70004436:	4b0f      	ldr	r3, [pc, #60]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000443a:	4a0e      	ldr	r2, [pc, #56]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000443c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70004440:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
70004442:	e00a      	b.n	7000445a <HAL_RCCEx_PeriphCLKConfig+0x4a2>

      case RCC_FDCANCLKSOURCE_PLL2P: /* PLL2_P is used as clock source for FDCAN kernel */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70004444:	4b0b      	ldr	r3, [pc, #44]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004448:	4a0a      	ldr	r2, [pc, #40]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000444a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000444e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* FDCAN clock source configuration done later after clock selection check */
        break;
70004450:	e003      	b.n	7000445a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      case RCC_FDCANCLKSOURCE_HSE:   /* HSE is used as clock source for FDCAN kernel */
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004452:	2301      	movs	r3, #1
70004454:	75fb      	strb	r3, [r7, #23]
        break;
70004456:	e000      	b.n	7000445a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
        break;
70004458:	bf00      	nop
    }

    if (ret == HAL_OK)
7000445a:	7dfb      	ldrb	r3, [r7, #23]
7000445c:	2b00      	cmp	r3, #0
7000445e:	d10b      	bne.n	70004478 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
70004460:	4b04      	ldr	r3, [pc, #16]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
70004462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004464:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
70004468:	687b      	ldr	r3, [r7, #4]
7000446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
7000446c:	4901      	ldr	r1, [pc, #4]	@ (70004474 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
7000446e:	4313      	orrs	r3, r2
70004470:	650b      	str	r3, [r1, #80]	@ 0x50
70004472:	e003      	b.n	7000447c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
70004474:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
70004478:	7dfb      	ldrb	r3, [r7, #23]
7000447a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/I3C1 Configuration ------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1_I3C1) == RCC_PERIPHCLK_I2C1_I3C1)
7000447c:	687b      	ldr	r3, [r7, #4]
7000447e:	681b      	ldr	r3, [r3, #0]
70004480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70004484:	2b00      	cmp	r3, #0
70004486:	d02c      	beq.n	700044e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1_I3C1CLKSOURCE(PeriphClkInit->I2c1_I3c1ClockSelection));

    switch (PeriphClkInit->I2c1_I3c1ClockSelection)
70004488:	687b      	ldr	r3, [r7, #4]
7000448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000448c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70004490:	d017      	beq.n	700044c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
70004492:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
70004496:	d811      	bhi.n	700044bc <HAL_RCCEx_PeriphCLKConfig+0x504>
70004498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
7000449c:	d011      	beq.n	700044c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
7000449e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
700044a2:	d80b      	bhi.n	700044bc <HAL_RCCEx_PeriphCLKConfig+0x504>
700044a4:	2b00      	cmp	r3, #0
700044a6:	d00c      	beq.n	700044c2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
700044a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
700044ac:	d106      	bne.n	700044bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      case RCC_I2C1_I3C1CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C1/I3C1*/
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
700044ae:	4b97      	ldr	r3, [pc, #604]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700044b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700044b2:	4a96      	ldr	r2, [pc, #600]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700044b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700044b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;
700044ba:	e003      	b.n	700044c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_I2C1_I3C1CLKSOURCE_CSI:     /* CSI is used as clock source for I2C1/I3C1*/
        /* I2C1/I3C1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700044bc:	2301      	movs	r3, #1
700044be:	75fb      	strb	r3, [r7, #23]
        break;
700044c0:	e000      	b.n	700044c4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
700044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
700044c4:	7dfb      	ldrb	r3, [r7, #23]
700044c6:	2b00      	cmp	r3, #0
700044c8:	d109      	bne.n	700044de <HAL_RCCEx_PeriphCLKConfig+0x526>
    {
      /* Set the source of I2C1/I3C1 clock*/
      __HAL_RCC_I2C1_I3C1_CONFIG(PeriphClkInit->I2c1_I3c1ClockSelection);
700044ca:	4b90      	ldr	r3, [pc, #576]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700044cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700044ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
700044d2:	687b      	ldr	r3, [r7, #4]
700044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700044d6:	498d      	ldr	r1, [pc, #564]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700044d8:	4313      	orrs	r3, r2
700044da:	650b      	str	r3, [r1, #80]	@ 0x50
700044dc:	e001      	b.n	700044e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    }
    else
    {
      /* set overall return value */
      status = ret;
700044de:	7dfb      	ldrb	r3, [r7, #23]
700044e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C2/I2C3 Configuration -------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C23) == RCC_PERIPHCLK_I2C23)
700044e2:	687b      	ldr	r3, [r7, #4]
700044e4:	681b      	ldr	r3, [r3, #0]
700044e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
700044ea:	2b00      	cmp	r3, #0
700044ec:	d02c      	beq.n	70004548 <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C23CLKSOURCE(PeriphClkInit->I2c23ClockSelection));

    switch (PeriphClkInit->I2c23ClockSelection)
700044ee:	687b      	ldr	r3, [r7, #4]
700044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700044f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
700044f6:	d017      	beq.n	70004528 <HAL_RCCEx_PeriphCLKConfig+0x570>
700044f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
700044fc:	d811      	bhi.n	70004522 <HAL_RCCEx_PeriphCLKConfig+0x56a>
700044fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70004502:	d011      	beq.n	70004528 <HAL_RCCEx_PeriphCLKConfig+0x570>
70004504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70004508:	d80b      	bhi.n	70004522 <HAL_RCCEx_PeriphCLKConfig+0x56a>
7000450a:	2b00      	cmp	r3, #0
7000450c:	d00c      	beq.n	70004528 <HAL_RCCEx_PeriphCLKConfig+0x570>
7000450e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70004512:	d106      	bne.n	70004522 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    {
      case RCC_I2C23CLKSOURCE_PLL3R:   /* PLL3_R is used as clock source for I2C2/I2C3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70004514:	4b7d      	ldr	r3, [pc, #500]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004518:	4a7c      	ldr	r2, [pc, #496]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
7000451a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
7000451e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;
70004520:	e003      	b.n	7000452a <HAL_RCCEx_PeriphCLKConfig+0x572>
      case RCC_I2C23CLKSOURCE_CSI:     /* CSI is used as clock source for I2C2/I2C3 */
        /* I2C2/I2C3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004522:	2301      	movs	r3, #1
70004524:	75fb      	strb	r3, [r7, #23]
        break;
70004526:	e000      	b.n	7000452a <HAL_RCCEx_PeriphCLKConfig+0x572>
        break;
70004528:	bf00      	nop
    }

    if (ret == HAL_OK)
7000452a:	7dfb      	ldrb	r3, [r7, #23]
7000452c:	2b00      	cmp	r3, #0
7000452e:	d109      	bne.n	70004544 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Set the source of I2C2/I2C3 clock*/
      __HAL_RCC_I2C23_CONFIG(PeriphClkInit->I2c23ClockSelection);
70004530:	4b76      	ldr	r3, [pc, #472]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
70004538:	687b      	ldr	r3, [r7, #4]
7000453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000453c:	4973      	ldr	r1, [pc, #460]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
7000453e:	4313      	orrs	r3, r2
70004540:	650b      	str	r3, [r1, #80]	@ 0x50
70004542:	e001      	b.n	70004548 <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004544:	7dfb      	ldrb	r3, [r7, #23]
70004546:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
70004548:	687b      	ldr	r3, [r7, #4]
7000454a:	681b      	ldr	r3, [r3, #0]
7000454c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70004550:	2b00      	cmp	r3, #0
70004552:	d045      	beq.n	700045e0 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
70004554:	687b      	ldr	r3, [r7, #4]
70004556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70004558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
7000455c:	d02a      	beq.n	700045b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
7000455e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
70004562:	d824      	bhi.n	700045ae <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70004564:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70004568:	d026      	beq.n	700045b8 <HAL_RCCEx_PeriphCLKConfig+0x600>
7000456a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000456e:	d81e      	bhi.n	700045ae <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70004570:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70004574:	d022      	beq.n	700045bc <HAL_RCCEx_PeriphCLKConfig+0x604>
70004576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
7000457a:	d818      	bhi.n	700045ae <HAL_RCCEx_PeriphCLKConfig+0x5f6>
7000457c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70004580:	d00e      	beq.n	700045a0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
70004582:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70004586:	d812      	bhi.n	700045ae <HAL_RCCEx_PeriphCLKConfig+0x5f6>
70004588:	2b00      	cmp	r3, #0
7000458a:	d019      	beq.n	700045c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
7000458c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
70004590:	d10d      	bne.n	700045ae <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      case RCC_LPTIM1CLKSOURCE_PCLK1: /* PCLK1 as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70004592:	4b5e      	ldr	r3, [pc, #376]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004596:	4a5d      	ldr	r2, [pc, #372]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000459c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
7000459e:	e010      	b.n	700045c2 <HAL_RCCEx_PeriphCLKConfig+0x60a>

      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for LPTIM1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
700045a0:	4b5a      	ldr	r3, [pc, #360]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700045a4:	4a59      	ldr	r2, [pc, #356]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700045a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700045aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
700045ac:	e009      	b.n	700045c2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        /* HSI, HSE, or CSI oscillator is used as clock source for LPTIM1 */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700045ae:	2301      	movs	r3, #1
700045b0:	75fb      	strb	r3, [r7, #23]
        break;
700045b2:	e006      	b.n	700045c2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
700045b4:	bf00      	nop
700045b6:	e004      	b.n	700045c2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
700045b8:	bf00      	nop
700045ba:	e002      	b.n	700045c2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
700045bc:	bf00      	nop
700045be:	e000      	b.n	700045c2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
        break;
700045c0:	bf00      	nop
    }

    if (ret == HAL_OK)
700045c2:	7dfb      	ldrb	r3, [r7, #23]
700045c4:	2b00      	cmp	r3, #0
700045c6:	d109      	bne.n	700045dc <HAL_RCCEx_PeriphCLKConfig+0x624>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
700045c8:	4b50      	ldr	r3, [pc, #320]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700045ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700045cc:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
700045d0:	687b      	ldr	r3, [r7, #4]
700045d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
700045d4:	494d      	ldr	r1, [pc, #308]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700045d6:	4313      	orrs	r3, r2
700045d8:	650b      	str	r3, [r1, #80]	@ 0x50
700045da:	e001      	b.n	700045e0 <HAL_RCCEx_PeriphCLKConfig+0x628>
    }
    else
    {
      /* set overall return value */
      status = ret;
700045dc:	7dfb      	ldrb	r3, [r7, #23]
700045de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2/LPTIM3 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM23) == RCC_PERIPHCLK_LPTIM23)
700045e0:	687b      	ldr	r3, [r7, #4]
700045e2:	681b      	ldr	r3, [r3, #0]
700045e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
700045e8:	2b00      	cmp	r3, #0
700045ea:	d045      	beq.n	70004678 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
  {
    switch (PeriphClkInit->Lptim23ClockSelection)
700045ec:	687b      	ldr	r3, [r7, #4]
700045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
700045f0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
700045f4:	d02a      	beq.n	7000464c <HAL_RCCEx_PeriphCLKConfig+0x694>
700045f6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
700045fa:	d824      	bhi.n	70004646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
700045fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70004600:	d026      	beq.n	70004650 <HAL_RCCEx_PeriphCLKConfig+0x698>
70004602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
70004606:	d81e      	bhi.n	70004646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70004608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
7000460c:	d022      	beq.n	70004654 <HAL_RCCEx_PeriphCLKConfig+0x69c>
7000460e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
70004612:	d818      	bhi.n	70004646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70004614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
70004618:	d00e      	beq.n	70004638 <HAL_RCCEx_PeriphCLKConfig+0x680>
7000461a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
7000461e:	d812      	bhi.n	70004646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
70004620:	2b00      	cmp	r3, #0
70004622:	d019      	beq.n	70004658 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
70004624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
70004628:	d10d      	bne.n	70004646 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_LPTIM23CLKSOURCE_PCLK4: /* PCLK4 as clock source for LPTIM2/LPTIM3 */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM23CLKSOURCE_PLL2P: /* PLL2_P is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
7000462a:	4b38      	ldr	r3, [pc, #224]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
7000462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000462e:	4a37      	ldr	r2, [pc, #220]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70004634:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
70004636:	e010      	b.n	7000465a <HAL_RCCEx_PeriphCLKConfig+0x6a2>

      case RCC_LPTIM23CLKSOURCE_PLL3R: /* PLL3_R is used as clock source for LPTIM2/LPTIM3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70004638:	4b34      	ldr	r3, [pc, #208]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
7000463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000463c:	4a33      	ldr	r2, [pc, #204]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
7000463e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70004642:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;
70004644:	e009      	b.n	7000465a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2/LPTIM3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004646:	2301      	movs	r3, #1
70004648:	75fb      	strb	r3, [r7, #23]
        break;
7000464a:	e006      	b.n	7000465a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
7000464c:	bf00      	nop
7000464e:	e004      	b.n	7000465a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70004650:	bf00      	nop
70004652:	e002      	b.n	7000465a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70004654:	bf00      	nop
70004656:	e000      	b.n	7000465a <HAL_RCCEx_PeriphCLKConfig+0x6a2>
        break;
70004658:	bf00      	nop
    }

    if (ret == HAL_OK)
7000465a:	7dfb      	ldrb	r3, [r7, #23]
7000465c:	2b00      	cmp	r3, #0
7000465e:	d109      	bne.n	70004674 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
    {
      /* Set the source of LPTIM2/LPTIM3 clock*/
      __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
70004660:	4b2a      	ldr	r3, [pc, #168]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70004664:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70004668:	687b      	ldr	r3, [r7, #4]
7000466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
7000466c:	4927      	ldr	r1, [pc, #156]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
7000466e:	4313      	orrs	r3, r2
70004670:	658b      	str	r3, [r1, #88]	@ 0x58
70004672:	e001      	b.n	70004678 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004674:	7dfb      	ldrb	r3, [r7, #23]
70004676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM4/LPTIM5 configuration -----------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM45) == RCC_PERIPHCLK_LPTIM45)
70004678:	687b      	ldr	r3, [r7, #4]
7000467a:	681b      	ldr	r3, [r3, #0]
7000467c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
70004680:	2b00      	cmp	r3, #0
70004682:	d047      	beq.n	70004714 <HAL_RCCEx_PeriphCLKConfig+0x75c>
  {
    switch (PeriphClkInit->Lptim45ClockSelection)
70004684:	687b      	ldr	r3, [r7, #4]
70004686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70004688:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
7000468c:	d02a      	beq.n	700046e4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
7000468e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
70004692:	d824      	bhi.n	700046de <HAL_RCCEx_PeriphCLKConfig+0x726>
70004694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
70004698:	d026      	beq.n	700046e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
7000469a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
7000469e:	d81e      	bhi.n	700046de <HAL_RCCEx_PeriphCLKConfig+0x726>
700046a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
700046a4:	d022      	beq.n	700046ec <HAL_RCCEx_PeriphCLKConfig+0x734>
700046a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
700046aa:	d818      	bhi.n	700046de <HAL_RCCEx_PeriphCLKConfig+0x726>
700046ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
700046b0:	d00e      	beq.n	700046d0 <HAL_RCCEx_PeriphCLKConfig+0x718>
700046b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
700046b6:	d812      	bhi.n	700046de <HAL_RCCEx_PeriphCLKConfig+0x726>
700046b8:	2b00      	cmp	r3, #0
700046ba:	d019      	beq.n	700046f0 <HAL_RCCEx_PeriphCLKConfig+0x738>
700046bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
700046c0:	d10d      	bne.n	700046de <HAL_RCCEx_PeriphCLKConfig+0x726>
      case RCC_LPTIM45CLKSOURCE_PCLK4:  /* PCLK4 as clock source for LPTIM4/LPTIM5 */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM45CLKSOURCE_PLL2P: /* PLL2 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700046c2:	4b12      	ldr	r3, [pc, #72]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700046c6:	4a11      	ldr	r2, [pc, #68]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700046c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700046cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
700046ce:	e010      	b.n	700046f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>

      case RCC_LPTIM45CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4/LPTIM5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
700046d0:	4b0e      	ldr	r3, [pc, #56]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700046d4:	4a0d      	ldr	r2, [pc, #52]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700046d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700046da:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;
700046dc:	e009      	b.n	700046f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM4/LPTIM5 clock */
        /* LPTIM4/LPTIM5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700046de:	2301      	movs	r3, #1
700046e0:	75fb      	strb	r3, [r7, #23]
        break;
700046e2:	e006      	b.n	700046f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
700046e4:	bf00      	nop
700046e6:	e004      	b.n	700046f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
700046e8:	bf00      	nop
700046ea:	e002      	b.n	700046f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
700046ec:	bf00      	nop
700046ee:	e000      	b.n	700046f2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
        break;
700046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
700046f2:	7dfb      	ldrb	r3, [r7, #23]
700046f4:	2b00      	cmp	r3, #0
700046f6:	d10b      	bne.n	70004710 <HAL_RCCEx_PeriphCLKConfig+0x758>
    {
      /* Set the source of LPTIM4/LPTIM5 clock */
      __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
700046f8:	4b04      	ldr	r3, [pc, #16]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
700046fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
700046fc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
70004700:	687b      	ldr	r3, [r7, #4]
70004702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
70004704:	4901      	ldr	r1, [pc, #4]	@ (7000470c <HAL_RCCEx_PeriphCLKConfig+0x754>)
70004706:	4313      	orrs	r3, r2
70004708:	658b      	str	r3, [r1, #88]	@ 0x58
7000470a:	e003      	b.n	70004714 <HAL_RCCEx_PeriphCLKConfig+0x75c>
7000470c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
70004710:	7dfb      	ldrb	r3, [r7, #23]
70004712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
70004714:	687b      	ldr	r3, [r7, #4]
70004716:	681b      	ldr	r3, [r3, #0]
70004718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
7000471c:	2b00      	cmp	r3, #0
7000471e:	d034      	beq.n	7000478a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    switch (PeriphClkInit->Lpuart1ClockSelection)
70004720:	687b      	ldr	r3, [r7, #4]
70004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
70004724:	2b05      	cmp	r3, #5
70004726:	d81d      	bhi.n	70004764 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
70004728:	a201      	add	r2, pc, #4	@ (adr r2, 70004730 <HAL_RCCEx_PeriphCLKConfig+0x778>)
7000472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000472e:	bf00      	nop
70004730:	7000476b 	.word	0x7000476b
70004734:	70004749 	.word	0x70004749
70004738:	70004757 	.word	0x70004757
7000473c:	7000476b 	.word	0x7000476b
70004740:	7000476b 	.word	0x7000476b
70004744:	7000476b 	.word	0x7000476b
      case RCC_LPUART1CLKSOURCE_PCLK4: /* PCLK4 selected as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004748:	4b91      	ldr	r3, [pc, #580]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000474c:	4a90      	ldr	r2, [pc, #576]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000474e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004752:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
70004754:	e00a      	b.n	7000476c <HAL_RCCEx_PeriphCLKConfig+0x7b4>

      case RCC_LPUART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for LPUART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004756:	4b8e      	ldr	r3, [pc, #568]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000475a:	4a8d      	ldr	r2, [pc, #564]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000475c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004760:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
70004762:	e003      	b.n	7000476c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004764:	2301      	movs	r3, #1
70004766:	75fb      	strb	r3, [r7, #23]
        break;
70004768:	e000      	b.n	7000476c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
        break;
7000476a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000476c:	7dfb      	ldrb	r3, [r7, #23]
7000476e:	2b00      	cmp	r3, #0
70004770:	d109      	bne.n	70004786 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
70004772:	4b87      	ldr	r3, [pc, #540]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70004776:	f023 0207 	bic.w	r2, r3, #7
7000477a:	687b      	ldr	r3, [r7, #4]
7000477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
7000477e:	4984      	ldr	r1, [pc, #528]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004780:	4313      	orrs	r3, r2
70004782:	658b      	str	r3, [r1, #88]	@ 0x58
70004784:	e001      	b.n	7000478a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004786:	7dfb      	ldrb	r3, [r7, #23]
70004788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LTDC Configuration ----------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
7000478a:	687b      	ldr	r3, [r7, #4]
7000478c:	681b      	ldr	r3, [r3, #0]
7000478e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
70004792:	2b00      	cmp	r3, #0
70004794:	d005      	beq.n	700047a2 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
  {
    /* LTDC internally connected to PLL3_R output clock */
    __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
70004796:	4b7e      	ldr	r3, [pc, #504]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000479a:	4a7d      	ldr	r2, [pc, #500]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000479c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700047a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  }

  /*---------------------------- PSSI configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
700047a2:	687b      	ldr	r3, [r7, #4]
700047a4:	681b      	ldr	r3, [r3, #0]
700047a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
700047aa:	2b00      	cmp	r3, #0
700047ac:	d021      	beq.n	700047f2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));

    switch (PeriphClkInit->PssiClockSelection)
700047ae:	687b      	ldr	r3, [r7, #4]
700047b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
700047b2:	2b00      	cmp	r3, #0
700047b4:	d003      	beq.n	700047be <HAL_RCCEx_PeriphCLKConfig+0x806>
700047b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
700047ba:	d00a      	beq.n	700047d2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
700047bc:	e006      	b.n	700047cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      case RCC_PSSICLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for PSSI */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
700047be:	4b74      	ldr	r3, [pc, #464]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700047c2:	4a73      	ldr	r2, [pc, #460]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700047c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700047c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* PSSI clock source configuration done later after clock selection check */
        break;
700047ca:	e003      	b.n	700047d4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        /* HSI, HSE, or CSI oscillator is used as source of PSSI clock */
        /* PSSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700047cc:	2301      	movs	r3, #1
700047ce:	75fb      	strb	r3, [r7, #23]
        break;
700047d0:	e000      	b.n	700047d4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
        break;
700047d2:	bf00      	nop
    }

    if (ret == HAL_OK)
700047d4:	7dfb      	ldrb	r3, [r7, #23]
700047d6:	2b00      	cmp	r3, #0
700047d8:	d109      	bne.n	700047ee <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      /* Set the source of PSSI clock*/
      __HAL_RCC_PSSI_CONFIG(PeriphClkInit->PssiClockSelection);
700047da:	4b6d      	ldr	r3, [pc, #436]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700047dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
700047de:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
700047e2:	687b      	ldr	r3, [r7, #4]
700047e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
700047e6:	496a      	ldr	r1, [pc, #424]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700047e8:	4313      	orrs	r3, r2
700047ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
700047ec:	e001      	b.n	700047f2 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    }
    else
    {
      /* set overall return value */
      status = ret;
700047ee:	7dfb      	ldrb	r3, [r7, #23]
700047f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
700047f2:	687b      	ldr	r3, [r7, #4]
700047f4:	681b      	ldr	r3, [r3, #0]
700047f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
700047fa:	2b00      	cmp	r3, #0
700047fc:	d043      	beq.n	70004886 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
700047fe:	687b      	ldr	r3, [r7, #4]
70004800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004802:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70004806:	d02c      	beq.n	70004862 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
70004808:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000480c:	d826      	bhi.n	7000485c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
7000480e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70004812:	d028      	beq.n	70004866 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
70004814:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
70004818:	d820      	bhi.n	7000485c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
7000481a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
7000481e:	d016      	beq.n	7000484e <HAL_RCCEx_PeriphCLKConfig+0x896>
70004820:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
70004824:	d81a      	bhi.n	7000485c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
70004826:	2b00      	cmp	r3, #0
70004828:	d003      	beq.n	70004832 <HAL_RCCEx_PeriphCLKConfig+0x87a>
7000482a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
7000482e:	d007      	beq.n	70004840 <HAL_RCCEx_PeriphCLKConfig+0x888>
70004830:	e014      	b.n	7000485c <HAL_RCCEx_PeriphCLKConfig+0x8a4>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI1 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70004832:	4b57      	ldr	r3, [pc, #348]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004836:	4a56      	ldr	r2, [pc, #344]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
7000483c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
7000483e:	e013      	b.n	70004868 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70004840:	4b53      	ldr	r3, [pc, #332]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004844:	4a52      	ldr	r2, [pc, #328]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004846:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
7000484a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
7000484c:	e00c      	b.n	70004868 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
7000484e:	4b50      	ldr	r3, [pc, #320]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004852:	4a4f      	ldr	r2, [pc, #316]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004854:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70004858:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI1 clock source configuration done later after clock selection check */
        break;
7000485a:	e005      	b.n	70004868 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
7000485c:	2301      	movs	r3, #1
7000485e:	75fb      	strb	r3, [r7, #23]
        break;
70004860:	e002      	b.n	70004868 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
70004862:	bf00      	nop
70004864:	e000      	b.n	70004868 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
        break;
70004866:	bf00      	nop
    }

    if (ret == HAL_OK)
70004868:	7dfb      	ldrb	r3, [r7, #23]
7000486a:	2b00      	cmp	r3, #0
7000486c:	d109      	bne.n	70004882 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
7000486e:	4b48      	ldr	r3, [pc, #288]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004872:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
70004876:	687b      	ldr	r3, [r7, #4]
70004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
7000487a:	4945      	ldr	r1, [pc, #276]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000487c:	4313      	orrs	r3, r2
7000487e:	654b      	str	r3, [r1, #84]	@ 0x54
70004880:	e001      	b.n	70004886 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004882:	7dfb      	ldrb	r3, [r7, #23]
70004884:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
70004886:	687b      	ldr	r3, [r7, #4]
70004888:	681b      	ldr	r3, [r3, #0]
7000488a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
7000488e:	2b00      	cmp	r3, #0
70004890:	d04b      	beq.n	7000492a <HAL_RCCEx_PeriphCLKConfig+0x972>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
70004892:	687b      	ldr	r3, [r7, #4]
70004894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004896:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
7000489a:	d032      	beq.n	70004902 <HAL_RCCEx_PeriphCLKConfig+0x94a>
7000489c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
700048a0:	d82c      	bhi.n	700048fc <HAL_RCCEx_PeriphCLKConfig+0x944>
700048a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
700048a6:	d02e      	beq.n	70004906 <HAL_RCCEx_PeriphCLKConfig+0x94e>
700048a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
700048ac:	d826      	bhi.n	700048fc <HAL_RCCEx_PeriphCLKConfig+0x944>
700048ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
700048b2:	d02a      	beq.n	7000490a <HAL_RCCEx_PeriphCLKConfig+0x952>
700048b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
700048b8:	d820      	bhi.n	700048fc <HAL_RCCEx_PeriphCLKConfig+0x944>
700048ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
700048be:	d016      	beq.n	700048ee <HAL_RCCEx_PeriphCLKConfig+0x936>
700048c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
700048c4:	d81a      	bhi.n	700048fc <HAL_RCCEx_PeriphCLKConfig+0x944>
700048c6:	2b00      	cmp	r3, #0
700048c8:	d003      	beq.n	700048d2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
700048ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
700048ce:	d007      	beq.n	700048e0 <HAL_RCCEx_PeriphCLKConfig+0x928>
700048d0:	e014      	b.n	700048fc <HAL_RCCEx_PeriphCLKConfig+0x944>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SAI2 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
700048d2:	4b2f      	ldr	r3, [pc, #188]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700048d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700048d6:	4a2e      	ldr	r2, [pc, #184]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700048d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
700048dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
700048de:	e015      	b.n	7000490c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SAI2 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
700048e0:	4b2b      	ldr	r3, [pc, #172]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700048e4:	4a2a      	ldr	r2, [pc, #168]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700048e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
700048ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
700048ec:	e00e      	b.n	7000490c <HAL_RCCEx_PeriphCLKConfig+0x954>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SAI2 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
700048ee:	4b28      	ldr	r3, [pc, #160]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700048f2:	4a27      	ldr	r2, [pc, #156]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
700048f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700048f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SAI2 clock source configuration done later after clock selection check */
        break;
700048fa:	e007      	b.n	7000490c <HAL_RCCEx_PeriphCLKConfig+0x954>
      case RCC_SAI2CLKSOURCE_SPDIF: /* SPDIF clock is used as source of SAI2 clock */
        /* SAI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
700048fc:	2301      	movs	r3, #1
700048fe:	75fb      	strb	r3, [r7, #23]
        break;
70004900:	e004      	b.n	7000490c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70004902:	bf00      	nop
70004904:	e002      	b.n	7000490c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
70004906:	bf00      	nop
70004908:	e000      	b.n	7000490c <HAL_RCCEx_PeriphCLKConfig+0x954>
        break;
7000490a:	bf00      	nop
    }

    if (ret == HAL_OK)
7000490c:	7dfb      	ldrb	r3, [r7, #23]
7000490e:	2b00      	cmp	r3, #0
70004910:	d109      	bne.n	70004926 <HAL_RCCEx_PeriphCLKConfig+0x96e>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
70004912:	4b1f      	ldr	r3, [pc, #124]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004916:	f423 02e0 	bic.w	r2, r3, #7340032	@ 0x700000
7000491a:	687b      	ldr	r3, [r7, #4]
7000491c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
7000491e:	491c      	ldr	r1, [pc, #112]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004920:	4313      	orrs	r3, r2
70004922:	654b      	str	r3, [r1, #84]	@ 0x54
70004924:	e001      	b.n	7000492a <HAL_RCCEx_PeriphCLKConfig+0x972>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004926:	7dfb      	ldrb	r3, [r7, #23]
70004928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPDIFRX configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
7000492a:	687b      	ldr	r3, [r7, #4]
7000492c:	681b      	ldr	r3, [r3, #0]
7000492e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
70004932:	2b00      	cmp	r3, #0
70004934:	d03e      	beq.n	700049b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
70004936:	687b      	ldr	r3, [r7, #4]
70004938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
7000493a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
7000493e:	d029      	beq.n	70004994 <HAL_RCCEx_PeriphCLKConfig+0x9dc>
70004940:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
70004944:	d820      	bhi.n	70004988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
70004946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
7000494a:	d016      	beq.n	7000497a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
7000494c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
70004950:	d81a      	bhi.n	70004988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
70004952:	2b00      	cmp	r3, #0
70004954:	d003      	beq.n	7000495e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
70004956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
7000495a:	d007      	beq.n	7000496c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
7000495c:	e014      	b.n	70004988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL1Q: /* PLL1_Q is used as clock source for SPDIFRX */
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
7000495e:	4b0c      	ldr	r3, [pc, #48]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004962:	4a0b      	ldr	r2, [pc, #44]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70004968:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
7000496a:	e014      	b.n	70004996 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL2R: /* PLL2_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_RCLK);
7000496c:	4b08      	ldr	r3, [pc, #32]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004970:	4a07      	ldr	r2, [pc, #28]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004972:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
70004976:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70004978:	e00d      	b.n	70004996 <HAL_RCCEx_PeriphCLKConfig+0x9de>

      case RCC_SPDIFRXCLKSOURCE_PLL3R:  /* PLL3_R is used as clock source for SPDIFRX */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_RCLK);
7000497a:	4b05      	ldr	r3, [pc, #20]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
7000497c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000497e:	4a04      	ldr	r2, [pc, #16]	@ (70004990 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
70004980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70004984:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
70004986:	e006      	b.n	70004996 <HAL_RCCEx_PeriphCLKConfig+0x9de>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004988:	2301      	movs	r3, #1
7000498a:	75fb      	strb	r3, [r7, #23]
        break;
7000498c:	e003      	b.n	70004996 <HAL_RCCEx_PeriphCLKConfig+0x9de>
7000498e:	bf00      	nop
70004990:	58024400 	.word	0x58024400
        break;
70004994:	bf00      	nop
    }

    if (ret == HAL_OK)
70004996:	7dfb      	ldrb	r3, [r7, #23]
70004998:	2b00      	cmp	r3, #0
7000499a:	d109      	bne.n	700049b0 <HAL_RCCEx_PeriphCLKConfig+0x9f8>
    {
      /* Set the source of SPDIFRX clock */
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
7000499c:	4b8e      	ldr	r3, [pc, #568]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
7000499e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
700049a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
700049a4:	687b      	ldr	r3, [r7, #4]
700049a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
700049a8:	498b      	ldr	r1, [pc, #556]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700049aa:	4313      	orrs	r3, r2
700049ac:	650b      	str	r3, [r1, #80]	@ 0x50
700049ae:	e001      	b.n	700049b4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
700049b0:	7dfb      	ldrb	r3, [r7, #23]
700049b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
700049b4:	687b      	ldr	r3, [r7, #4]
700049b6:	681b      	ldr	r3, [r3, #0]
700049b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
700049bc:	2b00      	cmp	r3, #0
700049be:	d043      	beq.n	70004a48 <HAL_RCCEx_PeriphCLKConfig+0xa90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
700049c0:	687b      	ldr	r3, [r7, #4]
700049c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
700049c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
700049c8:	d02c      	beq.n	70004a24 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
700049ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
700049ce:	d826      	bhi.n	70004a1e <HAL_RCCEx_PeriphCLKConfig+0xa66>
700049d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
700049d4:	d028      	beq.n	70004a28 <HAL_RCCEx_PeriphCLKConfig+0xa70>
700049d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
700049da:	d820      	bhi.n	70004a1e <HAL_RCCEx_PeriphCLKConfig+0xa66>
700049dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
700049e0:	d016      	beq.n	70004a10 <HAL_RCCEx_PeriphCLKConfig+0xa58>
700049e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
700049e6:	d81a      	bhi.n	70004a1e <HAL_RCCEx_PeriphCLKConfig+0xa66>
700049e8:	2b00      	cmp	r3, #0
700049ea:	d003      	beq.n	700049f4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
700049ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
700049f0:	d007      	beq.n	70004a02 <HAL_RCCEx_PeriphCLKConfig+0xa4a>
700049f2:	e014      	b.n	70004a1e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI1 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
700049f4:	4b78      	ldr	r3, [pc, #480]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700049f8:	4a77      	ldr	r2, [pc, #476]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
700049fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
700049fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70004a00:	e013      	b.n	70004a2a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70004a02:	4b75      	ldr	r3, [pc, #468]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004a06:	4a74      	ldr	r2, [pc, #464]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70004a0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70004a0e:	e00c      	b.n	70004a2a <HAL_RCCEx_PeriphCLKConfig+0xa72>

      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70004a10:	4b71      	ldr	r3, [pc, #452]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004a14:	4a70      	ldr	r2, [pc, #448]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a16:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70004a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI1 clock source configuration done later after clock selection check */
        break;
70004a1c:	e005      	b.n	70004a2a <HAL_RCCEx_PeriphCLKConfig+0xa72>
      case RCC_SPI1CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004a1e:	2301      	movs	r3, #1
70004a20:	75fb      	strb	r3, [r7, #23]
        break;
70004a22:	e002      	b.n	70004a2a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
70004a24:	bf00      	nop
70004a26:	e000      	b.n	70004a2a <HAL_RCCEx_PeriphCLKConfig+0xa72>
        break;
70004a28:	bf00      	nop
    }

    if (ret == HAL_OK)
70004a2a:	7dfb      	ldrb	r3, [r7, #23]
70004a2c:	2b00      	cmp	r3, #0
70004a2e:	d109      	bne.n	70004a44 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
    {
      /* Set the source of SPI1 clock*/
      __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
70004a30:	4b69      	ldr	r3, [pc, #420]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
70004a38:	687b      	ldr	r3, [r7, #4]
70004a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70004a3c:	4966      	ldr	r1, [pc, #408]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a3e:	4313      	orrs	r3, r2
70004a40:	654b      	str	r3, [r1, #84]	@ 0x54
70004a42:	e001      	b.n	70004a48 <HAL_RCCEx_PeriphCLKConfig+0xa90>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004a44:	7dfb      	ldrb	r3, [r7, #23]
70004a46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI2/SPI3 configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI23) == RCC_PERIPHCLK_SPI23)
70004a48:	687b      	ldr	r3, [r7, #4]
70004a4a:	681b      	ldr	r3, [r3, #0]
70004a4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
70004a50:	2b00      	cmp	r3, #0
70004a52:	d03c      	beq.n	70004ace <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
70004a54:	687b      	ldr	r3, [r7, #4]
70004a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70004a58:	2b40      	cmp	r3, #64	@ 0x40
70004a5a:	d026      	beq.n	70004aaa <HAL_RCCEx_PeriphCLKConfig+0xaf2>
70004a5c:	2b40      	cmp	r3, #64	@ 0x40
70004a5e:	d821      	bhi.n	70004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70004a60:	2b30      	cmp	r3, #48	@ 0x30
70004a62:	d024      	beq.n	70004aae <HAL_RCCEx_PeriphCLKConfig+0xaf6>
70004a64:	2b30      	cmp	r3, #48	@ 0x30
70004a66:	d81d      	bhi.n	70004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70004a68:	2b20      	cmp	r3, #32
70004a6a:	d014      	beq.n	70004a96 <HAL_RCCEx_PeriphCLKConfig+0xade>
70004a6c:	2b20      	cmp	r3, #32
70004a6e:	d819      	bhi.n	70004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
70004a70:	2b00      	cmp	r3, #0
70004a72:	d002      	beq.n	70004a7a <HAL_RCCEx_PeriphCLKConfig+0xac2>
70004a74:	2b10      	cmp	r3, #16
70004a76:	d007      	beq.n	70004a88 <HAL_RCCEx_PeriphCLKConfig+0xad0>
70004a78:	e014      	b.n	70004aa4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      case RCC_SPI23CLKSOURCE_PLL1Q:  /* PLL1_Q is used as clock source for SPI2/SPI3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL_QCLK);
70004a7a:	4b57      	ldr	r3, [pc, #348]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004a7e:	4a56      	ldr	r2, [pc, #344]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
70004a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70004a86:	e013      	b.n	70004ab0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL2P:  /* PLL2_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_PCLK);
70004a88:	4b53      	ldr	r3, [pc, #332]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004a8c:	4a52      	ldr	r2, [pc, #328]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
70004a92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70004a94:	e00c      	b.n	70004ab0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>

      case RCC_SPI23CLKSOURCE_PLL3P:  /* PLL3_P is used as clock source for SPI2/SPI3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_PCLK);
70004a96:	4b50      	ldr	r3, [pc, #320]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004a9a:	4a4f      	ldr	r2, [pc, #316]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004a9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70004aa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;
70004aa2:	e005      	b.n	70004ab0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
      case RCC_SPI23CLKSOURCE_CLKP:  /* HSI, HSE, or CSI oscillator is used as source of SPI2/SPI3 clock */
        /* SPI2/SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004aa4:	2301      	movs	r3, #1
70004aa6:	75fb      	strb	r3, [r7, #23]
        break;
70004aa8:	e002      	b.n	70004ab0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
70004aaa:	bf00      	nop
70004aac:	e000      	b.n	70004ab0 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
        break;
70004aae:	bf00      	nop
    }

    if (ret == HAL_OK)
70004ab0:	7dfb      	ldrb	r3, [r7, #23]
70004ab2:	2b00      	cmp	r3, #0
70004ab4:	d109      	bne.n	70004aca <HAL_RCCEx_PeriphCLKConfig+0xb12>
    {
      /* Set the source of SPI2/SPI3 clock*/
      __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
70004ab6:	4b48      	ldr	r3, [pc, #288]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004ab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
70004abe:	687b      	ldr	r3, [r7, #4]
70004ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
70004ac2:	4945      	ldr	r1, [pc, #276]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004ac4:	4313      	orrs	r3, r2
70004ac6:	650b      	str	r3, [r1, #80]	@ 0x50
70004ac8:	e001      	b.n	70004ace <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004aca:	7dfb      	ldrb	r3, [r7, #23]
70004acc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
70004ace:	687b      	ldr	r3, [r7, #4]
70004ad0:	681b      	ldr	r3, [r3, #0]
70004ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
70004ad6:	2b00      	cmp	r3, #0
70004ad8:	d03c      	beq.n	70004b54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    switch (PeriphClkInit->Spi45ClockSelection)
70004ada:	687b      	ldr	r3, [r7, #4]
70004adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
70004ade:	2b50      	cmp	r3, #80	@ 0x50
70004ae0:	d022      	beq.n	70004b28 <HAL_RCCEx_PeriphCLKConfig+0xb70>
70004ae2:	2b50      	cmp	r3, #80	@ 0x50
70004ae4:	d81d      	bhi.n	70004b22 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004ae6:	2b40      	cmp	r3, #64	@ 0x40
70004ae8:	d020      	beq.n	70004b2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
70004aea:	2b40      	cmp	r3, #64	@ 0x40
70004aec:	d819      	bhi.n	70004b22 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004aee:	2b30      	cmp	r3, #48	@ 0x30
70004af0:	d01e      	beq.n	70004b30 <HAL_RCCEx_PeriphCLKConfig+0xb78>
70004af2:	2b30      	cmp	r3, #48	@ 0x30
70004af4:	d815      	bhi.n	70004b22 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004af6:	2b20      	cmp	r3, #32
70004af8:	d00c      	beq.n	70004b14 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
70004afa:	2b20      	cmp	r3, #32
70004afc:	d811      	bhi.n	70004b22 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
70004afe:	2b00      	cmp	r3, #0
70004b00:	d018      	beq.n	70004b34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
70004b02:	2b10      	cmp	r3, #16
70004b04:	d10d      	bne.n	70004b22 <HAL_RCCEx_PeriphCLKConfig+0xb6a>
      case RCC_SPI45CLKSOURCE_PCLK2:  /* PCLK2 as clock source for SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004b06:	4b34      	ldr	r3, [pc, #208]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004b0a:	4a33      	ldr	r2, [pc, #204]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004b10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
70004b12:	e010      	b.n	70004b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_SPI45CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI4/SPI5 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004b14:	4b30      	ldr	r3, [pc, #192]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004b18:	4a2f      	ldr	r2, [pc, #188]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;
70004b20:	e009      	b.n	70004b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      case RCC_SPI45CLKSOURCE_HSE: /* HSE oscillator clock is used as source of SPI4/SPI5 */
        /* SPI4/SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004b22:	2301      	movs	r3, #1
70004b24:	75fb      	strb	r3, [r7, #23]
        break;
70004b26:	e006      	b.n	70004b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004b28:	bf00      	nop
70004b2a:	e004      	b.n	70004b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004b2c:	bf00      	nop
70004b2e:	e002      	b.n	70004b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004b30:	bf00      	nop
70004b32:	e000      	b.n	70004b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
70004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
70004b36:	7dfb      	ldrb	r3, [r7, #23]
70004b38:	2b00      	cmp	r3, #0
70004b3a:	d109      	bne.n	70004b50 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of SPI4/SPI5 clock */
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
70004b3c:	4b26      	ldr	r3, [pc, #152]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004b40:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
70004b44:	687b      	ldr	r3, [r7, #4]
70004b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
70004b48:	4923      	ldr	r1, [pc, #140]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b4a:	4313      	orrs	r3, r2
70004b4c:	654b      	str	r3, [r1, #84]	@ 0x54
70004b4e:	e001      	b.n	70004b54 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004b50:	7dfb      	ldrb	r3, [r7, #23]
70004b52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
70004b54:	687b      	ldr	r3, [r7, #4]
70004b56:	681b      	ldr	r3, [r3, #0]
70004b58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
70004b5c:	2b00      	cmp	r3, #0
70004b5e:	d03f      	beq.n	70004be0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
70004b60:	687b      	ldr	r3, [r7, #4]
70004b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
70004b64:	2b50      	cmp	r3, #80	@ 0x50
70004b66:	d022      	beq.n	70004bae <HAL_RCCEx_PeriphCLKConfig+0xbf6>
70004b68:	2b50      	cmp	r3, #80	@ 0x50
70004b6a:	d81d      	bhi.n	70004ba8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
70004b6c:	2b40      	cmp	r3, #64	@ 0x40
70004b6e:	d020      	beq.n	70004bb2 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
70004b70:	2b40      	cmp	r3, #64	@ 0x40
70004b72:	d819      	bhi.n	70004ba8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
70004b74:	2b30      	cmp	r3, #48	@ 0x30
70004b76:	d01e      	beq.n	70004bb6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
70004b78:	2b30      	cmp	r3, #48	@ 0x30
70004b7a:	d815      	bhi.n	70004ba8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
70004b7c:	2b20      	cmp	r3, #32
70004b7e:	d00c      	beq.n	70004b9a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
70004b80:	2b20      	cmp	r3, #32
70004b82:	d811      	bhi.n	70004ba8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
70004b84:	2b00      	cmp	r3, #0
70004b86:	d018      	beq.n	70004bba <HAL_RCCEx_PeriphCLKConfig+0xc02>
70004b88:	2b10      	cmp	r3, #16
70004b8a:	d10d      	bne.n	70004ba8 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
      case RCC_SPI6CLKSOURCE_PCLK4: /* PCLK4 as clock source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q:  /* PLL2_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004b8c:	4b12      	ldr	r3, [pc, #72]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004b90:	4a11      	ldr	r2, [pc, #68]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004b96:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
70004b98:	e010      	b.n	70004bbc <HAL_RCCEx_PeriphCLKConfig+0xc04>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3_Q is used as clock source for SPI6 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004b9a:	4b0f      	ldr	r3, [pc, #60]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004b9e:	4a0e      	ldr	r2, [pc, #56]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* SPI6 clock source configuration done later after clock selection check */
        break;
70004ba6:	e009      	b.n	70004bbc <HAL_RCCEx_PeriphCLKConfig+0xc04>
      case RCC_SPI6CLKSOURCE_HSE: /* HSE oscillator is used as source for SPI6 */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004ba8:	2301      	movs	r3, #1
70004baa:	75fb      	strb	r3, [r7, #23]
        break;
70004bac:	e006      	b.n	70004bbc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004bae:	bf00      	nop
70004bb0:	e004      	b.n	70004bbc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004bb2:	bf00      	nop
70004bb4:	e002      	b.n	70004bbc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004bb6:	bf00      	nop
70004bb8:	e000      	b.n	70004bbc <HAL_RCCEx_PeriphCLKConfig+0xc04>
        break;
70004bba:	bf00      	nop
    }

    if (ret == HAL_OK)
70004bbc:	7dfb      	ldrb	r3, [r7, #23]
70004bbe:	2b00      	cmp	r3, #0
70004bc0:	d10c      	bne.n	70004bdc <HAL_RCCEx_PeriphCLKConfig+0xc24>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
70004bc2:	4b05      	ldr	r3, [pc, #20]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
70004bc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
70004bca:	687b      	ldr	r3, [r7, #4]
70004bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
70004bce:	4902      	ldr	r1, [pc, #8]	@ (70004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
70004bd0:	4313      	orrs	r3, r2
70004bd2:	658b      	str	r3, [r1, #88]	@ 0x58
70004bd4:	e004      	b.n	70004be0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
70004bd6:	bf00      	nop
70004bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
70004bdc:	7dfb      	ldrb	r3, [r7, #23]
70004bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART1 configuration --------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
70004be0:	687b      	ldr	r3, [r7, #4]
70004be2:	681b      	ldr	r3, [r3, #0]
70004be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
70004be8:	2b00      	cmp	r3, #0
70004bea:	d034      	beq.n	70004c56 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
70004bec:	687b      	ldr	r3, [r7, #4]
70004bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70004bf0:	2b05      	cmp	r3, #5
70004bf2:	d81d      	bhi.n	70004c30 <HAL_RCCEx_PeriphCLKConfig+0xc78>
70004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 70004bfc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
70004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70004bfa:	bf00      	nop
70004bfc:	70004c37 	.word	0x70004c37
70004c00:	70004c15 	.word	0x70004c15
70004c04:	70004c23 	.word	0x70004c23
70004c08:	70004c37 	.word	0x70004c37
70004c0c:	70004c37 	.word	0x70004c37
70004c10:	70004c37 	.word	0x70004c37
      case RCC_USART1CLKSOURCE_PCLK2: /* PCLK2 as clock source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART1 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004c14:	4b69      	ldr	r3, [pc, #420]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004c18:	4a68      	ldr	r2, [pc, #416]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004c1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
70004c20:	e00a      	b.n	70004c38 <HAL_RCCEx_PeriphCLKConfig+0xc80>

      case RCC_USART1CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART1 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004c22:	4b66      	ldr	r3, [pc, #408]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004c26:	4a65      	ldr	r2, [pc, #404]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART1 clock source configuration done later after clock selection check */
        break;
70004c2e:	e003      	b.n	70004c38 <HAL_RCCEx_PeriphCLKConfig+0xc80>
      case RCC_USART1CLKSOURCE_LSE: /* LSE oscillator is used as source for USART1 */
        /* USART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004c30:	2301      	movs	r3, #1
70004c32:	75fb      	strb	r3, [r7, #23]
        break;
70004c34:	e000      	b.n	70004c38 <HAL_RCCEx_PeriphCLKConfig+0xc80>
        break;
70004c36:	bf00      	nop
    }

    if (ret == HAL_OK)
70004c38:	7dfb      	ldrb	r3, [r7, #23]
70004c3a:	2b00      	cmp	r3, #0
70004c3c:	d109      	bne.n	70004c52 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    {
      /* Set the source of USART1 clock */
      __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
70004c3e:	4b5f      	ldr	r3, [pc, #380]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70004c42:	f023 0207 	bic.w	r2, r3, #7
70004c46:	687b      	ldr	r3, [r7, #4]
70004c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
70004c4a:	495c      	ldr	r1, [pc, #368]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c4c:	4313      	orrs	r3, r2
70004c4e:	654b      	str	r3, [r1, #84]	@ 0x54
70004c50:	e001      	b.n	70004c56 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004c52:	7dfb      	ldrb	r3, [r7, #23]
70004c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------- USART2/USART3/UART4/UART5/UART7/UART8 Configuration --------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
70004c56:	687b      	ldr	r3, [r7, #4]
70004c58:	681b      	ldr	r3, [r3, #0]
70004c5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
70004c5e:	2b00      	cmp	r3, #0
70004c60:	d033      	beq.n	70004cca <HAL_RCCEx_PeriphCLKConfig+0xd12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART234578CLKSOURCE(PeriphClkInit->Usart234578ClockSelection));

    switch (PeriphClkInit->Usart234578ClockSelection)
70004c62:	687b      	ldr	r3, [r7, #4]
70004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70004c66:	2b05      	cmp	r3, #5
70004c68:	d81c      	bhi.n	70004ca4 <HAL_RCCEx_PeriphCLKConfig+0xcec>
70004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 70004c70 <HAL_RCCEx_PeriphCLKConfig+0xcb8>)
70004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70004c70:	70004cab 	.word	0x70004cab
70004c74:	70004c89 	.word	0x70004c89
70004c78:	70004c97 	.word	0x70004c97
70004c7c:	70004cab 	.word	0x70004cab
70004c80:	70004cab 	.word	0x70004cab
70004c84:	70004cab 	.word	0x70004cab
      case RCC_USART234578CLKSOURCE_PCLK1: /* PCLK1 as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2Q: /* PLL2_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL_QCLK);
70004c88:	4b4c      	ldr	r3, [pc, #304]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004c8c:	4a4b      	ldr	r2, [pc, #300]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
70004c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
70004c94:	e00a      	b.n	70004cac <HAL_RCCEx_PeriphCLKConfig+0xcf4>

      case RCC_USART234578CLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USART2/USART3/UART4/UART5/UART7/UART8 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004c96:	4b49      	ldr	r3, [pc, #292]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004c9a:	4a48      	ldr	r2, [pc, #288]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;
70004ca2:	e003      	b.n	70004cac <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        /* LSE,  oscillator is used as source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
        /* USART2/USART3/UART4/UART5/UART7/UART8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004ca4:	2301      	movs	r3, #1
70004ca6:	75fb      	strb	r3, [r7, #23]
        break;
70004ca8:	e000      	b.n	70004cac <HAL_RCCEx_PeriphCLKConfig+0xcf4>
        break;
70004caa:	bf00      	nop
    }

    if (ret == HAL_OK)
70004cac:	7dfb      	ldrb	r3, [r7, #23]
70004cae:	2b00      	cmp	r3, #0
70004cb0:	d109      	bne.n	70004cc6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
      /* Set the source of USART2/USART3/UART4/UART5/UART7/UART8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
70004cb2:	4b42      	ldr	r3, [pc, #264]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
70004cb6:	f023 0207 	bic.w	r2, r3, #7
70004cba:	687b      	ldr	r3, [r7, #4]
70004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
70004cbe:	493f      	ldr	r1, [pc, #252]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004cc0:	4313      	orrs	r3, r2
70004cc2:	650b      	str	r3, [r1, #80]	@ 0x50
70004cc4:	e001      	b.n	70004cca <HAL_RCCEx_PeriphCLKConfig+0xd12>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004cc6:	7dfb      	ldrb	r3, [r7, #23]
70004cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBPHYC Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHYC) == RCC_PERIPHCLK_USBPHYC)
70004cca:	687b      	ldr	r3, [r7, #4]
70004ccc:	681b      	ldr	r3, [r3, #0]
70004cce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70004cd2:	2b00      	cmp	r3, #0
70004cd4:	d027      	beq.n	70004d26 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCCLKSOURCE(PeriphClkInit->UsbPhycClockSelection));

    switch (PeriphClkInit->UsbPhycClockSelection)
70004cd6:	687b      	ldr	r3, [r7, #4]
70004cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70004cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70004cde:	d008      	beq.n	70004cf2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
70004ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70004ce4:	d80c      	bhi.n	70004d00 <HAL_RCCEx_PeriphCLKConfig+0xd48>
70004ce6:	2b00      	cmp	r3, #0
70004ce8:	d00d      	beq.n	70004d06 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
70004cea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70004cee:	d00a      	beq.n	70004d06 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
70004cf0:	e006      	b.n	70004d00 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      case RCC_USBPHYCCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USBPHYC */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004cf2:	4b32      	ldr	r3, [pc, #200]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004cf6:	4a31      	ldr	r2, [pc, #196]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USBPHYC clock source configuration done later after clock selection check */
        break;
70004cfe:	e003      	b.n	70004d08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
      case RCC_USBPHYCCLKSOURCE_HSE_DIV2: /* HSE divided by 2 is used as clock source for USBPHYC */
        /* USBPHYC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004d00:	2301      	movs	r3, #1
70004d02:	75fb      	strb	r3, [r7, #23]
        break;
70004d04:	e000      	b.n	70004d08 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
70004d06:	bf00      	nop
    }

    if (ret == HAL_OK)
70004d08:	7dfb      	ldrb	r3, [r7, #23]
70004d0a:	2b00      	cmp	r3, #0
70004d0c:	d109      	bne.n	70004d22 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBPHYC_CONFIG(PeriphClkInit->UsbPhycClockSelection);
70004d0e:	4b2b      	ldr	r3, [pc, #172]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004d12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
70004d16:	687b      	ldr	r3, [r7, #4]
70004d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
70004d1a:	4928      	ldr	r1, [pc, #160]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d1c:	4313      	orrs	r3, r2
70004d1e:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004d20:	e001      	b.n	70004d26 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004d22:	7dfb      	ldrb	r3, [r7, #23]
70004d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USBOTGFS Configuration ---------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGFS) == RCC_PERIPHCLK_USBOTGFS)
70004d26:	687b      	ldr	r3, [r7, #4]
70004d28:	681b      	ldr	r3, [r3, #0]
70004d2a:	2b00      	cmp	r3, #0
70004d2c:	da2c      	bge.n	70004d88 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOTGFSCLKSOURCE(PeriphClkInit->UsbOtgFsClockSelection));

    switch (PeriphClkInit->UsbOtgFsClockSelection)
70004d2e:	687b      	ldr	r3, [r7, #4]
70004d30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
70004d32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
70004d36:	d017      	beq.n	70004d68 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
70004d38:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
70004d3c:	d811      	bhi.n	70004d62 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
70004d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
70004d42:	d011      	beq.n	70004d68 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
70004d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
70004d48:	d80b      	bhi.n	70004d62 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
70004d4a:	2b00      	cmp	r3, #0
70004d4c:	d00c      	beq.n	70004d68 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
70004d4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
70004d52:	d106      	bne.n	70004d62 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    {
      case RCC_USBOTGFSCLKSOURCE_PLL3Q: /* PLL3_Q is used as clock source for USB OTG FS */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL_QCLK);
70004d54:	4b19      	ldr	r3, [pc, #100]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70004d58:	4a18      	ldr	r2, [pc, #96]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70004d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;
70004d60:	e003      	b.n	70004d6a <HAL_RCCEx_PeriphCLKConfig+0xdb2>
      case RCC_USBOTGFSCLKSOURCE_CLK48: /* USBPHYC CLK48 is used as clock source for USB OTG FS */
        /* USB OTG FS clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
70004d62:	2301      	movs	r3, #1
70004d64:	75fb      	strb	r3, [r7, #23]
        break;
70004d66:	e000      	b.n	70004d6a <HAL_RCCEx_PeriphCLKConfig+0xdb2>
        break;
70004d68:	bf00      	nop
    }

    if (ret == HAL_OK)
70004d6a:	7dfb      	ldrb	r3, [r7, #23]
70004d6c:	2b00      	cmp	r3, #0
70004d6e:	d109      	bne.n	70004d84 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
    {
      /* Set the source of USBPHYC clock*/
      __HAL_RCC_USBOTGFS_CONFIG(PeriphClkInit->UsbOtgFsClockSelection);
70004d70:	4b12      	ldr	r3, [pc, #72]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
70004d74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
70004d78:	687b      	ldr	r3, [r7, #4]
70004d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
70004d7c:	490f      	ldr	r1, [pc, #60]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d7e:	4313      	orrs	r3, r2
70004d80:	64cb      	str	r3, [r1, #76]	@ 0x4c
70004d82:	e001      	b.n	70004d88 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
    }
    else
    {
      /* set overall return value */
      status = ret;
70004d84:	7dfb      	ldrb	r3, [r7, #23]
70004d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
70004d88:	687b      	ldr	r3, [r7, #4]
70004d8a:	681b      	ldr	r3, [r3, #0]
70004d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70004d90:	2b00      	cmp	r3, #0
70004d92:	d009      	beq.n	70004da8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER_CONFIG(PeriphClkInit->TIMPresSelection);
70004d94:	4b09      	ldr	r3, [pc, #36]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004d96:	691b      	ldr	r3, [r3, #16]
70004d98:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
70004d9c:	687b      	ldr	r3, [r7, #4]
70004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
70004da2:	4906      	ldr	r1, [pc, #24]	@ (70004dbc <HAL_RCCEx_PeriphCLKConfig+0xe04>)
70004da4:	4313      	orrs	r3, r2
70004da6:	610b      	str	r3, [r1, #16]
  }

  if (status == HAL_OK)
70004da8:	7dbb      	ldrb	r3, [r7, #22]
70004daa:	2b00      	cmp	r3, #0
70004dac:	d101      	bne.n	70004db2 <HAL_RCCEx_PeriphCLKConfig+0xdfa>
  {
    return HAL_OK;
70004dae:	2300      	movs	r3, #0
70004db0:	e000      	b.n	70004db4 <HAL_RCCEx_PeriphCLKConfig+0xdfc>
  }
  return HAL_ERROR;
70004db2:	2301      	movs	r3, #1
}
70004db4:	4618      	mov	r0, r3
70004db6:	3718      	adds	r7, #24
70004db8:	46bd      	mov	sp, r7
70004dba:	bd80      	pop	{r7, pc}
70004dbc:	58024400 	.word	0x58024400

70004dc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
70004dc0:	b480      	push	{r7}
70004dc2:	b087      	sub	sp, #28
70004dc4:	af00      	add	r7, sp, #0
70004dc6:	60f8      	str	r0, [r7, #12]
70004dc8:	60b9      	str	r1, [r7, #8]
70004dca:	4613      	mov	r3, r2
70004dcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
70004dce:	79fb      	ldrb	r3, [r7, #7]
70004dd0:	2b02      	cmp	r3, #2
70004dd2:	d165      	bne.n	70004ea0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
70004dd4:	68bb      	ldr	r3, [r7, #8]
70004dd6:	4a41      	ldr	r2, [pc, #260]	@ (70004edc <USB_SetTurnaroundTime+0x11c>)
70004dd8:	4293      	cmp	r3, r2
70004dda:	d906      	bls.n	70004dea <USB_SetTurnaroundTime+0x2a>
70004ddc:	68bb      	ldr	r3, [r7, #8]
70004dde:	4a40      	ldr	r2, [pc, #256]	@ (70004ee0 <USB_SetTurnaroundTime+0x120>)
70004de0:	4293      	cmp	r3, r2
70004de2:	d202      	bcs.n	70004dea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
70004de4:	230f      	movs	r3, #15
70004de6:	617b      	str	r3, [r7, #20]
70004de8:	e062      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
70004dea:	68bb      	ldr	r3, [r7, #8]
70004dec:	4a3c      	ldr	r2, [pc, #240]	@ (70004ee0 <USB_SetTurnaroundTime+0x120>)
70004dee:	4293      	cmp	r3, r2
70004df0:	d306      	bcc.n	70004e00 <USB_SetTurnaroundTime+0x40>
70004df2:	68bb      	ldr	r3, [r7, #8]
70004df4:	4a3b      	ldr	r2, [pc, #236]	@ (70004ee4 <USB_SetTurnaroundTime+0x124>)
70004df6:	4293      	cmp	r3, r2
70004df8:	d202      	bcs.n	70004e00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
70004dfa:	230e      	movs	r3, #14
70004dfc:	617b      	str	r3, [r7, #20]
70004dfe:	e057      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
70004e00:	68bb      	ldr	r3, [r7, #8]
70004e02:	4a38      	ldr	r2, [pc, #224]	@ (70004ee4 <USB_SetTurnaroundTime+0x124>)
70004e04:	4293      	cmp	r3, r2
70004e06:	d306      	bcc.n	70004e16 <USB_SetTurnaroundTime+0x56>
70004e08:	68bb      	ldr	r3, [r7, #8]
70004e0a:	4a37      	ldr	r2, [pc, #220]	@ (70004ee8 <USB_SetTurnaroundTime+0x128>)
70004e0c:	4293      	cmp	r3, r2
70004e0e:	d202      	bcs.n	70004e16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
70004e10:	230d      	movs	r3, #13
70004e12:	617b      	str	r3, [r7, #20]
70004e14:	e04c      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
70004e16:	68bb      	ldr	r3, [r7, #8]
70004e18:	4a33      	ldr	r2, [pc, #204]	@ (70004ee8 <USB_SetTurnaroundTime+0x128>)
70004e1a:	4293      	cmp	r3, r2
70004e1c:	d306      	bcc.n	70004e2c <USB_SetTurnaroundTime+0x6c>
70004e1e:	68bb      	ldr	r3, [r7, #8]
70004e20:	4a32      	ldr	r2, [pc, #200]	@ (70004eec <USB_SetTurnaroundTime+0x12c>)
70004e22:	4293      	cmp	r3, r2
70004e24:	d802      	bhi.n	70004e2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
70004e26:	230c      	movs	r3, #12
70004e28:	617b      	str	r3, [r7, #20]
70004e2a:	e041      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
70004e2c:	68bb      	ldr	r3, [r7, #8]
70004e2e:	4a2f      	ldr	r2, [pc, #188]	@ (70004eec <USB_SetTurnaroundTime+0x12c>)
70004e30:	4293      	cmp	r3, r2
70004e32:	d906      	bls.n	70004e42 <USB_SetTurnaroundTime+0x82>
70004e34:	68bb      	ldr	r3, [r7, #8]
70004e36:	4a2e      	ldr	r2, [pc, #184]	@ (70004ef0 <USB_SetTurnaroundTime+0x130>)
70004e38:	4293      	cmp	r3, r2
70004e3a:	d802      	bhi.n	70004e42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
70004e3c:	230b      	movs	r3, #11
70004e3e:	617b      	str	r3, [r7, #20]
70004e40:	e036      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
70004e42:	68bb      	ldr	r3, [r7, #8]
70004e44:	4a2a      	ldr	r2, [pc, #168]	@ (70004ef0 <USB_SetTurnaroundTime+0x130>)
70004e46:	4293      	cmp	r3, r2
70004e48:	d906      	bls.n	70004e58 <USB_SetTurnaroundTime+0x98>
70004e4a:	68bb      	ldr	r3, [r7, #8]
70004e4c:	4a29      	ldr	r2, [pc, #164]	@ (70004ef4 <USB_SetTurnaroundTime+0x134>)
70004e4e:	4293      	cmp	r3, r2
70004e50:	d802      	bhi.n	70004e58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
70004e52:	230a      	movs	r3, #10
70004e54:	617b      	str	r3, [r7, #20]
70004e56:	e02b      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
70004e58:	68bb      	ldr	r3, [r7, #8]
70004e5a:	4a26      	ldr	r2, [pc, #152]	@ (70004ef4 <USB_SetTurnaroundTime+0x134>)
70004e5c:	4293      	cmp	r3, r2
70004e5e:	d906      	bls.n	70004e6e <USB_SetTurnaroundTime+0xae>
70004e60:	68bb      	ldr	r3, [r7, #8]
70004e62:	4a25      	ldr	r2, [pc, #148]	@ (70004ef8 <USB_SetTurnaroundTime+0x138>)
70004e64:	4293      	cmp	r3, r2
70004e66:	d202      	bcs.n	70004e6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
70004e68:	2309      	movs	r3, #9
70004e6a:	617b      	str	r3, [r7, #20]
70004e6c:	e020      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
70004e6e:	68bb      	ldr	r3, [r7, #8]
70004e70:	4a21      	ldr	r2, [pc, #132]	@ (70004ef8 <USB_SetTurnaroundTime+0x138>)
70004e72:	4293      	cmp	r3, r2
70004e74:	d306      	bcc.n	70004e84 <USB_SetTurnaroundTime+0xc4>
70004e76:	68bb      	ldr	r3, [r7, #8]
70004e78:	4a20      	ldr	r2, [pc, #128]	@ (70004efc <USB_SetTurnaroundTime+0x13c>)
70004e7a:	4293      	cmp	r3, r2
70004e7c:	d802      	bhi.n	70004e84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
70004e7e:	2308      	movs	r3, #8
70004e80:	617b      	str	r3, [r7, #20]
70004e82:	e015      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
70004e84:	68bb      	ldr	r3, [r7, #8]
70004e86:	4a1d      	ldr	r2, [pc, #116]	@ (70004efc <USB_SetTurnaroundTime+0x13c>)
70004e88:	4293      	cmp	r3, r2
70004e8a:	d906      	bls.n	70004e9a <USB_SetTurnaroundTime+0xda>
70004e8c:	68bb      	ldr	r3, [r7, #8]
70004e8e:	4a1c      	ldr	r2, [pc, #112]	@ (70004f00 <USB_SetTurnaroundTime+0x140>)
70004e90:	4293      	cmp	r3, r2
70004e92:	d202      	bcs.n	70004e9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
70004e94:	2307      	movs	r3, #7
70004e96:	617b      	str	r3, [r7, #20]
70004e98:	e00a      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
70004e9a:	2306      	movs	r3, #6
70004e9c:	617b      	str	r3, [r7, #20]
70004e9e:	e007      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
70004ea0:	79fb      	ldrb	r3, [r7, #7]
70004ea2:	2b00      	cmp	r3, #0
70004ea4:	d102      	bne.n	70004eac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
70004ea6:	2309      	movs	r3, #9
70004ea8:	617b      	str	r3, [r7, #20]
70004eaa:	e001      	b.n	70004eb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
70004eac:	2309      	movs	r3, #9
70004eae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
70004eb0:	68fb      	ldr	r3, [r7, #12]
70004eb2:	68db      	ldr	r3, [r3, #12]
70004eb4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
70004eb8:	68fb      	ldr	r3, [r7, #12]
70004eba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
70004ebc:	68fb      	ldr	r3, [r7, #12]
70004ebe:	68da      	ldr	r2, [r3, #12]
70004ec0:	697b      	ldr	r3, [r7, #20]
70004ec2:	029b      	lsls	r3, r3, #10
70004ec4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
70004ec8:	431a      	orrs	r2, r3
70004eca:	68fb      	ldr	r3, [r7, #12]
70004ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
70004ece:	2300      	movs	r3, #0
}
70004ed0:	4618      	mov	r0, r3
70004ed2:	371c      	adds	r7, #28
70004ed4:	46bd      	mov	sp, r7
70004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
70004eda:	4770      	bx	lr
70004edc:	00d8acbf 	.word	0x00d8acbf
70004ee0:	00e4e1c0 	.word	0x00e4e1c0
70004ee4:	00f42400 	.word	0x00f42400
70004ee8:	01067380 	.word	0x01067380
70004eec:	011a499f 	.word	0x011a499f
70004ef0:	01312cff 	.word	0x01312cff
70004ef4:	014ca43f 	.word	0x014ca43f
70004ef8:	016e3600 	.word	0x016e3600
70004efc:	01a6ab1f 	.word	0x01a6ab1f
70004f00:	01e84800 	.word	0x01e84800

70004f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
70004f04:	b480      	push	{r7}
70004f06:	b083      	sub	sp, #12
70004f08:	af00      	add	r7, sp, #0
70004f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
70004f0c:	687b      	ldr	r3, [r7, #4]
70004f0e:	689b      	ldr	r3, [r3, #8]
70004f10:	f043 0201 	orr.w	r2, r3, #1
70004f14:	687b      	ldr	r3, [r7, #4]
70004f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
70004f18:	2300      	movs	r3, #0
}
70004f1a:	4618      	mov	r0, r3
70004f1c:	370c      	adds	r7, #12
70004f1e:	46bd      	mov	sp, r7
70004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
70004f24:	4770      	bx	lr

70004f26 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
70004f26:	b480      	push	{r7}
70004f28:	b085      	sub	sp, #20
70004f2a:	af00      	add	r7, sp, #0
70004f2c:	6078      	str	r0, [r7, #4]
70004f2e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
70004f30:	2300      	movs	r3, #0
70004f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
70004f34:	68fb      	ldr	r3, [r7, #12]
70004f36:	3301      	adds	r3, #1
70004f38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
70004f3a:	68fb      	ldr	r3, [r7, #12]
70004f3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
70004f40:	d901      	bls.n	70004f46 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
70004f42:	2303      	movs	r3, #3
70004f44:	e01b      	b.n	70004f7e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
70004f46:	687b      	ldr	r3, [r7, #4]
70004f48:	691b      	ldr	r3, [r3, #16]
70004f4a:	2b00      	cmp	r3, #0
70004f4c:	daf2      	bge.n	70004f34 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
70004f4e:	2300      	movs	r3, #0
70004f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
70004f52:	683b      	ldr	r3, [r7, #0]
70004f54:	019b      	lsls	r3, r3, #6
70004f56:	f043 0220 	orr.w	r2, r3, #32
70004f5a:	687b      	ldr	r3, [r7, #4]
70004f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
70004f5e:	68fb      	ldr	r3, [r7, #12]
70004f60:	3301      	adds	r3, #1
70004f62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
70004f64:	68fb      	ldr	r3, [r7, #12]
70004f66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
70004f6a:	d901      	bls.n	70004f70 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
70004f6c:	2303      	movs	r3, #3
70004f6e:	e006      	b.n	70004f7e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
70004f70:	687b      	ldr	r3, [r7, #4]
70004f72:	691b      	ldr	r3, [r3, #16]
70004f74:	f003 0320 	and.w	r3, r3, #32
70004f78:	2b20      	cmp	r3, #32
70004f7a:	d0f0      	beq.n	70004f5e <USB_FlushTxFifo+0x38>

  return HAL_OK;
70004f7c:	2300      	movs	r3, #0
}
70004f7e:	4618      	mov	r0, r3
70004f80:	3714      	adds	r7, #20
70004f82:	46bd      	mov	sp, r7
70004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
70004f88:	4770      	bx	lr

70004f8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
70004f8a:	b480      	push	{r7}
70004f8c:	b087      	sub	sp, #28
70004f8e:	af00      	add	r7, sp, #0
70004f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70004f92:	687b      	ldr	r3, [r7, #4]
70004f94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
70004f96:	693b      	ldr	r3, [r7, #16]
70004f98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70004f9c:	689b      	ldr	r3, [r3, #8]
70004f9e:	f003 0306 	and.w	r3, r3, #6
70004fa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
70004fa4:	68fb      	ldr	r3, [r7, #12]
70004fa6:	2b00      	cmp	r3, #0
70004fa8:	d102      	bne.n	70004fb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
70004faa:	2300      	movs	r3, #0
70004fac:	75fb      	strb	r3, [r7, #23]
70004fae:	e00a      	b.n	70004fc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
70004fb0:	68fb      	ldr	r3, [r7, #12]
70004fb2:	2b02      	cmp	r3, #2
70004fb4:	d002      	beq.n	70004fbc <USB_GetDevSpeed+0x32>
70004fb6:	68fb      	ldr	r3, [r7, #12]
70004fb8:	2b06      	cmp	r3, #6
70004fba:	d102      	bne.n	70004fc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
70004fbc:	2302      	movs	r3, #2
70004fbe:	75fb      	strb	r3, [r7, #23]
70004fc0:	e001      	b.n	70004fc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
70004fc2:	230f      	movs	r3, #15
70004fc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
70004fc6:	7dfb      	ldrb	r3, [r7, #23]
}
70004fc8:	4618      	mov	r0, r3
70004fca:	371c      	adds	r7, #28
70004fcc:	46bd      	mov	sp, r7
70004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
70004fd2:	4770      	bx	lr

70004fd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70004fd4:	b480      	push	{r7}
70004fd6:	b085      	sub	sp, #20
70004fd8:	af00      	add	r7, sp, #0
70004fda:	6078      	str	r0, [r7, #4]
70004fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
70004fde:	687b      	ldr	r3, [r7, #4]
70004fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70004fe2:	683b      	ldr	r3, [r7, #0]
70004fe4:	781b      	ldrb	r3, [r3, #0]
70004fe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
70004fe8:	683b      	ldr	r3, [r7, #0]
70004fea:	785b      	ldrb	r3, [r3, #1]
70004fec:	2b01      	cmp	r3, #1
70004fee:	d139      	bne.n	70005064 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
70004ff0:	68fb      	ldr	r3, [r7, #12]
70004ff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70004ff6:	69da      	ldr	r2, [r3, #28]
70004ff8:	683b      	ldr	r3, [r7, #0]
70004ffa:	781b      	ldrb	r3, [r3, #0]
70004ffc:	f003 030f 	and.w	r3, r3, #15
70005000:	2101      	movs	r1, #1
70005002:	fa01 f303 	lsl.w	r3, r1, r3
70005006:	b29b      	uxth	r3, r3
70005008:	68f9      	ldr	r1, [r7, #12]
7000500a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000500e:	4313      	orrs	r3, r2
70005010:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
70005012:	68bb      	ldr	r3, [r7, #8]
70005014:	015a      	lsls	r2, r3, #5
70005016:	68fb      	ldr	r3, [r7, #12]
70005018:	4413      	add	r3, r2
7000501a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000501e:	681b      	ldr	r3, [r3, #0]
70005020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70005024:	2b00      	cmp	r3, #0
70005026:	d153      	bne.n	700050d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70005028:	68bb      	ldr	r3, [r7, #8]
7000502a:	015a      	lsls	r2, r3, #5
7000502c:	68fb      	ldr	r3, [r7, #12]
7000502e:	4413      	add	r3, r2
70005030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005034:	681a      	ldr	r2, [r3, #0]
70005036:	683b      	ldr	r3, [r7, #0]
70005038:	689b      	ldr	r3, [r3, #8]
7000503a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
7000503e:	683b      	ldr	r3, [r7, #0]
70005040:	791b      	ldrb	r3, [r3, #4]
70005042:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70005044:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
70005046:	68bb      	ldr	r3, [r7, #8]
70005048:	059b      	lsls	r3, r3, #22
7000504a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
7000504c:	431a      	orrs	r2, r3
7000504e:	68bb      	ldr	r3, [r7, #8]
70005050:	0159      	lsls	r1, r3, #5
70005052:	68fb      	ldr	r3, [r7, #12]
70005054:	440b      	add	r3, r1
70005056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000505a:	4619      	mov	r1, r3
7000505c:	4b20      	ldr	r3, [pc, #128]	@ (700050e0 <USB_ActivateEndpoint+0x10c>)
7000505e:	4313      	orrs	r3, r2
70005060:	600b      	str	r3, [r1, #0]
70005062:	e035      	b.n	700050d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
70005064:	68fb      	ldr	r3, [r7, #12]
70005066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000506a:	69da      	ldr	r2, [r3, #28]
7000506c:	683b      	ldr	r3, [r7, #0]
7000506e:	781b      	ldrb	r3, [r3, #0]
70005070:	f003 030f 	and.w	r3, r3, #15
70005074:	2101      	movs	r1, #1
70005076:	fa01 f303 	lsl.w	r3, r1, r3
7000507a:	041b      	lsls	r3, r3, #16
7000507c:	68f9      	ldr	r1, [r7, #12]
7000507e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70005082:	4313      	orrs	r3, r2
70005084:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
70005086:	68bb      	ldr	r3, [r7, #8]
70005088:	015a      	lsls	r2, r3, #5
7000508a:	68fb      	ldr	r3, [r7, #12]
7000508c:	4413      	add	r3, r2
7000508e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005092:	681b      	ldr	r3, [r3, #0]
70005094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70005098:	2b00      	cmp	r3, #0
7000509a:	d119      	bne.n	700050d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
7000509c:	68bb      	ldr	r3, [r7, #8]
7000509e:	015a      	lsls	r2, r3, #5
700050a0:	68fb      	ldr	r3, [r7, #12]
700050a2:	4413      	add	r3, r2
700050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700050a8:	681a      	ldr	r2, [r3, #0]
700050aa:	683b      	ldr	r3, [r7, #0]
700050ac:	689b      	ldr	r3, [r3, #8]
700050ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
700050b2:	683b      	ldr	r3, [r7, #0]
700050b4:	791b      	ldrb	r3, [r3, #4]
700050b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
700050b8:	430b      	orrs	r3, r1
700050ba:	431a      	orrs	r2, r3
700050bc:	68bb      	ldr	r3, [r7, #8]
700050be:	0159      	lsls	r1, r3, #5
700050c0:	68fb      	ldr	r3, [r7, #12]
700050c2:	440b      	add	r3, r1
700050c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700050c8:	4619      	mov	r1, r3
700050ca:	4b05      	ldr	r3, [pc, #20]	@ (700050e0 <USB_ActivateEndpoint+0x10c>)
700050cc:	4313      	orrs	r3, r2
700050ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
700050d0:	2300      	movs	r3, #0
}
700050d2:	4618      	mov	r0, r3
700050d4:	3714      	adds	r7, #20
700050d6:	46bd      	mov	sp, r7
700050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
700050dc:	4770      	bx	lr
700050de:	bf00      	nop
700050e0:	10008000 	.word	0x10008000

700050e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
700050e4:	b480      	push	{r7}
700050e6:	b085      	sub	sp, #20
700050e8:	af00      	add	r7, sp, #0
700050ea:	6078      	str	r0, [r7, #4]
700050ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
700050ee:	687b      	ldr	r3, [r7, #4]
700050f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
700050f2:	683b      	ldr	r3, [r7, #0]
700050f4:	781b      	ldrb	r3, [r3, #0]
700050f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
700050f8:	683b      	ldr	r3, [r7, #0]
700050fa:	785b      	ldrb	r3, [r3, #1]
700050fc:	2b01      	cmp	r3, #1
700050fe:	d161      	bne.n	700051c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
70005100:	68bb      	ldr	r3, [r7, #8]
70005102:	015a      	lsls	r2, r3, #5
70005104:	68fb      	ldr	r3, [r7, #12]
70005106:	4413      	add	r3, r2
70005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000510c:	681b      	ldr	r3, [r3, #0]
7000510e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70005112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70005116:	d11f      	bne.n	70005158 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
70005118:	68bb      	ldr	r3, [r7, #8]
7000511a:	015a      	lsls	r2, r3, #5
7000511c:	68fb      	ldr	r3, [r7, #12]
7000511e:	4413      	add	r3, r2
70005120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005124:	681b      	ldr	r3, [r3, #0]
70005126:	68ba      	ldr	r2, [r7, #8]
70005128:	0151      	lsls	r1, r2, #5
7000512a:	68fa      	ldr	r2, [r7, #12]
7000512c:	440a      	add	r2, r1
7000512e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005132:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70005136:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
70005138:	68bb      	ldr	r3, [r7, #8]
7000513a:	015a      	lsls	r2, r3, #5
7000513c:	68fb      	ldr	r3, [r7, #12]
7000513e:	4413      	add	r3, r2
70005140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005144:	681b      	ldr	r3, [r3, #0]
70005146:	68ba      	ldr	r2, [r7, #8]
70005148:	0151      	lsls	r1, r2, #5
7000514a:	68fa      	ldr	r2, [r7, #12]
7000514c:	440a      	add	r2, r1
7000514e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005152:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
70005156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
70005158:	68fb      	ldr	r3, [r7, #12]
7000515a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000515e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
70005160:	683b      	ldr	r3, [r7, #0]
70005162:	781b      	ldrb	r3, [r3, #0]
70005164:	f003 030f 	and.w	r3, r3, #15
70005168:	2101      	movs	r1, #1
7000516a:	fa01 f303 	lsl.w	r3, r1, r3
7000516e:	b29b      	uxth	r3, r3
70005170:	43db      	mvns	r3, r3
70005172:	68f9      	ldr	r1, [r7, #12]
70005174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70005178:	4013      	ands	r3, r2
7000517a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
7000517c:	68fb      	ldr	r3, [r7, #12]
7000517e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005182:	69da      	ldr	r2, [r3, #28]
70005184:	683b      	ldr	r3, [r7, #0]
70005186:	781b      	ldrb	r3, [r3, #0]
70005188:	f003 030f 	and.w	r3, r3, #15
7000518c:	2101      	movs	r1, #1
7000518e:	fa01 f303 	lsl.w	r3, r1, r3
70005192:	b29b      	uxth	r3, r3
70005194:	43db      	mvns	r3, r3
70005196:	68f9      	ldr	r1, [r7, #12]
70005198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000519c:	4013      	ands	r3, r2
7000519e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
700051a0:	68bb      	ldr	r3, [r7, #8]
700051a2:	015a      	lsls	r2, r3, #5
700051a4:	68fb      	ldr	r3, [r7, #12]
700051a6:	4413      	add	r3, r2
700051a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700051ac:	681a      	ldr	r2, [r3, #0]
700051ae:	68bb      	ldr	r3, [r7, #8]
700051b0:	0159      	lsls	r1, r3, #5
700051b2:	68fb      	ldr	r3, [r7, #12]
700051b4:	440b      	add	r3, r1
700051b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700051ba:	4619      	mov	r1, r3
700051bc:	4b35      	ldr	r3, [pc, #212]	@ (70005294 <USB_DeactivateEndpoint+0x1b0>)
700051be:	4013      	ands	r3, r2
700051c0:	600b      	str	r3, [r1, #0]
700051c2:	e060      	b.n	70005286 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
700051c4:	68bb      	ldr	r3, [r7, #8]
700051c6:	015a      	lsls	r2, r3, #5
700051c8:	68fb      	ldr	r3, [r7, #12]
700051ca:	4413      	add	r3, r2
700051cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700051d0:	681b      	ldr	r3, [r3, #0]
700051d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
700051d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
700051da:	d11f      	bne.n	7000521c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
700051dc:	68bb      	ldr	r3, [r7, #8]
700051de:	015a      	lsls	r2, r3, #5
700051e0:	68fb      	ldr	r3, [r7, #12]
700051e2:	4413      	add	r3, r2
700051e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700051e8:	681b      	ldr	r3, [r3, #0]
700051ea:	68ba      	ldr	r2, [r7, #8]
700051ec:	0151      	lsls	r1, r2, #5
700051ee:	68fa      	ldr	r2, [r7, #12]
700051f0:	440a      	add	r2, r1
700051f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700051f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700051fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
700051fc:	68bb      	ldr	r3, [r7, #8]
700051fe:	015a      	lsls	r2, r3, #5
70005200:	68fb      	ldr	r3, [r7, #12]
70005202:	4413      	add	r3, r2
70005204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005208:	681b      	ldr	r3, [r3, #0]
7000520a:	68ba      	ldr	r2, [r7, #8]
7000520c:	0151      	lsls	r1, r2, #5
7000520e:	68fa      	ldr	r2, [r7, #12]
70005210:	440a      	add	r2, r1
70005212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
7000521a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
7000521c:	68fb      	ldr	r3, [r7, #12]
7000521e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
70005224:	683b      	ldr	r3, [r7, #0]
70005226:	781b      	ldrb	r3, [r3, #0]
70005228:	f003 030f 	and.w	r3, r3, #15
7000522c:	2101      	movs	r1, #1
7000522e:	fa01 f303 	lsl.w	r3, r1, r3
70005232:	041b      	lsls	r3, r3, #16
70005234:	43db      	mvns	r3, r3
70005236:	68f9      	ldr	r1, [r7, #12]
70005238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000523c:	4013      	ands	r3, r2
7000523e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
70005240:	68fb      	ldr	r3, [r7, #12]
70005242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005246:	69da      	ldr	r2, [r3, #28]
70005248:	683b      	ldr	r3, [r7, #0]
7000524a:	781b      	ldrb	r3, [r3, #0]
7000524c:	f003 030f 	and.w	r3, r3, #15
70005250:	2101      	movs	r1, #1
70005252:	fa01 f303 	lsl.w	r3, r1, r3
70005256:	041b      	lsls	r3, r3, #16
70005258:	43db      	mvns	r3, r3
7000525a:	68f9      	ldr	r1, [r7, #12]
7000525c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70005260:	4013      	ands	r3, r2
70005262:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
70005264:	68bb      	ldr	r3, [r7, #8]
70005266:	015a      	lsls	r2, r3, #5
70005268:	68fb      	ldr	r3, [r7, #12]
7000526a:	4413      	add	r3, r2
7000526c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005270:	681a      	ldr	r2, [r3, #0]
70005272:	68bb      	ldr	r3, [r7, #8]
70005274:	0159      	lsls	r1, r3, #5
70005276:	68fb      	ldr	r3, [r7, #12]
70005278:	440b      	add	r3, r1
7000527a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000527e:	4619      	mov	r1, r3
70005280:	4b05      	ldr	r3, [pc, #20]	@ (70005298 <USB_DeactivateEndpoint+0x1b4>)
70005282:	4013      	ands	r3, r2
70005284:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
70005286:	2300      	movs	r3, #0
}
70005288:	4618      	mov	r0, r3
7000528a:	3714      	adds	r7, #20
7000528c:	46bd      	mov	sp, r7
7000528e:	f85d 7b04 	ldr.w	r7, [sp], #4
70005292:	4770      	bx	lr
70005294:	ec337800 	.word	0xec337800
70005298:	eff37800 	.word	0xeff37800

7000529c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
7000529c:	b580      	push	{r7, lr}
7000529e:	b08a      	sub	sp, #40	@ 0x28
700052a0:	af02      	add	r7, sp, #8
700052a2:	60f8      	str	r0, [r7, #12]
700052a4:	60b9      	str	r1, [r7, #8]
700052a6:	4613      	mov	r3, r2
700052a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
700052aa:	68fb      	ldr	r3, [r7, #12]
700052ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
700052ae:	68bb      	ldr	r3, [r7, #8]
700052b0:	781b      	ldrb	r3, [r3, #0]
700052b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
700052b4:	68bb      	ldr	r3, [r7, #8]
700052b6:	785b      	ldrb	r3, [r3, #1]
700052b8:	2b01      	cmp	r3, #1
700052ba:	f040 8185 	bne.w	700055c8 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
700052be:	68bb      	ldr	r3, [r7, #8]
700052c0:	691b      	ldr	r3, [r3, #16]
700052c2:	2b00      	cmp	r3, #0
700052c4:	d132      	bne.n	7000532c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
700052c6:	69bb      	ldr	r3, [r7, #24]
700052c8:	015a      	lsls	r2, r3, #5
700052ca:	69fb      	ldr	r3, [r7, #28]
700052cc:	4413      	add	r3, r2
700052ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700052d2:	691a      	ldr	r2, [r3, #16]
700052d4:	69bb      	ldr	r3, [r7, #24]
700052d6:	0159      	lsls	r1, r3, #5
700052d8:	69fb      	ldr	r3, [r7, #28]
700052da:	440b      	add	r3, r1
700052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700052e0:	4619      	mov	r1, r3
700052e2:	4ba7      	ldr	r3, [pc, #668]	@ (70005580 <USB_EPStartXfer+0x2e4>)
700052e4:	4013      	ands	r3, r2
700052e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
700052e8:	69bb      	ldr	r3, [r7, #24]
700052ea:	015a      	lsls	r2, r3, #5
700052ec:	69fb      	ldr	r3, [r7, #28]
700052ee:	4413      	add	r3, r2
700052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700052f4:	691b      	ldr	r3, [r3, #16]
700052f6:	69ba      	ldr	r2, [r7, #24]
700052f8:	0151      	lsls	r1, r2, #5
700052fa:	69fa      	ldr	r2, [r7, #28]
700052fc:	440a      	add	r2, r1
700052fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005302:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70005306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
70005308:	69bb      	ldr	r3, [r7, #24]
7000530a:	015a      	lsls	r2, r3, #5
7000530c:	69fb      	ldr	r3, [r7, #28]
7000530e:	4413      	add	r3, r2
70005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005314:	691a      	ldr	r2, [r3, #16]
70005316:	69bb      	ldr	r3, [r7, #24]
70005318:	0159      	lsls	r1, r3, #5
7000531a:	69fb      	ldr	r3, [r7, #28]
7000531c:	440b      	add	r3, r1
7000531e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005322:	4619      	mov	r1, r3
70005324:	4b97      	ldr	r3, [pc, #604]	@ (70005584 <USB_EPStartXfer+0x2e8>)
70005326:	4013      	ands	r3, r2
70005328:	610b      	str	r3, [r1, #16]
7000532a:	e097      	b.n	7000545c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
7000532c:	69bb      	ldr	r3, [r7, #24]
7000532e:	015a      	lsls	r2, r3, #5
70005330:	69fb      	ldr	r3, [r7, #28]
70005332:	4413      	add	r3, r2
70005334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005338:	691a      	ldr	r2, [r3, #16]
7000533a:	69bb      	ldr	r3, [r7, #24]
7000533c:	0159      	lsls	r1, r3, #5
7000533e:	69fb      	ldr	r3, [r7, #28]
70005340:	440b      	add	r3, r1
70005342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005346:	4619      	mov	r1, r3
70005348:	4b8e      	ldr	r3, [pc, #568]	@ (70005584 <USB_EPStartXfer+0x2e8>)
7000534a:	4013      	ands	r3, r2
7000534c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
7000534e:	69bb      	ldr	r3, [r7, #24]
70005350:	015a      	lsls	r2, r3, #5
70005352:	69fb      	ldr	r3, [r7, #28]
70005354:	4413      	add	r3, r2
70005356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000535a:	691a      	ldr	r2, [r3, #16]
7000535c:	69bb      	ldr	r3, [r7, #24]
7000535e:	0159      	lsls	r1, r3, #5
70005360:	69fb      	ldr	r3, [r7, #28]
70005362:	440b      	add	r3, r1
70005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005368:	4619      	mov	r1, r3
7000536a:	4b85      	ldr	r3, [pc, #532]	@ (70005580 <USB_EPStartXfer+0x2e4>)
7000536c:	4013      	ands	r3, r2
7000536e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
70005370:	69bb      	ldr	r3, [r7, #24]
70005372:	2b00      	cmp	r3, #0
70005374:	d11a      	bne.n	700053ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
70005376:	68bb      	ldr	r3, [r7, #8]
70005378:	691a      	ldr	r2, [r3, #16]
7000537a:	68bb      	ldr	r3, [r7, #8]
7000537c:	689b      	ldr	r3, [r3, #8]
7000537e:	429a      	cmp	r2, r3
70005380:	d903      	bls.n	7000538a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
70005382:	68bb      	ldr	r3, [r7, #8]
70005384:	689a      	ldr	r2, [r3, #8]
70005386:	68bb      	ldr	r3, [r7, #8]
70005388:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
7000538a:	69bb      	ldr	r3, [r7, #24]
7000538c:	015a      	lsls	r2, r3, #5
7000538e:	69fb      	ldr	r3, [r7, #28]
70005390:	4413      	add	r3, r2
70005392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005396:	691b      	ldr	r3, [r3, #16]
70005398:	69ba      	ldr	r2, [r7, #24]
7000539a:	0151      	lsls	r1, r2, #5
7000539c:	69fa      	ldr	r2, [r7, #28]
7000539e:	440a      	add	r2, r1
700053a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700053a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700053a8:	6113      	str	r3, [r2, #16]
700053aa:	e044      	b.n	70005436 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
700053ac:	68bb      	ldr	r3, [r7, #8]
700053ae:	691a      	ldr	r2, [r3, #16]
700053b0:	68bb      	ldr	r3, [r7, #8]
700053b2:	689b      	ldr	r3, [r3, #8]
700053b4:	4413      	add	r3, r2
700053b6:	1e5a      	subs	r2, r3, #1
700053b8:	68bb      	ldr	r3, [r7, #8]
700053ba:	689b      	ldr	r3, [r3, #8]
700053bc:	fbb2 f3f3 	udiv	r3, r2, r3
700053c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
700053c2:	69bb      	ldr	r3, [r7, #24]
700053c4:	015a      	lsls	r2, r3, #5
700053c6:	69fb      	ldr	r3, [r7, #28]
700053c8:	4413      	add	r3, r2
700053ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700053ce:	691a      	ldr	r2, [r3, #16]
700053d0:	8afb      	ldrh	r3, [r7, #22]
700053d2:	04d9      	lsls	r1, r3, #19
700053d4:	4b6c      	ldr	r3, [pc, #432]	@ (70005588 <USB_EPStartXfer+0x2ec>)
700053d6:	400b      	ands	r3, r1
700053d8:	69b9      	ldr	r1, [r7, #24]
700053da:	0148      	lsls	r0, r1, #5
700053dc:	69f9      	ldr	r1, [r7, #28]
700053de:	4401      	add	r1, r0
700053e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
700053e4:	4313      	orrs	r3, r2
700053e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
700053e8:	68bb      	ldr	r3, [r7, #8]
700053ea:	791b      	ldrb	r3, [r3, #4]
700053ec:	2b01      	cmp	r3, #1
700053ee:	d122      	bne.n	70005436 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
700053f0:	69bb      	ldr	r3, [r7, #24]
700053f2:	015a      	lsls	r2, r3, #5
700053f4:	69fb      	ldr	r3, [r7, #28]
700053f6:	4413      	add	r3, r2
700053f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700053fc:	691b      	ldr	r3, [r3, #16]
700053fe:	69ba      	ldr	r2, [r7, #24]
70005400:	0151      	lsls	r1, r2, #5
70005402:	69fa      	ldr	r2, [r7, #28]
70005404:	440a      	add	r2, r1
70005406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000540a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
7000540e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
70005410:	69bb      	ldr	r3, [r7, #24]
70005412:	015a      	lsls	r2, r3, #5
70005414:	69fb      	ldr	r3, [r7, #28]
70005416:	4413      	add	r3, r2
70005418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000541c:	691a      	ldr	r2, [r3, #16]
7000541e:	8afb      	ldrh	r3, [r7, #22]
70005420:	075b      	lsls	r3, r3, #29
70005422:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
70005426:	69b9      	ldr	r1, [r7, #24]
70005428:	0148      	lsls	r0, r1, #5
7000542a:	69f9      	ldr	r1, [r7, #28]
7000542c:	4401      	add	r1, r0
7000542e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70005432:	4313      	orrs	r3, r2
70005434:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
70005436:	69bb      	ldr	r3, [r7, #24]
70005438:	015a      	lsls	r2, r3, #5
7000543a:	69fb      	ldr	r3, [r7, #28]
7000543c:	4413      	add	r3, r2
7000543e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005442:	691a      	ldr	r2, [r3, #16]
70005444:	68bb      	ldr	r3, [r7, #8]
70005446:	691b      	ldr	r3, [r3, #16]
70005448:	f3c3 0312 	ubfx	r3, r3, #0, #19
7000544c:	69b9      	ldr	r1, [r7, #24]
7000544e:	0148      	lsls	r0, r1, #5
70005450:	69f9      	ldr	r1, [r7, #28]
70005452:	4401      	add	r1, r0
70005454:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70005458:	4313      	orrs	r3, r2
7000545a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
7000545c:	79fb      	ldrb	r3, [r7, #7]
7000545e:	2b01      	cmp	r3, #1
70005460:	d14b      	bne.n	700054fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
70005462:	68bb      	ldr	r3, [r7, #8]
70005464:	69db      	ldr	r3, [r3, #28]
70005466:	2b00      	cmp	r3, #0
70005468:	d009      	beq.n	7000547e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
7000546a:	69bb      	ldr	r3, [r7, #24]
7000546c:	015a      	lsls	r2, r3, #5
7000546e:	69fb      	ldr	r3, [r7, #28]
70005470:	4413      	add	r3, r2
70005472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005476:	461a      	mov	r2, r3
70005478:	68bb      	ldr	r3, [r7, #8]
7000547a:	69db      	ldr	r3, [r3, #28]
7000547c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
7000547e:	68bb      	ldr	r3, [r7, #8]
70005480:	791b      	ldrb	r3, [r3, #4]
70005482:	2b01      	cmp	r3, #1
70005484:	d128      	bne.n	700054d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
70005486:	69fb      	ldr	r3, [r7, #28]
70005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000548c:	689b      	ldr	r3, [r3, #8]
7000548e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70005492:	2b00      	cmp	r3, #0
70005494:	d110      	bne.n	700054b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
70005496:	69bb      	ldr	r3, [r7, #24]
70005498:	015a      	lsls	r2, r3, #5
7000549a:	69fb      	ldr	r3, [r7, #28]
7000549c:	4413      	add	r3, r2
7000549e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700054a2:	681b      	ldr	r3, [r3, #0]
700054a4:	69ba      	ldr	r2, [r7, #24]
700054a6:	0151      	lsls	r1, r2, #5
700054a8:	69fa      	ldr	r2, [r7, #28]
700054aa:	440a      	add	r2, r1
700054ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700054b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700054b4:	6013      	str	r3, [r2, #0]
700054b6:	e00f      	b.n	700054d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
700054b8:	69bb      	ldr	r3, [r7, #24]
700054ba:	015a      	lsls	r2, r3, #5
700054bc:	69fb      	ldr	r3, [r7, #28]
700054be:	4413      	add	r3, r2
700054c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700054c4:	681b      	ldr	r3, [r3, #0]
700054c6:	69ba      	ldr	r2, [r7, #24]
700054c8:	0151      	lsls	r1, r2, #5
700054ca:	69fa      	ldr	r2, [r7, #28]
700054cc:	440a      	add	r2, r1
700054ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700054d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700054d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
700054d8:	69bb      	ldr	r3, [r7, #24]
700054da:	015a      	lsls	r2, r3, #5
700054dc:	69fb      	ldr	r3, [r7, #28]
700054de:	4413      	add	r3, r2
700054e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700054e4:	681b      	ldr	r3, [r3, #0]
700054e6:	69ba      	ldr	r2, [r7, #24]
700054e8:	0151      	lsls	r1, r2, #5
700054ea:	69fa      	ldr	r2, [r7, #28]
700054ec:	440a      	add	r2, r1
700054ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700054f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
700054f6:	6013      	str	r3, [r2, #0]
700054f8:	e169      	b.n	700057ce <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
700054fa:	69bb      	ldr	r3, [r7, #24]
700054fc:	015a      	lsls	r2, r3, #5
700054fe:	69fb      	ldr	r3, [r7, #28]
70005500:	4413      	add	r3, r2
70005502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005506:	681b      	ldr	r3, [r3, #0]
70005508:	69ba      	ldr	r2, [r7, #24]
7000550a:	0151      	lsls	r1, r2, #5
7000550c:	69fa      	ldr	r2, [r7, #28]
7000550e:	440a      	add	r2, r1
70005510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005514:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
70005518:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
7000551a:	68bb      	ldr	r3, [r7, #8]
7000551c:	791b      	ldrb	r3, [r3, #4]
7000551e:	2b01      	cmp	r3, #1
70005520:	d015      	beq.n	7000554e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
70005522:	68bb      	ldr	r3, [r7, #8]
70005524:	691b      	ldr	r3, [r3, #16]
70005526:	2b00      	cmp	r3, #0
70005528:	f000 8151 	beq.w	700057ce <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
7000552c:	69fb      	ldr	r3, [r7, #28]
7000552e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70005534:	68bb      	ldr	r3, [r7, #8]
70005536:	781b      	ldrb	r3, [r3, #0]
70005538:	f003 030f 	and.w	r3, r3, #15
7000553c:	2101      	movs	r1, #1
7000553e:	fa01 f303 	lsl.w	r3, r1, r3
70005542:	69f9      	ldr	r1, [r7, #28]
70005544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70005548:	4313      	orrs	r3, r2
7000554a:	634b      	str	r3, [r1, #52]	@ 0x34
7000554c:	e13f      	b.n	700057ce <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
7000554e:	69fb      	ldr	r3, [r7, #28]
70005550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005554:	689b      	ldr	r3, [r3, #8]
70005556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000555a:	2b00      	cmp	r3, #0
7000555c:	d116      	bne.n	7000558c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
7000555e:	69bb      	ldr	r3, [r7, #24]
70005560:	015a      	lsls	r2, r3, #5
70005562:	69fb      	ldr	r3, [r7, #28]
70005564:	4413      	add	r3, r2
70005566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000556a:	681b      	ldr	r3, [r3, #0]
7000556c:	69ba      	ldr	r2, [r7, #24]
7000556e:	0151      	lsls	r1, r2, #5
70005570:	69fa      	ldr	r2, [r7, #28]
70005572:	440a      	add	r2, r1
70005574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005578:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
7000557c:	6013      	str	r3, [r2, #0]
7000557e:	e015      	b.n	700055ac <USB_EPStartXfer+0x310>
70005580:	e007ffff 	.word	0xe007ffff
70005584:	fff80000 	.word	0xfff80000
70005588:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
7000558c:	69bb      	ldr	r3, [r7, #24]
7000558e:	015a      	lsls	r2, r3, #5
70005590:	69fb      	ldr	r3, [r7, #28]
70005592:	4413      	add	r3, r2
70005594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005598:	681b      	ldr	r3, [r3, #0]
7000559a:	69ba      	ldr	r2, [r7, #24]
7000559c:	0151      	lsls	r1, r2, #5
7000559e:	69fa      	ldr	r2, [r7, #28]
700055a0:	440a      	add	r2, r1
700055a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700055a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700055aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
700055ac:	68bb      	ldr	r3, [r7, #8]
700055ae:	68d9      	ldr	r1, [r3, #12]
700055b0:	68bb      	ldr	r3, [r7, #8]
700055b2:	781a      	ldrb	r2, [r3, #0]
700055b4:	68bb      	ldr	r3, [r7, #8]
700055b6:	691b      	ldr	r3, [r3, #16]
700055b8:	b298      	uxth	r0, r3
700055ba:	79fb      	ldrb	r3, [r7, #7]
700055bc:	9300      	str	r3, [sp, #0]
700055be:	4603      	mov	r3, r0
700055c0:	68f8      	ldr	r0, [r7, #12]
700055c2:	f000 f9b9 	bl	70005938 <USB_WritePacket>
700055c6:	e102      	b.n	700057ce <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
700055c8:	69bb      	ldr	r3, [r7, #24]
700055ca:	015a      	lsls	r2, r3, #5
700055cc:	69fb      	ldr	r3, [r7, #28]
700055ce:	4413      	add	r3, r2
700055d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700055d4:	691a      	ldr	r2, [r3, #16]
700055d6:	69bb      	ldr	r3, [r7, #24]
700055d8:	0159      	lsls	r1, r3, #5
700055da:	69fb      	ldr	r3, [r7, #28]
700055dc:	440b      	add	r3, r1
700055de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700055e2:	4619      	mov	r1, r3
700055e4:	4b7c      	ldr	r3, [pc, #496]	@ (700057d8 <USB_EPStartXfer+0x53c>)
700055e6:	4013      	ands	r3, r2
700055e8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
700055ea:	69bb      	ldr	r3, [r7, #24]
700055ec:	015a      	lsls	r2, r3, #5
700055ee:	69fb      	ldr	r3, [r7, #28]
700055f0:	4413      	add	r3, r2
700055f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700055f6:	691a      	ldr	r2, [r3, #16]
700055f8:	69bb      	ldr	r3, [r7, #24]
700055fa:	0159      	lsls	r1, r3, #5
700055fc:	69fb      	ldr	r3, [r7, #28]
700055fe:	440b      	add	r3, r1
70005600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005604:	4619      	mov	r1, r3
70005606:	4b75      	ldr	r3, [pc, #468]	@ (700057dc <USB_EPStartXfer+0x540>)
70005608:	4013      	ands	r3, r2
7000560a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
7000560c:	69bb      	ldr	r3, [r7, #24]
7000560e:	2b00      	cmp	r3, #0
70005610:	d12f      	bne.n	70005672 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
70005612:	68bb      	ldr	r3, [r7, #8]
70005614:	691b      	ldr	r3, [r3, #16]
70005616:	2b00      	cmp	r3, #0
70005618:	d003      	beq.n	70005622 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
7000561a:	68bb      	ldr	r3, [r7, #8]
7000561c:	689a      	ldr	r2, [r3, #8]
7000561e:	68bb      	ldr	r3, [r7, #8]
70005620:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
70005622:	68bb      	ldr	r3, [r7, #8]
70005624:	689a      	ldr	r2, [r3, #8]
70005626:	68bb      	ldr	r3, [r7, #8]
70005628:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
7000562a:	69bb      	ldr	r3, [r7, #24]
7000562c:	015a      	lsls	r2, r3, #5
7000562e:	69fb      	ldr	r3, [r7, #28]
70005630:	4413      	add	r3, r2
70005632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005636:	691a      	ldr	r2, [r3, #16]
70005638:	68bb      	ldr	r3, [r7, #8]
7000563a:	6a1b      	ldr	r3, [r3, #32]
7000563c:	f3c3 0312 	ubfx	r3, r3, #0, #19
70005640:	69b9      	ldr	r1, [r7, #24]
70005642:	0148      	lsls	r0, r1, #5
70005644:	69f9      	ldr	r1, [r7, #28]
70005646:	4401      	add	r1, r0
70005648:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
7000564c:	4313      	orrs	r3, r2
7000564e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
70005650:	69bb      	ldr	r3, [r7, #24]
70005652:	015a      	lsls	r2, r3, #5
70005654:	69fb      	ldr	r3, [r7, #28]
70005656:	4413      	add	r3, r2
70005658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000565c:	691b      	ldr	r3, [r3, #16]
7000565e:	69ba      	ldr	r2, [r7, #24]
70005660:	0151      	lsls	r1, r2, #5
70005662:	69fa      	ldr	r2, [r7, #28]
70005664:	440a      	add	r2, r1
70005666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000566a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
7000566e:	6113      	str	r3, [r2, #16]
70005670:	e05f      	b.n	70005732 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
70005672:	68bb      	ldr	r3, [r7, #8]
70005674:	691b      	ldr	r3, [r3, #16]
70005676:	2b00      	cmp	r3, #0
70005678:	d123      	bne.n	700056c2 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
7000567a:	69bb      	ldr	r3, [r7, #24]
7000567c:	015a      	lsls	r2, r3, #5
7000567e:	69fb      	ldr	r3, [r7, #28]
70005680:	4413      	add	r3, r2
70005682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005686:	691a      	ldr	r2, [r3, #16]
70005688:	68bb      	ldr	r3, [r7, #8]
7000568a:	689b      	ldr	r3, [r3, #8]
7000568c:	f3c3 0312 	ubfx	r3, r3, #0, #19
70005690:	69b9      	ldr	r1, [r7, #24]
70005692:	0148      	lsls	r0, r1, #5
70005694:	69f9      	ldr	r1, [r7, #28]
70005696:	4401      	add	r1, r0
70005698:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
7000569c:	4313      	orrs	r3, r2
7000569e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
700056a0:	69bb      	ldr	r3, [r7, #24]
700056a2:	015a      	lsls	r2, r3, #5
700056a4:	69fb      	ldr	r3, [r7, #28]
700056a6:	4413      	add	r3, r2
700056a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700056ac:	691b      	ldr	r3, [r3, #16]
700056ae:	69ba      	ldr	r2, [r7, #24]
700056b0:	0151      	lsls	r1, r2, #5
700056b2:	69fa      	ldr	r2, [r7, #28]
700056b4:	440a      	add	r2, r1
700056b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700056ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700056be:	6113      	str	r3, [r2, #16]
700056c0:	e037      	b.n	70005732 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
700056c2:	68bb      	ldr	r3, [r7, #8]
700056c4:	691a      	ldr	r2, [r3, #16]
700056c6:	68bb      	ldr	r3, [r7, #8]
700056c8:	689b      	ldr	r3, [r3, #8]
700056ca:	4413      	add	r3, r2
700056cc:	1e5a      	subs	r2, r3, #1
700056ce:	68bb      	ldr	r3, [r7, #8]
700056d0:	689b      	ldr	r3, [r3, #8]
700056d2:	fbb2 f3f3 	udiv	r3, r2, r3
700056d6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
700056d8:	68bb      	ldr	r3, [r7, #8]
700056da:	689b      	ldr	r3, [r3, #8]
700056dc:	8afa      	ldrh	r2, [r7, #22]
700056de:	fb03 f202 	mul.w	r2, r3, r2
700056e2:	68bb      	ldr	r3, [r7, #8]
700056e4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
700056e6:	69bb      	ldr	r3, [r7, #24]
700056e8:	015a      	lsls	r2, r3, #5
700056ea:	69fb      	ldr	r3, [r7, #28]
700056ec:	4413      	add	r3, r2
700056ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700056f2:	691a      	ldr	r2, [r3, #16]
700056f4:	8afb      	ldrh	r3, [r7, #22]
700056f6:	04d9      	lsls	r1, r3, #19
700056f8:	4b39      	ldr	r3, [pc, #228]	@ (700057e0 <USB_EPStartXfer+0x544>)
700056fa:	400b      	ands	r3, r1
700056fc:	69b9      	ldr	r1, [r7, #24]
700056fe:	0148      	lsls	r0, r1, #5
70005700:	69f9      	ldr	r1, [r7, #28]
70005702:	4401      	add	r1, r0
70005704:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
70005708:	4313      	orrs	r3, r2
7000570a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
7000570c:	69bb      	ldr	r3, [r7, #24]
7000570e:	015a      	lsls	r2, r3, #5
70005710:	69fb      	ldr	r3, [r7, #28]
70005712:	4413      	add	r3, r2
70005714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005718:	691a      	ldr	r2, [r3, #16]
7000571a:	68bb      	ldr	r3, [r7, #8]
7000571c:	6a1b      	ldr	r3, [r3, #32]
7000571e:	f3c3 0312 	ubfx	r3, r3, #0, #19
70005722:	69b9      	ldr	r1, [r7, #24]
70005724:	0148      	lsls	r0, r1, #5
70005726:	69f9      	ldr	r1, [r7, #28]
70005728:	4401      	add	r1, r0
7000572a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
7000572e:	4313      	orrs	r3, r2
70005730:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
70005732:	79fb      	ldrb	r3, [r7, #7]
70005734:	2b01      	cmp	r3, #1
70005736:	d10d      	bne.n	70005754 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
70005738:	68bb      	ldr	r3, [r7, #8]
7000573a:	68db      	ldr	r3, [r3, #12]
7000573c:	2b00      	cmp	r3, #0
7000573e:	d009      	beq.n	70005754 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
70005740:	68bb      	ldr	r3, [r7, #8]
70005742:	68d9      	ldr	r1, [r3, #12]
70005744:	69bb      	ldr	r3, [r7, #24]
70005746:	015a      	lsls	r2, r3, #5
70005748:	69fb      	ldr	r3, [r7, #28]
7000574a:	4413      	add	r3, r2
7000574c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005750:	460a      	mov	r2, r1
70005752:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
70005754:	68bb      	ldr	r3, [r7, #8]
70005756:	791b      	ldrb	r3, [r3, #4]
70005758:	2b01      	cmp	r3, #1
7000575a:	d128      	bne.n	700057ae <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
7000575c:	69fb      	ldr	r3, [r7, #28]
7000575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005762:	689b      	ldr	r3, [r3, #8]
70005764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70005768:	2b00      	cmp	r3, #0
7000576a:	d110      	bne.n	7000578e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
7000576c:	69bb      	ldr	r3, [r7, #24]
7000576e:	015a      	lsls	r2, r3, #5
70005770:	69fb      	ldr	r3, [r7, #28]
70005772:	4413      	add	r3, r2
70005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005778:	681b      	ldr	r3, [r3, #0]
7000577a:	69ba      	ldr	r2, [r7, #24]
7000577c:	0151      	lsls	r1, r2, #5
7000577e:	69fa      	ldr	r2, [r7, #28]
70005780:	440a      	add	r2, r1
70005782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005786:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
7000578a:	6013      	str	r3, [r2, #0]
7000578c:	e00f      	b.n	700057ae <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
7000578e:	69bb      	ldr	r3, [r7, #24]
70005790:	015a      	lsls	r2, r3, #5
70005792:	69fb      	ldr	r3, [r7, #28]
70005794:	4413      	add	r3, r2
70005796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000579a:	681b      	ldr	r3, [r3, #0]
7000579c:	69ba      	ldr	r2, [r7, #24]
7000579e:	0151      	lsls	r1, r2, #5
700057a0:	69fa      	ldr	r2, [r7, #28]
700057a2:	440a      	add	r2, r1
700057a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700057a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700057ac:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
700057ae:	69bb      	ldr	r3, [r7, #24]
700057b0:	015a      	lsls	r2, r3, #5
700057b2:	69fb      	ldr	r3, [r7, #28]
700057b4:	4413      	add	r3, r2
700057b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700057ba:	681b      	ldr	r3, [r3, #0]
700057bc:	69ba      	ldr	r2, [r7, #24]
700057be:	0151      	lsls	r1, r2, #5
700057c0:	69fa      	ldr	r2, [r7, #28]
700057c2:	440a      	add	r2, r1
700057c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700057c8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
700057cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
700057ce:	2300      	movs	r3, #0
}
700057d0:	4618      	mov	r0, r3
700057d2:	3720      	adds	r7, #32
700057d4:	46bd      	mov	sp, r7
700057d6:	bd80      	pop	{r7, pc}
700057d8:	fff80000 	.word	0xfff80000
700057dc:	e007ffff 	.word	0xe007ffff
700057e0:	1ff80000 	.word	0x1ff80000

700057e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
700057e4:	b480      	push	{r7}
700057e6:	b087      	sub	sp, #28
700057e8:	af00      	add	r7, sp, #0
700057ea:	6078      	str	r0, [r7, #4]
700057ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
700057ee:	2300      	movs	r3, #0
700057f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
700057f2:	2300      	movs	r3, #0
700057f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
700057f6:	687b      	ldr	r3, [r7, #4]
700057f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
700057fa:	683b      	ldr	r3, [r7, #0]
700057fc:	785b      	ldrb	r3, [r3, #1]
700057fe:	2b01      	cmp	r3, #1
70005800:	d14a      	bne.n	70005898 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
70005802:	683b      	ldr	r3, [r7, #0]
70005804:	781b      	ldrb	r3, [r3, #0]
70005806:	015a      	lsls	r2, r3, #5
70005808:	693b      	ldr	r3, [r7, #16]
7000580a:	4413      	add	r3, r2
7000580c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005810:	681b      	ldr	r3, [r3, #0]
70005812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70005816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000581a:	f040 8086 	bne.w	7000592a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
7000581e:	683b      	ldr	r3, [r7, #0]
70005820:	781b      	ldrb	r3, [r3, #0]
70005822:	015a      	lsls	r2, r3, #5
70005824:	693b      	ldr	r3, [r7, #16]
70005826:	4413      	add	r3, r2
70005828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000582c:	681b      	ldr	r3, [r3, #0]
7000582e:	683a      	ldr	r2, [r7, #0]
70005830:	7812      	ldrb	r2, [r2, #0]
70005832:	0151      	lsls	r1, r2, #5
70005834:	693a      	ldr	r2, [r7, #16]
70005836:	440a      	add	r2, r1
70005838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000583c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70005840:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
70005842:	683b      	ldr	r3, [r7, #0]
70005844:	781b      	ldrb	r3, [r3, #0]
70005846:	015a      	lsls	r2, r3, #5
70005848:	693b      	ldr	r3, [r7, #16]
7000584a:	4413      	add	r3, r2
7000584c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005850:	681b      	ldr	r3, [r3, #0]
70005852:	683a      	ldr	r2, [r7, #0]
70005854:	7812      	ldrb	r2, [r2, #0]
70005856:	0151      	lsls	r1, r2, #5
70005858:	693a      	ldr	r2, [r7, #16]
7000585a:	440a      	add	r2, r1
7000585c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
70005864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
70005866:	68fb      	ldr	r3, [r7, #12]
70005868:	3301      	adds	r3, #1
7000586a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
7000586c:	68fb      	ldr	r3, [r7, #12]
7000586e:	f242 7210 	movw	r2, #10000	@ 0x2710
70005872:	4293      	cmp	r3, r2
70005874:	d902      	bls.n	7000587c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
70005876:	2301      	movs	r3, #1
70005878:	75fb      	strb	r3, [r7, #23]
          break;
7000587a:	e056      	b.n	7000592a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
7000587c:	683b      	ldr	r3, [r7, #0]
7000587e:	781b      	ldrb	r3, [r3, #0]
70005880:	015a      	lsls	r2, r3, #5
70005882:	693b      	ldr	r3, [r7, #16]
70005884:	4413      	add	r3, r2
70005886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000588a:	681b      	ldr	r3, [r3, #0]
7000588c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70005890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70005894:	d0e7      	beq.n	70005866 <USB_EPStopXfer+0x82>
70005896:	e048      	b.n	7000592a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
70005898:	683b      	ldr	r3, [r7, #0]
7000589a:	781b      	ldrb	r3, [r3, #0]
7000589c:	015a      	lsls	r2, r3, #5
7000589e:	693b      	ldr	r3, [r7, #16]
700058a0:	4413      	add	r3, r2
700058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700058a6:	681b      	ldr	r3, [r3, #0]
700058a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
700058ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
700058b0:	d13b      	bne.n	7000592a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
700058b2:	683b      	ldr	r3, [r7, #0]
700058b4:	781b      	ldrb	r3, [r3, #0]
700058b6:	015a      	lsls	r2, r3, #5
700058b8:	693b      	ldr	r3, [r7, #16]
700058ba:	4413      	add	r3, r2
700058bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700058c0:	681b      	ldr	r3, [r3, #0]
700058c2:	683a      	ldr	r2, [r7, #0]
700058c4:	7812      	ldrb	r2, [r2, #0]
700058c6:	0151      	lsls	r1, r2, #5
700058c8:	693a      	ldr	r2, [r7, #16]
700058ca:	440a      	add	r2, r1
700058cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700058d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700058d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
700058d6:	683b      	ldr	r3, [r7, #0]
700058d8:	781b      	ldrb	r3, [r3, #0]
700058da:	015a      	lsls	r2, r3, #5
700058dc:	693b      	ldr	r3, [r7, #16]
700058de:	4413      	add	r3, r2
700058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700058e4:	681b      	ldr	r3, [r3, #0]
700058e6:	683a      	ldr	r2, [r7, #0]
700058e8:	7812      	ldrb	r2, [r2, #0]
700058ea:	0151      	lsls	r1, r2, #5
700058ec:	693a      	ldr	r2, [r7, #16]
700058ee:	440a      	add	r2, r1
700058f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700058f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
700058f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
700058fa:	68fb      	ldr	r3, [r7, #12]
700058fc:	3301      	adds	r3, #1
700058fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
70005900:	68fb      	ldr	r3, [r7, #12]
70005902:	f242 7210 	movw	r2, #10000	@ 0x2710
70005906:	4293      	cmp	r3, r2
70005908:	d902      	bls.n	70005910 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
7000590a:	2301      	movs	r3, #1
7000590c:	75fb      	strb	r3, [r7, #23]
          break;
7000590e:	e00c      	b.n	7000592a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
70005910:	683b      	ldr	r3, [r7, #0]
70005912:	781b      	ldrb	r3, [r3, #0]
70005914:	015a      	lsls	r2, r3, #5
70005916:	693b      	ldr	r3, [r7, #16]
70005918:	4413      	add	r3, r2
7000591a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000591e:	681b      	ldr	r3, [r3, #0]
70005920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70005924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70005928:	d0e7      	beq.n	700058fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
7000592a:	7dfb      	ldrb	r3, [r7, #23]
}
7000592c:	4618      	mov	r0, r3
7000592e:	371c      	adds	r7, #28
70005930:	46bd      	mov	sp, r7
70005932:	f85d 7b04 	ldr.w	r7, [sp], #4
70005936:	4770      	bx	lr

70005938 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
70005938:	b480      	push	{r7}
7000593a:	b089      	sub	sp, #36	@ 0x24
7000593c:	af00      	add	r7, sp, #0
7000593e:	60f8      	str	r0, [r7, #12]
70005940:	60b9      	str	r1, [r7, #8]
70005942:	4611      	mov	r1, r2
70005944:	461a      	mov	r2, r3
70005946:	460b      	mov	r3, r1
70005948:	71fb      	strb	r3, [r7, #7]
7000594a:	4613      	mov	r3, r2
7000594c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000594e:	68fb      	ldr	r3, [r7, #12]
70005950:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
70005952:	68bb      	ldr	r3, [r7, #8]
70005954:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
70005956:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
7000595a:	2b00      	cmp	r3, #0
7000595c:	d123      	bne.n	700059a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
7000595e:	88bb      	ldrh	r3, [r7, #4]
70005960:	3303      	adds	r3, #3
70005962:	089b      	lsrs	r3, r3, #2
70005964:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
70005966:	2300      	movs	r3, #0
70005968:	61bb      	str	r3, [r7, #24]
7000596a:	e018      	b.n	7000599e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
7000596c:	79fb      	ldrb	r3, [r7, #7]
7000596e:	031a      	lsls	r2, r3, #12
70005970:	697b      	ldr	r3, [r7, #20]
70005972:	4413      	add	r3, r2
70005974:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70005978:	461a      	mov	r2, r3
7000597a:	69fb      	ldr	r3, [r7, #28]
7000597c:	681b      	ldr	r3, [r3, #0]
7000597e:	6013      	str	r3, [r2, #0]
      pSrc++;
70005980:	69fb      	ldr	r3, [r7, #28]
70005982:	3301      	adds	r3, #1
70005984:	61fb      	str	r3, [r7, #28]
      pSrc++;
70005986:	69fb      	ldr	r3, [r7, #28]
70005988:	3301      	adds	r3, #1
7000598a:	61fb      	str	r3, [r7, #28]
      pSrc++;
7000598c:	69fb      	ldr	r3, [r7, #28]
7000598e:	3301      	adds	r3, #1
70005990:	61fb      	str	r3, [r7, #28]
      pSrc++;
70005992:	69fb      	ldr	r3, [r7, #28]
70005994:	3301      	adds	r3, #1
70005996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
70005998:	69bb      	ldr	r3, [r7, #24]
7000599a:	3301      	adds	r3, #1
7000599c:	61bb      	str	r3, [r7, #24]
7000599e:	69ba      	ldr	r2, [r7, #24]
700059a0:	693b      	ldr	r3, [r7, #16]
700059a2:	429a      	cmp	r2, r3
700059a4:	d3e2      	bcc.n	7000596c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
700059a6:	2300      	movs	r3, #0
}
700059a8:	4618      	mov	r0, r3
700059aa:	3724      	adds	r7, #36	@ 0x24
700059ac:	46bd      	mov	sp, r7
700059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
700059b2:	4770      	bx	lr

700059b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
700059b4:	b480      	push	{r7}
700059b6:	b08b      	sub	sp, #44	@ 0x2c
700059b8:	af00      	add	r7, sp, #0
700059ba:	60f8      	str	r0, [r7, #12]
700059bc:	60b9      	str	r1, [r7, #8]
700059be:	4613      	mov	r3, r2
700059c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
700059c2:	68fb      	ldr	r3, [r7, #12]
700059c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
700059c6:	68bb      	ldr	r3, [r7, #8]
700059c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
700059ca:	88fb      	ldrh	r3, [r7, #6]
700059cc:	089b      	lsrs	r3, r3, #2
700059ce:	b29b      	uxth	r3, r3
700059d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
700059d2:	88fb      	ldrh	r3, [r7, #6]
700059d4:	f003 0303 	and.w	r3, r3, #3
700059d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
700059da:	2300      	movs	r3, #0
700059dc:	623b      	str	r3, [r7, #32]
700059de:	e014      	b.n	70005a0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
700059e0:	69bb      	ldr	r3, [r7, #24]
700059e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700059e6:	681a      	ldr	r2, [r3, #0]
700059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700059ea:	601a      	str	r2, [r3, #0]
    pDest++;
700059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700059ee:	3301      	adds	r3, #1
700059f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
700059f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700059f4:	3301      	adds	r3, #1
700059f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
700059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700059fa:	3301      	adds	r3, #1
700059fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
700059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70005a00:	3301      	adds	r3, #1
70005a02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
70005a04:	6a3b      	ldr	r3, [r7, #32]
70005a06:	3301      	adds	r3, #1
70005a08:	623b      	str	r3, [r7, #32]
70005a0a:	6a3a      	ldr	r2, [r7, #32]
70005a0c:	697b      	ldr	r3, [r7, #20]
70005a0e:	429a      	cmp	r2, r3
70005a10:	d3e6      	bcc.n	700059e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
70005a12:	8bfb      	ldrh	r3, [r7, #30]
70005a14:	2b00      	cmp	r3, #0
70005a16:	d01e      	beq.n	70005a56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
70005a18:	2300      	movs	r3, #0
70005a1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
70005a1c:	69bb      	ldr	r3, [r7, #24]
70005a1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70005a22:	461a      	mov	r2, r3
70005a24:	f107 0310 	add.w	r3, r7, #16
70005a28:	6812      	ldr	r2, [r2, #0]
70005a2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
70005a2c:	693a      	ldr	r2, [r7, #16]
70005a2e:	6a3b      	ldr	r3, [r7, #32]
70005a30:	b2db      	uxtb	r3, r3
70005a32:	00db      	lsls	r3, r3, #3
70005a34:	fa22 f303 	lsr.w	r3, r2, r3
70005a38:	b2da      	uxtb	r2, r3
70005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70005a3c:	701a      	strb	r2, [r3, #0]
      i++;
70005a3e:	6a3b      	ldr	r3, [r7, #32]
70005a40:	3301      	adds	r3, #1
70005a42:	623b      	str	r3, [r7, #32]
      pDest++;
70005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70005a46:	3301      	adds	r3, #1
70005a48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
70005a4a:	8bfb      	ldrh	r3, [r7, #30]
70005a4c:	3b01      	subs	r3, #1
70005a4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
70005a50:	8bfb      	ldrh	r3, [r7, #30]
70005a52:	2b00      	cmp	r3, #0
70005a54:	d1ea      	bne.n	70005a2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
70005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
70005a58:	4618      	mov	r0, r3
70005a5a:	372c      	adds	r7, #44	@ 0x2c
70005a5c:	46bd      	mov	sp, r7
70005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
70005a62:	4770      	bx	lr

70005a64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70005a64:	b480      	push	{r7}
70005a66:	b085      	sub	sp, #20
70005a68:	af00      	add	r7, sp, #0
70005a6a:	6078      	str	r0, [r7, #4]
70005a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005a6e:	687b      	ldr	r3, [r7, #4]
70005a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70005a72:	683b      	ldr	r3, [r7, #0]
70005a74:	781b      	ldrb	r3, [r3, #0]
70005a76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
70005a78:	683b      	ldr	r3, [r7, #0]
70005a7a:	785b      	ldrb	r3, [r3, #1]
70005a7c:	2b01      	cmp	r3, #1
70005a7e:	d12c      	bne.n	70005ada <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
70005a80:	68bb      	ldr	r3, [r7, #8]
70005a82:	015a      	lsls	r2, r3, #5
70005a84:	68fb      	ldr	r3, [r7, #12]
70005a86:	4413      	add	r3, r2
70005a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005a8c:	681b      	ldr	r3, [r3, #0]
70005a8e:	2b00      	cmp	r3, #0
70005a90:	db12      	blt.n	70005ab8 <USB_EPSetStall+0x54>
70005a92:	68bb      	ldr	r3, [r7, #8]
70005a94:	2b00      	cmp	r3, #0
70005a96:	d00f      	beq.n	70005ab8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
70005a98:	68bb      	ldr	r3, [r7, #8]
70005a9a:	015a      	lsls	r2, r3, #5
70005a9c:	68fb      	ldr	r3, [r7, #12]
70005a9e:	4413      	add	r3, r2
70005aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005aa4:	681b      	ldr	r3, [r3, #0]
70005aa6:	68ba      	ldr	r2, [r7, #8]
70005aa8:	0151      	lsls	r1, r2, #5
70005aaa:	68fa      	ldr	r2, [r7, #12]
70005aac:	440a      	add	r2, r1
70005aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005ab2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
70005ab6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
70005ab8:	68bb      	ldr	r3, [r7, #8]
70005aba:	015a      	lsls	r2, r3, #5
70005abc:	68fb      	ldr	r3, [r7, #12]
70005abe:	4413      	add	r3, r2
70005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005ac4:	681b      	ldr	r3, [r3, #0]
70005ac6:	68ba      	ldr	r2, [r7, #8]
70005ac8:	0151      	lsls	r1, r2, #5
70005aca:	68fa      	ldr	r2, [r7, #12]
70005acc:	440a      	add	r2, r1
70005ace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005ad2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
70005ad6:	6013      	str	r3, [r2, #0]
70005ad8:	e02b      	b.n	70005b32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
70005ada:	68bb      	ldr	r3, [r7, #8]
70005adc:	015a      	lsls	r2, r3, #5
70005ade:	68fb      	ldr	r3, [r7, #12]
70005ae0:	4413      	add	r3, r2
70005ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005ae6:	681b      	ldr	r3, [r3, #0]
70005ae8:	2b00      	cmp	r3, #0
70005aea:	db12      	blt.n	70005b12 <USB_EPSetStall+0xae>
70005aec:	68bb      	ldr	r3, [r7, #8]
70005aee:	2b00      	cmp	r3, #0
70005af0:	d00f      	beq.n	70005b12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
70005af2:	68bb      	ldr	r3, [r7, #8]
70005af4:	015a      	lsls	r2, r3, #5
70005af6:	68fb      	ldr	r3, [r7, #12]
70005af8:	4413      	add	r3, r2
70005afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005afe:	681b      	ldr	r3, [r3, #0]
70005b00:	68ba      	ldr	r2, [r7, #8]
70005b02:	0151      	lsls	r1, r2, #5
70005b04:	68fa      	ldr	r2, [r7, #12]
70005b06:	440a      	add	r2, r1
70005b08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005b0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
70005b10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
70005b12:	68bb      	ldr	r3, [r7, #8]
70005b14:	015a      	lsls	r2, r3, #5
70005b16:	68fb      	ldr	r3, [r7, #12]
70005b18:	4413      	add	r3, r2
70005b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005b1e:	681b      	ldr	r3, [r3, #0]
70005b20:	68ba      	ldr	r2, [r7, #8]
70005b22:	0151      	lsls	r1, r2, #5
70005b24:	68fa      	ldr	r2, [r7, #12]
70005b26:	440a      	add	r2, r1
70005b28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005b2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
70005b30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
70005b32:	2300      	movs	r3, #0
}
70005b34:	4618      	mov	r0, r3
70005b36:	3714      	adds	r7, #20
70005b38:	46bd      	mov	sp, r7
70005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
70005b3e:	4770      	bx	lr

70005b40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70005b40:	b480      	push	{r7}
70005b42:	b085      	sub	sp, #20
70005b44:	af00      	add	r7, sp, #0
70005b46:	6078      	str	r0, [r7, #4]
70005b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005b4a:	687b      	ldr	r3, [r7, #4]
70005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70005b4e:	683b      	ldr	r3, [r7, #0]
70005b50:	781b      	ldrb	r3, [r3, #0]
70005b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
70005b54:	683b      	ldr	r3, [r7, #0]
70005b56:	785b      	ldrb	r3, [r3, #1]
70005b58:	2b01      	cmp	r3, #1
70005b5a:	d128      	bne.n	70005bae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
70005b5c:	68bb      	ldr	r3, [r7, #8]
70005b5e:	015a      	lsls	r2, r3, #5
70005b60:	68fb      	ldr	r3, [r7, #12]
70005b62:	4413      	add	r3, r2
70005b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005b68:	681b      	ldr	r3, [r3, #0]
70005b6a:	68ba      	ldr	r2, [r7, #8]
70005b6c:	0151      	lsls	r1, r2, #5
70005b6e:	68fa      	ldr	r2, [r7, #12]
70005b70:	440a      	add	r2, r1
70005b72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005b76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70005b7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
70005b7c:	683b      	ldr	r3, [r7, #0]
70005b7e:	791b      	ldrb	r3, [r3, #4]
70005b80:	2b03      	cmp	r3, #3
70005b82:	d003      	beq.n	70005b8c <USB_EPClearStall+0x4c>
70005b84:	683b      	ldr	r3, [r7, #0]
70005b86:	791b      	ldrb	r3, [r3, #4]
70005b88:	2b02      	cmp	r3, #2
70005b8a:	d138      	bne.n	70005bfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
70005b8c:	68bb      	ldr	r3, [r7, #8]
70005b8e:	015a      	lsls	r2, r3, #5
70005b90:	68fb      	ldr	r3, [r7, #12]
70005b92:	4413      	add	r3, r2
70005b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005b98:	681b      	ldr	r3, [r3, #0]
70005b9a:	68ba      	ldr	r2, [r7, #8]
70005b9c:	0151      	lsls	r1, r2, #5
70005b9e:	68fa      	ldr	r2, [r7, #12]
70005ba0:	440a      	add	r2, r1
70005ba2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70005ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70005baa:	6013      	str	r3, [r2, #0]
70005bac:	e027      	b.n	70005bfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
70005bae:	68bb      	ldr	r3, [r7, #8]
70005bb0:	015a      	lsls	r2, r3, #5
70005bb2:	68fb      	ldr	r3, [r7, #12]
70005bb4:	4413      	add	r3, r2
70005bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005bba:	681b      	ldr	r3, [r3, #0]
70005bbc:	68ba      	ldr	r2, [r7, #8]
70005bbe:	0151      	lsls	r1, r2, #5
70005bc0:	68fa      	ldr	r2, [r7, #12]
70005bc2:	440a      	add	r2, r1
70005bc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005bc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70005bcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
70005bce:	683b      	ldr	r3, [r7, #0]
70005bd0:	791b      	ldrb	r3, [r3, #4]
70005bd2:	2b03      	cmp	r3, #3
70005bd4:	d003      	beq.n	70005bde <USB_EPClearStall+0x9e>
70005bd6:	683b      	ldr	r3, [r7, #0]
70005bd8:	791b      	ldrb	r3, [r3, #4]
70005bda:	2b02      	cmp	r3, #2
70005bdc:	d10f      	bne.n	70005bfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
70005bde:	68bb      	ldr	r3, [r7, #8]
70005be0:	015a      	lsls	r2, r3, #5
70005be2:	68fb      	ldr	r3, [r7, #12]
70005be4:	4413      	add	r3, r2
70005be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005bea:	681b      	ldr	r3, [r3, #0]
70005bec:	68ba      	ldr	r2, [r7, #8]
70005bee:	0151      	lsls	r1, r2, #5
70005bf0:	68fa      	ldr	r2, [r7, #12]
70005bf2:	440a      	add	r2, r1
70005bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70005bfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
70005bfe:	2300      	movs	r3, #0
}
70005c00:	4618      	mov	r0, r3
70005c02:	3714      	adds	r7, #20
70005c04:	46bd      	mov	sp, r7
70005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
70005c0a:	4770      	bx	lr

70005c0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
70005c0c:	b480      	push	{r7}
70005c0e:	b085      	sub	sp, #20
70005c10:	af00      	add	r7, sp, #0
70005c12:	6078      	str	r0, [r7, #4]
70005c14:	460b      	mov	r3, r1
70005c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005c18:	687b      	ldr	r3, [r7, #4]
70005c1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
70005c1c:	68fb      	ldr	r3, [r7, #12]
70005c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005c22:	681b      	ldr	r3, [r3, #0]
70005c24:	68fa      	ldr	r2, [r7, #12]
70005c26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70005c2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
70005c2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
70005c30:	68fb      	ldr	r3, [r7, #12]
70005c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005c36:	681a      	ldr	r2, [r3, #0]
70005c38:	78fb      	ldrb	r3, [r7, #3]
70005c3a:	011b      	lsls	r3, r3, #4
70005c3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
70005c40:	68f9      	ldr	r1, [r7, #12]
70005c42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70005c46:	4313      	orrs	r3, r2
70005c48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
70005c4a:	2300      	movs	r3, #0
}
70005c4c:	4618      	mov	r0, r3
70005c4e:	3714      	adds	r7, #20
70005c50:	46bd      	mov	sp, r7
70005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
70005c56:	4770      	bx	lr

70005c58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
70005c58:	b480      	push	{r7}
70005c5a:	b085      	sub	sp, #20
70005c5c:	af00      	add	r7, sp, #0
70005c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005c60:	687b      	ldr	r3, [r7, #4]
70005c62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
70005c64:	68fb      	ldr	r3, [r7, #12]
70005c66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
70005c6a:	681b      	ldr	r3, [r3, #0]
70005c6c:	68fa      	ldr	r2, [r7, #12]
70005c6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
70005c72:	f023 0303 	bic.w	r3, r3, #3
70005c76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
70005c78:	68fb      	ldr	r3, [r7, #12]
70005c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005c7e:	685b      	ldr	r3, [r3, #4]
70005c80:	68fa      	ldr	r2, [r7, #12]
70005c82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70005c86:	f023 0302 	bic.w	r3, r3, #2
70005c8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
70005c8c:	2300      	movs	r3, #0
}
70005c8e:	4618      	mov	r0, r3
70005c90:	3714      	adds	r7, #20
70005c92:	46bd      	mov	sp, r7
70005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
70005c98:	4770      	bx	lr

70005c9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
70005c9a:	b480      	push	{r7}
70005c9c:	b085      	sub	sp, #20
70005c9e:	af00      	add	r7, sp, #0
70005ca0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
70005ca2:	687b      	ldr	r3, [r7, #4]
70005ca4:	695b      	ldr	r3, [r3, #20]
70005ca6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
70005ca8:	687b      	ldr	r3, [r7, #4]
70005caa:	699b      	ldr	r3, [r3, #24]
70005cac:	68fa      	ldr	r2, [r7, #12]
70005cae:	4013      	ands	r3, r2
70005cb0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
70005cb2:	68fb      	ldr	r3, [r7, #12]
}
70005cb4:	4618      	mov	r0, r3
70005cb6:	3714      	adds	r7, #20
70005cb8:	46bd      	mov	sp, r7
70005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
70005cbe:	4770      	bx	lr

70005cc0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
70005cc0:	b480      	push	{r7}
70005cc2:	b085      	sub	sp, #20
70005cc4:	af00      	add	r7, sp, #0
70005cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005cc8:	687b      	ldr	r3, [r7, #4]
70005cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
70005ccc:	68fb      	ldr	r3, [r7, #12]
70005cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005cd2:	699b      	ldr	r3, [r3, #24]
70005cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
70005cd6:	68fb      	ldr	r3, [r7, #12]
70005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005cdc:	69db      	ldr	r3, [r3, #28]
70005cde:	68ba      	ldr	r2, [r7, #8]
70005ce0:	4013      	ands	r3, r2
70005ce2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
70005ce4:	68bb      	ldr	r3, [r7, #8]
70005ce6:	0c1b      	lsrs	r3, r3, #16
}
70005ce8:	4618      	mov	r0, r3
70005cea:	3714      	adds	r7, #20
70005cec:	46bd      	mov	sp, r7
70005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
70005cf2:	4770      	bx	lr

70005cf4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
70005cf4:	b480      	push	{r7}
70005cf6:	b085      	sub	sp, #20
70005cf8:	af00      	add	r7, sp, #0
70005cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005cfc:	687b      	ldr	r3, [r7, #4]
70005cfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
70005d00:	68fb      	ldr	r3, [r7, #12]
70005d02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005d06:	699b      	ldr	r3, [r3, #24]
70005d08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
70005d0a:	68fb      	ldr	r3, [r7, #12]
70005d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005d10:	69db      	ldr	r3, [r3, #28]
70005d12:	68ba      	ldr	r2, [r7, #8]
70005d14:	4013      	ands	r3, r2
70005d16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
70005d18:	68bb      	ldr	r3, [r7, #8]
70005d1a:	b29b      	uxth	r3, r3
}
70005d1c:	4618      	mov	r0, r3
70005d1e:	3714      	adds	r7, #20
70005d20:	46bd      	mov	sp, r7
70005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
70005d26:	4770      	bx	lr

70005d28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
70005d28:	b480      	push	{r7}
70005d2a:	b085      	sub	sp, #20
70005d2c:	af00      	add	r7, sp, #0
70005d2e:	6078      	str	r0, [r7, #4]
70005d30:	460b      	mov	r3, r1
70005d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005d34:	687b      	ldr	r3, [r7, #4]
70005d36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
70005d38:	78fb      	ldrb	r3, [r7, #3]
70005d3a:	015a      	lsls	r2, r3, #5
70005d3c:	68fb      	ldr	r3, [r7, #12]
70005d3e:	4413      	add	r3, r2
70005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005d44:	689b      	ldr	r3, [r3, #8]
70005d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
70005d48:	68fb      	ldr	r3, [r7, #12]
70005d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005d4e:	695b      	ldr	r3, [r3, #20]
70005d50:	68ba      	ldr	r2, [r7, #8]
70005d52:	4013      	ands	r3, r2
70005d54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
70005d56:	68bb      	ldr	r3, [r7, #8]
}
70005d58:	4618      	mov	r0, r3
70005d5a:	3714      	adds	r7, #20
70005d5c:	46bd      	mov	sp, r7
70005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
70005d62:	4770      	bx	lr

70005d64 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
70005d64:	b480      	push	{r7}
70005d66:	b087      	sub	sp, #28
70005d68:	af00      	add	r7, sp, #0
70005d6a:	6078      	str	r0, [r7, #4]
70005d6c:	460b      	mov	r3, r1
70005d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005d70:	687b      	ldr	r3, [r7, #4]
70005d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
70005d74:	697b      	ldr	r3, [r7, #20]
70005d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005d7a:	691b      	ldr	r3, [r3, #16]
70005d7c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
70005d7e:	697b      	ldr	r3, [r7, #20]
70005d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70005d86:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
70005d88:	78fb      	ldrb	r3, [r7, #3]
70005d8a:	f003 030f 	and.w	r3, r3, #15
70005d8e:	68fa      	ldr	r2, [r7, #12]
70005d90:	fa22 f303 	lsr.w	r3, r2, r3
70005d94:	01db      	lsls	r3, r3, #7
70005d96:	b2db      	uxtb	r3, r3
70005d98:	693a      	ldr	r2, [r7, #16]
70005d9a:	4313      	orrs	r3, r2
70005d9c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
70005d9e:	78fb      	ldrb	r3, [r7, #3]
70005da0:	015a      	lsls	r2, r3, #5
70005da2:	697b      	ldr	r3, [r7, #20]
70005da4:	4413      	add	r3, r2
70005da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005daa:	689b      	ldr	r3, [r3, #8]
70005dac:	693a      	ldr	r2, [r7, #16]
70005dae:	4013      	ands	r3, r2
70005db0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
70005db2:	68bb      	ldr	r3, [r7, #8]
}
70005db4:	4618      	mov	r0, r3
70005db6:	371c      	adds	r7, #28
70005db8:	46bd      	mov	sp, r7
70005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
70005dbe:	4770      	bx	lr

70005dc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
70005dc0:	b480      	push	{r7}
70005dc2:	b083      	sub	sp, #12
70005dc4:	af00      	add	r7, sp, #0
70005dc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
70005dc8:	687b      	ldr	r3, [r7, #4]
70005dca:	695b      	ldr	r3, [r3, #20]
70005dcc:	f003 0301 	and.w	r3, r3, #1
}
70005dd0:	4618      	mov	r0, r3
70005dd2:	370c      	adds	r7, #12
70005dd4:	46bd      	mov	sp, r7
70005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
70005dda:	4770      	bx	lr

70005ddc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
70005ddc:	b480      	push	{r7}
70005dde:	b085      	sub	sp, #20
70005de0:	af00      	add	r7, sp, #0
70005de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005de4:	687b      	ldr	r3, [r7, #4]
70005de6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
70005de8:	68fb      	ldr	r3, [r7, #12]
70005dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005dee:	681a      	ldr	r2, [r3, #0]
70005df0:	68fb      	ldr	r3, [r7, #12]
70005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70005df6:	4619      	mov	r1, r3
70005df8:	4b09      	ldr	r3, [pc, #36]	@ (70005e20 <USB_ActivateSetup+0x44>)
70005dfa:	4013      	ands	r3, r2
70005dfc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
70005dfe:	68fb      	ldr	r3, [r7, #12]
70005e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70005e04:	685b      	ldr	r3, [r3, #4]
70005e06:	68fa      	ldr	r2, [r7, #12]
70005e08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70005e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
70005e10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
70005e12:	2300      	movs	r3, #0
}
70005e14:	4618      	mov	r0, r3
70005e16:	3714      	adds	r7, #20
70005e18:	46bd      	mov	sp, r7
70005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
70005e1e:	4770      	bx	lr
70005e20:	fffff800 	.word	0xfffff800

70005e24 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
70005e24:	b480      	push	{r7}
70005e26:	b087      	sub	sp, #28
70005e28:	af00      	add	r7, sp, #0
70005e2a:	60f8      	str	r0, [r7, #12]
70005e2c:	460b      	mov	r3, r1
70005e2e:	607a      	str	r2, [r7, #4]
70005e30:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
70005e32:	68fb      	ldr	r3, [r7, #12]
70005e34:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70005e36:	68fb      	ldr	r3, [r7, #12]
70005e38:	333c      	adds	r3, #60	@ 0x3c
70005e3a:	3304      	adds	r3, #4
70005e3c:	681b      	ldr	r3, [r3, #0]
70005e3e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
70005e40:	693b      	ldr	r3, [r7, #16]
70005e42:	4a26      	ldr	r2, [pc, #152]	@ (70005edc <USB_EP0_OutStart+0xb8>)
70005e44:	4293      	cmp	r3, r2
70005e46:	d90a      	bls.n	70005e5e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
70005e48:	697b      	ldr	r3, [r7, #20]
70005e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005e4e:	681b      	ldr	r3, [r3, #0]
70005e50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70005e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70005e58:	d101      	bne.n	70005e5e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
70005e5a:	2300      	movs	r3, #0
70005e5c:	e037      	b.n	70005ece <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
70005e5e:	697b      	ldr	r3, [r7, #20]
70005e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005e64:	461a      	mov	r2, r3
70005e66:	2300      	movs	r3, #0
70005e68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
70005e6a:	697b      	ldr	r3, [r7, #20]
70005e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005e70:	691b      	ldr	r3, [r3, #16]
70005e72:	697a      	ldr	r2, [r7, #20]
70005e74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005e78:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70005e7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
70005e7e:	697b      	ldr	r3, [r7, #20]
70005e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005e84:	691b      	ldr	r3, [r3, #16]
70005e86:	697a      	ldr	r2, [r7, #20]
70005e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005e8c:	f043 0318 	orr.w	r3, r3, #24
70005e90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
70005e92:	697b      	ldr	r3, [r7, #20]
70005e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005e98:	691b      	ldr	r3, [r3, #16]
70005e9a:	697a      	ldr	r2, [r7, #20]
70005e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005ea0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
70005ea4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
70005ea6:	7afb      	ldrb	r3, [r7, #11]
70005ea8:	2b01      	cmp	r3, #1
70005eaa:	d10f      	bne.n	70005ecc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
70005eac:	697b      	ldr	r3, [r7, #20]
70005eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005eb2:	461a      	mov	r2, r3
70005eb4:	687b      	ldr	r3, [r7, #4]
70005eb6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
70005eb8:	697b      	ldr	r3, [r7, #20]
70005eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70005ebe:	681b      	ldr	r3, [r3, #0]
70005ec0:	697a      	ldr	r2, [r7, #20]
70005ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70005ec6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
70005eca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
70005ecc:	2300      	movs	r3, #0
}
70005ece:	4618      	mov	r0, r3
70005ed0:	371c      	adds	r7, #28
70005ed2:	46bd      	mov	sp, r7
70005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
70005ed8:	4770      	bx	lr
70005eda:	bf00      	nop
70005edc:	4f54300a 	.word	0x4f54300a

70005ee0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
70005ee0:	b580      	push	{r7, lr}
70005ee2:	b084      	sub	sp, #16
70005ee4:	af00      	add	r7, sp, #0
70005ee6:	6078      	str	r0, [r7, #4]
70005ee8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
70005eea:	2300      	movs	r3, #0
70005eec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
70005eee:	683b      	ldr	r3, [r7, #0]
70005ef0:	2b00      	cmp	r3, #0
70005ef2:	d101      	bne.n	70005ef8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
70005ef4:	2303      	movs	r3, #3
70005ef6:	e025      	b.n	70005f44 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
70005ef8:	687b      	ldr	r3, [r7, #4]
70005efa:	683a      	ldr	r2, [r7, #0]
70005efc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
70005f00:	687b      	ldr	r3, [r7, #4]
70005f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70005f06:	687b      	ldr	r3, [r7, #4]
70005f08:	32ae      	adds	r2, #174	@ 0xae
70005f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70005f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70005f10:	2b00      	cmp	r3, #0
70005f12:	d00f      	beq.n	70005f34 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
70005f14:	687b      	ldr	r3, [r7, #4]
70005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70005f1a:	687b      	ldr	r3, [r7, #4]
70005f1c:	32ae      	adds	r2, #174	@ 0xae
70005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70005f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70005f24:	f107 020e 	add.w	r2, r7, #14
70005f28:	4610      	mov	r0, r2
70005f2a:	4798      	blx	r3
70005f2c:	4602      	mov	r2, r0
70005f2e:	687b      	ldr	r3, [r7, #4]
70005f30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
70005f34:	687b      	ldr	r3, [r7, #4]
70005f36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
70005f3a:	1c5a      	adds	r2, r3, #1
70005f3c:	687b      	ldr	r3, [r7, #4]
70005f3e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
70005f42:	2300      	movs	r3, #0
}
70005f44:	4618      	mov	r0, r3
70005f46:	3710      	adds	r7, #16
70005f48:	46bd      	mov	sp, r7
70005f4a:	bd80      	pop	{r7, pc}

70005f4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
70005f4c:	b580      	push	{r7, lr}
70005f4e:	b082      	sub	sp, #8
70005f50:	af00      	add	r7, sp, #0
70005f52:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
70005f54:	6878      	ldr	r0, [r7, #4]
70005f56:	f001 fb01 	bl	7000755c <USBD_LL_Start>
70005f5a:	4603      	mov	r3, r0
}
70005f5c:	4618      	mov	r0, r3
70005f5e:	3708      	adds	r7, #8
70005f60:	46bd      	mov	sp, r7
70005f62:	bd80      	pop	{r7, pc}

70005f64 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
70005f64:	b480      	push	{r7}
70005f66:	b083      	sub	sp, #12
70005f68:	af00      	add	r7, sp, #0
70005f6a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
70005f6c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
70005f6e:	4618      	mov	r0, r3
70005f70:	370c      	adds	r7, #12
70005f72:	46bd      	mov	sp, r7
70005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
70005f78:	4770      	bx	lr

70005f7a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
70005f7a:	b580      	push	{r7, lr}
70005f7c:	b084      	sub	sp, #16
70005f7e:	af00      	add	r7, sp, #0
70005f80:	6078      	str	r0, [r7, #4]
70005f82:	460b      	mov	r3, r1
70005f84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
70005f86:	2300      	movs	r3, #0
70005f88:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
70005f8a:	687b      	ldr	r3, [r7, #4]
70005f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70005f90:	2b00      	cmp	r3, #0
70005f92:	d009      	beq.n	70005fa8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
70005f94:	687b      	ldr	r3, [r7, #4]
70005f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70005f9a:	681b      	ldr	r3, [r3, #0]
70005f9c:	78fa      	ldrb	r2, [r7, #3]
70005f9e:	4611      	mov	r1, r2
70005fa0:	6878      	ldr	r0, [r7, #4]
70005fa2:	4798      	blx	r3
70005fa4:	4603      	mov	r3, r0
70005fa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
70005faa:	4618      	mov	r0, r3
70005fac:	3710      	adds	r7, #16
70005fae:	46bd      	mov	sp, r7
70005fb0:	bd80      	pop	{r7, pc}

70005fb2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
70005fb2:	b580      	push	{r7, lr}
70005fb4:	b084      	sub	sp, #16
70005fb6:	af00      	add	r7, sp, #0
70005fb8:	6078      	str	r0, [r7, #4]
70005fba:	460b      	mov	r3, r1
70005fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
70005fbe:	2300      	movs	r3, #0
70005fc0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
70005fc2:	687b      	ldr	r3, [r7, #4]
70005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70005fc8:	685b      	ldr	r3, [r3, #4]
70005fca:	78fa      	ldrb	r2, [r7, #3]
70005fcc:	4611      	mov	r1, r2
70005fce:	6878      	ldr	r0, [r7, #4]
70005fd0:	4798      	blx	r3
70005fd2:	4603      	mov	r3, r0
70005fd4:	2b00      	cmp	r3, #0
70005fd6:	d001      	beq.n	70005fdc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
70005fd8:	2303      	movs	r3, #3
70005fda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70005fdc:	7bfb      	ldrb	r3, [r7, #15]
}
70005fde:	4618      	mov	r0, r3
70005fe0:	3710      	adds	r7, #16
70005fe2:	46bd      	mov	sp, r7
70005fe4:	bd80      	pop	{r7, pc}

70005fe6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
70005fe6:	b580      	push	{r7, lr}
70005fe8:	b084      	sub	sp, #16
70005fea:	af00      	add	r7, sp, #0
70005fec:	6078      	str	r0, [r7, #4]
70005fee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
70005ff0:	687b      	ldr	r3, [r7, #4]
70005ff2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70005ff6:	6839      	ldr	r1, [r7, #0]
70005ff8:	4618      	mov	r0, r3
70005ffa:	f001 f8e2 	bl	700071c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
70005ffe:	687b      	ldr	r3, [r7, #4]
70006000:	2201      	movs	r2, #1
70006002:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
70006006:	687b      	ldr	r3, [r7, #4]
70006008:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
7000600c:	461a      	mov	r2, r3
7000600e:	687b      	ldr	r3, [r7, #4]
70006010:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
70006014:	687b      	ldr	r3, [r7, #4]
70006016:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
7000601a:	f003 031f 	and.w	r3, r3, #31
7000601e:	2b02      	cmp	r3, #2
70006020:	d01a      	beq.n	70006058 <USBD_LL_SetupStage+0x72>
70006022:	2b02      	cmp	r3, #2
70006024:	d822      	bhi.n	7000606c <USBD_LL_SetupStage+0x86>
70006026:	2b00      	cmp	r3, #0
70006028:	d002      	beq.n	70006030 <USBD_LL_SetupStage+0x4a>
7000602a:	2b01      	cmp	r3, #1
7000602c:	d00a      	beq.n	70006044 <USBD_LL_SetupStage+0x5e>
7000602e:	e01d      	b.n	7000606c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
70006030:	687b      	ldr	r3, [r7, #4]
70006032:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70006036:	4619      	mov	r1, r3
70006038:	6878      	ldr	r0, [r7, #4]
7000603a:	f000 fb0f 	bl	7000665c <USBD_StdDevReq>
7000603e:	4603      	mov	r3, r0
70006040:	73fb      	strb	r3, [r7, #15]
      break;
70006042:	e020      	b.n	70006086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
70006044:	687b      	ldr	r3, [r7, #4]
70006046:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
7000604a:	4619      	mov	r1, r3
7000604c:	6878      	ldr	r0, [r7, #4]
7000604e:	f000 fb77 	bl	70006740 <USBD_StdItfReq>
70006052:	4603      	mov	r3, r0
70006054:	73fb      	strb	r3, [r7, #15]
      break;
70006056:	e016      	b.n	70006086 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
70006058:	687b      	ldr	r3, [r7, #4]
7000605a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
7000605e:	4619      	mov	r1, r3
70006060:	6878      	ldr	r0, [r7, #4]
70006062:	f000 fbd9 	bl	70006818 <USBD_StdEPReq>
70006066:	4603      	mov	r3, r0
70006068:	73fb      	strb	r3, [r7, #15]
      break;
7000606a:	e00c      	b.n	70006086 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
7000606c:	687b      	ldr	r3, [r7, #4]
7000606e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70006072:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
70006076:	b2db      	uxtb	r3, r3
70006078:	4619      	mov	r1, r3
7000607a:	6878      	ldr	r0, [r7, #4]
7000607c:	f001 face 	bl	7000761c <USBD_LL_StallEP>
70006080:	4603      	mov	r3, r0
70006082:	73fb      	strb	r3, [r7, #15]
      break;
70006084:	bf00      	nop
  }

  return ret;
70006086:	7bfb      	ldrb	r3, [r7, #15]
}
70006088:	4618      	mov	r0, r3
7000608a:	3710      	adds	r7, #16
7000608c:	46bd      	mov	sp, r7
7000608e:	bd80      	pop	{r7, pc}

70006090 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
70006090:	b580      	push	{r7, lr}
70006092:	b086      	sub	sp, #24
70006094:	af00      	add	r7, sp, #0
70006096:	60f8      	str	r0, [r7, #12]
70006098:	460b      	mov	r3, r1
7000609a:	607a      	str	r2, [r7, #4]
7000609c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
7000609e:	2300      	movs	r3, #0
700060a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
700060a2:	7afb      	ldrb	r3, [r7, #11]
700060a4:	2b00      	cmp	r3, #0
700060a6:	d16e      	bne.n	70006186 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
700060a8:	68fb      	ldr	r3, [r7, #12]
700060aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
700060ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
700060b0:	68fb      	ldr	r3, [r7, #12]
700060b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
700060b6:	2b03      	cmp	r3, #3
700060b8:	f040 8098 	bne.w	700061ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
700060bc:	693b      	ldr	r3, [r7, #16]
700060be:	689a      	ldr	r2, [r3, #8]
700060c0:	693b      	ldr	r3, [r7, #16]
700060c2:	68db      	ldr	r3, [r3, #12]
700060c4:	429a      	cmp	r2, r3
700060c6:	d913      	bls.n	700060f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
700060c8:	693b      	ldr	r3, [r7, #16]
700060ca:	689a      	ldr	r2, [r3, #8]
700060cc:	693b      	ldr	r3, [r7, #16]
700060ce:	68db      	ldr	r3, [r3, #12]
700060d0:	1ad2      	subs	r2, r2, r3
700060d2:	693b      	ldr	r3, [r7, #16]
700060d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
700060d6:	693b      	ldr	r3, [r7, #16]
700060d8:	68da      	ldr	r2, [r3, #12]
700060da:	693b      	ldr	r3, [r7, #16]
700060dc:	689b      	ldr	r3, [r3, #8]
700060de:	4293      	cmp	r3, r2
700060e0:	bf28      	it	cs
700060e2:	4613      	movcs	r3, r2
700060e4:	461a      	mov	r2, r3
700060e6:	6879      	ldr	r1, [r7, #4]
700060e8:	68f8      	ldr	r0, [r7, #12]
700060ea:	f001 f8fe 	bl	700072ea <USBD_CtlContinueRx>
700060ee:	e07d      	b.n	700061ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
700060f0:	68fb      	ldr	r3, [r7, #12]
700060f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
700060f6:	f003 031f 	and.w	r3, r3, #31
700060fa:	2b02      	cmp	r3, #2
700060fc:	d014      	beq.n	70006128 <USBD_LL_DataOutStage+0x98>
700060fe:	2b02      	cmp	r3, #2
70006100:	d81d      	bhi.n	7000613e <USBD_LL_DataOutStage+0xae>
70006102:	2b00      	cmp	r3, #0
70006104:	d002      	beq.n	7000610c <USBD_LL_DataOutStage+0x7c>
70006106:	2b01      	cmp	r3, #1
70006108:	d003      	beq.n	70006112 <USBD_LL_DataOutStage+0x82>
7000610a:	e018      	b.n	7000613e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
7000610c:	2300      	movs	r3, #0
7000610e:	75bb      	strb	r3, [r7, #22]
            break;
70006110:	e018      	b.n	70006144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
70006112:	68fb      	ldr	r3, [r7, #12]
70006114:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
70006118:	b2db      	uxtb	r3, r3
7000611a:	4619      	mov	r1, r3
7000611c:	68f8      	ldr	r0, [r7, #12]
7000611e:	f000 fa64 	bl	700065ea <USBD_CoreFindIF>
70006122:	4603      	mov	r3, r0
70006124:	75bb      	strb	r3, [r7, #22]
            break;
70006126:	e00d      	b.n	70006144 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
70006128:	68fb      	ldr	r3, [r7, #12]
7000612a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
7000612e:	b2db      	uxtb	r3, r3
70006130:	4619      	mov	r1, r3
70006132:	68f8      	ldr	r0, [r7, #12]
70006134:	f000 fa66 	bl	70006604 <USBD_CoreFindEP>
70006138:	4603      	mov	r3, r0
7000613a:	75bb      	strb	r3, [r7, #22]
            break;
7000613c:	e002      	b.n	70006144 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
7000613e:	2300      	movs	r3, #0
70006140:	75bb      	strb	r3, [r7, #22]
            break;
70006142:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
70006144:	7dbb      	ldrb	r3, [r7, #22]
70006146:	2b00      	cmp	r3, #0
70006148:	d119      	bne.n	7000617e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
7000614a:	68fb      	ldr	r3, [r7, #12]
7000614c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006150:	b2db      	uxtb	r3, r3
70006152:	2b03      	cmp	r3, #3
70006154:	d113      	bne.n	7000617e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
70006156:	7dba      	ldrb	r2, [r7, #22]
70006158:	68fb      	ldr	r3, [r7, #12]
7000615a:	32ae      	adds	r2, #174	@ 0xae
7000615c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006160:	691b      	ldr	r3, [r3, #16]
70006162:	2b00      	cmp	r3, #0
70006164:	d00b      	beq.n	7000617e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
70006166:	7dba      	ldrb	r2, [r7, #22]
70006168:	68fb      	ldr	r3, [r7, #12]
7000616a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
7000616e:	7dba      	ldrb	r2, [r7, #22]
70006170:	68fb      	ldr	r3, [r7, #12]
70006172:	32ae      	adds	r2, #174	@ 0xae
70006174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006178:	691b      	ldr	r3, [r3, #16]
7000617a:	68f8      	ldr	r0, [r7, #12]
7000617c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
7000617e:	68f8      	ldr	r0, [r7, #12]
70006180:	f001 f8c4 	bl	7000730c <USBD_CtlSendStatus>
70006184:	e032      	b.n	700061ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
70006186:	7afb      	ldrb	r3, [r7, #11]
70006188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
7000618c:	b2db      	uxtb	r3, r3
7000618e:	4619      	mov	r1, r3
70006190:	68f8      	ldr	r0, [r7, #12]
70006192:	f000 fa37 	bl	70006604 <USBD_CoreFindEP>
70006196:	4603      	mov	r3, r0
70006198:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
7000619a:	7dbb      	ldrb	r3, [r7, #22]
7000619c:	2bff      	cmp	r3, #255	@ 0xff
7000619e:	d025      	beq.n	700061ec <USBD_LL_DataOutStage+0x15c>
700061a0:	7dbb      	ldrb	r3, [r7, #22]
700061a2:	2b00      	cmp	r3, #0
700061a4:	d122      	bne.n	700061ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
700061a6:	68fb      	ldr	r3, [r7, #12]
700061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700061ac:	b2db      	uxtb	r3, r3
700061ae:	2b03      	cmp	r3, #3
700061b0:	d117      	bne.n	700061e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
700061b2:	7dba      	ldrb	r2, [r7, #22]
700061b4:	68fb      	ldr	r3, [r7, #12]
700061b6:	32ae      	adds	r2, #174	@ 0xae
700061b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700061bc:	699b      	ldr	r3, [r3, #24]
700061be:	2b00      	cmp	r3, #0
700061c0:	d00f      	beq.n	700061e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
700061c2:	7dba      	ldrb	r2, [r7, #22]
700061c4:	68fb      	ldr	r3, [r7, #12]
700061c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
700061ca:	7dba      	ldrb	r2, [r7, #22]
700061cc:	68fb      	ldr	r3, [r7, #12]
700061ce:	32ae      	adds	r2, #174	@ 0xae
700061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700061d4:	699b      	ldr	r3, [r3, #24]
700061d6:	7afa      	ldrb	r2, [r7, #11]
700061d8:	4611      	mov	r1, r2
700061da:	68f8      	ldr	r0, [r7, #12]
700061dc:	4798      	blx	r3
700061de:	4603      	mov	r3, r0
700061e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
700061e2:	7dfb      	ldrb	r3, [r7, #23]
700061e4:	2b00      	cmp	r3, #0
700061e6:	d001      	beq.n	700061ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
700061e8:	7dfb      	ldrb	r3, [r7, #23]
700061ea:	e000      	b.n	700061ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
700061ec:	2300      	movs	r3, #0
}
700061ee:	4618      	mov	r0, r3
700061f0:	3718      	adds	r7, #24
700061f2:	46bd      	mov	sp, r7
700061f4:	bd80      	pop	{r7, pc}

700061f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
700061f6:	b580      	push	{r7, lr}
700061f8:	b086      	sub	sp, #24
700061fa:	af00      	add	r7, sp, #0
700061fc:	60f8      	str	r0, [r7, #12]
700061fe:	460b      	mov	r3, r1
70006200:	607a      	str	r2, [r7, #4]
70006202:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
70006204:	7afb      	ldrb	r3, [r7, #11]
70006206:	2b00      	cmp	r3, #0
70006208:	d16f      	bne.n	700062ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
7000620a:	68fb      	ldr	r3, [r7, #12]
7000620c:	3314      	adds	r3, #20
7000620e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
70006210:	68fb      	ldr	r3, [r7, #12]
70006212:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
70006216:	2b02      	cmp	r3, #2
70006218:	d15a      	bne.n	700062d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
7000621a:	693b      	ldr	r3, [r7, #16]
7000621c:	689a      	ldr	r2, [r3, #8]
7000621e:	693b      	ldr	r3, [r7, #16]
70006220:	68db      	ldr	r3, [r3, #12]
70006222:	429a      	cmp	r2, r3
70006224:	d914      	bls.n	70006250 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
70006226:	693b      	ldr	r3, [r7, #16]
70006228:	689a      	ldr	r2, [r3, #8]
7000622a:	693b      	ldr	r3, [r7, #16]
7000622c:	68db      	ldr	r3, [r3, #12]
7000622e:	1ad2      	subs	r2, r2, r3
70006230:	693b      	ldr	r3, [r7, #16]
70006232:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
70006234:	693b      	ldr	r3, [r7, #16]
70006236:	689b      	ldr	r3, [r3, #8]
70006238:	461a      	mov	r2, r3
7000623a:	6879      	ldr	r1, [r7, #4]
7000623c:	68f8      	ldr	r0, [r7, #12]
7000623e:	f001 f826 	bl	7000728e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70006242:	2300      	movs	r3, #0
70006244:	2200      	movs	r2, #0
70006246:	2100      	movs	r1, #0
70006248:	68f8      	ldr	r0, [r7, #12]
7000624a:	f001 fa91 	bl	70007770 <USBD_LL_PrepareReceive>
7000624e:	e03f      	b.n	700062d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
70006250:	693b      	ldr	r3, [r7, #16]
70006252:	68da      	ldr	r2, [r3, #12]
70006254:	693b      	ldr	r3, [r7, #16]
70006256:	689b      	ldr	r3, [r3, #8]
70006258:	429a      	cmp	r2, r3
7000625a:	d11c      	bne.n	70006296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
7000625c:	693b      	ldr	r3, [r7, #16]
7000625e:	685a      	ldr	r2, [r3, #4]
70006260:	693b      	ldr	r3, [r7, #16]
70006262:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
70006264:	429a      	cmp	r2, r3
70006266:	d316      	bcc.n	70006296 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
70006268:	693b      	ldr	r3, [r7, #16]
7000626a:	685a      	ldr	r2, [r3, #4]
7000626c:	68fb      	ldr	r3, [r7, #12]
7000626e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
70006272:	429a      	cmp	r2, r3
70006274:	d20f      	bcs.n	70006296 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
70006276:	2200      	movs	r2, #0
70006278:	2100      	movs	r1, #0
7000627a:	68f8      	ldr	r0, [r7, #12]
7000627c:	f001 f807 	bl	7000728e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
70006280:	68fb      	ldr	r3, [r7, #12]
70006282:	2200      	movs	r2, #0
70006284:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70006288:	2300      	movs	r3, #0
7000628a:	2200      	movs	r2, #0
7000628c:	2100      	movs	r1, #0
7000628e:	68f8      	ldr	r0, [r7, #12]
70006290:	f001 fa6e 	bl	70007770 <USBD_LL_PrepareReceive>
70006294:	e01c      	b.n	700062d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70006296:	68fb      	ldr	r3, [r7, #12]
70006298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000629c:	b2db      	uxtb	r3, r3
7000629e:	2b03      	cmp	r3, #3
700062a0:	d10f      	bne.n	700062c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
700062a2:	68fb      	ldr	r3, [r7, #12]
700062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700062a8:	68db      	ldr	r3, [r3, #12]
700062aa:	2b00      	cmp	r3, #0
700062ac:	d009      	beq.n	700062c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
700062ae:	68fb      	ldr	r3, [r7, #12]
700062b0:	2200      	movs	r2, #0
700062b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
700062b6:	68fb      	ldr	r3, [r7, #12]
700062b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700062bc:	68db      	ldr	r3, [r3, #12]
700062be:	68f8      	ldr	r0, [r7, #12]
700062c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
700062c2:	2180      	movs	r1, #128	@ 0x80
700062c4:	68f8      	ldr	r0, [r7, #12]
700062c6:	f001 f9a9 	bl	7000761c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
700062ca:	68f8      	ldr	r0, [r7, #12]
700062cc:	f001 f831 	bl	70007332 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
700062d0:	68fb      	ldr	r3, [r7, #12]
700062d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
700062d6:	2b00      	cmp	r3, #0
700062d8:	d03a      	beq.n	70006350 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
700062da:	68f8      	ldr	r0, [r7, #12]
700062dc:	f7ff fe42 	bl	70005f64 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
700062e0:	68fb      	ldr	r3, [r7, #12]
700062e2:	2200      	movs	r2, #0
700062e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
700062e8:	e032      	b.n	70006350 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
700062ea:	7afb      	ldrb	r3, [r7, #11]
700062ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
700062f0:	b2db      	uxtb	r3, r3
700062f2:	4619      	mov	r1, r3
700062f4:	68f8      	ldr	r0, [r7, #12]
700062f6:	f000 f985 	bl	70006604 <USBD_CoreFindEP>
700062fa:	4603      	mov	r3, r0
700062fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
700062fe:	7dfb      	ldrb	r3, [r7, #23]
70006300:	2bff      	cmp	r3, #255	@ 0xff
70006302:	d025      	beq.n	70006350 <USBD_LL_DataInStage+0x15a>
70006304:	7dfb      	ldrb	r3, [r7, #23]
70006306:	2b00      	cmp	r3, #0
70006308:	d122      	bne.n	70006350 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
7000630a:	68fb      	ldr	r3, [r7, #12]
7000630c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006310:	b2db      	uxtb	r3, r3
70006312:	2b03      	cmp	r3, #3
70006314:	d11c      	bne.n	70006350 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
70006316:	7dfa      	ldrb	r2, [r7, #23]
70006318:	68fb      	ldr	r3, [r7, #12]
7000631a:	32ae      	adds	r2, #174	@ 0xae
7000631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006320:	695b      	ldr	r3, [r3, #20]
70006322:	2b00      	cmp	r3, #0
70006324:	d014      	beq.n	70006350 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
70006326:	7dfa      	ldrb	r2, [r7, #23]
70006328:	68fb      	ldr	r3, [r7, #12]
7000632a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
7000632e:	7dfa      	ldrb	r2, [r7, #23]
70006330:	68fb      	ldr	r3, [r7, #12]
70006332:	32ae      	adds	r2, #174	@ 0xae
70006334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006338:	695b      	ldr	r3, [r3, #20]
7000633a:	7afa      	ldrb	r2, [r7, #11]
7000633c:	4611      	mov	r1, r2
7000633e:	68f8      	ldr	r0, [r7, #12]
70006340:	4798      	blx	r3
70006342:	4603      	mov	r3, r0
70006344:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
70006346:	7dbb      	ldrb	r3, [r7, #22]
70006348:	2b00      	cmp	r3, #0
7000634a:	d001      	beq.n	70006350 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
7000634c:	7dbb      	ldrb	r3, [r7, #22]
7000634e:	e000      	b.n	70006352 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
70006350:	2300      	movs	r3, #0
}
70006352:	4618      	mov	r0, r3
70006354:	3718      	adds	r7, #24
70006356:	46bd      	mov	sp, r7
70006358:	bd80      	pop	{r7, pc}

7000635a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
7000635a:	b580      	push	{r7, lr}
7000635c:	b084      	sub	sp, #16
7000635e:	af00      	add	r7, sp, #0
70006360:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
70006362:	2300      	movs	r3, #0
70006364:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
70006366:	687b      	ldr	r3, [r7, #4]
70006368:	2201      	movs	r2, #1
7000636a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
7000636e:	687b      	ldr	r3, [r7, #4]
70006370:	2200      	movs	r2, #0
70006372:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
70006376:	687b      	ldr	r3, [r7, #4]
70006378:	2200      	movs	r2, #0
7000637a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
7000637c:	687b      	ldr	r3, [r7, #4]
7000637e:	2200      	movs	r2, #0
70006380:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
70006384:	687b      	ldr	r3, [r7, #4]
70006386:	2200      	movs	r2, #0
70006388:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
7000638c:	687b      	ldr	r3, [r7, #4]
7000638e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70006392:	2b00      	cmp	r3, #0
70006394:	d014      	beq.n	700063c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
70006396:	687b      	ldr	r3, [r7, #4]
70006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
7000639c:	685b      	ldr	r3, [r3, #4]
7000639e:	2b00      	cmp	r3, #0
700063a0:	d00e      	beq.n	700063c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
700063a2:	687b      	ldr	r3, [r7, #4]
700063a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700063a8:	685b      	ldr	r3, [r3, #4]
700063aa:	687a      	ldr	r2, [r7, #4]
700063ac:	6852      	ldr	r2, [r2, #4]
700063ae:	b2d2      	uxtb	r2, r2
700063b0:	4611      	mov	r1, r2
700063b2:	6878      	ldr	r0, [r7, #4]
700063b4:	4798      	blx	r3
700063b6:	4603      	mov	r3, r0
700063b8:	2b00      	cmp	r3, #0
700063ba:	d001      	beq.n	700063c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
700063bc:	2303      	movs	r3, #3
700063be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
700063c0:	2340      	movs	r3, #64	@ 0x40
700063c2:	2200      	movs	r2, #0
700063c4:	2100      	movs	r1, #0
700063c6:	6878      	ldr	r0, [r7, #4]
700063c8:	f001 f8e3 	bl	70007592 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
700063cc:	687b      	ldr	r3, [r7, #4]
700063ce:	2201      	movs	r2, #1
700063d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
700063d4:	687b      	ldr	r3, [r7, #4]
700063d6:	2240      	movs	r2, #64	@ 0x40
700063d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
700063dc:	2340      	movs	r3, #64	@ 0x40
700063de:	2200      	movs	r2, #0
700063e0:	2180      	movs	r1, #128	@ 0x80
700063e2:	6878      	ldr	r0, [r7, #4]
700063e4:	f001 f8d5 	bl	70007592 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
700063e8:	687b      	ldr	r3, [r7, #4]
700063ea:	2201      	movs	r2, #1
700063ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
700063ee:	687b      	ldr	r3, [r7, #4]
700063f0:	2240      	movs	r2, #64	@ 0x40
700063f2:	621a      	str	r2, [r3, #32]

  return ret;
700063f4:	7bfb      	ldrb	r3, [r7, #15]
}
700063f6:	4618      	mov	r0, r3
700063f8:	3710      	adds	r7, #16
700063fa:	46bd      	mov	sp, r7
700063fc:	bd80      	pop	{r7, pc}

700063fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
700063fe:	b480      	push	{r7}
70006400:	b083      	sub	sp, #12
70006402:	af00      	add	r7, sp, #0
70006404:	6078      	str	r0, [r7, #4]
70006406:	460b      	mov	r3, r1
70006408:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
7000640a:	687b      	ldr	r3, [r7, #4]
7000640c:	78fa      	ldrb	r2, [r7, #3]
7000640e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
70006410:	2300      	movs	r3, #0
}
70006412:	4618      	mov	r0, r3
70006414:	370c      	adds	r7, #12
70006416:	46bd      	mov	sp, r7
70006418:	f85d 7b04 	ldr.w	r7, [sp], #4
7000641c:	4770      	bx	lr

7000641e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
7000641e:	b480      	push	{r7}
70006420:	b083      	sub	sp, #12
70006422:	af00      	add	r7, sp, #0
70006424:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
70006426:	687b      	ldr	r3, [r7, #4]
70006428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000642c:	b2db      	uxtb	r3, r3
7000642e:	2b04      	cmp	r3, #4
70006430:	d006      	beq.n	70006440 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
70006432:	687b      	ldr	r3, [r7, #4]
70006434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006438:	b2da      	uxtb	r2, r3
7000643a:	687b      	ldr	r3, [r7, #4]
7000643c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
70006440:	687b      	ldr	r3, [r7, #4]
70006442:	2204      	movs	r2, #4
70006444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
70006448:	2300      	movs	r3, #0
}
7000644a:	4618      	mov	r0, r3
7000644c:	370c      	adds	r7, #12
7000644e:	46bd      	mov	sp, r7
70006450:	f85d 7b04 	ldr.w	r7, [sp], #4
70006454:	4770      	bx	lr

70006456 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
70006456:	b480      	push	{r7}
70006458:	b083      	sub	sp, #12
7000645a:	af00      	add	r7, sp, #0
7000645c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
7000645e:	687b      	ldr	r3, [r7, #4]
70006460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006464:	b2db      	uxtb	r3, r3
70006466:	2b04      	cmp	r3, #4
70006468:	d106      	bne.n	70006478 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
7000646a:	687b      	ldr	r3, [r7, #4]
7000646c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
70006470:	b2da      	uxtb	r2, r3
70006472:	687b      	ldr	r3, [r7, #4]
70006474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
70006478:	2300      	movs	r3, #0
}
7000647a:	4618      	mov	r0, r3
7000647c:	370c      	adds	r7, #12
7000647e:	46bd      	mov	sp, r7
70006480:	f85d 7b04 	ldr.w	r7, [sp], #4
70006484:	4770      	bx	lr

70006486 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
70006486:	b580      	push	{r7, lr}
70006488:	b082      	sub	sp, #8
7000648a:	af00      	add	r7, sp, #0
7000648c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
7000648e:	687b      	ldr	r3, [r7, #4]
70006490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006494:	b2db      	uxtb	r3, r3
70006496:	2b03      	cmp	r3, #3
70006498:	d110      	bne.n	700064bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
7000649a:	687b      	ldr	r3, [r7, #4]
7000649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700064a0:	2b00      	cmp	r3, #0
700064a2:	d00b      	beq.n	700064bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
700064a4:	687b      	ldr	r3, [r7, #4]
700064a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700064aa:	69db      	ldr	r3, [r3, #28]
700064ac:	2b00      	cmp	r3, #0
700064ae:	d005      	beq.n	700064bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
700064b0:	687b      	ldr	r3, [r7, #4]
700064b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700064b6:	69db      	ldr	r3, [r3, #28]
700064b8:	6878      	ldr	r0, [r7, #4]
700064ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
700064bc:	2300      	movs	r3, #0
}
700064be:	4618      	mov	r0, r3
700064c0:	3708      	adds	r7, #8
700064c2:	46bd      	mov	sp, r7
700064c4:	bd80      	pop	{r7, pc}

700064c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
700064c6:	b580      	push	{r7, lr}
700064c8:	b082      	sub	sp, #8
700064ca:	af00      	add	r7, sp, #0
700064cc:	6078      	str	r0, [r7, #4]
700064ce:	460b      	mov	r3, r1
700064d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
700064d2:	687b      	ldr	r3, [r7, #4]
700064d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
700064d8:	687b      	ldr	r3, [r7, #4]
700064da:	32ae      	adds	r2, #174	@ 0xae
700064dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700064e0:	2b00      	cmp	r3, #0
700064e2:	d101      	bne.n	700064e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
700064e4:	2303      	movs	r3, #3
700064e6:	e01c      	b.n	70006522 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
700064e8:	687b      	ldr	r3, [r7, #4]
700064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700064ee:	b2db      	uxtb	r3, r3
700064f0:	2b03      	cmp	r3, #3
700064f2:	d115      	bne.n	70006520 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
700064f4:	687b      	ldr	r3, [r7, #4]
700064f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
700064fa:	687b      	ldr	r3, [r7, #4]
700064fc:	32ae      	adds	r2, #174	@ 0xae
700064fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006502:	6a1b      	ldr	r3, [r3, #32]
70006504:	2b00      	cmp	r3, #0
70006506:	d00b      	beq.n	70006520 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
70006508:	687b      	ldr	r3, [r7, #4]
7000650a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000650e:	687b      	ldr	r3, [r7, #4]
70006510:	32ae      	adds	r2, #174	@ 0xae
70006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006516:	6a1b      	ldr	r3, [r3, #32]
70006518:	78fa      	ldrb	r2, [r7, #3]
7000651a:	4611      	mov	r1, r2
7000651c:	6878      	ldr	r0, [r7, #4]
7000651e:	4798      	blx	r3
    }
  }

  return USBD_OK;
70006520:	2300      	movs	r3, #0
}
70006522:	4618      	mov	r0, r3
70006524:	3708      	adds	r7, #8
70006526:	46bd      	mov	sp, r7
70006528:	bd80      	pop	{r7, pc}

7000652a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
7000652a:	b580      	push	{r7, lr}
7000652c:	b082      	sub	sp, #8
7000652e:	af00      	add	r7, sp, #0
70006530:	6078      	str	r0, [r7, #4]
70006532:	460b      	mov	r3, r1
70006534:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
70006536:	687b      	ldr	r3, [r7, #4]
70006538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000653c:	687b      	ldr	r3, [r7, #4]
7000653e:	32ae      	adds	r2, #174	@ 0xae
70006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006544:	2b00      	cmp	r3, #0
70006546:	d101      	bne.n	7000654c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
70006548:	2303      	movs	r3, #3
7000654a:	e01c      	b.n	70006586 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
7000654c:	687b      	ldr	r3, [r7, #4]
7000654e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006552:	b2db      	uxtb	r3, r3
70006554:	2b03      	cmp	r3, #3
70006556:	d115      	bne.n	70006584 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
70006558:	687b      	ldr	r3, [r7, #4]
7000655a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000655e:	687b      	ldr	r3, [r7, #4]
70006560:	32ae      	adds	r2, #174	@ 0xae
70006562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70006568:	2b00      	cmp	r3, #0
7000656a:	d00b      	beq.n	70006584 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
7000656c:	687b      	ldr	r3, [r7, #4]
7000656e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70006572:	687b      	ldr	r3, [r7, #4]
70006574:	32ae      	adds	r2, #174	@ 0xae
70006576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000657c:	78fa      	ldrb	r2, [r7, #3]
7000657e:	4611      	mov	r1, r2
70006580:	6878      	ldr	r0, [r7, #4]
70006582:	4798      	blx	r3
    }
  }

  return USBD_OK;
70006584:	2300      	movs	r3, #0
}
70006586:	4618      	mov	r0, r3
70006588:	3708      	adds	r7, #8
7000658a:	46bd      	mov	sp, r7
7000658c:	bd80      	pop	{r7, pc}

7000658e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
7000658e:	b480      	push	{r7}
70006590:	b083      	sub	sp, #12
70006592:	af00      	add	r7, sp, #0
70006594:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
70006596:	2300      	movs	r3, #0
}
70006598:	4618      	mov	r0, r3
7000659a:	370c      	adds	r7, #12
7000659c:	46bd      	mov	sp, r7
7000659e:	f85d 7b04 	ldr.w	r7, [sp], #4
700065a2:	4770      	bx	lr

700065a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
700065a4:	b580      	push	{r7, lr}
700065a6:	b084      	sub	sp, #16
700065a8:	af00      	add	r7, sp, #0
700065aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
700065ac:	2300      	movs	r3, #0
700065ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
700065b0:	687b      	ldr	r3, [r7, #4]
700065b2:	2201      	movs	r2, #1
700065b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
700065b8:	687b      	ldr	r3, [r7, #4]
700065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700065be:	2b00      	cmp	r3, #0
700065c0:	d00e      	beq.n	700065e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
700065c2:	687b      	ldr	r3, [r7, #4]
700065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700065c8:	685b      	ldr	r3, [r3, #4]
700065ca:	687a      	ldr	r2, [r7, #4]
700065cc:	6852      	ldr	r2, [r2, #4]
700065ce:	b2d2      	uxtb	r2, r2
700065d0:	4611      	mov	r1, r2
700065d2:	6878      	ldr	r0, [r7, #4]
700065d4:	4798      	blx	r3
700065d6:	4603      	mov	r3, r0
700065d8:	2b00      	cmp	r3, #0
700065da:	d001      	beq.n	700065e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
700065dc:	2303      	movs	r3, #3
700065de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
700065e0:	7bfb      	ldrb	r3, [r7, #15]
}
700065e2:	4618      	mov	r0, r3
700065e4:	3710      	adds	r7, #16
700065e6:	46bd      	mov	sp, r7
700065e8:	bd80      	pop	{r7, pc}

700065ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
700065ea:	b480      	push	{r7}
700065ec:	b083      	sub	sp, #12
700065ee:	af00      	add	r7, sp, #0
700065f0:	6078      	str	r0, [r7, #4]
700065f2:	460b      	mov	r3, r1
700065f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
700065f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
700065f8:	4618      	mov	r0, r3
700065fa:	370c      	adds	r7, #12
700065fc:	46bd      	mov	sp, r7
700065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
70006602:	4770      	bx	lr

70006604 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
70006604:	b480      	push	{r7}
70006606:	b083      	sub	sp, #12
70006608:	af00      	add	r7, sp, #0
7000660a:	6078      	str	r0, [r7, #4]
7000660c:	460b      	mov	r3, r1
7000660e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
70006610:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
70006612:	4618      	mov	r0, r3
70006614:	370c      	adds	r7, #12
70006616:	46bd      	mov	sp, r7
70006618:	f85d 7b04 	ldr.w	r7, [sp], #4
7000661c:	4770      	bx	lr

7000661e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
7000661e:	b480      	push	{r7}
70006620:	b087      	sub	sp, #28
70006622:	af00      	add	r7, sp, #0
70006624:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
70006626:	687b      	ldr	r3, [r7, #4]
70006628:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
7000662a:	697b      	ldr	r3, [r7, #20]
7000662c:	781b      	ldrb	r3, [r3, #0]
7000662e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
70006630:	697b      	ldr	r3, [r7, #20]
70006632:	3301      	adds	r3, #1
70006634:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
70006636:	697b      	ldr	r3, [r7, #20]
70006638:	781b      	ldrb	r3, [r3, #0]
7000663a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
7000663c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
70006640:	021b      	lsls	r3, r3, #8
70006642:	b21a      	sxth	r2, r3
70006644:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
70006648:	4313      	orrs	r3, r2
7000664a:	b21b      	sxth	r3, r3
7000664c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
7000664e:	89fb      	ldrh	r3, [r7, #14]
}
70006650:	4618      	mov	r0, r3
70006652:	371c      	adds	r7, #28
70006654:	46bd      	mov	sp, r7
70006656:	f85d 7b04 	ldr.w	r7, [sp], #4
7000665a:	4770      	bx	lr

7000665c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
7000665c:	b580      	push	{r7, lr}
7000665e:	b084      	sub	sp, #16
70006660:	af00      	add	r7, sp, #0
70006662:	6078      	str	r0, [r7, #4]
70006664:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
70006666:	2300      	movs	r3, #0
70006668:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
7000666a:	683b      	ldr	r3, [r7, #0]
7000666c:	781b      	ldrb	r3, [r3, #0]
7000666e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
70006672:	2b40      	cmp	r3, #64	@ 0x40
70006674:	d005      	beq.n	70006682 <USBD_StdDevReq+0x26>
70006676:	2b40      	cmp	r3, #64	@ 0x40
70006678:	d857      	bhi.n	7000672a <USBD_StdDevReq+0xce>
7000667a:	2b00      	cmp	r3, #0
7000667c:	d00f      	beq.n	7000669e <USBD_StdDevReq+0x42>
7000667e:	2b20      	cmp	r3, #32
70006680:	d153      	bne.n	7000672a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
70006682:	687b      	ldr	r3, [r7, #4]
70006684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70006688:	687b      	ldr	r3, [r7, #4]
7000668a:	32ae      	adds	r2, #174	@ 0xae
7000668c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006690:	689b      	ldr	r3, [r3, #8]
70006692:	6839      	ldr	r1, [r7, #0]
70006694:	6878      	ldr	r0, [r7, #4]
70006696:	4798      	blx	r3
70006698:	4603      	mov	r3, r0
7000669a:	73fb      	strb	r3, [r7, #15]
      break;
7000669c:	e04a      	b.n	70006734 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
7000669e:	683b      	ldr	r3, [r7, #0]
700066a0:	785b      	ldrb	r3, [r3, #1]
700066a2:	2b09      	cmp	r3, #9
700066a4:	d83b      	bhi.n	7000671e <USBD_StdDevReq+0xc2>
700066a6:	a201      	add	r2, pc, #4	@ (adr r2, 700066ac <USBD_StdDevReq+0x50>)
700066a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700066ac:	70006701 	.word	0x70006701
700066b0:	70006715 	.word	0x70006715
700066b4:	7000671f 	.word	0x7000671f
700066b8:	7000670b 	.word	0x7000670b
700066bc:	7000671f 	.word	0x7000671f
700066c0:	700066df 	.word	0x700066df
700066c4:	700066d5 	.word	0x700066d5
700066c8:	7000671f 	.word	0x7000671f
700066cc:	700066f7 	.word	0x700066f7
700066d0:	700066e9 	.word	0x700066e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
700066d4:	6839      	ldr	r1, [r7, #0]
700066d6:	6878      	ldr	r0, [r7, #4]
700066d8:	f000 fa3c 	bl	70006b54 <USBD_GetDescriptor>
          break;
700066dc:	e024      	b.n	70006728 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
700066de:	6839      	ldr	r1, [r7, #0]
700066e0:	6878      	ldr	r0, [r7, #4]
700066e2:	f000 fbcb 	bl	70006e7c <USBD_SetAddress>
          break;
700066e6:	e01f      	b.n	70006728 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
700066e8:	6839      	ldr	r1, [r7, #0]
700066ea:	6878      	ldr	r0, [r7, #4]
700066ec:	f000 fc0a 	bl	70006f04 <USBD_SetConfig>
700066f0:	4603      	mov	r3, r0
700066f2:	73fb      	strb	r3, [r7, #15]
          break;
700066f4:	e018      	b.n	70006728 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
700066f6:	6839      	ldr	r1, [r7, #0]
700066f8:	6878      	ldr	r0, [r7, #4]
700066fa:	f000 fcad 	bl	70007058 <USBD_GetConfig>
          break;
700066fe:	e013      	b.n	70006728 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
70006700:	6839      	ldr	r1, [r7, #0]
70006702:	6878      	ldr	r0, [r7, #4]
70006704:	f000 fcde 	bl	700070c4 <USBD_GetStatus>
          break;
70006708:	e00e      	b.n	70006728 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
7000670a:	6839      	ldr	r1, [r7, #0]
7000670c:	6878      	ldr	r0, [r7, #4]
7000670e:	f000 fd0d 	bl	7000712c <USBD_SetFeature>
          break;
70006712:	e009      	b.n	70006728 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
70006714:	6839      	ldr	r1, [r7, #0]
70006716:	6878      	ldr	r0, [r7, #4]
70006718:	f000 fd31 	bl	7000717e <USBD_ClrFeature>
          break;
7000671c:	e004      	b.n	70006728 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
7000671e:	6839      	ldr	r1, [r7, #0]
70006720:	6878      	ldr	r0, [r7, #4]
70006722:	f000 fd88 	bl	70007236 <USBD_CtlError>
          break;
70006726:	bf00      	nop
      }
      break;
70006728:	e004      	b.n	70006734 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
7000672a:	6839      	ldr	r1, [r7, #0]
7000672c:	6878      	ldr	r0, [r7, #4]
7000672e:	f000 fd82 	bl	70007236 <USBD_CtlError>
      break;
70006732:	bf00      	nop
  }

  return ret;
70006734:	7bfb      	ldrb	r3, [r7, #15]
}
70006736:	4618      	mov	r0, r3
70006738:	3710      	adds	r7, #16
7000673a:	46bd      	mov	sp, r7
7000673c:	bd80      	pop	{r7, pc}
7000673e:	bf00      	nop

70006740 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70006740:	b580      	push	{r7, lr}
70006742:	b084      	sub	sp, #16
70006744:	af00      	add	r7, sp, #0
70006746:	6078      	str	r0, [r7, #4]
70006748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
7000674a:	2300      	movs	r3, #0
7000674c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
7000674e:	683b      	ldr	r3, [r7, #0]
70006750:	781b      	ldrb	r3, [r3, #0]
70006752:	f003 0360 	and.w	r3, r3, #96	@ 0x60
70006756:	2b40      	cmp	r3, #64	@ 0x40
70006758:	d005      	beq.n	70006766 <USBD_StdItfReq+0x26>
7000675a:	2b40      	cmp	r3, #64	@ 0x40
7000675c:	d852      	bhi.n	70006804 <USBD_StdItfReq+0xc4>
7000675e:	2b00      	cmp	r3, #0
70006760:	d001      	beq.n	70006766 <USBD_StdItfReq+0x26>
70006762:	2b20      	cmp	r3, #32
70006764:	d14e      	bne.n	70006804 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
70006766:	687b      	ldr	r3, [r7, #4]
70006768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000676c:	b2db      	uxtb	r3, r3
7000676e:	3b01      	subs	r3, #1
70006770:	2b02      	cmp	r3, #2
70006772:	d840      	bhi.n	700067f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
70006774:	683b      	ldr	r3, [r7, #0]
70006776:	889b      	ldrh	r3, [r3, #4]
70006778:	b2db      	uxtb	r3, r3
7000677a:	2b01      	cmp	r3, #1
7000677c:	d836      	bhi.n	700067ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
7000677e:	683b      	ldr	r3, [r7, #0]
70006780:	889b      	ldrh	r3, [r3, #4]
70006782:	b2db      	uxtb	r3, r3
70006784:	4619      	mov	r1, r3
70006786:	6878      	ldr	r0, [r7, #4]
70006788:	f7ff ff2f 	bl	700065ea <USBD_CoreFindIF>
7000678c:	4603      	mov	r3, r0
7000678e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70006790:	7bbb      	ldrb	r3, [r7, #14]
70006792:	2bff      	cmp	r3, #255	@ 0xff
70006794:	d01d      	beq.n	700067d2 <USBD_StdItfReq+0x92>
70006796:	7bbb      	ldrb	r3, [r7, #14]
70006798:	2b00      	cmp	r3, #0
7000679a:	d11a      	bne.n	700067d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
7000679c:	7bba      	ldrb	r2, [r7, #14]
7000679e:	687b      	ldr	r3, [r7, #4]
700067a0:	32ae      	adds	r2, #174	@ 0xae
700067a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700067a6:	689b      	ldr	r3, [r3, #8]
700067a8:	2b00      	cmp	r3, #0
700067aa:	d00f      	beq.n	700067cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
700067ac:	7bba      	ldrb	r2, [r7, #14]
700067ae:	687b      	ldr	r3, [r7, #4]
700067b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
700067b4:	7bba      	ldrb	r2, [r7, #14]
700067b6:	687b      	ldr	r3, [r7, #4]
700067b8:	32ae      	adds	r2, #174	@ 0xae
700067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700067be:	689b      	ldr	r3, [r3, #8]
700067c0:	6839      	ldr	r1, [r7, #0]
700067c2:	6878      	ldr	r0, [r7, #4]
700067c4:	4798      	blx	r3
700067c6:	4603      	mov	r3, r0
700067c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
700067ca:	e004      	b.n	700067d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
700067cc:	2303      	movs	r3, #3
700067ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
700067d0:	e001      	b.n	700067d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
700067d2:	2303      	movs	r3, #3
700067d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
700067d6:	683b      	ldr	r3, [r7, #0]
700067d8:	88db      	ldrh	r3, [r3, #6]
700067da:	2b00      	cmp	r3, #0
700067dc:	d110      	bne.n	70006800 <USBD_StdItfReq+0xc0>
700067de:	7bfb      	ldrb	r3, [r7, #15]
700067e0:	2b00      	cmp	r3, #0
700067e2:	d10d      	bne.n	70006800 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
700067e4:	6878      	ldr	r0, [r7, #4]
700067e6:	f000 fd91 	bl	7000730c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
700067ea:	e009      	b.n	70006800 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
700067ec:	6839      	ldr	r1, [r7, #0]
700067ee:	6878      	ldr	r0, [r7, #4]
700067f0:	f000 fd21 	bl	70007236 <USBD_CtlError>
          break;
700067f4:	e004      	b.n	70006800 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
700067f6:	6839      	ldr	r1, [r7, #0]
700067f8:	6878      	ldr	r0, [r7, #4]
700067fa:	f000 fd1c 	bl	70007236 <USBD_CtlError>
          break;
700067fe:	e000      	b.n	70006802 <USBD_StdItfReq+0xc2>
          break;
70006800:	bf00      	nop
      }
      break;
70006802:	e004      	b.n	7000680e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
70006804:	6839      	ldr	r1, [r7, #0]
70006806:	6878      	ldr	r0, [r7, #4]
70006808:	f000 fd15 	bl	70007236 <USBD_CtlError>
      break;
7000680c:	bf00      	nop
  }

  return ret;
7000680e:	7bfb      	ldrb	r3, [r7, #15]
}
70006810:	4618      	mov	r0, r3
70006812:	3710      	adds	r7, #16
70006814:	46bd      	mov	sp, r7
70006816:	bd80      	pop	{r7, pc}

70006818 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70006818:	b580      	push	{r7, lr}
7000681a:	b084      	sub	sp, #16
7000681c:	af00      	add	r7, sp, #0
7000681e:	6078      	str	r0, [r7, #4]
70006820:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
70006822:	2300      	movs	r3, #0
70006824:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
70006826:	683b      	ldr	r3, [r7, #0]
70006828:	889b      	ldrh	r3, [r3, #4]
7000682a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
7000682c:	683b      	ldr	r3, [r7, #0]
7000682e:	781b      	ldrb	r3, [r3, #0]
70006830:	f003 0360 	and.w	r3, r3, #96	@ 0x60
70006834:	2b40      	cmp	r3, #64	@ 0x40
70006836:	d007      	beq.n	70006848 <USBD_StdEPReq+0x30>
70006838:	2b40      	cmp	r3, #64	@ 0x40
7000683a:	f200 817f 	bhi.w	70006b3c <USBD_StdEPReq+0x324>
7000683e:	2b00      	cmp	r3, #0
70006840:	d02a      	beq.n	70006898 <USBD_StdEPReq+0x80>
70006842:	2b20      	cmp	r3, #32
70006844:	f040 817a 	bne.w	70006b3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
70006848:	7bbb      	ldrb	r3, [r7, #14]
7000684a:	4619      	mov	r1, r3
7000684c:	6878      	ldr	r0, [r7, #4]
7000684e:	f7ff fed9 	bl	70006604 <USBD_CoreFindEP>
70006852:	4603      	mov	r3, r0
70006854:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70006856:	7b7b      	ldrb	r3, [r7, #13]
70006858:	2bff      	cmp	r3, #255	@ 0xff
7000685a:	f000 8174 	beq.w	70006b46 <USBD_StdEPReq+0x32e>
7000685e:	7b7b      	ldrb	r3, [r7, #13]
70006860:	2b00      	cmp	r3, #0
70006862:	f040 8170 	bne.w	70006b46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
70006866:	7b7a      	ldrb	r2, [r7, #13]
70006868:	687b      	ldr	r3, [r7, #4]
7000686a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
7000686e:	7b7a      	ldrb	r2, [r7, #13]
70006870:	687b      	ldr	r3, [r7, #4]
70006872:	32ae      	adds	r2, #174	@ 0xae
70006874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70006878:	689b      	ldr	r3, [r3, #8]
7000687a:	2b00      	cmp	r3, #0
7000687c:	f000 8163 	beq.w	70006b46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
70006880:	7b7a      	ldrb	r2, [r7, #13]
70006882:	687b      	ldr	r3, [r7, #4]
70006884:	32ae      	adds	r2, #174	@ 0xae
70006886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000688a:	689b      	ldr	r3, [r3, #8]
7000688c:	6839      	ldr	r1, [r7, #0]
7000688e:	6878      	ldr	r0, [r7, #4]
70006890:	4798      	blx	r3
70006892:	4603      	mov	r3, r0
70006894:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
70006896:	e156      	b.n	70006b46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
70006898:	683b      	ldr	r3, [r7, #0]
7000689a:	785b      	ldrb	r3, [r3, #1]
7000689c:	2b03      	cmp	r3, #3
7000689e:	d008      	beq.n	700068b2 <USBD_StdEPReq+0x9a>
700068a0:	2b03      	cmp	r3, #3
700068a2:	f300 8145 	bgt.w	70006b30 <USBD_StdEPReq+0x318>
700068a6:	2b00      	cmp	r3, #0
700068a8:	f000 809b 	beq.w	700069e2 <USBD_StdEPReq+0x1ca>
700068ac:	2b01      	cmp	r3, #1
700068ae:	d03c      	beq.n	7000692a <USBD_StdEPReq+0x112>
700068b0:	e13e      	b.n	70006b30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
700068b2:	687b      	ldr	r3, [r7, #4]
700068b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700068b8:	b2db      	uxtb	r3, r3
700068ba:	2b02      	cmp	r3, #2
700068bc:	d002      	beq.n	700068c4 <USBD_StdEPReq+0xac>
700068be:	2b03      	cmp	r3, #3
700068c0:	d016      	beq.n	700068f0 <USBD_StdEPReq+0xd8>
700068c2:	e02c      	b.n	7000691e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
700068c4:	7bbb      	ldrb	r3, [r7, #14]
700068c6:	2b00      	cmp	r3, #0
700068c8:	d00d      	beq.n	700068e6 <USBD_StdEPReq+0xce>
700068ca:	7bbb      	ldrb	r3, [r7, #14]
700068cc:	2b80      	cmp	r3, #128	@ 0x80
700068ce:	d00a      	beq.n	700068e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
700068d0:	7bbb      	ldrb	r3, [r7, #14]
700068d2:	4619      	mov	r1, r3
700068d4:	6878      	ldr	r0, [r7, #4]
700068d6:	f000 fea1 	bl	7000761c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
700068da:	2180      	movs	r1, #128	@ 0x80
700068dc:	6878      	ldr	r0, [r7, #4]
700068de:	f000 fe9d 	bl	7000761c <USBD_LL_StallEP>
700068e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
700068e4:	e020      	b.n	70006928 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
700068e6:	6839      	ldr	r1, [r7, #0]
700068e8:	6878      	ldr	r0, [r7, #4]
700068ea:	f000 fca4 	bl	70007236 <USBD_CtlError>
              break;
700068ee:	e01b      	b.n	70006928 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
700068f0:	683b      	ldr	r3, [r7, #0]
700068f2:	885b      	ldrh	r3, [r3, #2]
700068f4:	2b00      	cmp	r3, #0
700068f6:	d10e      	bne.n	70006916 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
700068f8:	7bbb      	ldrb	r3, [r7, #14]
700068fa:	2b00      	cmp	r3, #0
700068fc:	d00b      	beq.n	70006916 <USBD_StdEPReq+0xfe>
700068fe:	7bbb      	ldrb	r3, [r7, #14]
70006900:	2b80      	cmp	r3, #128	@ 0x80
70006902:	d008      	beq.n	70006916 <USBD_StdEPReq+0xfe>
70006904:	683b      	ldr	r3, [r7, #0]
70006906:	88db      	ldrh	r3, [r3, #6]
70006908:	2b00      	cmp	r3, #0
7000690a:	d104      	bne.n	70006916 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
7000690c:	7bbb      	ldrb	r3, [r7, #14]
7000690e:	4619      	mov	r1, r3
70006910:	6878      	ldr	r0, [r7, #4]
70006912:	f000 fe83 	bl	7000761c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
70006916:	6878      	ldr	r0, [r7, #4]
70006918:	f000 fcf8 	bl	7000730c <USBD_CtlSendStatus>

              break;
7000691c:	e004      	b.n	70006928 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
7000691e:	6839      	ldr	r1, [r7, #0]
70006920:	6878      	ldr	r0, [r7, #4]
70006922:	f000 fc88 	bl	70007236 <USBD_CtlError>
              break;
70006926:	bf00      	nop
          }
          break;
70006928:	e107      	b.n	70006b3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
7000692a:	687b      	ldr	r3, [r7, #4]
7000692c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006930:	b2db      	uxtb	r3, r3
70006932:	2b02      	cmp	r3, #2
70006934:	d002      	beq.n	7000693c <USBD_StdEPReq+0x124>
70006936:	2b03      	cmp	r3, #3
70006938:	d016      	beq.n	70006968 <USBD_StdEPReq+0x150>
7000693a:	e04b      	b.n	700069d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
7000693c:	7bbb      	ldrb	r3, [r7, #14]
7000693e:	2b00      	cmp	r3, #0
70006940:	d00d      	beq.n	7000695e <USBD_StdEPReq+0x146>
70006942:	7bbb      	ldrb	r3, [r7, #14]
70006944:	2b80      	cmp	r3, #128	@ 0x80
70006946:	d00a      	beq.n	7000695e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
70006948:	7bbb      	ldrb	r3, [r7, #14]
7000694a:	4619      	mov	r1, r3
7000694c:	6878      	ldr	r0, [r7, #4]
7000694e:	f000 fe65 	bl	7000761c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
70006952:	2180      	movs	r1, #128	@ 0x80
70006954:	6878      	ldr	r0, [r7, #4]
70006956:	f000 fe61 	bl	7000761c <USBD_LL_StallEP>
7000695a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
7000695c:	e040      	b.n	700069e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
7000695e:	6839      	ldr	r1, [r7, #0]
70006960:	6878      	ldr	r0, [r7, #4]
70006962:	f000 fc68 	bl	70007236 <USBD_CtlError>
              break;
70006966:	e03b      	b.n	700069e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
70006968:	683b      	ldr	r3, [r7, #0]
7000696a:	885b      	ldrh	r3, [r3, #2]
7000696c:	2b00      	cmp	r3, #0
7000696e:	d136      	bne.n	700069de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
70006970:	7bbb      	ldrb	r3, [r7, #14]
70006972:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70006976:	2b00      	cmp	r3, #0
70006978:	d004      	beq.n	70006984 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
7000697a:	7bbb      	ldrb	r3, [r7, #14]
7000697c:	4619      	mov	r1, r3
7000697e:	6878      	ldr	r0, [r7, #4]
70006980:	f000 fe6b 	bl	7000765a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
70006984:	6878      	ldr	r0, [r7, #4]
70006986:	f000 fcc1 	bl	7000730c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
7000698a:	7bbb      	ldrb	r3, [r7, #14]
7000698c:	4619      	mov	r1, r3
7000698e:	6878      	ldr	r0, [r7, #4]
70006990:	f7ff fe38 	bl	70006604 <USBD_CoreFindEP>
70006994:	4603      	mov	r3, r0
70006996:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70006998:	7b7b      	ldrb	r3, [r7, #13]
7000699a:	2bff      	cmp	r3, #255	@ 0xff
7000699c:	d01f      	beq.n	700069de <USBD_StdEPReq+0x1c6>
7000699e:	7b7b      	ldrb	r3, [r7, #13]
700069a0:	2b00      	cmp	r3, #0
700069a2:	d11c      	bne.n	700069de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
700069a4:	7b7a      	ldrb	r2, [r7, #13]
700069a6:	687b      	ldr	r3, [r7, #4]
700069a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
700069ac:	7b7a      	ldrb	r2, [r7, #13]
700069ae:	687b      	ldr	r3, [r7, #4]
700069b0:	32ae      	adds	r2, #174	@ 0xae
700069b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700069b6:	689b      	ldr	r3, [r3, #8]
700069b8:	2b00      	cmp	r3, #0
700069ba:	d010      	beq.n	700069de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
700069bc:	7b7a      	ldrb	r2, [r7, #13]
700069be:	687b      	ldr	r3, [r7, #4]
700069c0:	32ae      	adds	r2, #174	@ 0xae
700069c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700069c6:	689b      	ldr	r3, [r3, #8]
700069c8:	6839      	ldr	r1, [r7, #0]
700069ca:	6878      	ldr	r0, [r7, #4]
700069cc:	4798      	blx	r3
700069ce:	4603      	mov	r3, r0
700069d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
700069d2:	e004      	b.n	700069de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
700069d4:	6839      	ldr	r1, [r7, #0]
700069d6:	6878      	ldr	r0, [r7, #4]
700069d8:	f000 fc2d 	bl	70007236 <USBD_CtlError>
              break;
700069dc:	e000      	b.n	700069e0 <USBD_StdEPReq+0x1c8>
              break;
700069de:	bf00      	nop
          }
          break;
700069e0:	e0ab      	b.n	70006b3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
700069e2:	687b      	ldr	r3, [r7, #4]
700069e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700069e8:	b2db      	uxtb	r3, r3
700069ea:	2b02      	cmp	r3, #2
700069ec:	d002      	beq.n	700069f4 <USBD_StdEPReq+0x1dc>
700069ee:	2b03      	cmp	r3, #3
700069f0:	d032      	beq.n	70006a58 <USBD_StdEPReq+0x240>
700069f2:	e097      	b.n	70006b24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
700069f4:	7bbb      	ldrb	r3, [r7, #14]
700069f6:	2b00      	cmp	r3, #0
700069f8:	d007      	beq.n	70006a0a <USBD_StdEPReq+0x1f2>
700069fa:	7bbb      	ldrb	r3, [r7, #14]
700069fc:	2b80      	cmp	r3, #128	@ 0x80
700069fe:	d004      	beq.n	70006a0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
70006a00:	6839      	ldr	r1, [r7, #0]
70006a02:	6878      	ldr	r0, [r7, #4]
70006a04:	f000 fc17 	bl	70007236 <USBD_CtlError>
                break;
70006a08:	e091      	b.n	70006b2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70006a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
70006a0e:	2b00      	cmp	r3, #0
70006a10:	da0b      	bge.n	70006a2a <USBD_StdEPReq+0x212>
70006a12:	7bbb      	ldrb	r3, [r7, #14]
70006a14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
70006a18:	4613      	mov	r3, r2
70006a1a:	009b      	lsls	r3, r3, #2
70006a1c:	4413      	add	r3, r2
70006a1e:	009b      	lsls	r3, r3, #2
70006a20:	3310      	adds	r3, #16
70006a22:	687a      	ldr	r2, [r7, #4]
70006a24:	4413      	add	r3, r2
70006a26:	3304      	adds	r3, #4
70006a28:	e00b      	b.n	70006a42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
70006a2a:	7bbb      	ldrb	r3, [r7, #14]
70006a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70006a30:	4613      	mov	r3, r2
70006a32:	009b      	lsls	r3, r3, #2
70006a34:	4413      	add	r3, r2
70006a36:	009b      	lsls	r3, r3, #2
70006a38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
70006a3c:	687a      	ldr	r2, [r7, #4]
70006a3e:	4413      	add	r3, r2
70006a40:	3304      	adds	r3, #4
70006a42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
70006a44:	68bb      	ldr	r3, [r7, #8]
70006a46:	2200      	movs	r2, #0
70006a48:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
70006a4a:	68bb      	ldr	r3, [r7, #8]
70006a4c:	2202      	movs	r2, #2
70006a4e:	4619      	mov	r1, r3
70006a50:	6878      	ldr	r0, [r7, #4]
70006a52:	f000 fc01 	bl	70007258 <USBD_CtlSendData>
              break;
70006a56:	e06a      	b.n	70006b2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
70006a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
70006a5c:	2b00      	cmp	r3, #0
70006a5e:	da11      	bge.n	70006a84 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
70006a60:	7bbb      	ldrb	r3, [r7, #14]
70006a62:	f003 020f 	and.w	r2, r3, #15
70006a66:	6879      	ldr	r1, [r7, #4]
70006a68:	4613      	mov	r3, r2
70006a6a:	009b      	lsls	r3, r3, #2
70006a6c:	4413      	add	r3, r2
70006a6e:	009b      	lsls	r3, r3, #2
70006a70:	440b      	add	r3, r1
70006a72:	3324      	adds	r3, #36	@ 0x24
70006a74:	881b      	ldrh	r3, [r3, #0]
70006a76:	2b00      	cmp	r3, #0
70006a78:	d117      	bne.n	70006aaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
70006a7a:	6839      	ldr	r1, [r7, #0]
70006a7c:	6878      	ldr	r0, [r7, #4]
70006a7e:	f000 fbda 	bl	70007236 <USBD_CtlError>
                  break;
70006a82:	e054      	b.n	70006b2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
70006a84:	7bbb      	ldrb	r3, [r7, #14]
70006a86:	f003 020f 	and.w	r2, r3, #15
70006a8a:	6879      	ldr	r1, [r7, #4]
70006a8c:	4613      	mov	r3, r2
70006a8e:	009b      	lsls	r3, r3, #2
70006a90:	4413      	add	r3, r2
70006a92:	009b      	lsls	r3, r3, #2
70006a94:	440b      	add	r3, r1
70006a96:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
70006a9a:	881b      	ldrh	r3, [r3, #0]
70006a9c:	2b00      	cmp	r3, #0
70006a9e:	d104      	bne.n	70006aaa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
70006aa0:	6839      	ldr	r1, [r7, #0]
70006aa2:	6878      	ldr	r0, [r7, #4]
70006aa4:	f000 fbc7 	bl	70007236 <USBD_CtlError>
                  break;
70006aa8:	e041      	b.n	70006b2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70006aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
70006aae:	2b00      	cmp	r3, #0
70006ab0:	da0b      	bge.n	70006aca <USBD_StdEPReq+0x2b2>
70006ab2:	7bbb      	ldrb	r3, [r7, #14]
70006ab4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
70006ab8:	4613      	mov	r3, r2
70006aba:	009b      	lsls	r3, r3, #2
70006abc:	4413      	add	r3, r2
70006abe:	009b      	lsls	r3, r3, #2
70006ac0:	3310      	adds	r3, #16
70006ac2:	687a      	ldr	r2, [r7, #4]
70006ac4:	4413      	add	r3, r2
70006ac6:	3304      	adds	r3, #4
70006ac8:	e00b      	b.n	70006ae2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
70006aca:	7bbb      	ldrb	r3, [r7, #14]
70006acc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70006ad0:	4613      	mov	r3, r2
70006ad2:	009b      	lsls	r3, r3, #2
70006ad4:	4413      	add	r3, r2
70006ad6:	009b      	lsls	r3, r3, #2
70006ad8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
70006adc:	687a      	ldr	r2, [r7, #4]
70006ade:	4413      	add	r3, r2
70006ae0:	3304      	adds	r3, #4
70006ae2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
70006ae4:	7bbb      	ldrb	r3, [r7, #14]
70006ae6:	2b00      	cmp	r3, #0
70006ae8:	d002      	beq.n	70006af0 <USBD_StdEPReq+0x2d8>
70006aea:	7bbb      	ldrb	r3, [r7, #14]
70006aec:	2b80      	cmp	r3, #128	@ 0x80
70006aee:	d103      	bne.n	70006af8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
70006af0:	68bb      	ldr	r3, [r7, #8]
70006af2:	2200      	movs	r2, #0
70006af4:	601a      	str	r2, [r3, #0]
70006af6:	e00e      	b.n	70006b16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
70006af8:	7bbb      	ldrb	r3, [r7, #14]
70006afa:	4619      	mov	r1, r3
70006afc:	6878      	ldr	r0, [r7, #4]
70006afe:	f000 fdcb 	bl	70007698 <USBD_LL_IsStallEP>
70006b02:	4603      	mov	r3, r0
70006b04:	2b00      	cmp	r3, #0
70006b06:	d003      	beq.n	70006b10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
70006b08:	68bb      	ldr	r3, [r7, #8]
70006b0a:	2201      	movs	r2, #1
70006b0c:	601a      	str	r2, [r3, #0]
70006b0e:	e002      	b.n	70006b16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
70006b10:	68bb      	ldr	r3, [r7, #8]
70006b12:	2200      	movs	r2, #0
70006b14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
70006b16:	68bb      	ldr	r3, [r7, #8]
70006b18:	2202      	movs	r2, #2
70006b1a:	4619      	mov	r1, r3
70006b1c:	6878      	ldr	r0, [r7, #4]
70006b1e:	f000 fb9b 	bl	70007258 <USBD_CtlSendData>
              break;
70006b22:	e004      	b.n	70006b2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
70006b24:	6839      	ldr	r1, [r7, #0]
70006b26:	6878      	ldr	r0, [r7, #4]
70006b28:	f000 fb85 	bl	70007236 <USBD_CtlError>
              break;
70006b2c:	bf00      	nop
          }
          break;
70006b2e:	e004      	b.n	70006b3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
70006b30:	6839      	ldr	r1, [r7, #0]
70006b32:	6878      	ldr	r0, [r7, #4]
70006b34:	f000 fb7f 	bl	70007236 <USBD_CtlError>
          break;
70006b38:	bf00      	nop
      }
      break;
70006b3a:	e005      	b.n	70006b48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
70006b3c:	6839      	ldr	r1, [r7, #0]
70006b3e:	6878      	ldr	r0, [r7, #4]
70006b40:	f000 fb79 	bl	70007236 <USBD_CtlError>
      break;
70006b44:	e000      	b.n	70006b48 <USBD_StdEPReq+0x330>
      break;
70006b46:	bf00      	nop
  }

  return ret;
70006b48:	7bfb      	ldrb	r3, [r7, #15]
}
70006b4a:	4618      	mov	r0, r3
70006b4c:	3710      	adds	r7, #16
70006b4e:	46bd      	mov	sp, r7
70006b50:	bd80      	pop	{r7, pc}
	...

70006b54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70006b54:	b580      	push	{r7, lr}
70006b56:	b084      	sub	sp, #16
70006b58:	af00      	add	r7, sp, #0
70006b5a:	6078      	str	r0, [r7, #4]
70006b5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
70006b5e:	2300      	movs	r3, #0
70006b60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
70006b62:	2300      	movs	r3, #0
70006b64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
70006b66:	2300      	movs	r3, #0
70006b68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
70006b6a:	683b      	ldr	r3, [r7, #0]
70006b6c:	885b      	ldrh	r3, [r3, #2]
70006b6e:	0a1b      	lsrs	r3, r3, #8
70006b70:	b29b      	uxth	r3, r3
70006b72:	3b01      	subs	r3, #1
70006b74:	2b0e      	cmp	r3, #14
70006b76:	f200 8152 	bhi.w	70006e1e <USBD_GetDescriptor+0x2ca>
70006b7a:	a201      	add	r2, pc, #4	@ (adr r2, 70006b80 <USBD_GetDescriptor+0x2c>)
70006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70006b80:	70006bf1 	.word	0x70006bf1
70006b84:	70006c09 	.word	0x70006c09
70006b88:	70006c49 	.word	0x70006c49
70006b8c:	70006e1f 	.word	0x70006e1f
70006b90:	70006e1f 	.word	0x70006e1f
70006b94:	70006dbf 	.word	0x70006dbf
70006b98:	70006deb 	.word	0x70006deb
70006b9c:	70006e1f 	.word	0x70006e1f
70006ba0:	70006e1f 	.word	0x70006e1f
70006ba4:	70006e1f 	.word	0x70006e1f
70006ba8:	70006e1f 	.word	0x70006e1f
70006bac:	70006e1f 	.word	0x70006e1f
70006bb0:	70006e1f 	.word	0x70006e1f
70006bb4:	70006e1f 	.word	0x70006e1f
70006bb8:	70006bbd 	.word	0x70006bbd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
70006bbc:	687b      	ldr	r3, [r7, #4]
70006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006bc2:	69db      	ldr	r3, [r3, #28]
70006bc4:	2b00      	cmp	r3, #0
70006bc6:	d00b      	beq.n	70006be0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
70006bc8:	687b      	ldr	r3, [r7, #4]
70006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006bce:	69db      	ldr	r3, [r3, #28]
70006bd0:	687a      	ldr	r2, [r7, #4]
70006bd2:	7c12      	ldrb	r2, [r2, #16]
70006bd4:	f107 0108 	add.w	r1, r7, #8
70006bd8:	4610      	mov	r0, r2
70006bda:	4798      	blx	r3
70006bdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
70006bde:	e126      	b.n	70006e2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
70006be0:	6839      	ldr	r1, [r7, #0]
70006be2:	6878      	ldr	r0, [r7, #4]
70006be4:	f000 fb27 	bl	70007236 <USBD_CtlError>
        err++;
70006be8:	7afb      	ldrb	r3, [r7, #11]
70006bea:	3301      	adds	r3, #1
70006bec:	72fb      	strb	r3, [r7, #11]
      break;
70006bee:	e11e      	b.n	70006e2e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
70006bf0:	687b      	ldr	r3, [r7, #4]
70006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006bf6:	681b      	ldr	r3, [r3, #0]
70006bf8:	687a      	ldr	r2, [r7, #4]
70006bfa:	7c12      	ldrb	r2, [r2, #16]
70006bfc:	f107 0108 	add.w	r1, r7, #8
70006c00:	4610      	mov	r0, r2
70006c02:	4798      	blx	r3
70006c04:	60f8      	str	r0, [r7, #12]
      break;
70006c06:	e112      	b.n	70006e2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
70006c08:	687b      	ldr	r3, [r7, #4]
70006c0a:	7c1b      	ldrb	r3, [r3, #16]
70006c0c:	2b00      	cmp	r3, #0
70006c0e:	d10d      	bne.n	70006c2c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
70006c10:	687b      	ldr	r3, [r7, #4]
70006c12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70006c18:	f107 0208 	add.w	r2, r7, #8
70006c1c:	4610      	mov	r0, r2
70006c1e:	4798      	blx	r3
70006c20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
70006c22:	68fb      	ldr	r3, [r7, #12]
70006c24:	3301      	adds	r3, #1
70006c26:	2202      	movs	r2, #2
70006c28:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
70006c2a:	e100      	b.n	70006e2e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
70006c2c:	687b      	ldr	r3, [r7, #4]
70006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70006c34:	f107 0208 	add.w	r2, r7, #8
70006c38:	4610      	mov	r0, r2
70006c3a:	4798      	blx	r3
70006c3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
70006c3e:	68fb      	ldr	r3, [r7, #12]
70006c40:	3301      	adds	r3, #1
70006c42:	2202      	movs	r2, #2
70006c44:	701a      	strb	r2, [r3, #0]
      break;
70006c46:	e0f2      	b.n	70006e2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
70006c48:	683b      	ldr	r3, [r7, #0]
70006c4a:	885b      	ldrh	r3, [r3, #2]
70006c4c:	b2db      	uxtb	r3, r3
70006c4e:	2b05      	cmp	r3, #5
70006c50:	f200 80ac 	bhi.w	70006dac <USBD_GetDescriptor+0x258>
70006c54:	a201      	add	r2, pc, #4	@ (adr r2, 70006c5c <USBD_GetDescriptor+0x108>)
70006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70006c5a:	bf00      	nop
70006c5c:	70006c75 	.word	0x70006c75
70006c60:	70006ca9 	.word	0x70006ca9
70006c64:	70006cdd 	.word	0x70006cdd
70006c68:	70006d11 	.word	0x70006d11
70006c6c:	70006d45 	.word	0x70006d45
70006c70:	70006d79 	.word	0x70006d79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
70006c74:	687b      	ldr	r3, [r7, #4]
70006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006c7a:	685b      	ldr	r3, [r3, #4]
70006c7c:	2b00      	cmp	r3, #0
70006c7e:	d00b      	beq.n	70006c98 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
70006c80:	687b      	ldr	r3, [r7, #4]
70006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006c86:	685b      	ldr	r3, [r3, #4]
70006c88:	687a      	ldr	r2, [r7, #4]
70006c8a:	7c12      	ldrb	r2, [r2, #16]
70006c8c:	f107 0108 	add.w	r1, r7, #8
70006c90:	4610      	mov	r0, r2
70006c92:	4798      	blx	r3
70006c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70006c96:	e091      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70006c98:	6839      	ldr	r1, [r7, #0]
70006c9a:	6878      	ldr	r0, [r7, #4]
70006c9c:	f000 facb 	bl	70007236 <USBD_CtlError>
            err++;
70006ca0:	7afb      	ldrb	r3, [r7, #11]
70006ca2:	3301      	adds	r3, #1
70006ca4:	72fb      	strb	r3, [r7, #11]
          break;
70006ca6:	e089      	b.n	70006dbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
70006ca8:	687b      	ldr	r3, [r7, #4]
70006caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006cae:	689b      	ldr	r3, [r3, #8]
70006cb0:	2b00      	cmp	r3, #0
70006cb2:	d00b      	beq.n	70006ccc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
70006cb4:	687b      	ldr	r3, [r7, #4]
70006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006cba:	689b      	ldr	r3, [r3, #8]
70006cbc:	687a      	ldr	r2, [r7, #4]
70006cbe:	7c12      	ldrb	r2, [r2, #16]
70006cc0:	f107 0108 	add.w	r1, r7, #8
70006cc4:	4610      	mov	r0, r2
70006cc6:	4798      	blx	r3
70006cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70006cca:	e077      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70006ccc:	6839      	ldr	r1, [r7, #0]
70006cce:	6878      	ldr	r0, [r7, #4]
70006cd0:	f000 fab1 	bl	70007236 <USBD_CtlError>
            err++;
70006cd4:	7afb      	ldrb	r3, [r7, #11]
70006cd6:	3301      	adds	r3, #1
70006cd8:	72fb      	strb	r3, [r7, #11]
          break;
70006cda:	e06f      	b.n	70006dbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
70006cdc:	687b      	ldr	r3, [r7, #4]
70006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006ce2:	68db      	ldr	r3, [r3, #12]
70006ce4:	2b00      	cmp	r3, #0
70006ce6:	d00b      	beq.n	70006d00 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
70006ce8:	687b      	ldr	r3, [r7, #4]
70006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006cee:	68db      	ldr	r3, [r3, #12]
70006cf0:	687a      	ldr	r2, [r7, #4]
70006cf2:	7c12      	ldrb	r2, [r2, #16]
70006cf4:	f107 0108 	add.w	r1, r7, #8
70006cf8:	4610      	mov	r0, r2
70006cfa:	4798      	blx	r3
70006cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70006cfe:	e05d      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70006d00:	6839      	ldr	r1, [r7, #0]
70006d02:	6878      	ldr	r0, [r7, #4]
70006d04:	f000 fa97 	bl	70007236 <USBD_CtlError>
            err++;
70006d08:	7afb      	ldrb	r3, [r7, #11]
70006d0a:	3301      	adds	r3, #1
70006d0c:	72fb      	strb	r3, [r7, #11]
          break;
70006d0e:	e055      	b.n	70006dbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
70006d10:	687b      	ldr	r3, [r7, #4]
70006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006d16:	691b      	ldr	r3, [r3, #16]
70006d18:	2b00      	cmp	r3, #0
70006d1a:	d00b      	beq.n	70006d34 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
70006d1c:	687b      	ldr	r3, [r7, #4]
70006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006d22:	691b      	ldr	r3, [r3, #16]
70006d24:	687a      	ldr	r2, [r7, #4]
70006d26:	7c12      	ldrb	r2, [r2, #16]
70006d28:	f107 0108 	add.w	r1, r7, #8
70006d2c:	4610      	mov	r0, r2
70006d2e:	4798      	blx	r3
70006d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70006d32:	e043      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70006d34:	6839      	ldr	r1, [r7, #0]
70006d36:	6878      	ldr	r0, [r7, #4]
70006d38:	f000 fa7d 	bl	70007236 <USBD_CtlError>
            err++;
70006d3c:	7afb      	ldrb	r3, [r7, #11]
70006d3e:	3301      	adds	r3, #1
70006d40:	72fb      	strb	r3, [r7, #11]
          break;
70006d42:	e03b      	b.n	70006dbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
70006d44:	687b      	ldr	r3, [r7, #4]
70006d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006d4a:	695b      	ldr	r3, [r3, #20]
70006d4c:	2b00      	cmp	r3, #0
70006d4e:	d00b      	beq.n	70006d68 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
70006d50:	687b      	ldr	r3, [r7, #4]
70006d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006d56:	695b      	ldr	r3, [r3, #20]
70006d58:	687a      	ldr	r2, [r7, #4]
70006d5a:	7c12      	ldrb	r2, [r2, #16]
70006d5c:	f107 0108 	add.w	r1, r7, #8
70006d60:	4610      	mov	r0, r2
70006d62:	4798      	blx	r3
70006d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70006d66:	e029      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70006d68:	6839      	ldr	r1, [r7, #0]
70006d6a:	6878      	ldr	r0, [r7, #4]
70006d6c:	f000 fa63 	bl	70007236 <USBD_CtlError>
            err++;
70006d70:	7afb      	ldrb	r3, [r7, #11]
70006d72:	3301      	adds	r3, #1
70006d74:	72fb      	strb	r3, [r7, #11]
          break;
70006d76:	e021      	b.n	70006dbc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
70006d78:	687b      	ldr	r3, [r7, #4]
70006d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006d7e:	699b      	ldr	r3, [r3, #24]
70006d80:	2b00      	cmp	r3, #0
70006d82:	d00b      	beq.n	70006d9c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
70006d84:	687b      	ldr	r3, [r7, #4]
70006d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70006d8a:	699b      	ldr	r3, [r3, #24]
70006d8c:	687a      	ldr	r2, [r7, #4]
70006d8e:	7c12      	ldrb	r2, [r2, #16]
70006d90:	f107 0108 	add.w	r1, r7, #8
70006d94:	4610      	mov	r0, r2
70006d96:	4798      	blx	r3
70006d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70006d9a:	e00f      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70006d9c:	6839      	ldr	r1, [r7, #0]
70006d9e:	6878      	ldr	r0, [r7, #4]
70006da0:	f000 fa49 	bl	70007236 <USBD_CtlError>
            err++;
70006da4:	7afb      	ldrb	r3, [r7, #11]
70006da6:	3301      	adds	r3, #1
70006da8:	72fb      	strb	r3, [r7, #11]
          break;
70006daa:	e007      	b.n	70006dbc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
70006dac:	6839      	ldr	r1, [r7, #0]
70006dae:	6878      	ldr	r0, [r7, #4]
70006db0:	f000 fa41 	bl	70007236 <USBD_CtlError>
          err++;
70006db4:	7afb      	ldrb	r3, [r7, #11]
70006db6:	3301      	adds	r3, #1
70006db8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
70006dba:	bf00      	nop
      }
      break;
70006dbc:	e037      	b.n	70006e2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
70006dbe:	687b      	ldr	r3, [r7, #4]
70006dc0:	7c1b      	ldrb	r3, [r3, #16]
70006dc2:	2b00      	cmp	r3, #0
70006dc4:	d109      	bne.n	70006dda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
70006dc6:	687b      	ldr	r3, [r7, #4]
70006dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70006dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70006dce:	f107 0208 	add.w	r2, r7, #8
70006dd2:	4610      	mov	r0, r2
70006dd4:	4798      	blx	r3
70006dd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
70006dd8:	e029      	b.n	70006e2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
70006dda:	6839      	ldr	r1, [r7, #0]
70006ddc:	6878      	ldr	r0, [r7, #4]
70006dde:	f000 fa2a 	bl	70007236 <USBD_CtlError>
        err++;
70006de2:	7afb      	ldrb	r3, [r7, #11]
70006de4:	3301      	adds	r3, #1
70006de6:	72fb      	strb	r3, [r7, #11]
      break;
70006de8:	e021      	b.n	70006e2e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
70006dea:	687b      	ldr	r3, [r7, #4]
70006dec:	7c1b      	ldrb	r3, [r3, #16]
70006dee:	2b00      	cmp	r3, #0
70006df0:	d10d      	bne.n	70006e0e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
70006df2:	687b      	ldr	r3, [r7, #4]
70006df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70006dfa:	f107 0208 	add.w	r2, r7, #8
70006dfe:	4610      	mov	r0, r2
70006e00:	4798      	blx	r3
70006e02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
70006e04:	68fb      	ldr	r3, [r7, #12]
70006e06:	3301      	adds	r3, #1
70006e08:	2207      	movs	r2, #7
70006e0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
70006e0c:	e00f      	b.n	70006e2e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
70006e0e:	6839      	ldr	r1, [r7, #0]
70006e10:	6878      	ldr	r0, [r7, #4]
70006e12:	f000 fa10 	bl	70007236 <USBD_CtlError>
        err++;
70006e16:	7afb      	ldrb	r3, [r7, #11]
70006e18:	3301      	adds	r3, #1
70006e1a:	72fb      	strb	r3, [r7, #11]
      break;
70006e1c:	e007      	b.n	70006e2e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
70006e1e:	6839      	ldr	r1, [r7, #0]
70006e20:	6878      	ldr	r0, [r7, #4]
70006e22:	f000 fa08 	bl	70007236 <USBD_CtlError>
      err++;
70006e26:	7afb      	ldrb	r3, [r7, #11]
70006e28:	3301      	adds	r3, #1
70006e2a:	72fb      	strb	r3, [r7, #11]
      break;
70006e2c:	bf00      	nop
  }

  if (err != 0U)
70006e2e:	7afb      	ldrb	r3, [r7, #11]
70006e30:	2b00      	cmp	r3, #0
70006e32:	d11e      	bne.n	70006e72 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
70006e34:	683b      	ldr	r3, [r7, #0]
70006e36:	88db      	ldrh	r3, [r3, #6]
70006e38:	2b00      	cmp	r3, #0
70006e3a:	d016      	beq.n	70006e6a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
70006e3c:	893b      	ldrh	r3, [r7, #8]
70006e3e:	2b00      	cmp	r3, #0
70006e40:	d00e      	beq.n	70006e60 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
70006e42:	683b      	ldr	r3, [r7, #0]
70006e44:	88da      	ldrh	r2, [r3, #6]
70006e46:	893b      	ldrh	r3, [r7, #8]
70006e48:	4293      	cmp	r3, r2
70006e4a:	bf28      	it	cs
70006e4c:	4613      	movcs	r3, r2
70006e4e:	b29b      	uxth	r3, r3
70006e50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
70006e52:	893b      	ldrh	r3, [r7, #8]
70006e54:	461a      	mov	r2, r3
70006e56:	68f9      	ldr	r1, [r7, #12]
70006e58:	6878      	ldr	r0, [r7, #4]
70006e5a:	f000 f9fd 	bl	70007258 <USBD_CtlSendData>
70006e5e:	e009      	b.n	70006e74 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
70006e60:	6839      	ldr	r1, [r7, #0]
70006e62:	6878      	ldr	r0, [r7, #4]
70006e64:	f000 f9e7 	bl	70007236 <USBD_CtlError>
70006e68:	e004      	b.n	70006e74 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
70006e6a:	6878      	ldr	r0, [r7, #4]
70006e6c:	f000 fa4e 	bl	7000730c <USBD_CtlSendStatus>
70006e70:	e000      	b.n	70006e74 <USBD_GetDescriptor+0x320>
    return;
70006e72:	bf00      	nop
  }
}
70006e74:	3710      	adds	r7, #16
70006e76:	46bd      	mov	sp, r7
70006e78:	bd80      	pop	{r7, pc}
70006e7a:	bf00      	nop

70006e7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70006e7c:	b580      	push	{r7, lr}
70006e7e:	b084      	sub	sp, #16
70006e80:	af00      	add	r7, sp, #0
70006e82:	6078      	str	r0, [r7, #4]
70006e84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
70006e86:	683b      	ldr	r3, [r7, #0]
70006e88:	889b      	ldrh	r3, [r3, #4]
70006e8a:	2b00      	cmp	r3, #0
70006e8c:	d131      	bne.n	70006ef2 <USBD_SetAddress+0x76>
70006e8e:	683b      	ldr	r3, [r7, #0]
70006e90:	88db      	ldrh	r3, [r3, #6]
70006e92:	2b00      	cmp	r3, #0
70006e94:	d12d      	bne.n	70006ef2 <USBD_SetAddress+0x76>
70006e96:	683b      	ldr	r3, [r7, #0]
70006e98:	885b      	ldrh	r3, [r3, #2]
70006e9a:	2b7f      	cmp	r3, #127	@ 0x7f
70006e9c:	d829      	bhi.n	70006ef2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
70006e9e:	683b      	ldr	r3, [r7, #0]
70006ea0:	885b      	ldrh	r3, [r3, #2]
70006ea2:	b2db      	uxtb	r3, r3
70006ea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70006ea8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70006eaa:	687b      	ldr	r3, [r7, #4]
70006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006eb0:	b2db      	uxtb	r3, r3
70006eb2:	2b03      	cmp	r3, #3
70006eb4:	d104      	bne.n	70006ec0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
70006eb6:	6839      	ldr	r1, [r7, #0]
70006eb8:	6878      	ldr	r0, [r7, #4]
70006eba:	f000 f9bc 	bl	70007236 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70006ebe:	e01d      	b.n	70006efc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
70006ec0:	687b      	ldr	r3, [r7, #4]
70006ec2:	7bfa      	ldrb	r2, [r7, #15]
70006ec4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
70006ec8:	7bfb      	ldrb	r3, [r7, #15]
70006eca:	4619      	mov	r1, r3
70006ecc:	6878      	ldr	r0, [r7, #4]
70006ece:	f000 fc0f 	bl	700076f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
70006ed2:	6878      	ldr	r0, [r7, #4]
70006ed4:	f000 fa1a 	bl	7000730c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
70006ed8:	7bfb      	ldrb	r3, [r7, #15]
70006eda:	2b00      	cmp	r3, #0
70006edc:	d004      	beq.n	70006ee8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
70006ede:	687b      	ldr	r3, [r7, #4]
70006ee0:	2202      	movs	r2, #2
70006ee2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70006ee6:	e009      	b.n	70006efc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
70006ee8:	687b      	ldr	r3, [r7, #4]
70006eea:	2201      	movs	r2, #1
70006eec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70006ef0:	e004      	b.n	70006efc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
70006ef2:	6839      	ldr	r1, [r7, #0]
70006ef4:	6878      	ldr	r0, [r7, #4]
70006ef6:	f000 f99e 	bl	70007236 <USBD_CtlError>
  }
}
70006efa:	bf00      	nop
70006efc:	bf00      	nop
70006efe:	3710      	adds	r7, #16
70006f00:	46bd      	mov	sp, r7
70006f02:	bd80      	pop	{r7, pc}

70006f04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70006f04:	b580      	push	{r7, lr}
70006f06:	b084      	sub	sp, #16
70006f08:	af00      	add	r7, sp, #0
70006f0a:	6078      	str	r0, [r7, #4]
70006f0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
70006f0e:	2300      	movs	r3, #0
70006f10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
70006f12:	683b      	ldr	r3, [r7, #0]
70006f14:	885b      	ldrh	r3, [r3, #2]
70006f16:	b2da      	uxtb	r2, r3
70006f18:	4b4e      	ldr	r3, [pc, #312]	@ (70007054 <USBD_SetConfig+0x150>)
70006f1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
70006f1c:	4b4d      	ldr	r3, [pc, #308]	@ (70007054 <USBD_SetConfig+0x150>)
70006f1e:	781b      	ldrb	r3, [r3, #0]
70006f20:	2b01      	cmp	r3, #1
70006f22:	d905      	bls.n	70006f30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
70006f24:	6839      	ldr	r1, [r7, #0]
70006f26:	6878      	ldr	r0, [r7, #4]
70006f28:	f000 f985 	bl	70007236 <USBD_CtlError>
    return USBD_FAIL;
70006f2c:	2303      	movs	r3, #3
70006f2e:	e08c      	b.n	7000704a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
70006f30:	687b      	ldr	r3, [r7, #4]
70006f32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70006f36:	b2db      	uxtb	r3, r3
70006f38:	2b02      	cmp	r3, #2
70006f3a:	d002      	beq.n	70006f42 <USBD_SetConfig+0x3e>
70006f3c:	2b03      	cmp	r3, #3
70006f3e:	d029      	beq.n	70006f94 <USBD_SetConfig+0x90>
70006f40:	e075      	b.n	7000702e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
70006f42:	4b44      	ldr	r3, [pc, #272]	@ (70007054 <USBD_SetConfig+0x150>)
70006f44:	781b      	ldrb	r3, [r3, #0]
70006f46:	2b00      	cmp	r3, #0
70006f48:	d020      	beq.n	70006f8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
70006f4a:	4b42      	ldr	r3, [pc, #264]	@ (70007054 <USBD_SetConfig+0x150>)
70006f4c:	781b      	ldrb	r3, [r3, #0]
70006f4e:	461a      	mov	r2, r3
70006f50:	687b      	ldr	r3, [r7, #4]
70006f52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
70006f54:	4b3f      	ldr	r3, [pc, #252]	@ (70007054 <USBD_SetConfig+0x150>)
70006f56:	781b      	ldrb	r3, [r3, #0]
70006f58:	4619      	mov	r1, r3
70006f5a:	6878      	ldr	r0, [r7, #4]
70006f5c:	f7ff f80d 	bl	70005f7a <USBD_SetClassConfig>
70006f60:	4603      	mov	r3, r0
70006f62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
70006f64:	7bfb      	ldrb	r3, [r7, #15]
70006f66:	2b00      	cmp	r3, #0
70006f68:	d008      	beq.n	70006f7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
70006f6a:	6839      	ldr	r1, [r7, #0]
70006f6c:	6878      	ldr	r0, [r7, #4]
70006f6e:	f000 f962 	bl	70007236 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
70006f72:	687b      	ldr	r3, [r7, #4]
70006f74:	2202      	movs	r2, #2
70006f76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
70006f7a:	e065      	b.n	70007048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
70006f7c:	6878      	ldr	r0, [r7, #4]
70006f7e:	f000 f9c5 	bl	7000730c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
70006f82:	687b      	ldr	r3, [r7, #4]
70006f84:	2203      	movs	r2, #3
70006f86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
70006f8a:	e05d      	b.n	70007048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
70006f8c:	6878      	ldr	r0, [r7, #4]
70006f8e:	f000 f9bd 	bl	7000730c <USBD_CtlSendStatus>
      break;
70006f92:	e059      	b.n	70007048 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
70006f94:	4b2f      	ldr	r3, [pc, #188]	@ (70007054 <USBD_SetConfig+0x150>)
70006f96:	781b      	ldrb	r3, [r3, #0]
70006f98:	2b00      	cmp	r3, #0
70006f9a:	d112      	bne.n	70006fc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
70006f9c:	687b      	ldr	r3, [r7, #4]
70006f9e:	2202      	movs	r2, #2
70006fa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
70006fa4:	4b2b      	ldr	r3, [pc, #172]	@ (70007054 <USBD_SetConfig+0x150>)
70006fa6:	781b      	ldrb	r3, [r3, #0]
70006fa8:	461a      	mov	r2, r3
70006faa:	687b      	ldr	r3, [r7, #4]
70006fac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
70006fae:	4b29      	ldr	r3, [pc, #164]	@ (70007054 <USBD_SetConfig+0x150>)
70006fb0:	781b      	ldrb	r3, [r3, #0]
70006fb2:	4619      	mov	r1, r3
70006fb4:	6878      	ldr	r0, [r7, #4]
70006fb6:	f7fe fffc 	bl	70005fb2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
70006fba:	6878      	ldr	r0, [r7, #4]
70006fbc:	f000 f9a6 	bl	7000730c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
70006fc0:	e042      	b.n	70007048 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
70006fc2:	4b24      	ldr	r3, [pc, #144]	@ (70007054 <USBD_SetConfig+0x150>)
70006fc4:	781b      	ldrb	r3, [r3, #0]
70006fc6:	461a      	mov	r2, r3
70006fc8:	687b      	ldr	r3, [r7, #4]
70006fca:	685b      	ldr	r3, [r3, #4]
70006fcc:	429a      	cmp	r2, r3
70006fce:	d02a      	beq.n	70007026 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
70006fd0:	687b      	ldr	r3, [r7, #4]
70006fd2:	685b      	ldr	r3, [r3, #4]
70006fd4:	b2db      	uxtb	r3, r3
70006fd6:	4619      	mov	r1, r3
70006fd8:	6878      	ldr	r0, [r7, #4]
70006fda:	f7fe ffea 	bl	70005fb2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
70006fde:	4b1d      	ldr	r3, [pc, #116]	@ (70007054 <USBD_SetConfig+0x150>)
70006fe0:	781b      	ldrb	r3, [r3, #0]
70006fe2:	461a      	mov	r2, r3
70006fe4:	687b      	ldr	r3, [r7, #4]
70006fe6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
70006fe8:	4b1a      	ldr	r3, [pc, #104]	@ (70007054 <USBD_SetConfig+0x150>)
70006fea:	781b      	ldrb	r3, [r3, #0]
70006fec:	4619      	mov	r1, r3
70006fee:	6878      	ldr	r0, [r7, #4]
70006ff0:	f7fe ffc3 	bl	70005f7a <USBD_SetClassConfig>
70006ff4:	4603      	mov	r3, r0
70006ff6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
70006ff8:	7bfb      	ldrb	r3, [r7, #15]
70006ffa:	2b00      	cmp	r3, #0
70006ffc:	d00f      	beq.n	7000701e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
70006ffe:	6839      	ldr	r1, [r7, #0]
70007000:	6878      	ldr	r0, [r7, #4]
70007002:	f000 f918 	bl	70007236 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
70007006:	687b      	ldr	r3, [r7, #4]
70007008:	685b      	ldr	r3, [r3, #4]
7000700a:	b2db      	uxtb	r3, r3
7000700c:	4619      	mov	r1, r3
7000700e:	6878      	ldr	r0, [r7, #4]
70007010:	f7fe ffcf 	bl	70005fb2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
70007014:	687b      	ldr	r3, [r7, #4]
70007016:	2202      	movs	r2, #2
70007018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
7000701c:	e014      	b.n	70007048 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
7000701e:	6878      	ldr	r0, [r7, #4]
70007020:	f000 f974 	bl	7000730c <USBD_CtlSendStatus>
      break;
70007024:	e010      	b.n	70007048 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
70007026:	6878      	ldr	r0, [r7, #4]
70007028:	f000 f970 	bl	7000730c <USBD_CtlSendStatus>
      break;
7000702c:	e00c      	b.n	70007048 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
7000702e:	6839      	ldr	r1, [r7, #0]
70007030:	6878      	ldr	r0, [r7, #4]
70007032:	f000 f900 	bl	70007236 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
70007036:	4b07      	ldr	r3, [pc, #28]	@ (70007054 <USBD_SetConfig+0x150>)
70007038:	781b      	ldrb	r3, [r3, #0]
7000703a:	4619      	mov	r1, r3
7000703c:	6878      	ldr	r0, [r7, #4]
7000703e:	f7fe ffb8 	bl	70005fb2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
70007042:	2303      	movs	r3, #3
70007044:	73fb      	strb	r3, [r7, #15]
      break;
70007046:	bf00      	nop
  }

  return ret;
70007048:	7bfb      	ldrb	r3, [r7, #15]
}
7000704a:	4618      	mov	r0, r3
7000704c:	3710      	adds	r7, #16
7000704e:	46bd      	mov	sp, r7
70007050:	bd80      	pop	{r7, pc}
70007052:	bf00      	nop
70007054:	24027580 	.word	0x24027580

70007058 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70007058:	b580      	push	{r7, lr}
7000705a:	b082      	sub	sp, #8
7000705c:	af00      	add	r7, sp, #0
7000705e:	6078      	str	r0, [r7, #4]
70007060:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
70007062:	683b      	ldr	r3, [r7, #0]
70007064:	88db      	ldrh	r3, [r3, #6]
70007066:	2b01      	cmp	r3, #1
70007068:	d004      	beq.n	70007074 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
7000706a:	6839      	ldr	r1, [r7, #0]
7000706c:	6878      	ldr	r0, [r7, #4]
7000706e:	f000 f8e2 	bl	70007236 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
70007072:	e023      	b.n	700070bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
70007074:	687b      	ldr	r3, [r7, #4]
70007076:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000707a:	b2db      	uxtb	r3, r3
7000707c:	2b02      	cmp	r3, #2
7000707e:	dc02      	bgt.n	70007086 <USBD_GetConfig+0x2e>
70007080:	2b00      	cmp	r3, #0
70007082:	dc03      	bgt.n	7000708c <USBD_GetConfig+0x34>
70007084:	e015      	b.n	700070b2 <USBD_GetConfig+0x5a>
70007086:	2b03      	cmp	r3, #3
70007088:	d00b      	beq.n	700070a2 <USBD_GetConfig+0x4a>
7000708a:	e012      	b.n	700070b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
7000708c:	687b      	ldr	r3, [r7, #4]
7000708e:	2200      	movs	r2, #0
70007090:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
70007092:	687b      	ldr	r3, [r7, #4]
70007094:	3308      	adds	r3, #8
70007096:	2201      	movs	r2, #1
70007098:	4619      	mov	r1, r3
7000709a:	6878      	ldr	r0, [r7, #4]
7000709c:	f000 f8dc 	bl	70007258 <USBD_CtlSendData>
        break;
700070a0:	e00c      	b.n	700070bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
700070a2:	687b      	ldr	r3, [r7, #4]
700070a4:	3304      	adds	r3, #4
700070a6:	2201      	movs	r2, #1
700070a8:	4619      	mov	r1, r3
700070aa:	6878      	ldr	r0, [r7, #4]
700070ac:	f000 f8d4 	bl	70007258 <USBD_CtlSendData>
        break;
700070b0:	e004      	b.n	700070bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
700070b2:	6839      	ldr	r1, [r7, #0]
700070b4:	6878      	ldr	r0, [r7, #4]
700070b6:	f000 f8be 	bl	70007236 <USBD_CtlError>
        break;
700070ba:	bf00      	nop
}
700070bc:	bf00      	nop
700070be:	3708      	adds	r7, #8
700070c0:	46bd      	mov	sp, r7
700070c2:	bd80      	pop	{r7, pc}

700070c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700070c4:	b580      	push	{r7, lr}
700070c6:	b082      	sub	sp, #8
700070c8:	af00      	add	r7, sp, #0
700070ca:	6078      	str	r0, [r7, #4]
700070cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
700070ce:	687b      	ldr	r3, [r7, #4]
700070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700070d4:	b2db      	uxtb	r3, r3
700070d6:	3b01      	subs	r3, #1
700070d8:	2b02      	cmp	r3, #2
700070da:	d81e      	bhi.n	7000711a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
700070dc:	683b      	ldr	r3, [r7, #0]
700070de:	88db      	ldrh	r3, [r3, #6]
700070e0:	2b02      	cmp	r3, #2
700070e2:	d004      	beq.n	700070ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
700070e4:	6839      	ldr	r1, [r7, #0]
700070e6:	6878      	ldr	r0, [r7, #4]
700070e8:	f000 f8a5 	bl	70007236 <USBD_CtlError>
        break;
700070ec:	e01a      	b.n	70007124 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
700070ee:	687b      	ldr	r3, [r7, #4]
700070f0:	2201      	movs	r2, #1
700070f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
700070f4:	687b      	ldr	r3, [r7, #4]
700070f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
700070fa:	2b00      	cmp	r3, #0
700070fc:	d005      	beq.n	7000710a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
700070fe:	687b      	ldr	r3, [r7, #4]
70007100:	68db      	ldr	r3, [r3, #12]
70007102:	f043 0202 	orr.w	r2, r3, #2
70007106:	687b      	ldr	r3, [r7, #4]
70007108:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
7000710a:	687b      	ldr	r3, [r7, #4]
7000710c:	330c      	adds	r3, #12
7000710e:	2202      	movs	r2, #2
70007110:	4619      	mov	r1, r3
70007112:	6878      	ldr	r0, [r7, #4]
70007114:	f000 f8a0 	bl	70007258 <USBD_CtlSendData>
      break;
70007118:	e004      	b.n	70007124 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
7000711a:	6839      	ldr	r1, [r7, #0]
7000711c:	6878      	ldr	r0, [r7, #4]
7000711e:	f000 f88a 	bl	70007236 <USBD_CtlError>
      break;
70007122:	bf00      	nop
  }
}
70007124:	bf00      	nop
70007126:	3708      	adds	r7, #8
70007128:	46bd      	mov	sp, r7
7000712a:	bd80      	pop	{r7, pc}

7000712c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
7000712c:	b580      	push	{r7, lr}
7000712e:	b082      	sub	sp, #8
70007130:	af00      	add	r7, sp, #0
70007132:	6078      	str	r0, [r7, #4]
70007134:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
70007136:	683b      	ldr	r3, [r7, #0]
70007138:	885b      	ldrh	r3, [r3, #2]
7000713a:	2b01      	cmp	r3, #1
7000713c:	d107      	bne.n	7000714e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
7000713e:	687b      	ldr	r3, [r7, #4]
70007140:	2201      	movs	r2, #1
70007142:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
70007146:	6878      	ldr	r0, [r7, #4]
70007148:	f000 f8e0 	bl	7000730c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
7000714c:	e013      	b.n	70007176 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
7000714e:	683b      	ldr	r3, [r7, #0]
70007150:	885b      	ldrh	r3, [r3, #2]
70007152:	2b02      	cmp	r3, #2
70007154:	d10b      	bne.n	7000716e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
70007156:	683b      	ldr	r3, [r7, #0]
70007158:	889b      	ldrh	r3, [r3, #4]
7000715a:	0a1b      	lsrs	r3, r3, #8
7000715c:	b29b      	uxth	r3, r3
7000715e:	b2da      	uxtb	r2, r3
70007160:	687b      	ldr	r3, [r7, #4]
70007162:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
70007166:	6878      	ldr	r0, [r7, #4]
70007168:	f000 f8d0 	bl	7000730c <USBD_CtlSendStatus>
}
7000716c:	e003      	b.n	70007176 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
7000716e:	6839      	ldr	r1, [r7, #0]
70007170:	6878      	ldr	r0, [r7, #4]
70007172:	f000 f860 	bl	70007236 <USBD_CtlError>
}
70007176:	bf00      	nop
70007178:	3708      	adds	r7, #8
7000717a:	46bd      	mov	sp, r7
7000717c:	bd80      	pop	{r7, pc}

7000717e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
7000717e:	b580      	push	{r7, lr}
70007180:	b082      	sub	sp, #8
70007182:	af00      	add	r7, sp, #0
70007184:	6078      	str	r0, [r7, #4]
70007186:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
70007188:	687b      	ldr	r3, [r7, #4]
7000718a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000718e:	b2db      	uxtb	r3, r3
70007190:	3b01      	subs	r3, #1
70007192:	2b02      	cmp	r3, #2
70007194:	d80b      	bhi.n	700071ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
70007196:	683b      	ldr	r3, [r7, #0]
70007198:	885b      	ldrh	r3, [r3, #2]
7000719a:	2b01      	cmp	r3, #1
7000719c:	d10c      	bne.n	700071b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
7000719e:	687b      	ldr	r3, [r7, #4]
700071a0:	2200      	movs	r2, #0
700071a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
700071a6:	6878      	ldr	r0, [r7, #4]
700071a8:	f000 f8b0 	bl	7000730c <USBD_CtlSendStatus>
      }
      break;
700071ac:	e004      	b.n	700071b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
700071ae:	6839      	ldr	r1, [r7, #0]
700071b0:	6878      	ldr	r0, [r7, #4]
700071b2:	f000 f840 	bl	70007236 <USBD_CtlError>
      break;
700071b6:	e000      	b.n	700071ba <USBD_ClrFeature+0x3c>
      break;
700071b8:	bf00      	nop
  }
}
700071ba:	bf00      	nop
700071bc:	3708      	adds	r7, #8
700071be:	46bd      	mov	sp, r7
700071c0:	bd80      	pop	{r7, pc}

700071c2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
700071c2:	b580      	push	{r7, lr}
700071c4:	b084      	sub	sp, #16
700071c6:	af00      	add	r7, sp, #0
700071c8:	6078      	str	r0, [r7, #4]
700071ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
700071cc:	683b      	ldr	r3, [r7, #0]
700071ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
700071d0:	68fb      	ldr	r3, [r7, #12]
700071d2:	781a      	ldrb	r2, [r3, #0]
700071d4:	687b      	ldr	r3, [r7, #4]
700071d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
700071d8:	68fb      	ldr	r3, [r7, #12]
700071da:	3301      	adds	r3, #1
700071dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
700071de:	68fb      	ldr	r3, [r7, #12]
700071e0:	781a      	ldrb	r2, [r3, #0]
700071e2:	687b      	ldr	r3, [r7, #4]
700071e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
700071e6:	68fb      	ldr	r3, [r7, #12]
700071e8:	3301      	adds	r3, #1
700071ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
700071ec:	68f8      	ldr	r0, [r7, #12]
700071ee:	f7ff fa16 	bl	7000661e <SWAPBYTE>
700071f2:	4603      	mov	r3, r0
700071f4:	461a      	mov	r2, r3
700071f6:	687b      	ldr	r3, [r7, #4]
700071f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
700071fa:	68fb      	ldr	r3, [r7, #12]
700071fc:	3301      	adds	r3, #1
700071fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
70007200:	68fb      	ldr	r3, [r7, #12]
70007202:	3301      	adds	r3, #1
70007204:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
70007206:	68f8      	ldr	r0, [r7, #12]
70007208:	f7ff fa09 	bl	7000661e <SWAPBYTE>
7000720c:	4603      	mov	r3, r0
7000720e:	461a      	mov	r2, r3
70007210:	687b      	ldr	r3, [r7, #4]
70007212:	809a      	strh	r2, [r3, #4]

  pbuff++;
70007214:	68fb      	ldr	r3, [r7, #12]
70007216:	3301      	adds	r3, #1
70007218:	60fb      	str	r3, [r7, #12]
  pbuff++;
7000721a:	68fb      	ldr	r3, [r7, #12]
7000721c:	3301      	adds	r3, #1
7000721e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
70007220:	68f8      	ldr	r0, [r7, #12]
70007222:	f7ff f9fc 	bl	7000661e <SWAPBYTE>
70007226:	4603      	mov	r3, r0
70007228:	461a      	mov	r2, r3
7000722a:	687b      	ldr	r3, [r7, #4]
7000722c:	80da      	strh	r2, [r3, #6]
}
7000722e:	bf00      	nop
70007230:	3710      	adds	r7, #16
70007232:	46bd      	mov	sp, r7
70007234:	bd80      	pop	{r7, pc}

70007236 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70007236:	b580      	push	{r7, lr}
70007238:	b082      	sub	sp, #8
7000723a:	af00      	add	r7, sp, #0
7000723c:	6078      	str	r0, [r7, #4]
7000723e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
70007240:	2180      	movs	r1, #128	@ 0x80
70007242:	6878      	ldr	r0, [r7, #4]
70007244:	f000 f9ea 	bl	7000761c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
70007248:	2100      	movs	r1, #0
7000724a:	6878      	ldr	r0, [r7, #4]
7000724c:	f000 f9e6 	bl	7000761c <USBD_LL_StallEP>
}
70007250:	bf00      	nop
70007252:	3708      	adds	r7, #8
70007254:	46bd      	mov	sp, r7
70007256:	bd80      	pop	{r7, pc}

70007258 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
70007258:	b580      	push	{r7, lr}
7000725a:	b084      	sub	sp, #16
7000725c:	af00      	add	r7, sp, #0
7000725e:	60f8      	str	r0, [r7, #12]
70007260:	60b9      	str	r1, [r7, #8]
70007262:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
70007264:	68fb      	ldr	r3, [r7, #12]
70007266:	2202      	movs	r2, #2
70007268:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
7000726c:	68fb      	ldr	r3, [r7, #12]
7000726e:	687a      	ldr	r2, [r7, #4]
70007270:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
70007272:	68fb      	ldr	r3, [r7, #12]
70007274:	687a      	ldr	r2, [r7, #4]
70007276:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
70007278:	687b      	ldr	r3, [r7, #4]
7000727a:	68ba      	ldr	r2, [r7, #8]
7000727c:	2100      	movs	r1, #0
7000727e:	68f8      	ldr	r0, [r7, #12]
70007280:	f000 fa55 	bl	7000772e <USBD_LL_Transmit>

  return USBD_OK;
70007284:	2300      	movs	r3, #0
}
70007286:	4618      	mov	r0, r3
70007288:	3710      	adds	r7, #16
7000728a:	46bd      	mov	sp, r7
7000728c:	bd80      	pop	{r7, pc}

7000728e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
7000728e:	b580      	push	{r7, lr}
70007290:	b084      	sub	sp, #16
70007292:	af00      	add	r7, sp, #0
70007294:	60f8      	str	r0, [r7, #12]
70007296:	60b9      	str	r1, [r7, #8]
70007298:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
7000729a:	687b      	ldr	r3, [r7, #4]
7000729c:	68ba      	ldr	r2, [r7, #8]
7000729e:	2100      	movs	r1, #0
700072a0:	68f8      	ldr	r0, [r7, #12]
700072a2:	f000 fa44 	bl	7000772e <USBD_LL_Transmit>

  return USBD_OK;
700072a6:	2300      	movs	r3, #0
}
700072a8:	4618      	mov	r0, r3
700072aa:	3710      	adds	r7, #16
700072ac:	46bd      	mov	sp, r7
700072ae:	bd80      	pop	{r7, pc}

700072b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
700072b0:	b580      	push	{r7, lr}
700072b2:	b084      	sub	sp, #16
700072b4:	af00      	add	r7, sp, #0
700072b6:	60f8      	str	r0, [r7, #12]
700072b8:	60b9      	str	r1, [r7, #8]
700072ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
700072bc:	68fb      	ldr	r3, [r7, #12]
700072be:	2203      	movs	r2, #3
700072c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
700072c4:	68fb      	ldr	r3, [r7, #12]
700072c6:	687a      	ldr	r2, [r7, #4]
700072c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
700072cc:	68fb      	ldr	r3, [r7, #12]
700072ce:	687a      	ldr	r2, [r7, #4]
700072d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
700072d4:	687b      	ldr	r3, [r7, #4]
700072d6:	68ba      	ldr	r2, [r7, #8]
700072d8:	2100      	movs	r1, #0
700072da:	68f8      	ldr	r0, [r7, #12]
700072dc:	f000 fa48 	bl	70007770 <USBD_LL_PrepareReceive>

  return USBD_OK;
700072e0:	2300      	movs	r3, #0
}
700072e2:	4618      	mov	r0, r3
700072e4:	3710      	adds	r7, #16
700072e6:	46bd      	mov	sp, r7
700072e8:	bd80      	pop	{r7, pc}

700072ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
700072ea:	b580      	push	{r7, lr}
700072ec:	b084      	sub	sp, #16
700072ee:	af00      	add	r7, sp, #0
700072f0:	60f8      	str	r0, [r7, #12]
700072f2:	60b9      	str	r1, [r7, #8]
700072f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
700072f6:	687b      	ldr	r3, [r7, #4]
700072f8:	68ba      	ldr	r2, [r7, #8]
700072fa:	2100      	movs	r1, #0
700072fc:	68f8      	ldr	r0, [r7, #12]
700072fe:	f000 fa37 	bl	70007770 <USBD_LL_PrepareReceive>

  return USBD_OK;
70007302:	2300      	movs	r3, #0
}
70007304:	4618      	mov	r0, r3
70007306:	3710      	adds	r7, #16
70007308:	46bd      	mov	sp, r7
7000730a:	bd80      	pop	{r7, pc}

7000730c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
7000730c:	b580      	push	{r7, lr}
7000730e:	b082      	sub	sp, #8
70007310:	af00      	add	r7, sp, #0
70007312:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
70007314:	687b      	ldr	r3, [r7, #4]
70007316:	2204      	movs	r2, #4
70007318:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
7000731c:	2300      	movs	r3, #0
7000731e:	2200      	movs	r2, #0
70007320:	2100      	movs	r1, #0
70007322:	6878      	ldr	r0, [r7, #4]
70007324:	f000 fa03 	bl	7000772e <USBD_LL_Transmit>

  return USBD_OK;
70007328:	2300      	movs	r3, #0
}
7000732a:	4618      	mov	r0, r3
7000732c:	3708      	adds	r7, #8
7000732e:	46bd      	mov	sp, r7
70007330:	bd80      	pop	{r7, pc}

70007332 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
70007332:	b580      	push	{r7, lr}
70007334:	b082      	sub	sp, #8
70007336:	af00      	add	r7, sp, #0
70007338:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
7000733a:	687b      	ldr	r3, [r7, #4]
7000733c:	2205      	movs	r2, #5
7000733e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70007342:	2300      	movs	r3, #0
70007344:	2200      	movs	r2, #0
70007346:	2100      	movs	r1, #0
70007348:	6878      	ldr	r0, [r7, #4]
7000734a:	f000 fa11 	bl	70007770 <USBD_LL_PrepareReceive>

  return USBD_OK;
7000734e:	2300      	movs	r3, #0
}
70007350:	4618      	mov	r0, r3
70007352:	3708      	adds	r7, #8
70007354:	46bd      	mov	sp, r7
70007356:	bd80      	pop	{r7, pc}

70007358 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70007358:	b580      	push	{r7, lr}
7000735a:	b082      	sub	sp, #8
7000735c:	af00      	add	r7, sp, #0
7000735e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
70007360:	687b      	ldr	r3, [r7, #4]
70007362:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
70007366:	687b      	ldr	r3, [r7, #4]
70007368:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
7000736c:	4619      	mov	r1, r3
7000736e:	4610      	mov	r0, r2
70007370:	f7fe fe39 	bl	70005fe6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PostTreatment */

}
70007374:	bf00      	nop
70007376:	3708      	adds	r7, #8
70007378:	46bd      	mov	sp, r7
7000737a:	bd80      	pop	{r7, pc}

7000737c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
7000737c:	b580      	push	{r7, lr}
7000737e:	b082      	sub	sp, #8
70007380:	af00      	add	r7, sp, #0
70007382:	6078      	str	r0, [r7, #4]
70007384:	460b      	mov	r3, r1
70007386:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
70007388:	687b      	ldr	r3, [r7, #4]
7000738a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
7000738e:	78fa      	ldrb	r2, [r7, #3]
70007390:	6879      	ldr	r1, [r7, #4]
70007392:	4613      	mov	r3, r2
70007394:	00db      	lsls	r3, r3, #3
70007396:	4413      	add	r3, r2
70007398:	009b      	lsls	r3, r3, #2
7000739a:	440b      	add	r3, r1
7000739c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
700073a0:	681a      	ldr	r2, [r3, #0]
700073a2:	78fb      	ldrb	r3, [r7, #3]
700073a4:	4619      	mov	r1, r3
700073a6:	f7fe fe73 	bl	70006090 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
700073aa:	bf00      	nop
700073ac:	3708      	adds	r7, #8
700073ae:	46bd      	mov	sp, r7
700073b0:	bd80      	pop	{r7, pc}

700073b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
700073b2:	b580      	push	{r7, lr}
700073b4:	b082      	sub	sp, #8
700073b6:	af00      	add	r7, sp, #0
700073b8:	6078      	str	r0, [r7, #4]
700073ba:	460b      	mov	r3, r1
700073bc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
700073be:	687b      	ldr	r3, [r7, #4]
700073c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
700073c4:	78fa      	ldrb	r2, [r7, #3]
700073c6:	6879      	ldr	r1, [r7, #4]
700073c8:	4613      	mov	r3, r2
700073ca:	00db      	lsls	r3, r3, #3
700073cc:	4413      	add	r3, r2
700073ce:	009b      	lsls	r3, r3, #2
700073d0:	440b      	add	r3, r1
700073d2:	3320      	adds	r3, #32
700073d4:	681a      	ldr	r2, [r3, #0]
700073d6:	78fb      	ldrb	r3, [r7, #3]
700073d8:	4619      	mov	r1, r3
700073da:	f7fe ff0c 	bl	700061f6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
700073de:	bf00      	nop
700073e0:	3708      	adds	r7, #8
700073e2:	46bd      	mov	sp, r7
700073e4:	bd80      	pop	{r7, pc}

700073e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
700073e6:	b580      	push	{r7, lr}
700073e8:	b082      	sub	sp, #8
700073ea:	af00      	add	r7, sp, #0
700073ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SofCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
700073ee:	687b      	ldr	r3, [r7, #4]
700073f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
700073f4:	4618      	mov	r0, r3
700073f6:	f7ff f846 	bl	70006486 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SofCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PostTreatment */
}
700073fa:	bf00      	nop
700073fc:	3708      	adds	r7, #8
700073fe:	46bd      	mov	sp, r7
70007400:	bd80      	pop	{r7, pc}

70007402 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70007402:	b580      	push	{r7, lr}
70007404:	b084      	sub	sp, #16
70007406:	af00      	add	r7, sp, #0
70007408:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
7000740a:	2301      	movs	r3, #1
7000740c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_HIGH)
7000740e:	687b      	ldr	r3, [r7, #4]
70007410:	79db      	ldrb	r3, [r3, #7]
70007412:	2b00      	cmp	r3, #0
70007414:	d102      	bne.n	7000741c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
70007416:	2300      	movs	r3, #0
70007418:	73fb      	strb	r3, [r7, #15]
7000741a:	e008      	b.n	7000742e <HAL_PCD_ResetCallback+0x2c>
  }
  else if (hpcd->Init.speed == PCD_SPEED_FULL)
7000741c:	687b      	ldr	r3, [r7, #4]
7000741e:	79db      	ldrb	r3, [r3, #7]
70007420:	2b02      	cmp	r3, #2
70007422:	d102      	bne.n	7000742a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
70007424:	2301      	movs	r3, #1
70007426:	73fb      	strb	r3, [r7, #15]
70007428:	e001      	b.n	7000742e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
7000742a:	f7f9 f995 	bl	70000758 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
7000742e:	687b      	ldr	r3, [r7, #4]
70007430:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70007434:	7bfa      	ldrb	r2, [r7, #15]
70007436:	4611      	mov	r1, r2
70007438:	4618      	mov	r0, r3
7000743a:	f7fe ffe0 	bl	700063fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
7000743e:	687b      	ldr	r3, [r7, #4]
70007440:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70007444:	4618      	mov	r0, r3
70007446:	f7fe ff88 	bl	7000635a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
7000744a:	bf00      	nop
7000744c:	3710      	adds	r7, #16
7000744e:	46bd      	mov	sp, r7
70007450:	bd80      	pop	{r7, pc}
	...

70007454 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70007454:	b580      	push	{r7, lr}
70007456:	b082      	sub	sp, #8
70007458:	af00      	add	r7, sp, #0
7000745a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */

  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
7000745c:	687b      	ldr	r3, [r7, #4]
7000745e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70007462:	4618      	mov	r0, r3
70007464:	f7fe ffdb 	bl	7000641e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
70007468:	687b      	ldr	r3, [r7, #4]
7000746a:	7adb      	ldrb	r3, [r3, #11]
7000746c:	2b00      	cmp	r3, #0
7000746e:	d007      	beq.n	70007480 <HAL_PCD_SuspendCallback+0x2c>
  {
	HAL_SuspendTick();
70007470:	f7f9 ffe0 	bl	70001434 <HAL_SuspendTick>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
70007474:	4b04      	ldr	r3, [pc, #16]	@ (70007488 <HAL_PCD_SuspendCallback+0x34>)
70007476:	691b      	ldr	r3, [r3, #16]
70007478:	4a03      	ldr	r2, [pc, #12]	@ (70007488 <HAL_PCD_SuspendCallback+0x34>)
7000747a:	f043 0306 	orr.w	r3, r3, #6
7000747e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
70007480:	bf00      	nop
70007482:	3708      	adds	r7, #8
70007484:	46bd      	mov	sp, r7
70007486:	bd80      	pop	{r7, pc}
70007488:	e000ed00 	.word	0xe000ed00

7000748c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
7000748c:	b580      	push	{r7, lr}
7000748e:	b082      	sub	sp, #8
70007490:	af00      	add	r7, sp, #0
70007492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
70007494:	687b      	ldr	r3, [r7, #4]
70007496:	7adb      	ldrb	r3, [r3, #11]
70007498:	2b00      	cmp	r3, #0
7000749a:	d007      	beq.n	700074ac <HAL_PCD_ResumeCallback+0x20>
  {
    HAL_ResumeTick();
7000749c:	f7f9 ffda 	bl	70001454 <HAL_ResumeTick>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
700074a0:	4b0d      	ldr	r3, [pc, #52]	@ (700074d8 <HAL_PCD_ResumeCallback+0x4c>)
700074a2:	691b      	ldr	r3, [r3, #16]
700074a4:	4a0c      	ldr	r2, [pc, #48]	@ (700074d8 <HAL_PCD_ResumeCallback+0x4c>)
700074a6:	f023 0306 	bic.w	r3, r3, #6
700074aa:	6113      	str	r3, [r2, #16]

  }
  /* USER CODE END 3 */
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
700074ac:	687b      	ldr	r3, [r7, #4]
700074ae:	681b      	ldr	r3, [r3, #0]
700074b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
700074b4:	681b      	ldr	r3, [r3, #0]
700074b6:	687a      	ldr	r2, [r7, #4]
700074b8:	6812      	ldr	r2, [r2, #0]
700074ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
700074be:	f023 0301 	bic.w	r3, r3, #1
700074c2:	6013      	str	r3, [r2, #0]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
700074c4:	687b      	ldr	r3, [r7, #4]
700074c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
700074ca:	4618      	mov	r0, r3
700074cc:	f7fe ffc3 	bl	70006456 <USBD_LL_Resume>

  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
700074d0:	bf00      	nop
700074d2:	3708      	adds	r7, #8
700074d4:	46bd      	mov	sp, r7
700074d6:	bd80      	pop	{r7, pc}
700074d8:	e000ed00 	.word	0xe000ed00

700074dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
700074dc:	b580      	push	{r7, lr}
700074de:	b082      	sub	sp, #8
700074e0:	af00      	add	r7, sp, #0
700074e2:	6078      	str	r0, [r7, #4]
700074e4:	460b      	mov	r3, r1
700074e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
700074e8:	687b      	ldr	r3, [r7, #4]
700074ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
700074ee:	78fa      	ldrb	r2, [r7, #3]
700074f0:	4611      	mov	r1, r2
700074f2:	4618      	mov	r0, r3
700074f4:	f7ff f819 	bl	7000652a <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

}
700074f8:	bf00      	nop
700074fa:	3708      	adds	r7, #8
700074fc:	46bd      	mov	sp, r7
700074fe:	bd80      	pop	{r7, pc}

70007500 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70007500:	b580      	push	{r7, lr}
70007502:	b082      	sub	sp, #8
70007504:	af00      	add	r7, sp, #0
70007506:	6078      	str	r0, [r7, #4]
70007508:	460b      	mov	r3, r1
7000750a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
7000750c:	687b      	ldr	r3, [r7, #4]
7000750e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70007512:	78fa      	ldrb	r2, [r7, #3]
70007514:	4611      	mov	r1, r2
70007516:	4618      	mov	r0, r3
70007518:	f7fe ffd5 	bl	700064c6 <USBD_LL_IsoINIncomplete>

  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
7000751c:	bf00      	nop
7000751e:	3708      	adds	r7, #8
70007520:	46bd      	mov	sp, r7
70007522:	bd80      	pop	{r7, pc}

70007524 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70007524:	b580      	push	{r7, lr}
70007526:	b082      	sub	sp, #8
70007528:	af00      	add	r7, sp, #0
7000752a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
7000752c:	687b      	ldr	r3, [r7, #4]
7000752e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70007532:	4618      	mov	r0, r3
70007534:	f7ff f82b 	bl	7000658e <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
70007538:	bf00      	nop
7000753a:	3708      	adds	r7, #8
7000753c:	46bd      	mov	sp, r7
7000753e:	bd80      	pop	{r7, pc}

70007540 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70007540:	b580      	push	{r7, lr}
70007542:	b082      	sub	sp, #8
70007544:	af00      	add	r7, sp, #0
70007546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
70007548:	687b      	ldr	r3, [r7, #4]
7000754a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
7000754e:	4618      	mov	r0, r3
70007550:	f7ff f828 	bl	700065a4 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
70007554:	bf00      	nop
70007556:	3708      	adds	r7, #8
70007558:	46bd      	mov	sp, r7
7000755a:	bd80      	pop	{r7, pc}

7000755c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
7000755c:	b580      	push	{r7, lr}
7000755e:	b084      	sub	sp, #16
70007560:	af00      	add	r7, sp, #0
70007562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
70007564:	2300      	movs	r3, #0
70007566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
70007568:	2300      	movs	r3, #0
7000756a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
7000756c:	687b      	ldr	r3, [r7, #4]
7000756e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
70007572:	4618      	mov	r0, r3
70007574:	f7fa fbe0 	bl	70001d38 <HAL_PCD_Start>
70007578:	4603      	mov	r3, r0
7000757a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000757c:	7bfb      	ldrb	r3, [r7, #15]
7000757e:	4618      	mov	r0, r3
70007580:	f000 f930 	bl	700077e4 <USBD_Get_USB_Status>
70007584:	4603      	mov	r3, r0
70007586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70007588:	7bbb      	ldrb	r3, [r7, #14]
}
7000758a:	4618      	mov	r0, r3
7000758c:	3710      	adds	r7, #16
7000758e:	46bd      	mov	sp, r7
70007590:	bd80      	pop	{r7, pc}

70007592 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
70007592:	b580      	push	{r7, lr}
70007594:	b084      	sub	sp, #16
70007596:	af00      	add	r7, sp, #0
70007598:	6078      	str	r0, [r7, #4]
7000759a:	4608      	mov	r0, r1
7000759c:	4611      	mov	r1, r2
7000759e:	461a      	mov	r2, r3
700075a0:	4603      	mov	r3, r0
700075a2:	70fb      	strb	r3, [r7, #3]
700075a4:	460b      	mov	r3, r1
700075a6:	70bb      	strb	r3, [r7, #2]
700075a8:	4613      	mov	r3, r2
700075aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
700075ac:	2300      	movs	r3, #0
700075ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
700075b0:	2300      	movs	r3, #0
700075b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
700075b4:	687b      	ldr	r3, [r7, #4]
700075b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
700075ba:	78bb      	ldrb	r3, [r7, #2]
700075bc:	883a      	ldrh	r2, [r7, #0]
700075be:	78f9      	ldrb	r1, [r7, #3]
700075c0:	f7fb f8e1 	bl	70002786 <HAL_PCD_EP_Open>
700075c4:	4603      	mov	r3, r0
700075c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
700075c8:	7bfb      	ldrb	r3, [r7, #15]
700075ca:	4618      	mov	r0, r3
700075cc:	f000 f90a 	bl	700077e4 <USBD_Get_USB_Status>
700075d0:	4603      	mov	r3, r0
700075d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
700075d4:	7bbb      	ldrb	r3, [r7, #14]
}
700075d6:	4618      	mov	r0, r3
700075d8:	3710      	adds	r7, #16
700075da:	46bd      	mov	sp, r7
700075dc:	bd80      	pop	{r7, pc}

700075de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
700075de:	b580      	push	{r7, lr}
700075e0:	b084      	sub	sp, #16
700075e2:	af00      	add	r7, sp, #0
700075e4:	6078      	str	r0, [r7, #4]
700075e6:	460b      	mov	r3, r1
700075e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
700075ea:	2300      	movs	r3, #0
700075ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
700075ee:	2300      	movs	r3, #0
700075f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
700075f2:	687b      	ldr	r3, [r7, #4]
700075f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
700075f8:	78fa      	ldrb	r2, [r7, #3]
700075fa:	4611      	mov	r1, r2
700075fc:	4618      	mov	r0, r3
700075fe:	f7fb f92c 	bl	7000285a <HAL_PCD_EP_Close>
70007602:	4603      	mov	r3, r0
70007604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70007606:	7bfb      	ldrb	r3, [r7, #15]
70007608:	4618      	mov	r0, r3
7000760a:	f000 f8eb 	bl	700077e4 <USBD_Get_USB_Status>
7000760e:	4603      	mov	r3, r0
70007610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70007612:	7bbb      	ldrb	r3, [r7, #14]
}
70007614:	4618      	mov	r0, r3
70007616:	3710      	adds	r7, #16
70007618:	46bd      	mov	sp, r7
7000761a:	bd80      	pop	{r7, pc}

7000761c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
7000761c:	b580      	push	{r7, lr}
7000761e:	b084      	sub	sp, #16
70007620:	af00      	add	r7, sp, #0
70007622:	6078      	str	r0, [r7, #4]
70007624:	460b      	mov	r3, r1
70007626:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
70007628:	2300      	movs	r3, #0
7000762a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000762c:	2300      	movs	r3, #0
7000762e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
70007630:	687b      	ldr	r3, [r7, #4]
70007632:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
70007636:	78fa      	ldrb	r2, [r7, #3]
70007638:	4611      	mov	r1, r2
7000763a:	4618      	mov	r0, r3
7000763c:	f7fb f9cc 	bl	700029d8 <HAL_PCD_EP_SetStall>
70007640:	4603      	mov	r3, r0
70007642:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70007644:	7bfb      	ldrb	r3, [r7, #15]
70007646:	4618      	mov	r0, r3
70007648:	f000 f8cc 	bl	700077e4 <USBD_Get_USB_Status>
7000764c:	4603      	mov	r3, r0
7000764e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70007650:	7bbb      	ldrb	r3, [r7, #14]
}
70007652:	4618      	mov	r0, r3
70007654:	3710      	adds	r7, #16
70007656:	46bd      	mov	sp, r7
70007658:	bd80      	pop	{r7, pc}

7000765a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
7000765a:	b580      	push	{r7, lr}
7000765c:	b084      	sub	sp, #16
7000765e:	af00      	add	r7, sp, #0
70007660:	6078      	str	r0, [r7, #4]
70007662:	460b      	mov	r3, r1
70007664:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
70007666:	2300      	movs	r3, #0
70007668:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000766a:	2300      	movs	r3, #0
7000766c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
7000766e:	687b      	ldr	r3, [r7, #4]
70007670:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
70007674:	78fa      	ldrb	r2, [r7, #3]
70007676:	4611      	mov	r1, r2
70007678:	4618      	mov	r0, r3
7000767a:	f7fb fa10 	bl	70002a9e <HAL_PCD_EP_ClrStall>
7000767e:	4603      	mov	r3, r0
70007680:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70007682:	7bfb      	ldrb	r3, [r7, #15]
70007684:	4618      	mov	r0, r3
70007686:	f000 f8ad 	bl	700077e4 <USBD_Get_USB_Status>
7000768a:	4603      	mov	r3, r0
7000768c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
7000768e:	7bbb      	ldrb	r3, [r7, #14]
}
70007690:	4618      	mov	r0, r3
70007692:	3710      	adds	r7, #16
70007694:	46bd      	mov	sp, r7
70007696:	bd80      	pop	{r7, pc}

70007698 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
70007698:	b480      	push	{r7}
7000769a:	b085      	sub	sp, #20
7000769c:	af00      	add	r7, sp, #0
7000769e:	6078      	str	r0, [r7, #4]
700076a0:	460b      	mov	r3, r1
700076a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
700076a4:	687b      	ldr	r3, [r7, #4]
700076a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
700076aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
700076ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
700076b0:	2b00      	cmp	r3, #0
700076b2:	da0b      	bge.n	700076cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
700076b4:	78fb      	ldrb	r3, [r7, #3]
700076b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
700076ba:	68f9      	ldr	r1, [r7, #12]
700076bc:	4613      	mov	r3, r2
700076be:	00db      	lsls	r3, r3, #3
700076c0:	4413      	add	r3, r2
700076c2:	009b      	lsls	r3, r3, #2
700076c4:	440b      	add	r3, r1
700076c6:	3316      	adds	r3, #22
700076c8:	781b      	ldrb	r3, [r3, #0]
700076ca:	e00b      	b.n	700076e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
700076cc:	78fb      	ldrb	r3, [r7, #3]
700076ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
700076d2:	68f9      	ldr	r1, [r7, #12]
700076d4:	4613      	mov	r3, r2
700076d6:	00db      	lsls	r3, r3, #3
700076d8:	4413      	add	r3, r2
700076da:	009b      	lsls	r3, r3, #2
700076dc:	440b      	add	r3, r1
700076de:	f203 2356 	addw	r3, r3, #598	@ 0x256
700076e2:	781b      	ldrb	r3, [r3, #0]
  }
}
700076e4:	4618      	mov	r0, r3
700076e6:	3714      	adds	r7, #20
700076e8:	46bd      	mov	sp, r7
700076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
700076ee:	4770      	bx	lr

700076f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
700076f0:	b580      	push	{r7, lr}
700076f2:	b084      	sub	sp, #16
700076f4:	af00      	add	r7, sp, #0
700076f6:	6078      	str	r0, [r7, #4]
700076f8:	460b      	mov	r3, r1
700076fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
700076fc:	2300      	movs	r3, #0
700076fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
70007700:	2300      	movs	r3, #0
70007702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
70007704:	687b      	ldr	r3, [r7, #4]
70007706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
7000770a:	78fa      	ldrb	r2, [r7, #3]
7000770c:	4611      	mov	r1, r2
7000770e:	4618      	mov	r0, r3
70007710:	f7fb f815 	bl	7000273e <HAL_PCD_SetAddress>
70007714:	4603      	mov	r3, r0
70007716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70007718:	7bfb      	ldrb	r3, [r7, #15]
7000771a:	4618      	mov	r0, r3
7000771c:	f000 f862 	bl	700077e4 <USBD_Get_USB_Status>
70007720:	4603      	mov	r3, r0
70007722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70007724:	7bbb      	ldrb	r3, [r7, #14]
}
70007726:	4618      	mov	r0, r3
70007728:	3710      	adds	r7, #16
7000772a:	46bd      	mov	sp, r7
7000772c:	bd80      	pop	{r7, pc}

7000772e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
7000772e:	b580      	push	{r7, lr}
70007730:	b086      	sub	sp, #24
70007732:	af00      	add	r7, sp, #0
70007734:	60f8      	str	r0, [r7, #12]
70007736:	607a      	str	r2, [r7, #4]
70007738:	603b      	str	r3, [r7, #0]
7000773a:	460b      	mov	r3, r1
7000773c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
7000773e:	2300      	movs	r3, #0
70007740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
70007742:	2300      	movs	r3, #0
70007744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
70007746:	68fb      	ldr	r3, [r7, #12]
70007748:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
7000774c:	7af9      	ldrb	r1, [r7, #11]
7000774e:	683b      	ldr	r3, [r7, #0]
70007750:	687a      	ldr	r2, [r7, #4]
70007752:	f7fb f907 	bl	70002964 <HAL_PCD_EP_Transmit>
70007756:	4603      	mov	r3, r0
70007758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000775a:	7dfb      	ldrb	r3, [r7, #23]
7000775c:	4618      	mov	r0, r3
7000775e:	f000 f841 	bl	700077e4 <USBD_Get_USB_Status>
70007762:	4603      	mov	r3, r0
70007764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
70007766:	7dbb      	ldrb	r3, [r7, #22]
}
70007768:	4618      	mov	r0, r3
7000776a:	3718      	adds	r7, #24
7000776c:	46bd      	mov	sp, r7
7000776e:	bd80      	pop	{r7, pc}

70007770 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
70007770:	b580      	push	{r7, lr}
70007772:	b086      	sub	sp, #24
70007774:	af00      	add	r7, sp, #0
70007776:	60f8      	str	r0, [r7, #12]
70007778:	607a      	str	r2, [r7, #4]
7000777a:	603b      	str	r3, [r7, #0]
7000777c:	460b      	mov	r3, r1
7000777e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
70007780:	2300      	movs	r3, #0
70007782:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
70007784:	2300      	movs	r3, #0
70007786:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
70007788:	68fb      	ldr	r3, [r7, #12]
7000778a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
7000778e:	7af9      	ldrb	r1, [r7, #11]
70007790:	683b      	ldr	r3, [r7, #0]
70007792:	687a      	ldr	r2, [r7, #4]
70007794:	f7fb f8ab 	bl	700028ee <HAL_PCD_EP_Receive>
70007798:	4603      	mov	r3, r0
7000779a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000779c:	7dfb      	ldrb	r3, [r7, #23]
7000779e:	4618      	mov	r0, r3
700077a0:	f000 f820 	bl	700077e4 <USBD_Get_USB_Status>
700077a4:	4603      	mov	r3, r0
700077a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
700077a8:	7dbb      	ldrb	r3, [r7, #22]
}
700077aa:	4618      	mov	r0, r3
700077ac:	3718      	adds	r7, #24
700077ae:	46bd      	mov	sp, r7
700077b0:	bd80      	pop	{r7, pc}
	...

700077b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
700077b4:	b480      	push	{r7}
700077b6:	b083      	sub	sp, #12
700077b8:	af00      	add	r7, sp, #0
700077ba:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
700077bc:	4b03      	ldr	r3, [pc, #12]	@ (700077cc <USBD_static_malloc+0x18>)
}
700077be:	4618      	mov	r0, r3
700077c0:	370c      	adds	r7, #12
700077c2:	46bd      	mov	sp, r7
700077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
700077c8:	4770      	bx	lr
700077ca:	bf00      	nop
700077cc:	24027a68 	.word	0x24027a68

700077d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
700077d0:	b480      	push	{r7}
700077d2:	b083      	sub	sp, #12
700077d4:	af00      	add	r7, sp, #0
700077d6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
700077d8:	bf00      	nop
700077da:	370c      	adds	r7, #12
700077dc:	46bd      	mov	sp, r7
700077de:	f85d 7b04 	ldr.w	r7, [sp], #4
700077e2:	4770      	bx	lr

700077e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
700077e4:	b480      	push	{r7}
700077e6:	b085      	sub	sp, #20
700077e8:	af00      	add	r7, sp, #0
700077ea:	4603      	mov	r3, r0
700077ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
700077ee:	2300      	movs	r3, #0
700077f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
700077f2:	79fb      	ldrb	r3, [r7, #7]
700077f4:	2b03      	cmp	r3, #3
700077f6:	d817      	bhi.n	70007828 <USBD_Get_USB_Status+0x44>
700077f8:	a201      	add	r2, pc, #4	@ (adr r2, 70007800 <USBD_Get_USB_Status+0x1c>)
700077fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700077fe:	bf00      	nop
70007800:	70007811 	.word	0x70007811
70007804:	70007817 	.word	0x70007817
70007808:	7000781d 	.word	0x7000781d
7000780c:	70007823 	.word	0x70007823
  {
    case HAL_OK :
      usb_status = USBD_OK;
70007810:	2300      	movs	r3, #0
70007812:	73fb      	strb	r3, [r7, #15]
    break;
70007814:	e00b      	b.n	7000782e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
70007816:	2303      	movs	r3, #3
70007818:	73fb      	strb	r3, [r7, #15]
    break;
7000781a:	e008      	b.n	7000782e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
7000781c:	2301      	movs	r3, #1
7000781e:	73fb      	strb	r3, [r7, #15]
    break;
70007820:	e005      	b.n	7000782e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
70007822:	2303      	movs	r3, #3
70007824:	73fb      	strb	r3, [r7, #15]
    break;
70007826:	e002      	b.n	7000782e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
70007828:	2303      	movs	r3, #3
7000782a:	73fb      	strb	r3, [r7, #15]
    break;
7000782c:	bf00      	nop
  }
  return usb_status;
7000782e:	7bfb      	ldrb	r3, [r7, #15]
}
70007830:	4618      	mov	r0, r3
70007832:	3714      	adds	r7, #20
70007834:	46bd      	mov	sp, r7
70007836:	f85d 7b04 	ldr.w	r7, [sp], #4
7000783a:	4770      	bx	lr

7000783c <memset>:
7000783c:	4402      	add	r2, r0
7000783e:	4603      	mov	r3, r0
70007840:	4293      	cmp	r3, r2
70007842:	d100      	bne.n	70007846 <memset+0xa>
70007844:	4770      	bx	lr
70007846:	f803 1b01 	strb.w	r1, [r3], #1
7000784a:	e7f9      	b.n	70007840 <memset+0x4>

7000784c <__libc_init_array>:
7000784c:	b570      	push	{r4, r5, r6, lr}
7000784e:	4d0d      	ldr	r5, [pc, #52]	@ (70007884 <__libc_init_array+0x38>)
70007850:	4c0d      	ldr	r4, [pc, #52]	@ (70007888 <__libc_init_array+0x3c>)
70007852:	1b64      	subs	r4, r4, r5
70007854:	10a4      	asrs	r4, r4, #2
70007856:	2600      	movs	r6, #0
70007858:	42a6      	cmp	r6, r4
7000785a:	d109      	bne.n	70007870 <__libc_init_array+0x24>
7000785c:	4d0b      	ldr	r5, [pc, #44]	@ (7000788c <__libc_init_array+0x40>)
7000785e:	4c0c      	ldr	r4, [pc, #48]	@ (70007890 <__libc_init_array+0x44>)
70007860:	f000 f826 	bl	700078b0 <_init>
70007864:	1b64      	subs	r4, r4, r5
70007866:	10a4      	asrs	r4, r4, #2
70007868:	2600      	movs	r6, #0
7000786a:	42a6      	cmp	r6, r4
7000786c:	d105      	bne.n	7000787a <__libc_init_array+0x2e>
7000786e:	bd70      	pop	{r4, r5, r6, pc}
70007870:	f855 3b04 	ldr.w	r3, [r5], #4
70007874:	4798      	blx	r3
70007876:	3601      	adds	r6, #1
70007878:	e7ee      	b.n	70007858 <__libc_init_array+0xc>
7000787a:	f855 3b04 	ldr.w	r3, [r5], #4
7000787e:	4798      	blx	r3
70007880:	3601      	adds	r6, #1
70007882:	e7f2      	b.n	7000786a <__libc_init_array+0x1e>
70007884:	700078d0 	.word	0x700078d0
70007888:	700078d0 	.word	0x700078d0
7000788c:	700078d0 	.word	0x700078d0
70007890:	700078d4 	.word	0x700078d4

70007894 <memcpy>:
70007894:	440a      	add	r2, r1
70007896:	4291      	cmp	r1, r2
70007898:	f100 33ff 	add.w	r3, r0, #4294967295
7000789c:	d100      	bne.n	700078a0 <memcpy+0xc>
7000789e:	4770      	bx	lr
700078a0:	b510      	push	{r4, lr}
700078a2:	f811 4b01 	ldrb.w	r4, [r1], #1
700078a6:	f803 4f01 	strb.w	r4, [r3, #1]!
700078aa:	4291      	cmp	r1, r2
700078ac:	d1f9      	bne.n	700078a2 <memcpy+0xe>
700078ae:	bd10      	pop	{r4, pc}

700078b0 <_init>:
700078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700078b2:	bf00      	nop
700078b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
700078b6:	bc08      	pop	{r3}
700078b8:	469e      	mov	lr, r3
700078ba:	4770      	bx	lr

700078bc <_fini>:
700078bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
700078be:	bf00      	nop
700078c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
700078c2:	bc08      	pop	{r3}
700078c4:	469e      	mov	lr, r3
700078c6:	4770      	bx	lr
