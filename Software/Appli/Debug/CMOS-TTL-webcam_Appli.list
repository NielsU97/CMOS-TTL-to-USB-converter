
CMOS-TTL-webcam_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  70000000  70000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fac  700002b0  700002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  7000425c  7000425c  0000525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  70004264  70004264  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  70004264  70004264  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  70004264  70004264  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  70004264  70004264  00005264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  70004268  70004268  00005268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  7000426c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2400000c  70004278  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00001000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dea2  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213a  00000000  00000000  00013edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00016018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008bd  00000000  00000000  00016bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030ec2  00000000  00000000  0001748d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de9f  00000000  00000000  0004834f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130dc9  00000000  00000000  000561ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186fb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003034  00000000  00000000  00186ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0018a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

700002b0 <__do_global_dtors_aux>:
700002b0:	b510      	push	{r4, lr}
700002b2:	4c05      	ldr	r4, [pc, #20]	@ (700002c8 <__do_global_dtors_aux+0x18>)
700002b4:	7823      	ldrb	r3, [r4, #0]
700002b6:	b933      	cbnz	r3, 700002c6 <__do_global_dtors_aux+0x16>
700002b8:	4b04      	ldr	r3, [pc, #16]	@ (700002cc <__do_global_dtors_aux+0x1c>)
700002ba:	b113      	cbz	r3, 700002c2 <__do_global_dtors_aux+0x12>
700002bc:	4804      	ldr	r0, [pc, #16]	@ (700002d0 <__do_global_dtors_aux+0x20>)
700002be:	f3af 8000 	nop.w
700002c2:	2301      	movs	r3, #1
700002c4:	7023      	strb	r3, [r4, #0]
700002c6:	bd10      	pop	{r4, pc}
700002c8:	2400000c 	.word	0x2400000c
700002cc:	00000000 	.word	0x00000000
700002d0:	70004244 	.word	0x70004244

700002d4 <frame_dummy>:
700002d4:	b508      	push	{r3, lr}
700002d6:	4b03      	ldr	r3, [pc, #12]	@ (700002e4 <frame_dummy+0x10>)
700002d8:	b11b      	cbz	r3, 700002e2 <frame_dummy+0xe>
700002da:	4903      	ldr	r1, [pc, #12]	@ (700002e8 <frame_dummy+0x14>)
700002dc:	4803      	ldr	r0, [pc, #12]	@ (700002ec <frame_dummy+0x18>)
700002de:	f3af 8000 	nop.w
700002e2:	bd08      	pop	{r3, pc}
700002e4:	00000000 	.word	0x00000000
700002e8:	24000010 	.word	0x24000010
700002ec:	70004244 	.word	0x70004244

700002f0 <main>:
#include "usb_device.h"

DCMIPP_HandleTypeDef phdcmipp;

int main(void)
{
700002f0:	b580      	push	{r7, lr}
700002f2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
700002f4:	f000 f887 	bl	70000406 <HAL_Init>

  /* Infinite loop */
  while (1)
700002f8:	bf00      	nop
700002fa:	e7fd      	b.n	700002f8 <main+0x8>

700002fc <Error_Handler>:
    // Your application code
  }
}

void Error_Handler(void)
{
700002fc:	b480      	push	{r7}
700002fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
70000300:	b672      	cpsid	i
}
70000302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
70000304:	bf00      	nop
70000306:	e7fd      	b.n	70000304 <Error_Handler+0x8>

70000308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
70000308:	b480      	push	{r7}
7000030a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
7000030c:	bf00      	nop
7000030e:	46bd      	mov	sp, r7
70000310:	f85d 7b04 	ldr.w	r7, [sp], #4
70000314:	4770      	bx	lr

70000316 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
70000316:	b480      	push	{r7}
70000318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
7000031a:	bf00      	nop
7000031c:	e7fd      	b.n	7000031a <NMI_Handler+0x4>

7000031e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
7000031e:	b480      	push	{r7}
70000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
70000322:	bf00      	nop
70000324:	e7fd      	b.n	70000322 <HardFault_Handler+0x4>

70000326 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
70000326:	b480      	push	{r7}
70000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
7000032a:	bf00      	nop
7000032c:	e7fd      	b.n	7000032a <MemManage_Handler+0x4>

7000032e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
7000032e:	b480      	push	{r7}
70000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
70000332:	bf00      	nop
70000334:	e7fd      	b.n	70000332 <BusFault_Handler+0x4>

70000336 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
70000336:	b480      	push	{r7}
70000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
7000033a:	bf00      	nop
7000033c:	e7fd      	b.n	7000033a <UsageFault_Handler+0x4>

7000033e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
7000033e:	b480      	push	{r7}
70000340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
70000342:	bf00      	nop
70000344:	46bd      	mov	sp, r7
70000346:	f85d 7b04 	ldr.w	r7, [sp], #4
7000034a:	4770      	bx	lr

7000034c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
7000034c:	b480      	push	{r7}
7000034e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
70000350:	bf00      	nop
70000352:	46bd      	mov	sp, r7
70000354:	f85d 7b04 	ldr.w	r7, [sp], #4
70000358:	4770      	bx	lr

7000035a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
7000035a:	b480      	push	{r7}
7000035c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
7000035e:	bf00      	nop
70000360:	46bd      	mov	sp, r7
70000362:	f85d 7b04 	ldr.w	r7, [sp], #4
70000366:	4770      	bx	lr

70000368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
70000368:	b580      	push	{r7, lr}
7000036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
7000036c:	f000 f8a0 	bl	700004b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
70000370:	bf00      	nop
70000372:	bd80      	pop	{r7, pc}

70000374 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS interrupt.
  */
void OTG_HS_IRQHandler(void)
{
70000374:	b580      	push	{r7, lr}
70000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
70000378:	4802      	ldr	r0, [pc, #8]	@ (70000384 <OTG_HS_IRQHandler+0x10>)
7000037a:	f000 f9b0 	bl	700006de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
7000037e:	bf00      	nop
70000380:	bd80      	pop	{r7, pc}
70000382:	bf00      	nop
70000384:	24000030 	.word	0x24000030

70000388 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
70000388:	b480      	push	{r7}
7000038a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
7000038c:	4b07      	ldr	r3, [pc, #28]	@ (700003ac <SystemInit+0x24>)
7000038e:	4a08      	ldr	r2, [pc, #32]	@ (700003b0 <SystemInit+0x28>)
70000390:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
70000392:	4b06      	ldr	r3, [pc, #24]	@ (700003ac <SystemInit+0x24>)
70000394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
70000398:	4a04      	ldr	r2, [pc, #16]	@ (700003ac <SystemInit+0x24>)
7000039a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
7000039e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
700003a2:	bf00      	nop
700003a4:	46bd      	mov	sp, r7
700003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
700003aa:	4770      	bx	lr
700003ac:	e000ed00 	.word	0xe000ed00
700003b0:	70000000 	.word	0x70000000

700003b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
700003b4:	480d      	ldr	r0, [pc, #52]	@ (700003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
700003b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
700003b8:	f7ff ffe6 	bl	70000388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
700003bc:	480c      	ldr	r0, [pc, #48]	@ (700003f0 <LoopForever+0x6>)
  ldr r1, =_edata
700003be:	490d      	ldr	r1, [pc, #52]	@ (700003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
700003c0:	4a0d      	ldr	r2, [pc, #52]	@ (700003f8 <LoopForever+0xe>)
  movs r3, #0
700003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
700003c4:	e002      	b.n	700003cc <LoopCopyDataInit>

700003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
700003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
700003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
700003ca:	3304      	adds	r3, #4

700003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
700003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
700003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
700003d0:	d3f9      	bcc.n	700003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
700003d2:	4a0a      	ldr	r2, [pc, #40]	@ (700003fc <LoopForever+0x12>)
  ldr r4, =_ebss
700003d4:	4c0a      	ldr	r4, [pc, #40]	@ (70000400 <LoopForever+0x16>)
  movs r3, #0
700003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
700003d8:	e001      	b.n	700003de <LoopFillZerobss>

700003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
700003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
700003dc:	3204      	adds	r2, #4

700003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
700003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
700003e0:	d3fb      	bcc.n	700003da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
700003e2:	f003 ff0b 	bl	700041fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
700003e6:	f7ff ff83 	bl	700002f0 <main>

700003ea <LoopForever>:

LoopForever:
  b LoopForever
700003ea:	e7fe      	b.n	700003ea <LoopForever>
  ldr   r0, =_estack
700003ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
700003f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
700003f4:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
700003f8:	7000426c 	.word	0x7000426c
  ldr r2, =_sbss
700003fc:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
70000400:	24000514 	.word	0x24000514

70000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
70000404:	e7fe      	b.n	70000404 <ADC1_2_IRQHandler>

70000406 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
70000406:	b580      	push	{r7, lr}
70000408:	b082      	sub	sp, #8
7000040a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
7000040c:	2300      	movs	r3, #0
7000040e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
70000410:	2003      	movs	r0, #3
70000412:	f000 f933 	bl	7000067c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
70000416:	200f      	movs	r0, #15
70000418:	f000 f80e 	bl	70000438 <HAL_InitTick>
7000041c:	4603      	mov	r3, r0
7000041e:	2b00      	cmp	r3, #0
70000420:	d002      	beq.n	70000428 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
70000422:	2301      	movs	r3, #1
70000424:	71fb      	strb	r3, [r7, #7]
70000426:	e001      	b.n	7000042c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
70000428:	f7ff ff6e 	bl	70000308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
7000042c:	79fb      	ldrb	r3, [r7, #7]
}
7000042e:	4618      	mov	r0, r3
70000430:	3708      	adds	r7, #8
70000432:	46bd      	mov	sp, r7
70000434:	bd80      	pop	{r7, pc}
	...

70000438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
70000438:	b580      	push	{r7, lr}
7000043a:	b084      	sub	sp, #16
7000043c:	af00      	add	r7, sp, #0
7000043e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
70000440:	2300      	movs	r3, #0
70000442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
70000444:	4b17      	ldr	r3, [pc, #92]	@ (700004a4 <HAL_InitTick+0x6c>)
70000446:	781b      	ldrb	r3, [r3, #0]
70000448:	2b00      	cmp	r3, #0
7000044a:	d023      	beq.n	70000494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
7000044c:	4b16      	ldr	r3, [pc, #88]	@ (700004a8 <HAL_InitTick+0x70>)
7000044e:	681a      	ldr	r2, [r3, #0]
70000450:	4b14      	ldr	r3, [pc, #80]	@ (700004a4 <HAL_InitTick+0x6c>)
70000452:	781b      	ldrb	r3, [r3, #0]
70000454:	4619      	mov	r1, r3
70000456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
7000045a:	fbb3 f3f1 	udiv	r3, r3, r1
7000045e:	fbb2 f3f3 	udiv	r3, r2, r3
70000462:	4618      	mov	r0, r3
70000464:	f000 f92f 	bl	700006c6 <HAL_SYSTICK_Config>
70000468:	4603      	mov	r3, r0
7000046a:	2b00      	cmp	r3, #0
7000046c:	d10f      	bne.n	7000048e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
7000046e:	687b      	ldr	r3, [r7, #4]
70000470:	2b0f      	cmp	r3, #15
70000472:	d809      	bhi.n	70000488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
70000474:	2200      	movs	r2, #0
70000476:	6879      	ldr	r1, [r7, #4]
70000478:	f04f 30ff 	mov.w	r0, #4294967295
7000047c:	f000 f909 	bl	70000692 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
70000480:	4a0a      	ldr	r2, [pc, #40]	@ (700004ac <HAL_InitTick+0x74>)
70000482:	687b      	ldr	r3, [r7, #4]
70000484:	6013      	str	r3, [r2, #0]
70000486:	e007      	b.n	70000498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
70000488:	2301      	movs	r3, #1
7000048a:	73fb      	strb	r3, [r7, #15]
7000048c:	e004      	b.n	70000498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
7000048e:	2301      	movs	r3, #1
70000490:	73fb      	strb	r3, [r7, #15]
70000492:	e001      	b.n	70000498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
70000494:	2301      	movs	r3, #1
70000496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
70000498:	7bfb      	ldrb	r3, [r7, #15]
}
7000049a:	4618      	mov	r0, r3
7000049c:	3710      	adds	r7, #16
7000049e:	46bd      	mov	sp, r7
700004a0:	bd80      	pop	{r7, pc}
700004a2:	bf00      	nop
700004a4:	24000008 	.word	0x24000008
700004a8:	24000000 	.word	0x24000000
700004ac:	24000004 	.word	0x24000004

700004b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
700004b0:	b480      	push	{r7}
700004b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
700004b4:	4b06      	ldr	r3, [pc, #24]	@ (700004d0 <HAL_IncTick+0x20>)
700004b6:	781b      	ldrb	r3, [r3, #0]
700004b8:	461a      	mov	r2, r3
700004ba:	4b06      	ldr	r3, [pc, #24]	@ (700004d4 <HAL_IncTick+0x24>)
700004bc:	681b      	ldr	r3, [r3, #0]
700004be:	4413      	add	r3, r2
700004c0:	4a04      	ldr	r2, [pc, #16]	@ (700004d4 <HAL_IncTick+0x24>)
700004c2:	6013      	str	r3, [r2, #0]
}
700004c4:	bf00      	nop
700004c6:	46bd      	mov	sp, r7
700004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
700004cc:	4770      	bx	lr
700004ce:	bf00      	nop
700004d0:	24000008 	.word	0x24000008
700004d4:	24000028 	.word	0x24000028

700004d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
700004d8:	b480      	push	{r7}
700004da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
700004dc:	4b05      	ldr	r3, [pc, #20]	@ (700004f4 <HAL_SuspendTick+0x1c>)
700004de:	681b      	ldr	r3, [r3, #0]
700004e0:	4a04      	ldr	r2, [pc, #16]	@ (700004f4 <HAL_SuspendTick+0x1c>)
700004e2:	f023 0302 	bic.w	r3, r3, #2
700004e6:	6013      	str	r3, [r2, #0]
}
700004e8:	bf00      	nop
700004ea:	46bd      	mov	sp, r7
700004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
700004f0:	4770      	bx	lr
700004f2:	bf00      	nop
700004f4:	e000e010 	.word	0xe000e010

700004f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
700004f8:	b480      	push	{r7}
700004fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
700004fc:	4b05      	ldr	r3, [pc, #20]	@ (70000514 <HAL_ResumeTick+0x1c>)
700004fe:	681b      	ldr	r3, [r3, #0]
70000500:	4a04      	ldr	r2, [pc, #16]	@ (70000514 <HAL_ResumeTick+0x1c>)
70000502:	f043 0302 	orr.w	r3, r3, #2
70000506:	6013      	str	r3, [r2, #0]
}
70000508:	bf00      	nop
7000050a:	46bd      	mov	sp, r7
7000050c:	f85d 7b04 	ldr.w	r7, [sp], #4
70000510:	4770      	bx	lr
70000512:	bf00      	nop
70000514:	e000e010 	.word	0xe000e010

70000518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
70000518:	b480      	push	{r7}
7000051a:	b085      	sub	sp, #20
7000051c:	af00      	add	r7, sp, #0
7000051e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
70000520:	687b      	ldr	r3, [r7, #4]
70000522:	f003 0307 	and.w	r3, r3, #7
70000526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
70000528:	4b0b      	ldr	r3, [pc, #44]	@ (70000558 <__NVIC_SetPriorityGrouping+0x40>)
7000052a:	68db      	ldr	r3, [r3, #12]
7000052c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
7000052e:	68ba      	ldr	r2, [r7, #8]
70000530:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
70000534:	4013      	ands	r3, r2
70000536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
70000538:	68fb      	ldr	r3, [r7, #12]
7000053a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
7000053c:	68bb      	ldr	r3, [r7, #8]
7000053e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
70000540:	4b06      	ldr	r3, [pc, #24]	@ (7000055c <__NVIC_SetPriorityGrouping+0x44>)
70000542:	4313      	orrs	r3, r2
70000544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
70000546:	4a04      	ldr	r2, [pc, #16]	@ (70000558 <__NVIC_SetPriorityGrouping+0x40>)
70000548:	68bb      	ldr	r3, [r7, #8]
7000054a:	60d3      	str	r3, [r2, #12]
}
7000054c:	bf00      	nop
7000054e:	3714      	adds	r7, #20
70000550:	46bd      	mov	sp, r7
70000552:	f85d 7b04 	ldr.w	r7, [sp], #4
70000556:	4770      	bx	lr
70000558:	e000ed00 	.word	0xe000ed00
7000055c:	05fa0000 	.word	0x05fa0000

70000560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
70000560:	b480      	push	{r7}
70000562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
70000564:	4b04      	ldr	r3, [pc, #16]	@ (70000578 <__NVIC_GetPriorityGrouping+0x18>)
70000566:	68db      	ldr	r3, [r3, #12]
70000568:	0a1b      	lsrs	r3, r3, #8
7000056a:	f003 0307 	and.w	r3, r3, #7
}
7000056e:	4618      	mov	r0, r3
70000570:	46bd      	mov	sp, r7
70000572:	f85d 7b04 	ldr.w	r7, [sp], #4
70000576:	4770      	bx	lr
70000578:	e000ed00 	.word	0xe000ed00

7000057c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
7000057c:	b480      	push	{r7}
7000057e:	b083      	sub	sp, #12
70000580:	af00      	add	r7, sp, #0
70000582:	4603      	mov	r3, r0
70000584:	6039      	str	r1, [r7, #0]
70000586:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70000588:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000058c:	2b00      	cmp	r3, #0
7000058e:	db0a      	blt.n	700005a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70000590:	683b      	ldr	r3, [r7, #0]
70000592:	b2da      	uxtb	r2, r3
70000594:	490c      	ldr	r1, [pc, #48]	@ (700005c8 <__NVIC_SetPriority+0x4c>)
70000596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000059a:	0112      	lsls	r2, r2, #4
7000059c:	b2d2      	uxtb	r2, r2
7000059e:	440b      	add	r3, r1
700005a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
700005a4:	e00a      	b.n	700005bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
700005a6:	683b      	ldr	r3, [r7, #0]
700005a8:	b2da      	uxtb	r2, r3
700005aa:	4908      	ldr	r1, [pc, #32]	@ (700005cc <__NVIC_SetPriority+0x50>)
700005ac:	88fb      	ldrh	r3, [r7, #6]
700005ae:	f003 030f 	and.w	r3, r3, #15
700005b2:	3b04      	subs	r3, #4
700005b4:	0112      	lsls	r2, r2, #4
700005b6:	b2d2      	uxtb	r2, r2
700005b8:	440b      	add	r3, r1
700005ba:	761a      	strb	r2, [r3, #24]
}
700005bc:	bf00      	nop
700005be:	370c      	adds	r7, #12
700005c0:	46bd      	mov	sp, r7
700005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
700005c6:	4770      	bx	lr
700005c8:	e000e100 	.word	0xe000e100
700005cc:	e000ed00 	.word	0xe000ed00

700005d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
700005d0:	b480      	push	{r7}
700005d2:	b089      	sub	sp, #36	@ 0x24
700005d4:	af00      	add	r7, sp, #0
700005d6:	60f8      	str	r0, [r7, #12]
700005d8:	60b9      	str	r1, [r7, #8]
700005da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
700005dc:	68fb      	ldr	r3, [r7, #12]
700005de:	f003 0307 	and.w	r3, r3, #7
700005e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
700005e4:	69fb      	ldr	r3, [r7, #28]
700005e6:	f1c3 0307 	rsb	r3, r3, #7
700005ea:	2b04      	cmp	r3, #4
700005ec:	bf28      	it	cs
700005ee:	2304      	movcs	r3, #4
700005f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
700005f2:	69fb      	ldr	r3, [r7, #28]
700005f4:	3304      	adds	r3, #4
700005f6:	2b06      	cmp	r3, #6
700005f8:	d902      	bls.n	70000600 <NVIC_EncodePriority+0x30>
700005fa:	69fb      	ldr	r3, [r7, #28]
700005fc:	3b03      	subs	r3, #3
700005fe:	e000      	b.n	70000602 <NVIC_EncodePriority+0x32>
70000600:	2300      	movs	r3, #0
70000602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
70000604:	f04f 32ff 	mov.w	r2, #4294967295
70000608:	69bb      	ldr	r3, [r7, #24]
7000060a:	fa02 f303 	lsl.w	r3, r2, r3
7000060e:	43da      	mvns	r2, r3
70000610:	68bb      	ldr	r3, [r7, #8]
70000612:	401a      	ands	r2, r3
70000614:	697b      	ldr	r3, [r7, #20]
70000616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
70000618:	f04f 31ff 	mov.w	r1, #4294967295
7000061c:	697b      	ldr	r3, [r7, #20]
7000061e:	fa01 f303 	lsl.w	r3, r1, r3
70000622:	43d9      	mvns	r1, r3
70000624:	687b      	ldr	r3, [r7, #4]
70000626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
70000628:	4313      	orrs	r3, r2
         );
}
7000062a:	4618      	mov	r0, r3
7000062c:	3724      	adds	r7, #36	@ 0x24
7000062e:	46bd      	mov	sp, r7
70000630:	f85d 7b04 	ldr.w	r7, [sp], #4
70000634:	4770      	bx	lr
	...

70000638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
70000638:	b580      	push	{r7, lr}
7000063a:	b082      	sub	sp, #8
7000063c:	af00      	add	r7, sp, #0
7000063e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
70000640:	687b      	ldr	r3, [r7, #4]
70000642:	3b01      	subs	r3, #1
70000644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70000648:	d301      	bcc.n	7000064e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
7000064a:	2301      	movs	r3, #1
7000064c:	e00f      	b.n	7000066e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
7000064e:	4a0a      	ldr	r2, [pc, #40]	@ (70000678 <SysTick_Config+0x40>)
70000650:	687b      	ldr	r3, [r7, #4]
70000652:	3b01      	subs	r3, #1
70000654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
70000656:	210f      	movs	r1, #15
70000658:	f04f 30ff 	mov.w	r0, #4294967295
7000065c:	f7ff ff8e 	bl	7000057c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
70000660:	4b05      	ldr	r3, [pc, #20]	@ (70000678 <SysTick_Config+0x40>)
70000662:	2200      	movs	r2, #0
70000664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
70000666:	4b04      	ldr	r3, [pc, #16]	@ (70000678 <SysTick_Config+0x40>)
70000668:	2207      	movs	r2, #7
7000066a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
7000066c:	2300      	movs	r3, #0
}
7000066e:	4618      	mov	r0, r3
70000670:	3708      	adds	r7, #8
70000672:	46bd      	mov	sp, r7
70000674:	bd80      	pop	{r7, pc}
70000676:	bf00      	nop
70000678:	e000e010 	.word	0xe000e010

7000067c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
7000067c:	b580      	push	{r7, lr}
7000067e:	b082      	sub	sp, #8
70000680:	af00      	add	r7, sp, #0
70000682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
70000684:	6878      	ldr	r0, [r7, #4]
70000686:	f7ff ff47 	bl	70000518 <__NVIC_SetPriorityGrouping>
}
7000068a:	bf00      	nop
7000068c:	3708      	adds	r7, #8
7000068e:	46bd      	mov	sp, r7
70000690:	bd80      	pop	{r7, pc}

70000692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
70000692:	b580      	push	{r7, lr}
70000694:	b086      	sub	sp, #24
70000696:	af00      	add	r7, sp, #0
70000698:	4603      	mov	r3, r0
7000069a:	60b9      	str	r1, [r7, #8]
7000069c:	607a      	str	r2, [r7, #4]
7000069e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
700006a0:	f7ff ff5e 	bl	70000560 <__NVIC_GetPriorityGrouping>
700006a4:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
700006a6:	687a      	ldr	r2, [r7, #4]
700006a8:	68b9      	ldr	r1, [r7, #8]
700006aa:	6978      	ldr	r0, [r7, #20]
700006ac:	f7ff ff90 	bl	700005d0 <NVIC_EncodePriority>
700006b0:	4602      	mov	r2, r0
700006b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
700006b6:	4611      	mov	r1, r2
700006b8:	4618      	mov	r0, r3
700006ba:	f7ff ff5f 	bl	7000057c <__NVIC_SetPriority>
}
700006be:	bf00      	nop
700006c0:	3718      	adds	r7, #24
700006c2:	46bd      	mov	sp, r7
700006c4:	bd80      	pop	{r7, pc}

700006c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
700006c6:	b580      	push	{r7, lr}
700006c8:	b082      	sub	sp, #8
700006ca:	af00      	add	r7, sp, #0
700006cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
700006ce:	6878      	ldr	r0, [r7, #4]
700006d0:	f7ff ffb2 	bl	70000638 <SysTick_Config>
700006d4:	4603      	mov	r3, r0
}
700006d6:	4618      	mov	r0, r3
700006d8:	3708      	adds	r7, #8
700006da:	46bd      	mov	sp, r7
700006dc:	bd80      	pop	{r7, pc}

700006de <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
700006de:	b590      	push	{r4, r7, lr}
700006e0:	b08d      	sub	sp, #52	@ 0x34
700006e2:	af00      	add	r7, sp, #0
700006e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
700006e6:	687b      	ldr	r3, [r7, #4]
700006e8:	681b      	ldr	r3, [r3, #0]
700006ea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
700006ec:	6a3b      	ldr	r3, [r7, #32]
700006ee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
700006f0:	687b      	ldr	r3, [r7, #4]
700006f2:	681b      	ldr	r3, [r3, #0]
700006f4:	4618      	mov	r0, r3
700006f6:	f002 f8f4 	bl	700028e2 <USB_GetMode>
700006fa:	4603      	mov	r3, r0
700006fc:	2b00      	cmp	r3, #0
700006fe:	f040 84b9 	bne.w	70001074 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
70000702:	687b      	ldr	r3, [r7, #4]
70000704:	681b      	ldr	r3, [r3, #0]
70000706:	4618      	mov	r0, r3
70000708:	f002 f858 	bl	700027bc <USB_ReadInterrupts>
7000070c:	4603      	mov	r3, r0
7000070e:	2b00      	cmp	r3, #0
70000710:	f000 84af 	beq.w	70001072 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
70000714:	69fb      	ldr	r3, [r7, #28]
70000716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000071a:	689b      	ldr	r3, [r3, #8]
7000071c:	0a1b      	lsrs	r3, r3, #8
7000071e:	f3c3 020d 	ubfx	r2, r3, #0, #14
70000722:	687b      	ldr	r3, [r7, #4]
70000724:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
70000728:	687b      	ldr	r3, [r7, #4]
7000072a:	681b      	ldr	r3, [r3, #0]
7000072c:	4618      	mov	r0, r3
7000072e:	f002 f845 	bl	700027bc <USB_ReadInterrupts>
70000732:	4603      	mov	r3, r0
70000734:	f003 0302 	and.w	r3, r3, #2
70000738:	2b02      	cmp	r3, #2
7000073a:	d107      	bne.n	7000074c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
7000073c:	687b      	ldr	r3, [r7, #4]
7000073e:	681b      	ldr	r3, [r3, #0]
70000740:	695a      	ldr	r2, [r3, #20]
70000742:	687b      	ldr	r3, [r7, #4]
70000744:	681b      	ldr	r3, [r3, #0]
70000746:	f002 0202 	and.w	r2, r2, #2
7000074a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
7000074c:	687b      	ldr	r3, [r7, #4]
7000074e:	681b      	ldr	r3, [r3, #0]
70000750:	4618      	mov	r0, r3
70000752:	f002 f833 	bl	700027bc <USB_ReadInterrupts>
70000756:	4603      	mov	r3, r0
70000758:	f003 0310 	and.w	r3, r3, #16
7000075c:	2b10      	cmp	r3, #16
7000075e:	d161      	bne.n	70000824 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
70000760:	687b      	ldr	r3, [r7, #4]
70000762:	681b      	ldr	r3, [r3, #0]
70000764:	699a      	ldr	r2, [r3, #24]
70000766:	687b      	ldr	r3, [r7, #4]
70000768:	681b      	ldr	r3, [r3, #0]
7000076a:	f022 0210 	bic.w	r2, r2, #16
7000076e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
70000770:	6a3b      	ldr	r3, [r7, #32]
70000772:	6a1b      	ldr	r3, [r3, #32]
70000774:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
70000776:	69bb      	ldr	r3, [r7, #24]
70000778:	f003 020f 	and.w	r2, r3, #15
7000077c:	4613      	mov	r3, r2
7000077e:	00db      	lsls	r3, r3, #3
70000780:	4413      	add	r3, r2
70000782:	009b      	lsls	r3, r3, #2
70000784:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70000788:	687a      	ldr	r2, [r7, #4]
7000078a:	4413      	add	r3, r2
7000078c:	3304      	adds	r3, #4
7000078e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
70000790:	69bb      	ldr	r3, [r7, #24]
70000792:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
70000796:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000079a:	d124      	bne.n	700007e6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
7000079c:	69ba      	ldr	r2, [r7, #24]
7000079e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
700007a2:	4013      	ands	r3, r2
700007a4:	2b00      	cmp	r3, #0
700007a6:	d035      	beq.n	70000814 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
700007a8:	697b      	ldr	r3, [r7, #20]
700007aa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
700007ac:	69bb      	ldr	r3, [r7, #24]
700007ae:	091b      	lsrs	r3, r3, #4
700007b0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
700007b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
700007b6:	b29b      	uxth	r3, r3
700007b8:	461a      	mov	r2, r3
700007ba:	6a38      	ldr	r0, [r7, #32]
700007bc:	f001 feac 	bl	70002518 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
700007c0:	697b      	ldr	r3, [r7, #20]
700007c2:	68da      	ldr	r2, [r3, #12]
700007c4:	69bb      	ldr	r3, [r7, #24]
700007c6:	091b      	lsrs	r3, r3, #4
700007c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
700007cc:	441a      	add	r2, r3
700007ce:	697b      	ldr	r3, [r7, #20]
700007d0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
700007d2:	697b      	ldr	r3, [r7, #20]
700007d4:	695a      	ldr	r2, [r3, #20]
700007d6:	69bb      	ldr	r3, [r7, #24]
700007d8:	091b      	lsrs	r3, r3, #4
700007da:	f3c3 030a 	ubfx	r3, r3, #0, #11
700007de:	441a      	add	r2, r3
700007e0:	697b      	ldr	r3, [r7, #20]
700007e2:	615a      	str	r2, [r3, #20]
700007e4:	e016      	b.n	70000814 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
700007e6:	69bb      	ldr	r3, [r7, #24]
700007e8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
700007ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
700007f0:	d110      	bne.n	70000814 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
700007f2:	687b      	ldr	r3, [r7, #4]
700007f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
700007f8:	2208      	movs	r2, #8
700007fa:	4619      	mov	r1, r3
700007fc:	6a38      	ldr	r0, [r7, #32]
700007fe:	f001 fe8b 	bl	70002518 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
70000802:	697b      	ldr	r3, [r7, #20]
70000804:	695a      	ldr	r2, [r3, #20]
70000806:	69bb      	ldr	r3, [r7, #24]
70000808:	091b      	lsrs	r3, r3, #4
7000080a:	f3c3 030a 	ubfx	r3, r3, #0, #11
7000080e:	441a      	add	r2, r3
70000810:	697b      	ldr	r3, [r7, #20]
70000812:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
70000814:	687b      	ldr	r3, [r7, #4]
70000816:	681b      	ldr	r3, [r3, #0]
70000818:	699a      	ldr	r2, [r3, #24]
7000081a:	687b      	ldr	r3, [r7, #4]
7000081c:	681b      	ldr	r3, [r3, #0]
7000081e:	f042 0210 	orr.w	r2, r2, #16
70000822:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
70000824:	687b      	ldr	r3, [r7, #4]
70000826:	681b      	ldr	r3, [r3, #0]
70000828:	4618      	mov	r0, r3
7000082a:	f001 ffc7 	bl	700027bc <USB_ReadInterrupts>
7000082e:	4603      	mov	r3, r0
70000830:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
70000834:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
70000838:	f040 80a7 	bne.w	7000098a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
7000083c:	2300      	movs	r3, #0
7000083e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
70000840:	687b      	ldr	r3, [r7, #4]
70000842:	681b      	ldr	r3, [r3, #0]
70000844:	4618      	mov	r0, r3
70000846:	f001 ffcc 	bl	700027e2 <USB_ReadDevAllOutEpInterrupt>
7000084a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
7000084c:	e099      	b.n	70000982 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
7000084e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000850:	f003 0301 	and.w	r3, r3, #1
70000854:	2b00      	cmp	r3, #0
70000856:	f000 808e 	beq.w	70000976 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
7000085a:	687b      	ldr	r3, [r7, #4]
7000085c:	681b      	ldr	r3, [r3, #0]
7000085e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000860:	b2d2      	uxtb	r2, r2
70000862:	4611      	mov	r1, r2
70000864:	4618      	mov	r0, r3
70000866:	f001 fff0 	bl	7000284a <USB_ReadDevOutEPInterrupt>
7000086a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
7000086c:	693b      	ldr	r3, [r7, #16]
7000086e:	f003 0301 	and.w	r3, r3, #1
70000872:	2b00      	cmp	r3, #0
70000874:	d00c      	beq.n	70000890 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
70000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000878:	015a      	lsls	r2, r3, #5
7000087a:	69fb      	ldr	r3, [r7, #28]
7000087c:	4413      	add	r3, r2
7000087e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000882:	461a      	mov	r2, r3
70000884:	2301      	movs	r3, #1
70000886:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
70000888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000088a:	6878      	ldr	r0, [r7, #4]
7000088c:	f000 fe6e 	bl	7000156c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
70000890:	693b      	ldr	r3, [r7, #16]
70000892:	f003 0308 	and.w	r3, r3, #8
70000896:	2b00      	cmp	r3, #0
70000898:	d00c      	beq.n	700008b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
7000089a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000089c:	015a      	lsls	r2, r3, #5
7000089e:	69fb      	ldr	r3, [r7, #28]
700008a0:	4413      	add	r3, r2
700008a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700008a6:	461a      	mov	r2, r3
700008a8:	2308      	movs	r3, #8
700008aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
700008ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
700008ae:	6878      	ldr	r0, [r7, #4]
700008b0:	f000 ff44 	bl	7000173c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
700008b4:	693b      	ldr	r3, [r7, #16]
700008b6:	f003 0310 	and.w	r3, r3, #16
700008ba:	2b00      	cmp	r3, #0
700008bc:	d008      	beq.n	700008d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
700008be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700008c0:	015a      	lsls	r2, r3, #5
700008c2:	69fb      	ldr	r3, [r7, #28]
700008c4:	4413      	add	r3, r2
700008c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700008ca:	461a      	mov	r2, r3
700008cc:	2310      	movs	r3, #16
700008ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
700008d0:	693b      	ldr	r3, [r7, #16]
700008d2:	f003 0302 	and.w	r3, r3, #2
700008d6:	2b00      	cmp	r3, #0
700008d8:	d030      	beq.n	7000093c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
700008da:	6a3b      	ldr	r3, [r7, #32]
700008dc:	695b      	ldr	r3, [r3, #20]
700008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700008e2:	2b80      	cmp	r3, #128	@ 0x80
700008e4:	d109      	bne.n	700008fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
700008e6:	69fb      	ldr	r3, [r7, #28]
700008e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700008ec:	685b      	ldr	r3, [r3, #4]
700008ee:	69fa      	ldr	r2, [r7, #28]
700008f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
700008f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
700008f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
700008fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700008fc:	4613      	mov	r3, r2
700008fe:	00db      	lsls	r3, r3, #3
70000900:	4413      	add	r3, r2
70000902:	009b      	lsls	r3, r3, #2
70000904:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70000908:	687a      	ldr	r2, [r7, #4]
7000090a:	4413      	add	r3, r2
7000090c:	3304      	adds	r3, #4
7000090e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
70000910:	697b      	ldr	r3, [r7, #20]
70000912:	78db      	ldrb	r3, [r3, #3]
70000914:	2b01      	cmp	r3, #1
70000916:	d108      	bne.n	7000092a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
70000918:	697b      	ldr	r3, [r7, #20]
7000091a:	2200      	movs	r2, #0
7000091c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
7000091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000920:	b2db      	uxtb	r3, r3
70000922:	4619      	mov	r1, r3
70000924:	6878      	ldr	r0, [r7, #4]
70000926:	f003 fb0b 	bl	70003f40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
7000092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000092c:	015a      	lsls	r2, r3, #5
7000092e:	69fb      	ldr	r3, [r7, #28]
70000930:	4413      	add	r3, r2
70000932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000936:	461a      	mov	r2, r3
70000938:	2302      	movs	r3, #2
7000093a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
7000093c:	693b      	ldr	r3, [r7, #16]
7000093e:	f003 0320 	and.w	r3, r3, #32
70000942:	2b00      	cmp	r3, #0
70000944:	d008      	beq.n	70000958 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
70000946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000948:	015a      	lsls	r2, r3, #5
7000094a:	69fb      	ldr	r3, [r7, #28]
7000094c:	4413      	add	r3, r2
7000094e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000952:	461a      	mov	r2, r3
70000954:	2320      	movs	r3, #32
70000956:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
70000958:	693b      	ldr	r3, [r7, #16]
7000095a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
7000095e:	2b00      	cmp	r3, #0
70000960:	d009      	beq.n	70000976 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
70000962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000964:	015a      	lsls	r2, r3, #5
70000966:	69fb      	ldr	r3, [r7, #28]
70000968:	4413      	add	r3, r2
7000096a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000096e:	461a      	mov	r2, r3
70000970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70000974:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
70000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000978:	3301      	adds	r3, #1
7000097a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
7000097c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
7000097e:	085b      	lsrs	r3, r3, #1
70000980:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
70000982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000984:	2b00      	cmp	r3, #0
70000986:	f47f af62 	bne.w	7000084e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
7000098a:	687b      	ldr	r3, [r7, #4]
7000098c:	681b      	ldr	r3, [r3, #0]
7000098e:	4618      	mov	r0, r3
70000990:	f001 ff14 	bl	700027bc <USB_ReadInterrupts>
70000994:	4603      	mov	r3, r0
70000996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
7000099a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000099e:	f040 80db 	bne.w	70000b58 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
700009a2:	687b      	ldr	r3, [r7, #4]
700009a4:	681b      	ldr	r3, [r3, #0]
700009a6:	4618      	mov	r0, r3
700009a8:	f001 ff35 	bl	70002816 <USB_ReadDevAllInEpInterrupt>
700009ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
700009ae:	2300      	movs	r3, #0
700009b0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
700009b2:	e0cd      	b.n	70000b50 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
700009b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
700009b6:	f003 0301 	and.w	r3, r3, #1
700009ba:	2b00      	cmp	r3, #0
700009bc:	f000 80c2 	beq.w	70000b44 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
700009c0:	687b      	ldr	r3, [r7, #4]
700009c2:	681b      	ldr	r3, [r3, #0]
700009c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700009c6:	b2d2      	uxtb	r2, r2
700009c8:	4611      	mov	r1, r2
700009ca:	4618      	mov	r0, r3
700009cc:	f001 ff5b 	bl	70002886 <USB_ReadDevInEPInterrupt>
700009d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
700009d2:	693b      	ldr	r3, [r7, #16]
700009d4:	f003 0301 	and.w	r3, r3, #1
700009d8:	2b00      	cmp	r3, #0
700009da:	d057      	beq.n	70000a8c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
700009dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700009de:	f003 030f 	and.w	r3, r3, #15
700009e2:	2201      	movs	r2, #1
700009e4:	fa02 f303 	lsl.w	r3, r2, r3
700009e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
700009ea:	69fb      	ldr	r3, [r7, #28]
700009ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700009f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
700009f2:	68fb      	ldr	r3, [r7, #12]
700009f4:	43db      	mvns	r3, r3
700009f6:	69f9      	ldr	r1, [r7, #28]
700009f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
700009fc:	4013      	ands	r3, r2
700009fe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
70000a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a02:	015a      	lsls	r2, r3, #5
70000a04:	69fb      	ldr	r3, [r7, #28]
70000a06:	4413      	add	r3, r2
70000a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000a0c:	461a      	mov	r2, r3
70000a0e:	2301      	movs	r3, #1
70000a10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
70000a12:	687b      	ldr	r3, [r7, #4]
70000a14:	799b      	ldrb	r3, [r3, #6]
70000a16:	2b01      	cmp	r3, #1
70000a18:	d132      	bne.n	70000a80 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
70000a1a:	6879      	ldr	r1, [r7, #4]
70000a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000a1e:	4613      	mov	r3, r2
70000a20:	00db      	lsls	r3, r3, #3
70000a22:	4413      	add	r3, r2
70000a24:	009b      	lsls	r3, r3, #2
70000a26:	440b      	add	r3, r1
70000a28:	3320      	adds	r3, #32
70000a2a:	6819      	ldr	r1, [r3, #0]
70000a2c:	6878      	ldr	r0, [r7, #4]
70000a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000a30:	4613      	mov	r3, r2
70000a32:	00db      	lsls	r3, r3, #3
70000a34:	4413      	add	r3, r2
70000a36:	009b      	lsls	r3, r3, #2
70000a38:	4403      	add	r3, r0
70000a3a:	331c      	adds	r3, #28
70000a3c:	681b      	ldr	r3, [r3, #0]
70000a3e:	4419      	add	r1, r3
70000a40:	6878      	ldr	r0, [r7, #4]
70000a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000a44:	4613      	mov	r3, r2
70000a46:	00db      	lsls	r3, r3, #3
70000a48:	4413      	add	r3, r2
70000a4a:	009b      	lsls	r3, r3, #2
70000a4c:	4403      	add	r3, r0
70000a4e:	3320      	adds	r3, #32
70000a50:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
70000a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a54:	2b00      	cmp	r3, #0
70000a56:	d113      	bne.n	70000a80 <HAL_PCD_IRQHandler+0x3a2>
70000a58:	6879      	ldr	r1, [r7, #4]
70000a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000a5c:	4613      	mov	r3, r2
70000a5e:	00db      	lsls	r3, r3, #3
70000a60:	4413      	add	r3, r2
70000a62:	009b      	lsls	r3, r3, #2
70000a64:	440b      	add	r3, r1
70000a66:	3324      	adds	r3, #36	@ 0x24
70000a68:	681b      	ldr	r3, [r3, #0]
70000a6a:	2b00      	cmp	r3, #0
70000a6c:	d108      	bne.n	70000a80 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
70000a6e:	687b      	ldr	r3, [r7, #4]
70000a70:	6818      	ldr	r0, [r3, #0]
70000a72:	687b      	ldr	r3, [r7, #4]
70000a74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70000a78:	461a      	mov	r2, r3
70000a7a:	2101      	movs	r1, #1
70000a7c:	f001 ff64 	bl	70002948 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
70000a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a82:	b2db      	uxtb	r3, r3
70000a84:	4619      	mov	r1, r3
70000a86:	6878      	ldr	r0, [r7, #4]
70000a88:	f003 f9c6 	bl	70003e18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
70000a8c:	693b      	ldr	r3, [r7, #16]
70000a8e:	f003 0308 	and.w	r3, r3, #8
70000a92:	2b00      	cmp	r3, #0
70000a94:	d008      	beq.n	70000aa8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
70000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a98:	015a      	lsls	r2, r3, #5
70000a9a:	69fb      	ldr	r3, [r7, #28]
70000a9c:	4413      	add	r3, r2
70000a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000aa2:	461a      	mov	r2, r3
70000aa4:	2308      	movs	r3, #8
70000aa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
70000aa8:	693b      	ldr	r3, [r7, #16]
70000aaa:	f003 0310 	and.w	r3, r3, #16
70000aae:	2b00      	cmp	r3, #0
70000ab0:	d008      	beq.n	70000ac4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
70000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ab4:	015a      	lsls	r2, r3, #5
70000ab6:	69fb      	ldr	r3, [r7, #28]
70000ab8:	4413      	add	r3, r2
70000aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000abe:	461a      	mov	r2, r3
70000ac0:	2310      	movs	r3, #16
70000ac2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
70000ac4:	693b      	ldr	r3, [r7, #16]
70000ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70000aca:	2b00      	cmp	r3, #0
70000acc:	d008      	beq.n	70000ae0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
70000ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ad0:	015a      	lsls	r2, r3, #5
70000ad2:	69fb      	ldr	r3, [r7, #28]
70000ad4:	4413      	add	r3, r2
70000ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000ada:	461a      	mov	r2, r3
70000adc:	2340      	movs	r3, #64	@ 0x40
70000ade:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
70000ae0:	693b      	ldr	r3, [r7, #16]
70000ae2:	f003 0302 	and.w	r3, r3, #2
70000ae6:	2b00      	cmp	r3, #0
70000ae8:	d023      	beq.n	70000b32 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
70000aea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70000aec:	6a38      	ldr	r0, [r7, #32]
70000aee:	f001 f8a7 	bl	70001c40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
70000af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000af4:	4613      	mov	r3, r2
70000af6:	00db      	lsls	r3, r3, #3
70000af8:	4413      	add	r3, r2
70000afa:	009b      	lsls	r3, r3, #2
70000afc:	3310      	adds	r3, #16
70000afe:	687a      	ldr	r2, [r7, #4]
70000b00:	4413      	add	r3, r2
70000b02:	3304      	adds	r3, #4
70000b04:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
70000b06:	697b      	ldr	r3, [r7, #20]
70000b08:	78db      	ldrb	r3, [r3, #3]
70000b0a:	2b01      	cmp	r3, #1
70000b0c:	d108      	bne.n	70000b20 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
70000b0e:	697b      	ldr	r3, [r7, #20]
70000b10:	2200      	movs	r2, #0
70000b12:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
70000b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b16:	b2db      	uxtb	r3, r3
70000b18:	4619      	mov	r1, r3
70000b1a:	6878      	ldr	r0, [r7, #4]
70000b1c:	f003 fa22 	bl	70003f64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
70000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b22:	015a      	lsls	r2, r3, #5
70000b24:	69fb      	ldr	r3, [r7, #28]
70000b26:	4413      	add	r3, r2
70000b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000b2c:	461a      	mov	r2, r3
70000b2e:	2302      	movs	r3, #2
70000b30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
70000b32:	693b      	ldr	r3, [r7, #16]
70000b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70000b38:	2b00      	cmp	r3, #0
70000b3a:	d003      	beq.n	70000b44 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
70000b3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70000b3e:	6878      	ldr	r0, [r7, #4]
70000b40:	f000 fc88 	bl	70001454 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
70000b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b46:	3301      	adds	r3, #1
70000b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
70000b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000b4c:	085b      	lsrs	r3, r3, #1
70000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
70000b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000b52:	2b00      	cmp	r3, #0
70000b54:	f47f af2e 	bne.w	700009b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
70000b58:	687b      	ldr	r3, [r7, #4]
70000b5a:	681b      	ldr	r3, [r3, #0]
70000b5c:	4618      	mov	r0, r3
70000b5e:	f001 fe2d 	bl	700027bc <USB_ReadInterrupts>
70000b62:	4603      	mov	r3, r0
70000b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70000b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70000b6c:	d122      	bne.n	70000bb4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
70000b6e:	69fb      	ldr	r3, [r7, #28]
70000b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000b74:	685b      	ldr	r3, [r3, #4]
70000b76:	69fa      	ldr	r2, [r7, #28]
70000b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000b7c:	f023 0301 	bic.w	r3, r3, #1
70000b80:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
70000b82:	687b      	ldr	r3, [r7, #4]
70000b84:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
70000b88:	2b01      	cmp	r3, #1
70000b8a:	d108      	bne.n	70000b9e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
70000b8c:	687b      	ldr	r3, [r7, #4]
70000b8e:	2200      	movs	r2, #0
70000b90:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
70000b94:	2100      	movs	r1, #0
70000b96:	6878      	ldr	r0, [r7, #4]
70000b98:	f000 fe16 	bl	700017c8 <HAL_PCDEx_LPM_Callback>
70000b9c:	e002      	b.n	70000ba4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
70000b9e:	6878      	ldr	r0, [r7, #4]
70000ba0:	f003 f9a6 	bl	70003ef0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
70000ba4:	687b      	ldr	r3, [r7, #4]
70000ba6:	681b      	ldr	r3, [r3, #0]
70000ba8:	695a      	ldr	r2, [r3, #20]
70000baa:	687b      	ldr	r3, [r7, #4]
70000bac:	681b      	ldr	r3, [r3, #0]
70000bae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
70000bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
70000bb4:	687b      	ldr	r3, [r7, #4]
70000bb6:	681b      	ldr	r3, [r3, #0]
70000bb8:	4618      	mov	r0, r3
70000bba:	f001 fdff 	bl	700027bc <USB_ReadInterrupts>
70000bbe:	4603      	mov	r3, r0
70000bc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70000bc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
70000bc8:	d112      	bne.n	70000bf0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
70000bca:	69fb      	ldr	r3, [r7, #28]
70000bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000bd0:	689b      	ldr	r3, [r3, #8]
70000bd2:	f003 0301 	and.w	r3, r3, #1
70000bd6:	2b01      	cmp	r3, #1
70000bd8:	d102      	bne.n	70000be0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
70000bda:	6878      	ldr	r0, [r7, #4]
70000bdc:	f003 f96c 	bl	70003eb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
70000be0:	687b      	ldr	r3, [r7, #4]
70000be2:	681b      	ldr	r3, [r3, #0]
70000be4:	695a      	ldr	r2, [r3, #20]
70000be6:	687b      	ldr	r3, [r7, #4]
70000be8:	681b      	ldr	r3, [r3, #0]
70000bea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
70000bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
70000bf0:	687b      	ldr	r3, [r7, #4]
70000bf2:	681b      	ldr	r3, [r3, #0]
70000bf4:	4618      	mov	r0, r3
70000bf6:	f001 fde1 	bl	700027bc <USB_ReadInterrupts>
70000bfa:	4603      	mov	r3, r0
70000bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70000c00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70000c04:	d121      	bne.n	70000c4a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
70000c06:	687b      	ldr	r3, [r7, #4]
70000c08:	681b      	ldr	r3, [r3, #0]
70000c0a:	695a      	ldr	r2, [r3, #20]
70000c0c:	687b      	ldr	r3, [r7, #4]
70000c0e:	681b      	ldr	r3, [r3, #0]
70000c10:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
70000c14:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
70000c16:	687b      	ldr	r3, [r7, #4]
70000c18:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
70000c1c:	2b00      	cmp	r3, #0
70000c1e:	d111      	bne.n	70000c44 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
70000c20:	687b      	ldr	r3, [r7, #4]
70000c22:	2201      	movs	r2, #1
70000c24:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
70000c28:	687b      	ldr	r3, [r7, #4]
70000c2a:	681b      	ldr	r3, [r3, #0]
70000c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70000c2e:	089b      	lsrs	r3, r3, #2
70000c30:	f003 020f 	and.w	r2, r3, #15
70000c34:	687b      	ldr	r3, [r7, #4]
70000c36:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
70000c3a:	2101      	movs	r1, #1
70000c3c:	6878      	ldr	r0, [r7, #4]
70000c3e:	f000 fdc3 	bl	700017c8 <HAL_PCDEx_LPM_Callback>
70000c42:	e002      	b.n	70000c4a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
70000c44:	6878      	ldr	r0, [r7, #4]
70000c46:	f003 f937 	bl	70003eb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
70000c4a:	687b      	ldr	r3, [r7, #4]
70000c4c:	681b      	ldr	r3, [r3, #0]
70000c4e:	4618      	mov	r0, r3
70000c50:	f001 fdb4 	bl	700027bc <USB_ReadInterrupts>
70000c54:	4603      	mov	r3, r0
70000c56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70000c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70000c5e:	f040 80b7 	bne.w	70000dd0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
70000c62:	69fb      	ldr	r3, [r7, #28]
70000c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000c68:	685b      	ldr	r3, [r3, #4]
70000c6a:	69fa      	ldr	r2, [r7, #28]
70000c6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000c70:	f023 0301 	bic.w	r3, r3, #1
70000c74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
70000c76:	687b      	ldr	r3, [r7, #4]
70000c78:	681b      	ldr	r3, [r3, #0]
70000c7a:	2110      	movs	r1, #16
70000c7c:	4618      	mov	r0, r3
70000c7e:	f000 ffdf 	bl	70001c40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
70000c82:	2300      	movs	r3, #0
70000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
70000c86:	e046      	b.n	70000d16 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
70000c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000c8a:	015a      	lsls	r2, r3, #5
70000c8c:	69fb      	ldr	r3, [r7, #28]
70000c8e:	4413      	add	r3, r2
70000c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000c94:	461a      	mov	r2, r3
70000c96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
70000c9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
70000c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000c9e:	015a      	lsls	r2, r3, #5
70000ca0:	69fb      	ldr	r3, [r7, #28]
70000ca2:	4413      	add	r3, r2
70000ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000ca8:	681b      	ldr	r3, [r3, #0]
70000caa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70000cac:	0151      	lsls	r1, r2, #5
70000cae:	69fa      	ldr	r2, [r7, #28]
70000cb0:	440a      	add	r2, r1
70000cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70000cb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70000cba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
70000cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000cbe:	015a      	lsls	r2, r3, #5
70000cc0:	69fb      	ldr	r3, [r7, #28]
70000cc2:	4413      	add	r3, r2
70000cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000cc8:	461a      	mov	r2, r3
70000cca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
70000cce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
70000cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000cd2:	015a      	lsls	r2, r3, #5
70000cd4:	69fb      	ldr	r3, [r7, #28]
70000cd6:	4413      	add	r3, r2
70000cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000cdc:	681b      	ldr	r3, [r3, #0]
70000cde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70000ce0:	0151      	lsls	r1, r2, #5
70000ce2:	69fa      	ldr	r2, [r7, #28]
70000ce4:	440a      	add	r2, r1
70000ce6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70000cea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70000cee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
70000cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000cf2:	015a      	lsls	r2, r3, #5
70000cf4:	69fb      	ldr	r3, [r7, #28]
70000cf6:	4413      	add	r3, r2
70000cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000cfc:	681b      	ldr	r3, [r3, #0]
70000cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70000d00:	0151      	lsls	r1, r2, #5
70000d02:	69fa      	ldr	r2, [r7, #28]
70000d04:	440a      	add	r2, r1
70000d06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70000d0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70000d0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
70000d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000d12:	3301      	adds	r3, #1
70000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
70000d16:	687b      	ldr	r3, [r7, #4]
70000d18:	791b      	ldrb	r3, [r3, #4]
70000d1a:	461a      	mov	r2, r3
70000d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000d1e:	4293      	cmp	r3, r2
70000d20:	d3b2      	bcc.n	70000c88 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
70000d22:	69fb      	ldr	r3, [r7, #28]
70000d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d28:	69db      	ldr	r3, [r3, #28]
70000d2a:	69fa      	ldr	r2, [r7, #28]
70000d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000d30:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
70000d34:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
70000d36:	687b      	ldr	r3, [r7, #4]
70000d38:	7bdb      	ldrb	r3, [r3, #15]
70000d3a:	2b00      	cmp	r3, #0
70000d3c:	d016      	beq.n	70000d6c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
70000d3e:	69fb      	ldr	r3, [r7, #28]
70000d40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70000d48:	69fa      	ldr	r2, [r7, #28]
70000d4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000d4e:	f043 030b 	orr.w	r3, r3, #11
70000d52:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
70000d56:	69fb      	ldr	r3, [r7, #28]
70000d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70000d5e:	69fa      	ldr	r2, [r7, #28]
70000d60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000d64:	f043 030b 	orr.w	r3, r3, #11
70000d68:	6453      	str	r3, [r2, #68]	@ 0x44
70000d6a:	e015      	b.n	70000d98 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
70000d6c:	69fb      	ldr	r3, [r7, #28]
70000d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d72:	695a      	ldr	r2, [r3, #20]
70000d74:	69fb      	ldr	r3, [r7, #28]
70000d76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d7a:	4619      	mov	r1, r3
70000d7c:	f242 032b 	movw	r3, #8235	@ 0x202b
70000d80:	4313      	orrs	r3, r2
70000d82:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
70000d84:	69fb      	ldr	r3, [r7, #28]
70000d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d8a:	691b      	ldr	r3, [r3, #16]
70000d8c:	69fa      	ldr	r2, [r7, #28]
70000d8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000d92:	f043 030b 	orr.w	r3, r3, #11
70000d96:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
70000d98:	69fb      	ldr	r3, [r7, #28]
70000d9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d9e:	681b      	ldr	r3, [r3, #0]
70000da0:	69fa      	ldr	r2, [r7, #28]
70000da2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000da6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
70000daa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
70000dac:	687b      	ldr	r3, [r7, #4]
70000dae:	6818      	ldr	r0, [r3, #0]
70000db0:	687b      	ldr	r3, [r7, #4]
70000db2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
70000db4:	687b      	ldr	r3, [r7, #4]
70000db6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
70000dba:	461a      	mov	r2, r3
70000dbc:	f001 fdc4 	bl	70002948 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
70000dc0:	687b      	ldr	r3, [r7, #4]
70000dc2:	681b      	ldr	r3, [r3, #0]
70000dc4:	695a      	ldr	r2, [r3, #20]
70000dc6:	687b      	ldr	r3, [r7, #4]
70000dc8:	681b      	ldr	r3, [r3, #0]
70000dca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
70000dce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
70000dd0:	687b      	ldr	r3, [r7, #4]
70000dd2:	681b      	ldr	r3, [r3, #0]
70000dd4:	4618      	mov	r0, r3
70000dd6:	f001 fcf1 	bl	700027bc <USB_ReadInterrupts>
70000dda:	4603      	mov	r3, r0
70000ddc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70000de4:	d123      	bne.n	70000e2e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
70000de6:	687b      	ldr	r3, [r7, #4]
70000de8:	681b      	ldr	r3, [r3, #0]
70000dea:	4618      	mov	r0, r3
70000dec:	f001 fd88 	bl	70002900 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
70000df0:	687b      	ldr	r3, [r7, #4]
70000df2:	681b      	ldr	r3, [r3, #0]
70000df4:	4618      	mov	r0, r3
70000df6:	f000 ff55 	bl	70001ca4 <USB_GetDevSpeed>
70000dfa:	4603      	mov	r3, r0
70000dfc:	461a      	mov	r2, r3
70000dfe:	687b      	ldr	r3, [r7, #4]
70000e00:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
70000e02:	687b      	ldr	r3, [r7, #4]
70000e04:	681c      	ldr	r4, [r3, #0]
70000e06:	f000 fe51 	bl	70001aac <HAL_RCC_GetHCLKFreq>
70000e0a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
70000e0c:	687b      	ldr	r3, [r7, #4]
70000e0e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
70000e10:	461a      	mov	r2, r3
70000e12:	4620      	mov	r0, r4
70000e14:	f000 fe72 	bl	70001afc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
70000e18:	6878      	ldr	r0, [r7, #4]
70000e1a:	f003 f825 	bl	70003e68 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
70000e1e:	687b      	ldr	r3, [r7, #4]
70000e20:	681b      	ldr	r3, [r3, #0]
70000e22:	695a      	ldr	r2, [r3, #20]
70000e24:	687b      	ldr	r3, [r7, #4]
70000e26:	681b      	ldr	r3, [r3, #0]
70000e28:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
70000e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
70000e2e:	687b      	ldr	r3, [r7, #4]
70000e30:	681b      	ldr	r3, [r3, #0]
70000e32:	4618      	mov	r0, r3
70000e34:	f001 fcc2 	bl	700027bc <USB_ReadInterrupts>
70000e38:	4603      	mov	r3, r0
70000e3a:	f003 0308 	and.w	r3, r3, #8
70000e3e:	2b08      	cmp	r3, #8
70000e40:	d10a      	bne.n	70000e58 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
70000e42:	6878      	ldr	r0, [r7, #4]
70000e44:	f003 f802 	bl	70003e4c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
70000e48:	687b      	ldr	r3, [r7, #4]
70000e4a:	681b      	ldr	r3, [r3, #0]
70000e4c:	695a      	ldr	r2, [r3, #20]
70000e4e:	687b      	ldr	r3, [r7, #4]
70000e50:	681b      	ldr	r3, [r3, #0]
70000e52:	f002 0208 	and.w	r2, r2, #8
70000e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
70000e58:	687b      	ldr	r3, [r7, #4]
70000e5a:	681b      	ldr	r3, [r3, #0]
70000e5c:	4618      	mov	r0, r3
70000e5e:	f001 fcad 	bl	700027bc <USB_ReadInterrupts>
70000e62:	4603      	mov	r3, r0
70000e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70000e68:	2b80      	cmp	r3, #128	@ 0x80
70000e6a:	d123      	bne.n	70000eb4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
70000e6c:	6a3b      	ldr	r3, [r7, #32]
70000e6e:	699b      	ldr	r3, [r3, #24]
70000e70:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
70000e74:	6a3b      	ldr	r3, [r7, #32]
70000e76:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000e78:	2301      	movs	r3, #1
70000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
70000e7c:	e014      	b.n	70000ea8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
70000e7e:	6879      	ldr	r1, [r7, #4]
70000e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000e82:	4613      	mov	r3, r2
70000e84:	00db      	lsls	r3, r3, #3
70000e86:	4413      	add	r3, r2
70000e88:	009b      	lsls	r3, r3, #2
70000e8a:	440b      	add	r3, r1
70000e8c:	f203 2357 	addw	r3, r3, #599	@ 0x257
70000e90:	781b      	ldrb	r3, [r3, #0]
70000e92:	2b01      	cmp	r3, #1
70000e94:	d105      	bne.n	70000ea2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
70000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000e98:	b2db      	uxtb	r3, r3
70000e9a:	4619      	mov	r1, r3
70000e9c:	6878      	ldr	r0, [r7, #4]
70000e9e:	f000 faa8 	bl	700013f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ea4:	3301      	adds	r3, #1
70000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
70000ea8:	687b      	ldr	r3, [r7, #4]
70000eaa:	791b      	ldrb	r3, [r3, #4]
70000eac:	461a      	mov	r2, r3
70000eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000eb0:	4293      	cmp	r3, r2
70000eb2:	d3e4      	bcc.n	70000e7e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
70000eb4:	687b      	ldr	r3, [r7, #4]
70000eb6:	681b      	ldr	r3, [r3, #0]
70000eb8:	4618      	mov	r0, r3
70000eba:	f001 fc7f 	bl	700027bc <USB_ReadInterrupts>
70000ebe:	4603      	mov	r3, r0
70000ec0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70000ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
70000ec8:	d13c      	bne.n	70000f44 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000eca:	2301      	movs	r3, #1
70000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
70000ece:	e02b      	b.n	70000f28 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
70000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ed2:	015a      	lsls	r2, r3, #5
70000ed4:	69fb      	ldr	r3, [r7, #28]
70000ed6:	4413      	add	r3, r2
70000ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000edc:	681b      	ldr	r3, [r3, #0]
70000ede:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
70000ee0:	6879      	ldr	r1, [r7, #4]
70000ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000ee4:	4613      	mov	r3, r2
70000ee6:	00db      	lsls	r3, r3, #3
70000ee8:	4413      	add	r3, r2
70000eea:	009b      	lsls	r3, r3, #2
70000eec:	440b      	add	r3, r1
70000eee:	3318      	adds	r3, #24
70000ef0:	781b      	ldrb	r3, [r3, #0]
70000ef2:	2b01      	cmp	r3, #1
70000ef4:	d115      	bne.n	70000f22 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
70000ef6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
70000ef8:	2b00      	cmp	r3, #0
70000efa:	da12      	bge.n	70000f22 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
70000efc:	6879      	ldr	r1, [r7, #4]
70000efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000f00:	4613      	mov	r3, r2
70000f02:	00db      	lsls	r3, r3, #3
70000f04:	4413      	add	r3, r2
70000f06:	009b      	lsls	r3, r3, #2
70000f08:	440b      	add	r3, r1
70000f0a:	3317      	adds	r3, #23
70000f0c:	2201      	movs	r2, #1
70000f0e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
70000f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f12:	b2db      	uxtb	r3, r3
70000f14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
70000f18:	b2db      	uxtb	r3, r3
70000f1a:	4619      	mov	r1, r3
70000f1c:	6878      	ldr	r0, [r7, #4]
70000f1e:	f000 fa68 	bl	700013f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f24:	3301      	adds	r3, #1
70000f26:	627b      	str	r3, [r7, #36]	@ 0x24
70000f28:	687b      	ldr	r3, [r7, #4]
70000f2a:	791b      	ldrb	r3, [r3, #4]
70000f2c:	461a      	mov	r2, r3
70000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f30:	4293      	cmp	r3, r2
70000f32:	d3cd      	bcc.n	70000ed0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
70000f34:	687b      	ldr	r3, [r7, #4]
70000f36:	681b      	ldr	r3, [r3, #0]
70000f38:	695a      	ldr	r2, [r3, #20]
70000f3a:	687b      	ldr	r3, [r7, #4]
70000f3c:	681b      	ldr	r3, [r3, #0]
70000f3e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
70000f42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
70000f44:	687b      	ldr	r3, [r7, #4]
70000f46:	681b      	ldr	r3, [r3, #0]
70000f48:	4618      	mov	r0, r3
70000f4a:	f001 fc37 	bl	700027bc <USB_ReadInterrupts>
70000f4e:	4603      	mov	r3, r0
70000f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70000f54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70000f58:	d156      	bne.n	70001008 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000f5a:	2301      	movs	r3, #1
70000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
70000f5e:	e045      	b.n	70000fec <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
70000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f62:	015a      	lsls	r2, r3, #5
70000f64:	69fb      	ldr	r3, [r7, #28]
70000f66:	4413      	add	r3, r2
70000f68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000f6c:	681b      	ldr	r3, [r3, #0]
70000f6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
70000f70:	6879      	ldr	r1, [r7, #4]
70000f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000f74:	4613      	mov	r3, r2
70000f76:	00db      	lsls	r3, r3, #3
70000f78:	4413      	add	r3, r2
70000f7a:	009b      	lsls	r3, r3, #2
70000f7c:	440b      	add	r3, r1
70000f7e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
70000f82:	781b      	ldrb	r3, [r3, #0]
70000f84:	2b01      	cmp	r3, #1
70000f86:	d12e      	bne.n	70000fe6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
70000f88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
70000f8a:	2b00      	cmp	r3, #0
70000f8c:	da2b      	bge.n	70000fe6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
70000f8e:	69bb      	ldr	r3, [r7, #24]
70000f90:	0c1a      	lsrs	r2, r3, #16
70000f92:	687b      	ldr	r3, [r7, #4]
70000f94:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
70000f98:	4053      	eors	r3, r2
70000f9a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
70000f9e:	2b00      	cmp	r3, #0
70000fa0:	d121      	bne.n	70000fe6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
70000fa2:	6879      	ldr	r1, [r7, #4]
70000fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000fa6:	4613      	mov	r3, r2
70000fa8:	00db      	lsls	r3, r3, #3
70000faa:	4413      	add	r3, r2
70000fac:	009b      	lsls	r3, r3, #2
70000fae:	440b      	add	r3, r1
70000fb0:	f203 2357 	addw	r3, r3, #599	@ 0x257
70000fb4:	2201      	movs	r2, #1
70000fb6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
70000fb8:	6a3b      	ldr	r3, [r7, #32]
70000fba:	699b      	ldr	r3, [r3, #24]
70000fbc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
70000fc0:	6a3b      	ldr	r3, [r7, #32]
70000fc2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
70000fc4:	6a3b      	ldr	r3, [r7, #32]
70000fc6:	695b      	ldr	r3, [r3, #20]
70000fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70000fcc:	2b00      	cmp	r3, #0
70000fce:	d10a      	bne.n	70000fe6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
70000fd0:	69fb      	ldr	r3, [r7, #28]
70000fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000fd6:	685b      	ldr	r3, [r3, #4]
70000fd8:	69fa      	ldr	r2, [r7, #28]
70000fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
70000fe2:	6053      	str	r3, [r2, #4]
            break;
70000fe4:	e008      	b.n	70000ff8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000fe8:	3301      	adds	r3, #1
70000fea:	627b      	str	r3, [r7, #36]	@ 0x24
70000fec:	687b      	ldr	r3, [r7, #4]
70000fee:	791b      	ldrb	r3, [r3, #4]
70000ff0:	461a      	mov	r2, r3
70000ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ff4:	4293      	cmp	r3, r2
70000ff6:	d3b3      	bcc.n	70000f60 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
70000ff8:	687b      	ldr	r3, [r7, #4]
70000ffa:	681b      	ldr	r3, [r3, #0]
70000ffc:	695a      	ldr	r2, [r3, #20]
70000ffe:	687b      	ldr	r3, [r7, #4]
70001000:	681b      	ldr	r3, [r3, #0]
70001002:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
70001006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
70001008:	687b      	ldr	r3, [r7, #4]
7000100a:	681b      	ldr	r3, [r3, #0]
7000100c:	4618      	mov	r0, r3
7000100e:	f001 fbd5 	bl	700027bc <USB_ReadInterrupts>
70001012:	4603      	mov	r3, r0
70001014:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
70001018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
7000101c:	d10a      	bne.n	70001034 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
7000101e:	6878      	ldr	r0, [r7, #4]
70001020:	f002 ffb2 	bl	70003f88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
70001024:	687b      	ldr	r3, [r7, #4]
70001026:	681b      	ldr	r3, [r3, #0]
70001028:	695a      	ldr	r2, [r3, #20]
7000102a:	687b      	ldr	r3, [r7, #4]
7000102c:	681b      	ldr	r3, [r3, #0]
7000102e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
70001032:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
70001034:	687b      	ldr	r3, [r7, #4]
70001036:	681b      	ldr	r3, [r3, #0]
70001038:	4618      	mov	r0, r3
7000103a:	f001 fbbf 	bl	700027bc <USB_ReadInterrupts>
7000103e:	4603      	mov	r3, r0
70001040:	f003 0304 	and.w	r3, r3, #4
70001044:	2b04      	cmp	r3, #4
70001046:	d115      	bne.n	70001074 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
70001048:	687b      	ldr	r3, [r7, #4]
7000104a:	681b      	ldr	r3, [r3, #0]
7000104c:	685b      	ldr	r3, [r3, #4]
7000104e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
70001050:	69bb      	ldr	r3, [r7, #24]
70001052:	f003 0304 	and.w	r3, r3, #4
70001056:	2b00      	cmp	r3, #0
70001058:	d002      	beq.n	70001060 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
7000105a:	6878      	ldr	r0, [r7, #4]
7000105c:	f002 ffa2 	bl	70003fa4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
70001060:	687b      	ldr	r3, [r7, #4]
70001062:	681b      	ldr	r3, [r3, #0]
70001064:	6859      	ldr	r1, [r3, #4]
70001066:	687b      	ldr	r3, [r7, #4]
70001068:	681b      	ldr	r3, [r3, #0]
7000106a:	69ba      	ldr	r2, [r7, #24]
7000106c:	430a      	orrs	r2, r1
7000106e:	605a      	str	r2, [r3, #4]
70001070:	e000      	b.n	70001074 <HAL_PCD_IRQHandler+0x996>
      return;
70001072:	bf00      	nop
    }
  }
}
70001074:	3734      	adds	r7, #52	@ 0x34
70001076:	46bd      	mov	sp, r7
70001078:	bd90      	pop	{r4, r7, pc}

7000107a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
7000107a:	b580      	push	{r7, lr}
7000107c:	b082      	sub	sp, #8
7000107e:	af00      	add	r7, sp, #0
70001080:	6078      	str	r0, [r7, #4]
70001082:	460b      	mov	r3, r1
70001084:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
70001086:	687b      	ldr	r3, [r7, #4]
70001088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
7000108c:	2b01      	cmp	r3, #1
7000108e:	d101      	bne.n	70001094 <HAL_PCD_SetAddress+0x1a>
70001090:	2302      	movs	r3, #2
70001092:	e012      	b.n	700010ba <HAL_PCD_SetAddress+0x40>
70001094:	687b      	ldr	r3, [r7, #4]
70001096:	2201      	movs	r2, #1
70001098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
7000109c:	687b      	ldr	r3, [r7, #4]
7000109e:	78fa      	ldrb	r2, [r7, #3]
700010a0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
700010a2:	687b      	ldr	r3, [r7, #4]
700010a4:	681b      	ldr	r3, [r3, #0]
700010a6:	78fa      	ldrb	r2, [r7, #3]
700010a8:	4611      	mov	r1, r2
700010aa:	4618      	mov	r0, r3
700010ac:	f001 fb60 	bl	70002770 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
700010b0:	687b      	ldr	r3, [r7, #4]
700010b2:	2200      	movs	r2, #0
700010b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
700010b8:	2300      	movs	r3, #0
}
700010ba:	4618      	mov	r0, r3
700010bc:	3708      	adds	r7, #8
700010be:	46bd      	mov	sp, r7
700010c0:	bd80      	pop	{r7, pc}

700010c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
700010c2:	b580      	push	{r7, lr}
700010c4:	b084      	sub	sp, #16
700010c6:	af00      	add	r7, sp, #0
700010c8:	6078      	str	r0, [r7, #4]
700010ca:	4608      	mov	r0, r1
700010cc:	4611      	mov	r1, r2
700010ce:	461a      	mov	r2, r3
700010d0:	4603      	mov	r3, r0
700010d2:	70fb      	strb	r3, [r7, #3]
700010d4:	460b      	mov	r3, r1
700010d6:	803b      	strh	r3, [r7, #0]
700010d8:	4613      	mov	r3, r2
700010da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
700010dc:	2300      	movs	r3, #0
700010de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
700010e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
700010e4:	2b00      	cmp	r3, #0
700010e6:	da0f      	bge.n	70001108 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700010e8:	78fb      	ldrb	r3, [r7, #3]
700010ea:	f003 020f 	and.w	r2, r3, #15
700010ee:	4613      	mov	r3, r2
700010f0:	00db      	lsls	r3, r3, #3
700010f2:	4413      	add	r3, r2
700010f4:	009b      	lsls	r3, r3, #2
700010f6:	3310      	adds	r3, #16
700010f8:	687a      	ldr	r2, [r7, #4]
700010fa:	4413      	add	r3, r2
700010fc:	3304      	adds	r3, #4
700010fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
70001100:	68fb      	ldr	r3, [r7, #12]
70001102:	2201      	movs	r2, #1
70001104:	705a      	strb	r2, [r3, #1]
70001106:	e00f      	b.n	70001128 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
70001108:	78fb      	ldrb	r3, [r7, #3]
7000110a:	f003 020f 	and.w	r2, r3, #15
7000110e:	4613      	mov	r3, r2
70001110:	00db      	lsls	r3, r3, #3
70001112:	4413      	add	r3, r2
70001114:	009b      	lsls	r3, r3, #2
70001116:	f503 7314 	add.w	r3, r3, #592	@ 0x250
7000111a:	687a      	ldr	r2, [r7, #4]
7000111c:	4413      	add	r3, r2
7000111e:	3304      	adds	r3, #4
70001120:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
70001122:	68fb      	ldr	r3, [r7, #12]
70001124:	2200      	movs	r2, #0
70001126:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
70001128:	78fb      	ldrb	r3, [r7, #3]
7000112a:	f003 030f 	and.w	r3, r3, #15
7000112e:	b2da      	uxtb	r2, r3
70001130:	68fb      	ldr	r3, [r7, #12]
70001132:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
70001134:	883b      	ldrh	r3, [r7, #0]
70001136:	f3c3 020a 	ubfx	r2, r3, #0, #11
7000113a:	68fb      	ldr	r3, [r7, #12]
7000113c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
7000113e:	68fb      	ldr	r3, [r7, #12]
70001140:	78ba      	ldrb	r2, [r7, #2]
70001142:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
70001144:	68fb      	ldr	r3, [r7, #12]
70001146:	785b      	ldrb	r3, [r3, #1]
70001148:	2b00      	cmp	r3, #0
7000114a:	d004      	beq.n	70001156 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
7000114c:	68fb      	ldr	r3, [r7, #12]
7000114e:	781b      	ldrb	r3, [r3, #0]
70001150:	461a      	mov	r2, r3
70001152:	68fb      	ldr	r3, [r7, #12]
70001154:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
70001156:	78bb      	ldrb	r3, [r7, #2]
70001158:	2b02      	cmp	r3, #2
7000115a:	d102      	bne.n	70001162 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
7000115c:	68fb      	ldr	r3, [r7, #12]
7000115e:	2200      	movs	r2, #0
70001160:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
70001162:	687b      	ldr	r3, [r7, #4]
70001164:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70001168:	2b01      	cmp	r3, #1
7000116a:	d101      	bne.n	70001170 <HAL_PCD_EP_Open+0xae>
7000116c:	2302      	movs	r3, #2
7000116e:	e00e      	b.n	7000118e <HAL_PCD_EP_Open+0xcc>
70001170:	687b      	ldr	r3, [r7, #4]
70001172:	2201      	movs	r2, #1
70001174:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
70001178:	687b      	ldr	r3, [r7, #4]
7000117a:	681b      	ldr	r3, [r3, #0]
7000117c:	68f9      	ldr	r1, [r7, #12]
7000117e:	4618      	mov	r0, r3
70001180:	f000 fdb6 	bl	70001cf0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
70001184:	687b      	ldr	r3, [r7, #4]
70001186:	2200      	movs	r2, #0
70001188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
7000118c:	7afb      	ldrb	r3, [r7, #11]
}
7000118e:	4618      	mov	r0, r3
70001190:	3710      	adds	r7, #16
70001192:	46bd      	mov	sp, r7
70001194:	bd80      	pop	{r7, pc}

70001196 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
70001196:	b580      	push	{r7, lr}
70001198:	b086      	sub	sp, #24
7000119a:	af00      	add	r7, sp, #0
7000119c:	60f8      	str	r0, [r7, #12]
7000119e:	607a      	str	r2, [r7, #4]
700011a0:	603b      	str	r3, [r7, #0]
700011a2:	460b      	mov	r3, r1
700011a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
700011a6:	7afb      	ldrb	r3, [r7, #11]
700011a8:	f003 020f 	and.w	r2, r3, #15
700011ac:	4613      	mov	r3, r2
700011ae:	00db      	lsls	r3, r3, #3
700011b0:	4413      	add	r3, r2
700011b2:	009b      	lsls	r3, r3, #2
700011b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700011b8:	68fa      	ldr	r2, [r7, #12]
700011ba:	4413      	add	r3, r2
700011bc:	3304      	adds	r3, #4
700011be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
700011c0:	697b      	ldr	r3, [r7, #20]
700011c2:	687a      	ldr	r2, [r7, #4]
700011c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
700011c6:	697b      	ldr	r3, [r7, #20]
700011c8:	683a      	ldr	r2, [r7, #0]
700011ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
700011cc:	697b      	ldr	r3, [r7, #20]
700011ce:	2200      	movs	r2, #0
700011d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
700011d2:	697b      	ldr	r3, [r7, #20]
700011d4:	2200      	movs	r2, #0
700011d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
700011d8:	7afb      	ldrb	r3, [r7, #11]
700011da:	f003 030f 	and.w	r3, r3, #15
700011de:	b2da      	uxtb	r2, r3
700011e0:	697b      	ldr	r3, [r7, #20]
700011e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
700011e4:	68fb      	ldr	r3, [r7, #12]
700011e6:	799b      	ldrb	r3, [r3, #6]
700011e8:	2b01      	cmp	r3, #1
700011ea:	d102      	bne.n	700011f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
700011ec:	687a      	ldr	r2, [r7, #4]
700011ee:	697b      	ldr	r3, [r7, #20]
700011f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
700011f2:	68fb      	ldr	r3, [r7, #12]
700011f4:	6818      	ldr	r0, [r3, #0]
700011f6:	68fb      	ldr	r3, [r7, #12]
700011f8:	799b      	ldrb	r3, [r3, #6]
700011fa:	461a      	mov	r2, r3
700011fc:	6979      	ldr	r1, [r7, #20]
700011fe:	f000 fdff 	bl	70001e00 <USB_EPStartXfer>

  return HAL_OK;
70001202:	2300      	movs	r3, #0
}
70001204:	4618      	mov	r0, r3
70001206:	3718      	adds	r7, #24
70001208:	46bd      	mov	sp, r7
7000120a:	bd80      	pop	{r7, pc}

7000120c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
7000120c:	b580      	push	{r7, lr}
7000120e:	b086      	sub	sp, #24
70001210:	af00      	add	r7, sp, #0
70001212:	60f8      	str	r0, [r7, #12]
70001214:	607a      	str	r2, [r7, #4]
70001216:	603b      	str	r3, [r7, #0]
70001218:	460b      	mov	r3, r1
7000121a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
7000121c:	7afb      	ldrb	r3, [r7, #11]
7000121e:	f003 020f 	and.w	r2, r3, #15
70001222:	4613      	mov	r3, r2
70001224:	00db      	lsls	r3, r3, #3
70001226:	4413      	add	r3, r2
70001228:	009b      	lsls	r3, r3, #2
7000122a:	3310      	adds	r3, #16
7000122c:	68fa      	ldr	r2, [r7, #12]
7000122e:	4413      	add	r3, r2
70001230:	3304      	adds	r3, #4
70001232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
70001234:	697b      	ldr	r3, [r7, #20]
70001236:	687a      	ldr	r2, [r7, #4]
70001238:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
7000123a:	697b      	ldr	r3, [r7, #20]
7000123c:	683a      	ldr	r2, [r7, #0]
7000123e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
70001240:	697b      	ldr	r3, [r7, #20]
70001242:	2200      	movs	r2, #0
70001244:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
70001246:	697b      	ldr	r3, [r7, #20]
70001248:	2201      	movs	r2, #1
7000124a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
7000124c:	7afb      	ldrb	r3, [r7, #11]
7000124e:	f003 030f 	and.w	r3, r3, #15
70001252:	b2da      	uxtb	r2, r3
70001254:	697b      	ldr	r3, [r7, #20]
70001256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
70001258:	68fb      	ldr	r3, [r7, #12]
7000125a:	799b      	ldrb	r3, [r3, #6]
7000125c:	2b01      	cmp	r3, #1
7000125e:	d102      	bne.n	70001266 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
70001260:	687a      	ldr	r2, [r7, #4]
70001262:	697b      	ldr	r3, [r7, #20]
70001264:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
70001266:	68fb      	ldr	r3, [r7, #12]
70001268:	6818      	ldr	r0, [r3, #0]
7000126a:	68fb      	ldr	r3, [r7, #12]
7000126c:	799b      	ldrb	r3, [r3, #6]
7000126e:	461a      	mov	r2, r3
70001270:	6979      	ldr	r1, [r7, #20]
70001272:	f000 fdc5 	bl	70001e00 <USB_EPStartXfer>

  return HAL_OK;
70001276:	2300      	movs	r3, #0
}
70001278:	4618      	mov	r0, r3
7000127a:	3718      	adds	r7, #24
7000127c:	46bd      	mov	sp, r7
7000127e:	bd80      	pop	{r7, pc}

70001280 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
70001280:	b580      	push	{r7, lr}
70001282:	b084      	sub	sp, #16
70001284:	af00      	add	r7, sp, #0
70001286:	6078      	str	r0, [r7, #4]
70001288:	460b      	mov	r3, r1
7000128a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
7000128c:	78fb      	ldrb	r3, [r7, #3]
7000128e:	f003 030f 	and.w	r3, r3, #15
70001292:	687a      	ldr	r2, [r7, #4]
70001294:	7912      	ldrb	r2, [r2, #4]
70001296:	4293      	cmp	r3, r2
70001298:	d901      	bls.n	7000129e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
7000129a:	2301      	movs	r3, #1
7000129c:	e04f      	b.n	7000133e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
7000129e:	f997 3003 	ldrsb.w	r3, [r7, #3]
700012a2:	2b00      	cmp	r3, #0
700012a4:	da0f      	bge.n	700012c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700012a6:	78fb      	ldrb	r3, [r7, #3]
700012a8:	f003 020f 	and.w	r2, r3, #15
700012ac:	4613      	mov	r3, r2
700012ae:	00db      	lsls	r3, r3, #3
700012b0:	4413      	add	r3, r2
700012b2:	009b      	lsls	r3, r3, #2
700012b4:	3310      	adds	r3, #16
700012b6:	687a      	ldr	r2, [r7, #4]
700012b8:	4413      	add	r3, r2
700012ba:	3304      	adds	r3, #4
700012bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
700012be:	68fb      	ldr	r3, [r7, #12]
700012c0:	2201      	movs	r2, #1
700012c2:	705a      	strb	r2, [r3, #1]
700012c4:	e00d      	b.n	700012e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
700012c6:	78fa      	ldrb	r2, [r7, #3]
700012c8:	4613      	mov	r3, r2
700012ca:	00db      	lsls	r3, r3, #3
700012cc:	4413      	add	r3, r2
700012ce:	009b      	lsls	r3, r3, #2
700012d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700012d4:	687a      	ldr	r2, [r7, #4]
700012d6:	4413      	add	r3, r2
700012d8:	3304      	adds	r3, #4
700012da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
700012dc:	68fb      	ldr	r3, [r7, #12]
700012de:	2200      	movs	r2, #0
700012e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
700012e2:	68fb      	ldr	r3, [r7, #12]
700012e4:	2201      	movs	r2, #1
700012e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
700012e8:	78fb      	ldrb	r3, [r7, #3]
700012ea:	f003 030f 	and.w	r3, r3, #15
700012ee:	b2da      	uxtb	r2, r3
700012f0:	68fb      	ldr	r3, [r7, #12]
700012f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
700012f4:	687b      	ldr	r3, [r7, #4]
700012f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
700012fa:	2b01      	cmp	r3, #1
700012fc:	d101      	bne.n	70001302 <HAL_PCD_EP_SetStall+0x82>
700012fe:	2302      	movs	r3, #2
70001300:	e01d      	b.n	7000133e <HAL_PCD_EP_SetStall+0xbe>
70001302:	687b      	ldr	r3, [r7, #4]
70001304:	2201      	movs	r2, #1
70001306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
7000130a:	687b      	ldr	r3, [r7, #4]
7000130c:	681b      	ldr	r3, [r3, #0]
7000130e:	68f9      	ldr	r1, [r7, #12]
70001310:	4618      	mov	r0, r3
70001312:	f001 f959 	bl	700025c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
70001316:	78fb      	ldrb	r3, [r7, #3]
70001318:	f003 030f 	and.w	r3, r3, #15
7000131c:	2b00      	cmp	r3, #0
7000131e:	d109      	bne.n	70001334 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
70001320:	687b      	ldr	r3, [r7, #4]
70001322:	6818      	ldr	r0, [r3, #0]
70001324:	687b      	ldr	r3, [r7, #4]
70001326:	7999      	ldrb	r1, [r3, #6]
70001328:	687b      	ldr	r3, [r7, #4]
7000132a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
7000132e:	461a      	mov	r2, r3
70001330:	f001 fb0a 	bl	70002948 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
70001334:	687b      	ldr	r3, [r7, #4]
70001336:	2200      	movs	r2, #0
70001338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
7000133c:	2300      	movs	r3, #0
}
7000133e:	4618      	mov	r0, r3
70001340:	3710      	adds	r7, #16
70001342:	46bd      	mov	sp, r7
70001344:	bd80      	pop	{r7, pc}

70001346 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
70001346:	b580      	push	{r7, lr}
70001348:	b084      	sub	sp, #16
7000134a:	af00      	add	r7, sp, #0
7000134c:	6078      	str	r0, [r7, #4]
7000134e:	460b      	mov	r3, r1
70001350:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
70001352:	78fb      	ldrb	r3, [r7, #3]
70001354:	f003 030f 	and.w	r3, r3, #15
70001358:	687a      	ldr	r2, [r7, #4]
7000135a:	7912      	ldrb	r2, [r2, #4]
7000135c:	4293      	cmp	r3, r2
7000135e:	d901      	bls.n	70001364 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
70001360:	2301      	movs	r3, #1
70001362:	e042      	b.n	700013ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
70001364:	f997 3003 	ldrsb.w	r3, [r7, #3]
70001368:	2b00      	cmp	r3, #0
7000136a:	da0f      	bge.n	7000138c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
7000136c:	78fb      	ldrb	r3, [r7, #3]
7000136e:	f003 020f 	and.w	r2, r3, #15
70001372:	4613      	mov	r3, r2
70001374:	00db      	lsls	r3, r3, #3
70001376:	4413      	add	r3, r2
70001378:	009b      	lsls	r3, r3, #2
7000137a:	3310      	adds	r3, #16
7000137c:	687a      	ldr	r2, [r7, #4]
7000137e:	4413      	add	r3, r2
70001380:	3304      	adds	r3, #4
70001382:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
70001384:	68fb      	ldr	r3, [r7, #12]
70001386:	2201      	movs	r2, #1
70001388:	705a      	strb	r2, [r3, #1]
7000138a:	e00f      	b.n	700013ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
7000138c:	78fb      	ldrb	r3, [r7, #3]
7000138e:	f003 020f 	and.w	r2, r3, #15
70001392:	4613      	mov	r3, r2
70001394:	00db      	lsls	r3, r3, #3
70001396:	4413      	add	r3, r2
70001398:	009b      	lsls	r3, r3, #2
7000139a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
7000139e:	687a      	ldr	r2, [r7, #4]
700013a0:	4413      	add	r3, r2
700013a2:	3304      	adds	r3, #4
700013a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
700013a6:	68fb      	ldr	r3, [r7, #12]
700013a8:	2200      	movs	r2, #0
700013aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
700013ac:	68fb      	ldr	r3, [r7, #12]
700013ae:	2200      	movs	r2, #0
700013b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
700013b2:	78fb      	ldrb	r3, [r7, #3]
700013b4:	f003 030f 	and.w	r3, r3, #15
700013b8:	b2da      	uxtb	r2, r3
700013ba:	68fb      	ldr	r3, [r7, #12]
700013bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
700013be:	687b      	ldr	r3, [r7, #4]
700013c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
700013c4:	2b01      	cmp	r3, #1
700013c6:	d101      	bne.n	700013cc <HAL_PCD_EP_ClrStall+0x86>
700013c8:	2302      	movs	r3, #2
700013ca:	e00e      	b.n	700013ea <HAL_PCD_EP_ClrStall+0xa4>
700013cc:	687b      	ldr	r3, [r7, #4]
700013ce:	2201      	movs	r2, #1
700013d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
700013d4:	687b      	ldr	r3, [r7, #4]
700013d6:	681b      	ldr	r3, [r3, #0]
700013d8:	68f9      	ldr	r1, [r7, #12]
700013da:	4618      	mov	r0, r3
700013dc:	f001 f962 	bl	700026a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
700013e0:	687b      	ldr	r3, [r7, #4]
700013e2:	2200      	movs	r2, #0
700013e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
700013e8:	2300      	movs	r3, #0
}
700013ea:	4618      	mov	r0, r3
700013ec:	3710      	adds	r7, #16
700013ee:	46bd      	mov	sp, r7
700013f0:	bd80      	pop	{r7, pc}

700013f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
700013f2:	b580      	push	{r7, lr}
700013f4:	b084      	sub	sp, #16
700013f6:	af00      	add	r7, sp, #0
700013f8:	6078      	str	r0, [r7, #4]
700013fa:	460b      	mov	r3, r1
700013fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
700013fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
70001402:	2b00      	cmp	r3, #0
70001404:	da0c      	bge.n	70001420 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
70001406:	78fb      	ldrb	r3, [r7, #3]
70001408:	f003 020f 	and.w	r2, r3, #15
7000140c:	4613      	mov	r3, r2
7000140e:	00db      	lsls	r3, r3, #3
70001410:	4413      	add	r3, r2
70001412:	009b      	lsls	r3, r3, #2
70001414:	3310      	adds	r3, #16
70001416:	687a      	ldr	r2, [r7, #4]
70001418:	4413      	add	r3, r2
7000141a:	3304      	adds	r3, #4
7000141c:	60fb      	str	r3, [r7, #12]
7000141e:	e00c      	b.n	7000143a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
70001420:	78fb      	ldrb	r3, [r7, #3]
70001422:	f003 020f 	and.w	r2, r3, #15
70001426:	4613      	mov	r3, r2
70001428:	00db      	lsls	r3, r3, #3
7000142a:	4413      	add	r3, r2
7000142c:	009b      	lsls	r3, r3, #2
7000142e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70001432:	687a      	ldr	r2, [r7, #4]
70001434:	4413      	add	r3, r2
70001436:	3304      	adds	r3, #4
70001438:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
7000143a:	687b      	ldr	r3, [r7, #4]
7000143c:	681b      	ldr	r3, [r3, #0]
7000143e:	68f9      	ldr	r1, [r7, #12]
70001440:	4618      	mov	r0, r3
70001442:	f000 ff81 	bl	70002348 <USB_EPStopXfer>
70001446:	4603      	mov	r3, r0
70001448:	72fb      	strb	r3, [r7, #11]

  return ret;
7000144a:	7afb      	ldrb	r3, [r7, #11]
}
7000144c:	4618      	mov	r0, r3
7000144e:	3710      	adds	r7, #16
70001450:	46bd      	mov	sp, r7
70001452:	bd80      	pop	{r7, pc}

70001454 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
70001454:	b580      	push	{r7, lr}
70001456:	b08a      	sub	sp, #40	@ 0x28
70001458:	af02      	add	r7, sp, #8
7000145a:	6078      	str	r0, [r7, #4]
7000145c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
7000145e:	687b      	ldr	r3, [r7, #4]
70001460:	681b      	ldr	r3, [r3, #0]
70001462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001464:	697b      	ldr	r3, [r7, #20]
70001466:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
70001468:	683a      	ldr	r2, [r7, #0]
7000146a:	4613      	mov	r3, r2
7000146c:	00db      	lsls	r3, r3, #3
7000146e:	4413      	add	r3, r2
70001470:	009b      	lsls	r3, r3, #2
70001472:	3310      	adds	r3, #16
70001474:	687a      	ldr	r2, [r7, #4]
70001476:	4413      	add	r3, r2
70001478:	3304      	adds	r3, #4
7000147a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
7000147c:	68fb      	ldr	r3, [r7, #12]
7000147e:	695a      	ldr	r2, [r3, #20]
70001480:	68fb      	ldr	r3, [r7, #12]
70001482:	691b      	ldr	r3, [r3, #16]
70001484:	429a      	cmp	r2, r3
70001486:	d901      	bls.n	7000148c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
70001488:	2301      	movs	r3, #1
7000148a:	e06b      	b.n	70001564 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
7000148c:	68fb      	ldr	r3, [r7, #12]
7000148e:	691a      	ldr	r2, [r3, #16]
70001490:	68fb      	ldr	r3, [r7, #12]
70001492:	695b      	ldr	r3, [r3, #20]
70001494:	1ad3      	subs	r3, r2, r3
70001496:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
70001498:	68fb      	ldr	r3, [r7, #12]
7000149a:	689b      	ldr	r3, [r3, #8]
7000149c:	69fa      	ldr	r2, [r7, #28]
7000149e:	429a      	cmp	r2, r3
700014a0:	d902      	bls.n	700014a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
700014a2:	68fb      	ldr	r3, [r7, #12]
700014a4:	689b      	ldr	r3, [r3, #8]
700014a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
700014a8:	69fb      	ldr	r3, [r7, #28]
700014aa:	3303      	adds	r3, #3
700014ac:	089b      	lsrs	r3, r3, #2
700014ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
700014b0:	e02a      	b.n	70001508 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
700014b2:	68fb      	ldr	r3, [r7, #12]
700014b4:	691a      	ldr	r2, [r3, #16]
700014b6:	68fb      	ldr	r3, [r7, #12]
700014b8:	695b      	ldr	r3, [r3, #20]
700014ba:	1ad3      	subs	r3, r2, r3
700014bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
700014be:	68fb      	ldr	r3, [r7, #12]
700014c0:	689b      	ldr	r3, [r3, #8]
700014c2:	69fa      	ldr	r2, [r7, #28]
700014c4:	429a      	cmp	r2, r3
700014c6:	d902      	bls.n	700014ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
700014c8:	68fb      	ldr	r3, [r7, #12]
700014ca:	689b      	ldr	r3, [r3, #8]
700014cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
700014ce:	69fb      	ldr	r3, [r7, #28]
700014d0:	3303      	adds	r3, #3
700014d2:	089b      	lsrs	r3, r3, #2
700014d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
700014d6:	68fb      	ldr	r3, [r7, #12]
700014d8:	68d9      	ldr	r1, [r3, #12]
700014da:	683b      	ldr	r3, [r7, #0]
700014dc:	b2da      	uxtb	r2, r3
700014de:	69fb      	ldr	r3, [r7, #28]
700014e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
700014e2:	687b      	ldr	r3, [r7, #4]
700014e4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
700014e6:	9300      	str	r3, [sp, #0]
700014e8:	4603      	mov	r3, r0
700014ea:	6978      	ldr	r0, [r7, #20]
700014ec:	f000 ffd6 	bl	7000249c <USB_WritePacket>

    ep->xfer_buff  += len;
700014f0:	68fb      	ldr	r3, [r7, #12]
700014f2:	68da      	ldr	r2, [r3, #12]
700014f4:	69fb      	ldr	r3, [r7, #28]
700014f6:	441a      	add	r2, r3
700014f8:	68fb      	ldr	r3, [r7, #12]
700014fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
700014fc:	68fb      	ldr	r3, [r7, #12]
700014fe:	695a      	ldr	r2, [r3, #20]
70001500:	69fb      	ldr	r3, [r7, #28]
70001502:	441a      	add	r2, r3
70001504:	68fb      	ldr	r3, [r7, #12]
70001506:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
70001508:	683b      	ldr	r3, [r7, #0]
7000150a:	015a      	lsls	r2, r3, #5
7000150c:	693b      	ldr	r3, [r7, #16]
7000150e:	4413      	add	r3, r2
70001510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001514:	699b      	ldr	r3, [r3, #24]
70001516:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
70001518:	69ba      	ldr	r2, [r7, #24]
7000151a:	429a      	cmp	r2, r3
7000151c:	d809      	bhi.n	70001532 <PCD_WriteEmptyTxFifo+0xde>
7000151e:	68fb      	ldr	r3, [r7, #12]
70001520:	695a      	ldr	r2, [r3, #20]
70001522:	68fb      	ldr	r3, [r7, #12]
70001524:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
70001526:	429a      	cmp	r2, r3
70001528:	d203      	bcs.n	70001532 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
7000152a:	68fb      	ldr	r3, [r7, #12]
7000152c:	691b      	ldr	r3, [r3, #16]
7000152e:	2b00      	cmp	r3, #0
70001530:	d1bf      	bne.n	700014b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
70001532:	68fb      	ldr	r3, [r7, #12]
70001534:	691a      	ldr	r2, [r3, #16]
70001536:	68fb      	ldr	r3, [r7, #12]
70001538:	695b      	ldr	r3, [r3, #20]
7000153a:	429a      	cmp	r2, r3
7000153c:	d811      	bhi.n	70001562 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
7000153e:	683b      	ldr	r3, [r7, #0]
70001540:	f003 030f 	and.w	r3, r3, #15
70001544:	2201      	movs	r2, #1
70001546:	fa02 f303 	lsl.w	r3, r2, r3
7000154a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
7000154c:	693b      	ldr	r3, [r7, #16]
7000154e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001552:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70001554:	68bb      	ldr	r3, [r7, #8]
70001556:	43db      	mvns	r3, r3
70001558:	6939      	ldr	r1, [r7, #16]
7000155a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000155e:	4013      	ands	r3, r2
70001560:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
70001562:	2300      	movs	r3, #0
}
70001564:	4618      	mov	r0, r3
70001566:	3720      	adds	r7, #32
70001568:	46bd      	mov	sp, r7
7000156a:	bd80      	pop	{r7, pc}

7000156c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
7000156c:	b580      	push	{r7, lr}
7000156e:	b088      	sub	sp, #32
70001570:	af00      	add	r7, sp, #0
70001572:	6078      	str	r0, [r7, #4]
70001574:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70001576:	687b      	ldr	r3, [r7, #4]
70001578:	681b      	ldr	r3, [r3, #0]
7000157a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000157c:	69fb      	ldr	r3, [r7, #28]
7000157e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70001580:	69fb      	ldr	r3, [r7, #28]
70001582:	333c      	adds	r3, #60	@ 0x3c
70001584:	3304      	adds	r3, #4
70001586:	681b      	ldr	r3, [r3, #0]
70001588:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
7000158a:	683b      	ldr	r3, [r7, #0]
7000158c:	015a      	lsls	r2, r3, #5
7000158e:	69bb      	ldr	r3, [r7, #24]
70001590:	4413      	add	r3, r2
70001592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001596:	689b      	ldr	r3, [r3, #8]
70001598:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
7000159a:	687b      	ldr	r3, [r7, #4]
7000159c:	799b      	ldrb	r3, [r3, #6]
7000159e:	2b01      	cmp	r3, #1
700015a0:	d17b      	bne.n	7000169a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
700015a2:	693b      	ldr	r3, [r7, #16]
700015a4:	f003 0308 	and.w	r3, r3, #8
700015a8:	2b00      	cmp	r3, #0
700015aa:	d015      	beq.n	700015d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
700015ac:	697b      	ldr	r3, [r7, #20]
700015ae:	4a61      	ldr	r2, [pc, #388]	@ (70001734 <PCD_EP_OutXfrComplete_int+0x1c8>)
700015b0:	4293      	cmp	r3, r2
700015b2:	f240 80b9 	bls.w	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
700015b6:	693b      	ldr	r3, [r7, #16]
700015b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
700015bc:	2b00      	cmp	r3, #0
700015be:	f000 80b3 	beq.w	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
700015c2:	683b      	ldr	r3, [r7, #0]
700015c4:	015a      	lsls	r2, r3, #5
700015c6:	69bb      	ldr	r3, [r7, #24]
700015c8:	4413      	add	r3, r2
700015ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700015ce:	461a      	mov	r2, r3
700015d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
700015d4:	6093      	str	r3, [r2, #8]
700015d6:	e0a7      	b.n	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
700015d8:	693b      	ldr	r3, [r7, #16]
700015da:	f003 0320 	and.w	r3, r3, #32
700015de:	2b00      	cmp	r3, #0
700015e0:	d009      	beq.n	700015f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
700015e2:	683b      	ldr	r3, [r7, #0]
700015e4:	015a      	lsls	r2, r3, #5
700015e6:	69bb      	ldr	r3, [r7, #24]
700015e8:	4413      	add	r3, r2
700015ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700015ee:	461a      	mov	r2, r3
700015f0:	2320      	movs	r3, #32
700015f2:	6093      	str	r3, [r2, #8]
700015f4:	e098      	b.n	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
700015f6:	693b      	ldr	r3, [r7, #16]
700015f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
700015fc:	2b00      	cmp	r3, #0
700015fe:	f040 8093 	bne.w	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70001602:	697b      	ldr	r3, [r7, #20]
70001604:	4a4b      	ldr	r2, [pc, #300]	@ (70001734 <PCD_EP_OutXfrComplete_int+0x1c8>)
70001606:	4293      	cmp	r3, r2
70001608:	d90f      	bls.n	7000162a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
7000160a:	693b      	ldr	r3, [r7, #16]
7000160c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70001610:	2b00      	cmp	r3, #0
70001612:	d00a      	beq.n	7000162a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
70001614:	683b      	ldr	r3, [r7, #0]
70001616:	015a      	lsls	r2, r3, #5
70001618:	69bb      	ldr	r3, [r7, #24]
7000161a:	4413      	add	r3, r2
7000161c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001620:	461a      	mov	r2, r3
70001622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70001626:	6093      	str	r3, [r2, #8]
70001628:	e07e      	b.n	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
7000162a:	683a      	ldr	r2, [r7, #0]
7000162c:	4613      	mov	r3, r2
7000162e:	00db      	lsls	r3, r3, #3
70001630:	4413      	add	r3, r2
70001632:	009b      	lsls	r3, r3, #2
70001634:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70001638:	687a      	ldr	r2, [r7, #4]
7000163a:	4413      	add	r3, r2
7000163c:	3304      	adds	r3, #4
7000163e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
70001640:	68fb      	ldr	r3, [r7, #12]
70001642:	6a1a      	ldr	r2, [r3, #32]
70001644:	683b      	ldr	r3, [r7, #0]
70001646:	0159      	lsls	r1, r3, #5
70001648:	69bb      	ldr	r3, [r7, #24]
7000164a:	440b      	add	r3, r1
7000164c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001650:	691b      	ldr	r3, [r3, #16]
70001652:	f3c3 0312 	ubfx	r3, r3, #0, #19
70001656:	1ad2      	subs	r2, r2, r3
70001658:	68fb      	ldr	r3, [r7, #12]
7000165a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
7000165c:	683b      	ldr	r3, [r7, #0]
7000165e:	2b00      	cmp	r3, #0
70001660:	d114      	bne.n	7000168c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
70001662:	68fb      	ldr	r3, [r7, #12]
70001664:	691b      	ldr	r3, [r3, #16]
70001666:	2b00      	cmp	r3, #0
70001668:	d109      	bne.n	7000167e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
7000166a:	687b      	ldr	r3, [r7, #4]
7000166c:	6818      	ldr	r0, [r3, #0]
7000166e:	687b      	ldr	r3, [r7, #4]
70001670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70001674:	461a      	mov	r2, r3
70001676:	2101      	movs	r1, #1
70001678:	f001 f966 	bl	70002948 <USB_EP0_OutStart>
7000167c:	e006      	b.n	7000168c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
7000167e:	68fb      	ldr	r3, [r7, #12]
70001680:	68da      	ldr	r2, [r3, #12]
70001682:	68fb      	ldr	r3, [r7, #12]
70001684:	695b      	ldr	r3, [r3, #20]
70001686:	441a      	add	r2, r3
70001688:	68fb      	ldr	r3, [r7, #12]
7000168a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
7000168c:	683b      	ldr	r3, [r7, #0]
7000168e:	b2db      	uxtb	r3, r3
70001690:	4619      	mov	r1, r3
70001692:	6878      	ldr	r0, [r7, #4]
70001694:	f002 fba5 	bl	70003de2 <HAL_PCD_DataOutStageCallback>
70001698:	e046      	b.n	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
7000169a:	697b      	ldr	r3, [r7, #20]
7000169c:	4a26      	ldr	r2, [pc, #152]	@ (70001738 <PCD_EP_OutXfrComplete_int+0x1cc>)
7000169e:	4293      	cmp	r3, r2
700016a0:	d124      	bne.n	700016ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
700016a2:	693b      	ldr	r3, [r7, #16]
700016a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
700016a8:	2b00      	cmp	r3, #0
700016aa:	d00a      	beq.n	700016c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
700016ac:	683b      	ldr	r3, [r7, #0]
700016ae:	015a      	lsls	r2, r3, #5
700016b0:	69bb      	ldr	r3, [r7, #24]
700016b2:	4413      	add	r3, r2
700016b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700016b8:	461a      	mov	r2, r3
700016ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
700016be:	6093      	str	r3, [r2, #8]
700016c0:	e032      	b.n	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
700016c2:	693b      	ldr	r3, [r7, #16]
700016c4:	f003 0320 	and.w	r3, r3, #32
700016c8:	2b00      	cmp	r3, #0
700016ca:	d008      	beq.n	700016de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
700016cc:	683b      	ldr	r3, [r7, #0]
700016ce:	015a      	lsls	r2, r3, #5
700016d0:	69bb      	ldr	r3, [r7, #24]
700016d2:	4413      	add	r3, r2
700016d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700016d8:	461a      	mov	r2, r3
700016da:	2320      	movs	r3, #32
700016dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
700016de:	683b      	ldr	r3, [r7, #0]
700016e0:	b2db      	uxtb	r3, r3
700016e2:	4619      	mov	r1, r3
700016e4:	6878      	ldr	r0, [r7, #4]
700016e6:	f002 fb7c 	bl	70003de2 <HAL_PCD_DataOutStageCallback>
700016ea:	e01d      	b.n	70001728 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
700016ec:	683b      	ldr	r3, [r7, #0]
700016ee:	2b00      	cmp	r3, #0
700016f0:	d114      	bne.n	7000171c <PCD_EP_OutXfrComplete_int+0x1b0>
700016f2:	6879      	ldr	r1, [r7, #4]
700016f4:	683a      	ldr	r2, [r7, #0]
700016f6:	4613      	mov	r3, r2
700016f8:	00db      	lsls	r3, r3, #3
700016fa:	4413      	add	r3, r2
700016fc:	009b      	lsls	r3, r3, #2
700016fe:	440b      	add	r3, r1
70001700:	f503 7319 	add.w	r3, r3, #612	@ 0x264
70001704:	681b      	ldr	r3, [r3, #0]
70001706:	2b00      	cmp	r3, #0
70001708:	d108      	bne.n	7000171c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
7000170a:	687b      	ldr	r3, [r7, #4]
7000170c:	6818      	ldr	r0, [r3, #0]
7000170e:	687b      	ldr	r3, [r7, #4]
70001710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70001714:	461a      	mov	r2, r3
70001716:	2100      	movs	r1, #0
70001718:	f001 f916 	bl	70002948 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
7000171c:	683b      	ldr	r3, [r7, #0]
7000171e:	b2db      	uxtb	r3, r3
70001720:	4619      	mov	r1, r3
70001722:	6878      	ldr	r0, [r7, #4]
70001724:	f002 fb5d 	bl	70003de2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
70001728:	2300      	movs	r3, #0
}
7000172a:	4618      	mov	r0, r3
7000172c:	3720      	adds	r7, #32
7000172e:	46bd      	mov	sp, r7
70001730:	bd80      	pop	{r7, pc}
70001732:	bf00      	nop
70001734:	4f54300a 	.word	0x4f54300a
70001738:	4f54310a 	.word	0x4f54310a

7000173c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
7000173c:	b580      	push	{r7, lr}
7000173e:	b086      	sub	sp, #24
70001740:	af00      	add	r7, sp, #0
70001742:	6078      	str	r0, [r7, #4]
70001744:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70001746:	687b      	ldr	r3, [r7, #4]
70001748:	681b      	ldr	r3, [r3, #0]
7000174a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000174c:	697b      	ldr	r3, [r7, #20]
7000174e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70001750:	697b      	ldr	r3, [r7, #20]
70001752:	333c      	adds	r3, #60	@ 0x3c
70001754:	3304      	adds	r3, #4
70001756:	681b      	ldr	r3, [r3, #0]
70001758:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
7000175a:	683b      	ldr	r3, [r7, #0]
7000175c:	015a      	lsls	r2, r3, #5
7000175e:	693b      	ldr	r3, [r7, #16]
70001760:	4413      	add	r3, r2
70001762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001766:	689b      	ldr	r3, [r3, #8]
70001768:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
7000176a:	68fb      	ldr	r3, [r7, #12]
7000176c:	4a15      	ldr	r2, [pc, #84]	@ (700017c4 <PCD_EP_OutSetupPacket_int+0x88>)
7000176e:	4293      	cmp	r3, r2
70001770:	d90e      	bls.n	70001790 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
70001772:	68bb      	ldr	r3, [r7, #8]
70001774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70001778:	2b00      	cmp	r3, #0
7000177a:	d009      	beq.n	70001790 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
7000177c:	683b      	ldr	r3, [r7, #0]
7000177e:	015a      	lsls	r2, r3, #5
70001780:	693b      	ldr	r3, [r7, #16]
70001782:	4413      	add	r3, r2
70001784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001788:	461a      	mov	r2, r3
7000178a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
7000178e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
70001790:	6878      	ldr	r0, [r7, #4]
70001792:	f002 fb14 	bl	70003dbe <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
70001796:	68fb      	ldr	r3, [r7, #12]
70001798:	4a0a      	ldr	r2, [pc, #40]	@ (700017c4 <PCD_EP_OutSetupPacket_int+0x88>)
7000179a:	4293      	cmp	r3, r2
7000179c:	d90c      	bls.n	700017b8 <PCD_EP_OutSetupPacket_int+0x7c>
7000179e:	687b      	ldr	r3, [r7, #4]
700017a0:	799b      	ldrb	r3, [r3, #6]
700017a2:	2b01      	cmp	r3, #1
700017a4:	d108      	bne.n	700017b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
700017a6:	687b      	ldr	r3, [r7, #4]
700017a8:	6818      	ldr	r0, [r3, #0]
700017aa:	687b      	ldr	r3, [r7, #4]
700017ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
700017b0:	461a      	mov	r2, r3
700017b2:	2101      	movs	r1, #1
700017b4:	f001 f8c8 	bl	70002948 <USB_EP0_OutStart>
  }

  return HAL_OK;
700017b8:	2300      	movs	r3, #0
}
700017ba:	4618      	mov	r0, r3
700017bc:	3718      	adds	r7, #24
700017be:	46bd      	mov	sp, r7
700017c0:	bd80      	pop	{r7, pc}
700017c2:	bf00      	nop
700017c4:	4f54300a 	.word	0x4f54300a

700017c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
700017c8:	b480      	push	{r7}
700017ca:	b083      	sub	sp, #12
700017cc:	af00      	add	r7, sp, #0
700017ce:	6078      	str	r0, [r7, #4]
700017d0:	460b      	mov	r3, r1
700017d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
700017d4:	bf00      	nop
700017d6:	370c      	adds	r7, #12
700017d8:	46bd      	mov	sp, r7
700017da:	f85d 7b04 	ldr.w	r7, [sp], #4
700017de:	4770      	bx	lr

700017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
700017e0:	b480      	push	{r7}
700017e2:	b08b      	sub	sp, #44	@ 0x2c
700017e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
700017e6:	4baa      	ldr	r3, [pc, #680]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
700017e8:	691b      	ldr	r3, [r3, #16]
700017ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
700017ee:	2b18      	cmp	r3, #24
700017f0:	f200 8136 	bhi.w	70001a60 <HAL_RCC_GetSysClockFreq+0x280>
700017f4:	a201      	add	r2, pc, #4	@ (adr r2, 700017fc <HAL_RCC_GetSysClockFreq+0x1c>)
700017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700017fa:	bf00      	nop
700017fc:	70001861 	.word	0x70001861
70001800:	70001a61 	.word	0x70001a61
70001804:	70001a61 	.word	0x70001a61
70001808:	70001a61 	.word	0x70001a61
7000180c:	70001a61 	.word	0x70001a61
70001810:	70001a61 	.word	0x70001a61
70001814:	70001a61 	.word	0x70001a61
70001818:	70001a61 	.word	0x70001a61
7000181c:	70001887 	.word	0x70001887
70001820:	70001a61 	.word	0x70001a61
70001824:	70001a61 	.word	0x70001a61
70001828:	70001a61 	.word	0x70001a61
7000182c:	70001a61 	.word	0x70001a61
70001830:	70001a61 	.word	0x70001a61
70001834:	70001a61 	.word	0x70001a61
70001838:	70001a61 	.word	0x70001a61
7000183c:	7000188d 	.word	0x7000188d
70001840:	70001a61 	.word	0x70001a61
70001844:	70001a61 	.word	0x70001a61
70001848:	70001a61 	.word	0x70001a61
7000184c:	70001a61 	.word	0x70001a61
70001850:	70001a61 	.word	0x70001a61
70001854:	70001a61 	.word	0x70001a61
70001858:	70001a61 	.word	0x70001a61
7000185c:	70001893 	.word	0x70001893
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70001860:	4b8b      	ldr	r3, [pc, #556]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001862:	681b      	ldr	r3, [r3, #0]
70001864:	f003 0320 	and.w	r3, r3, #32
70001868:	2b00      	cmp	r3, #0
7000186a:	d009      	beq.n	70001880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
7000186c:	4b88      	ldr	r3, [pc, #544]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000186e:	681b      	ldr	r3, [r3, #0]
70001870:	08db      	lsrs	r3, r3, #3
70001872:	f003 0303 	and.w	r3, r3, #3
70001876:	4a87      	ldr	r2, [pc, #540]	@ (70001a94 <HAL_RCC_GetSysClockFreq+0x2b4>)
70001878:	fa22 f303 	lsr.w	r3, r2, r3
7000187c:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
7000187e:	e0f2      	b.n	70001a66 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70001880:	2300      	movs	r3, #0
70001882:	623b      	str	r3, [r7, #32]
      break;
70001884:	e0ef      	b.n	70001a66 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
70001886:	4b84      	ldr	r3, [pc, #528]	@ (70001a98 <HAL_RCC_GetSysClockFreq+0x2b8>)
70001888:	623b      	str	r3, [r7, #32]
      break;
7000188a:	e0ec      	b.n	70001a66 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
7000188c:	4b83      	ldr	r3, [pc, #524]	@ (70001a9c <HAL_RCC_GetSysClockFreq+0x2bc>)
7000188e:	623b      	str	r3, [r7, #32]
      break;
70001890:	e0e9      	b.n	70001a66 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70001892:	4b7f      	ldr	r3, [pc, #508]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70001896:	f003 0303 	and.w	r3, r3, #3
7000189a:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
7000189c:	4b7c      	ldr	r3, [pc, #496]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000189e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700018a0:	091b      	lsrs	r3, r3, #4
700018a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
700018a6:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
700018a8:	4b79      	ldr	r3, [pc, #484]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
700018aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700018ac:	f003 0301 	and.w	r3, r3, #1
700018b0:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
700018b2:	4b77      	ldr	r3, [pc, #476]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
700018b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
700018b6:	08db      	lsrs	r3, r3, #3
700018b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
700018bc:	697a      	ldr	r2, [r7, #20]
700018be:	fb02 f303 	mul.w	r3, r2, r3
700018c2:	ee07 3a90 	vmov	s15, r3
700018c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
700018ca:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
700018ce:	69bb      	ldr	r3, [r7, #24]
700018d0:	2b00      	cmp	r3, #0
700018d2:	f000 80c2 	beq.w	70001a5a <HAL_RCC_GetSysClockFreq+0x27a>
      {
        switch (pllsource)
700018d6:	69fb      	ldr	r3, [r7, #28]
700018d8:	2b02      	cmp	r3, #2
700018da:	d064      	beq.n	700019a6 <HAL_RCC_GetSysClockFreq+0x1c6>
700018dc:	69fb      	ldr	r3, [r7, #28]
700018de:	2b02      	cmp	r3, #2
700018e0:	f200 8083 	bhi.w	700019ea <HAL_RCC_GetSysClockFreq+0x20a>
700018e4:	69fb      	ldr	r3, [r7, #28]
700018e6:	2b00      	cmp	r3, #0
700018e8:	d003      	beq.n	700018f2 <HAL_RCC_GetSysClockFreq+0x112>
700018ea:	69fb      	ldr	r3, [r7, #28]
700018ec:	2b01      	cmp	r3, #1
700018ee:	d038      	beq.n	70001962 <HAL_RCC_GetSysClockFreq+0x182>
700018f0:	e07b      	b.n	700019ea <HAL_RCC_GetSysClockFreq+0x20a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
700018f2:	4b67      	ldr	r3, [pc, #412]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
700018f4:	681b      	ldr	r3, [r3, #0]
700018f6:	f003 0320 	and.w	r3, r3, #32
700018fa:	2b00      	cmp	r3, #0
700018fc:	d02d      	beq.n	7000195a <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
700018fe:	4b64      	ldr	r3, [pc, #400]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001900:	681b      	ldr	r3, [r3, #0]
70001902:	08db      	lsrs	r3, r3, #3
70001904:	f003 0303 	and.w	r3, r3, #3
70001908:	4a62      	ldr	r2, [pc, #392]	@ (70001a94 <HAL_RCC_GetSysClockFreq+0x2b4>)
7000190a:	fa22 f303 	lsr.w	r3, r2, r3
7000190e:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70001910:	68fb      	ldr	r3, [r7, #12]
70001912:	ee07 3a90 	vmov	s15, r3
70001916:	eef8 6a67 	vcvt.f32.u32	s13, s15
7000191a:	69bb      	ldr	r3, [r7, #24]
7000191c:	ee07 3a90 	vmov	s15, r3
70001920:	eef8 7a67 	vcvt.f32.u32	s15, s15
70001924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70001928:	4b59      	ldr	r3, [pc, #356]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000192a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000192c:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001930:	ee07 3a90 	vmov	s15, r3
70001934:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001938:	ed97 6a04 	vldr	s12, [r7, #16]
7000193c:	eddf 5a58 	vldr	s11, [pc, #352]	@ 70001aa0 <HAL_RCC_GetSysClockFreq+0x2c0>
70001940:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001944:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
7000194c:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001950:	ee67 7a27 	vmul.f32	s15, s14, s15
70001954:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
70001958:	e069      	b.n	70001a2e <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
7000195a:	f04f 0300 	mov.w	r3, #0
7000195e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
70001960:	e065      	b.n	70001a2e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70001962:	69bb      	ldr	r3, [r7, #24]
70001964:	ee07 3a90 	vmov	s15, r3
70001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000196c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 70001aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
70001970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70001974:	4b46      	ldr	r3, [pc, #280]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001978:	f3c3 0308 	ubfx	r3, r3, #0, #9
7000197c:	ee07 3a90 	vmov	s15, r3
70001980:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001984:	ed97 6a04 	vldr	s12, [r7, #16]
70001988:	eddf 5a45 	vldr	s11, [pc, #276]	@ 70001aa0 <HAL_RCC_GetSysClockFreq+0x2c0>
7000198c:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001990:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001994:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001998:	ee77 7aa6 	vadd.f32	s15, s15, s13
7000199c:	ee67 7a27 	vmul.f32	s15, s14, s15
700019a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
700019a4:	e043      	b.n	70001a2e <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
700019a6:	69bb      	ldr	r3, [r7, #24]
700019a8:	ee07 3a90 	vmov	s15, r3
700019ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
700019b0:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 70001aa8 <HAL_RCC_GetSysClockFreq+0x2c8>
700019b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700019b8:	4b35      	ldr	r3, [pc, #212]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
700019ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700019bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
700019c0:	ee07 3a90 	vmov	s15, r3
700019c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
700019c8:	ed97 6a04 	vldr	s12, [r7, #16]
700019cc:	eddf 5a34 	vldr	s11, [pc, #208]	@ 70001aa0 <HAL_RCC_GetSysClockFreq+0x2c0>
700019d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
700019d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
700019d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
700019dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
700019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
700019e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
700019e8:	e021      	b.n	70001a2e <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
700019ea:	69bb      	ldr	r3, [r7, #24]
700019ec:	ee07 3a90 	vmov	s15, r3
700019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
700019f4:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 70001aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
700019f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700019fc:	4b24      	ldr	r3, [pc, #144]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
700019fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001a04:	ee07 3a90 	vmov	s15, r3
70001a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001a0c:	ed97 6a04 	vldr	s12, [r7, #16]
70001a10:	eddf 5a23 	vldr	s11, [pc, #140]	@ 70001aa0 <HAL_RCC_GetSysClockFreq+0x2c0>
70001a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001a1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
70001a28:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70001a2c:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
70001a2e:	4b18      	ldr	r3, [pc, #96]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001a32:	0a5b      	lsrs	r3, r3, #9
70001a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70001a38:	3301      	adds	r3, #1
70001a3a:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
70001a3c:	68bb      	ldr	r3, [r7, #8]
70001a3e:	ee07 3a90 	vmov	s15, r3
70001a42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70001a46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
70001a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
70001a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70001a52:	ee17 3a90 	vmov	r3, s15
70001a56:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
70001a58:	e005      	b.n	70001a66 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70001a5a:	2300      	movs	r3, #0
70001a5c:	623b      	str	r3, [r7, #32]
      break;
70001a5e:	e002      	b.n	70001a66 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
70001a60:	4b0d      	ldr	r3, [pc, #52]	@ (70001a98 <HAL_RCC_GetSysClockFreq+0x2b8>)
70001a62:	623b      	str	r3, [r7, #32]
      break;
70001a64:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
70001a66:	4b0a      	ldr	r3, [pc, #40]	@ (70001a90 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001a68:	699b      	ldr	r3, [r3, #24]
70001a6a:	f003 030f 	and.w	r3, r3, #15
70001a6e:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
70001a70:	687b      	ldr	r3, [r7, #4]
70001a72:	2b07      	cmp	r3, #7
70001a74:	d905      	bls.n	70001a82 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
70001a76:	687b      	ldr	r3, [r7, #4]
70001a78:	3b07      	subs	r3, #7
70001a7a:	6a3a      	ldr	r2, [r7, #32]
70001a7c:	fa22 f303 	lsr.w	r3, r2, r3
70001a80:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
70001a82:	6a3b      	ldr	r3, [r7, #32]
}
70001a84:	4618      	mov	r0, r3
70001a86:	372c      	adds	r7, #44	@ 0x2c
70001a88:	46bd      	mov	sp, r7
70001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
70001a8e:	4770      	bx	lr
70001a90:	58024400 	.word	0x58024400
70001a94:	03d09000 	.word	0x03d09000
70001a98:	003d0900 	.word	0x003d0900
70001a9c:	016e3600 	.word	0x016e3600
70001aa0:	46000000 	.word	0x46000000
70001aa4:	4a742400 	.word	0x4a742400
70001aa8:	4bb71b00 	.word	0x4bb71b00

70001aac <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
70001aac:	b580      	push	{r7, lr}
70001aae:	b084      	sub	sp, #16
70001ab0:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
70001ab2:	4a10      	ldr	r2, [pc, #64]	@ (70001af4 <HAL_RCC_GetHCLKFreq+0x48>)
70001ab4:	463b      	mov	r3, r7
70001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
70001aba:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
70001abe:	f7ff fe8f 	bl	700017e0 <HAL_RCC_GetSysClockFreq>
70001ac2:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
70001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (70001af8 <HAL_RCC_GetHCLKFreq+0x4c>)
70001ac6:	69db      	ldr	r3, [r3, #28]
70001ac8:	f003 030f 	and.w	r3, r3, #15
70001acc:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
70001ace:	68bb      	ldr	r3, [r7, #8]
70001ad0:	2b07      	cmp	r3, #7
70001ad2:	d909      	bls.n	70001ae8 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
70001ad4:	68bb      	ldr	r3, [r7, #8]
70001ad6:	3b08      	subs	r3, #8
70001ad8:	3310      	adds	r3, #16
70001ada:	443b      	add	r3, r7
70001adc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
70001ae0:	461a      	mov	r2, r3
70001ae2:	68fb      	ldr	r3, [r7, #12]
70001ae4:	40d3      	lsrs	r3, r2
70001ae6:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
70001ae8:	68fb      	ldr	r3, [r7, #12]
}
70001aea:	4618      	mov	r0, r3
70001aec:	3710      	adds	r7, #16
70001aee:	46bd      	mov	sp, r7
70001af0:	bd80      	pop	{r7, pc}
70001af2:	bf00      	nop
70001af4:	7000425c 	.word	0x7000425c
70001af8:	58024400 	.word	0x58024400

70001afc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
70001afc:	b480      	push	{r7}
70001afe:	b087      	sub	sp, #28
70001b00:	af00      	add	r7, sp, #0
70001b02:	60f8      	str	r0, [r7, #12]
70001b04:	60b9      	str	r1, [r7, #8]
70001b06:	4613      	mov	r3, r2
70001b08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
70001b0a:	79fb      	ldrb	r3, [r7, #7]
70001b0c:	2b02      	cmp	r3, #2
70001b0e:	d165      	bne.n	70001bdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
70001b10:	68bb      	ldr	r3, [r7, #8]
70001b12:	4a41      	ldr	r2, [pc, #260]	@ (70001c18 <USB_SetTurnaroundTime+0x11c>)
70001b14:	4293      	cmp	r3, r2
70001b16:	d906      	bls.n	70001b26 <USB_SetTurnaroundTime+0x2a>
70001b18:	68bb      	ldr	r3, [r7, #8]
70001b1a:	4a40      	ldr	r2, [pc, #256]	@ (70001c1c <USB_SetTurnaroundTime+0x120>)
70001b1c:	4293      	cmp	r3, r2
70001b1e:	d202      	bcs.n	70001b26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
70001b20:	230f      	movs	r3, #15
70001b22:	617b      	str	r3, [r7, #20]
70001b24:	e062      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
70001b26:	68bb      	ldr	r3, [r7, #8]
70001b28:	4a3c      	ldr	r2, [pc, #240]	@ (70001c1c <USB_SetTurnaroundTime+0x120>)
70001b2a:	4293      	cmp	r3, r2
70001b2c:	d306      	bcc.n	70001b3c <USB_SetTurnaroundTime+0x40>
70001b2e:	68bb      	ldr	r3, [r7, #8]
70001b30:	4a3b      	ldr	r2, [pc, #236]	@ (70001c20 <USB_SetTurnaroundTime+0x124>)
70001b32:	4293      	cmp	r3, r2
70001b34:	d202      	bcs.n	70001b3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
70001b36:	230e      	movs	r3, #14
70001b38:	617b      	str	r3, [r7, #20]
70001b3a:	e057      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
70001b3c:	68bb      	ldr	r3, [r7, #8]
70001b3e:	4a38      	ldr	r2, [pc, #224]	@ (70001c20 <USB_SetTurnaroundTime+0x124>)
70001b40:	4293      	cmp	r3, r2
70001b42:	d306      	bcc.n	70001b52 <USB_SetTurnaroundTime+0x56>
70001b44:	68bb      	ldr	r3, [r7, #8]
70001b46:	4a37      	ldr	r2, [pc, #220]	@ (70001c24 <USB_SetTurnaroundTime+0x128>)
70001b48:	4293      	cmp	r3, r2
70001b4a:	d202      	bcs.n	70001b52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
70001b4c:	230d      	movs	r3, #13
70001b4e:	617b      	str	r3, [r7, #20]
70001b50:	e04c      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
70001b52:	68bb      	ldr	r3, [r7, #8]
70001b54:	4a33      	ldr	r2, [pc, #204]	@ (70001c24 <USB_SetTurnaroundTime+0x128>)
70001b56:	4293      	cmp	r3, r2
70001b58:	d306      	bcc.n	70001b68 <USB_SetTurnaroundTime+0x6c>
70001b5a:	68bb      	ldr	r3, [r7, #8]
70001b5c:	4a32      	ldr	r2, [pc, #200]	@ (70001c28 <USB_SetTurnaroundTime+0x12c>)
70001b5e:	4293      	cmp	r3, r2
70001b60:	d802      	bhi.n	70001b68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
70001b62:	230c      	movs	r3, #12
70001b64:	617b      	str	r3, [r7, #20]
70001b66:	e041      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
70001b68:	68bb      	ldr	r3, [r7, #8]
70001b6a:	4a2f      	ldr	r2, [pc, #188]	@ (70001c28 <USB_SetTurnaroundTime+0x12c>)
70001b6c:	4293      	cmp	r3, r2
70001b6e:	d906      	bls.n	70001b7e <USB_SetTurnaroundTime+0x82>
70001b70:	68bb      	ldr	r3, [r7, #8]
70001b72:	4a2e      	ldr	r2, [pc, #184]	@ (70001c2c <USB_SetTurnaroundTime+0x130>)
70001b74:	4293      	cmp	r3, r2
70001b76:	d802      	bhi.n	70001b7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
70001b78:	230b      	movs	r3, #11
70001b7a:	617b      	str	r3, [r7, #20]
70001b7c:	e036      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
70001b7e:	68bb      	ldr	r3, [r7, #8]
70001b80:	4a2a      	ldr	r2, [pc, #168]	@ (70001c2c <USB_SetTurnaroundTime+0x130>)
70001b82:	4293      	cmp	r3, r2
70001b84:	d906      	bls.n	70001b94 <USB_SetTurnaroundTime+0x98>
70001b86:	68bb      	ldr	r3, [r7, #8]
70001b88:	4a29      	ldr	r2, [pc, #164]	@ (70001c30 <USB_SetTurnaroundTime+0x134>)
70001b8a:	4293      	cmp	r3, r2
70001b8c:	d802      	bhi.n	70001b94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
70001b8e:	230a      	movs	r3, #10
70001b90:	617b      	str	r3, [r7, #20]
70001b92:	e02b      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
70001b94:	68bb      	ldr	r3, [r7, #8]
70001b96:	4a26      	ldr	r2, [pc, #152]	@ (70001c30 <USB_SetTurnaroundTime+0x134>)
70001b98:	4293      	cmp	r3, r2
70001b9a:	d906      	bls.n	70001baa <USB_SetTurnaroundTime+0xae>
70001b9c:	68bb      	ldr	r3, [r7, #8]
70001b9e:	4a25      	ldr	r2, [pc, #148]	@ (70001c34 <USB_SetTurnaroundTime+0x138>)
70001ba0:	4293      	cmp	r3, r2
70001ba2:	d202      	bcs.n	70001baa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
70001ba4:	2309      	movs	r3, #9
70001ba6:	617b      	str	r3, [r7, #20]
70001ba8:	e020      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
70001baa:	68bb      	ldr	r3, [r7, #8]
70001bac:	4a21      	ldr	r2, [pc, #132]	@ (70001c34 <USB_SetTurnaroundTime+0x138>)
70001bae:	4293      	cmp	r3, r2
70001bb0:	d306      	bcc.n	70001bc0 <USB_SetTurnaroundTime+0xc4>
70001bb2:	68bb      	ldr	r3, [r7, #8]
70001bb4:	4a20      	ldr	r2, [pc, #128]	@ (70001c38 <USB_SetTurnaroundTime+0x13c>)
70001bb6:	4293      	cmp	r3, r2
70001bb8:	d802      	bhi.n	70001bc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
70001bba:	2308      	movs	r3, #8
70001bbc:	617b      	str	r3, [r7, #20]
70001bbe:	e015      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
70001bc0:	68bb      	ldr	r3, [r7, #8]
70001bc2:	4a1d      	ldr	r2, [pc, #116]	@ (70001c38 <USB_SetTurnaroundTime+0x13c>)
70001bc4:	4293      	cmp	r3, r2
70001bc6:	d906      	bls.n	70001bd6 <USB_SetTurnaroundTime+0xda>
70001bc8:	68bb      	ldr	r3, [r7, #8]
70001bca:	4a1c      	ldr	r2, [pc, #112]	@ (70001c3c <USB_SetTurnaroundTime+0x140>)
70001bcc:	4293      	cmp	r3, r2
70001bce:	d202      	bcs.n	70001bd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
70001bd0:	2307      	movs	r3, #7
70001bd2:	617b      	str	r3, [r7, #20]
70001bd4:	e00a      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
70001bd6:	2306      	movs	r3, #6
70001bd8:	617b      	str	r3, [r7, #20]
70001bda:	e007      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
70001bdc:	79fb      	ldrb	r3, [r7, #7]
70001bde:	2b00      	cmp	r3, #0
70001be0:	d102      	bne.n	70001be8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
70001be2:	2309      	movs	r3, #9
70001be4:	617b      	str	r3, [r7, #20]
70001be6:	e001      	b.n	70001bec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
70001be8:	2309      	movs	r3, #9
70001bea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
70001bec:	68fb      	ldr	r3, [r7, #12]
70001bee:	68db      	ldr	r3, [r3, #12]
70001bf0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
70001bf4:	68fb      	ldr	r3, [r7, #12]
70001bf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
70001bf8:	68fb      	ldr	r3, [r7, #12]
70001bfa:	68da      	ldr	r2, [r3, #12]
70001bfc:	697b      	ldr	r3, [r7, #20]
70001bfe:	029b      	lsls	r3, r3, #10
70001c00:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
70001c04:	431a      	orrs	r2, r3
70001c06:	68fb      	ldr	r3, [r7, #12]
70001c08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
70001c0a:	2300      	movs	r3, #0
}
70001c0c:	4618      	mov	r0, r3
70001c0e:	371c      	adds	r7, #28
70001c10:	46bd      	mov	sp, r7
70001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
70001c16:	4770      	bx	lr
70001c18:	00d8acbf 	.word	0x00d8acbf
70001c1c:	00e4e1c0 	.word	0x00e4e1c0
70001c20:	00f42400 	.word	0x00f42400
70001c24:	01067380 	.word	0x01067380
70001c28:	011a499f 	.word	0x011a499f
70001c2c:	01312cff 	.word	0x01312cff
70001c30:	014ca43f 	.word	0x014ca43f
70001c34:	016e3600 	.word	0x016e3600
70001c38:	01a6ab1f 	.word	0x01a6ab1f
70001c3c:	01e84800 	.word	0x01e84800

70001c40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
70001c40:	b480      	push	{r7}
70001c42:	b085      	sub	sp, #20
70001c44:	af00      	add	r7, sp, #0
70001c46:	6078      	str	r0, [r7, #4]
70001c48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
70001c4a:	2300      	movs	r3, #0
70001c4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
70001c4e:	68fb      	ldr	r3, [r7, #12]
70001c50:	3301      	adds	r3, #1
70001c52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
70001c54:	68fb      	ldr	r3, [r7, #12]
70001c56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
70001c5a:	d901      	bls.n	70001c60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
70001c5c:	2303      	movs	r3, #3
70001c5e:	e01b      	b.n	70001c98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
70001c60:	687b      	ldr	r3, [r7, #4]
70001c62:	691b      	ldr	r3, [r3, #16]
70001c64:	2b00      	cmp	r3, #0
70001c66:	daf2      	bge.n	70001c4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
70001c68:	2300      	movs	r3, #0
70001c6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
70001c6c:	683b      	ldr	r3, [r7, #0]
70001c6e:	019b      	lsls	r3, r3, #6
70001c70:	f043 0220 	orr.w	r2, r3, #32
70001c74:	687b      	ldr	r3, [r7, #4]
70001c76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
70001c78:	68fb      	ldr	r3, [r7, #12]
70001c7a:	3301      	adds	r3, #1
70001c7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
70001c7e:	68fb      	ldr	r3, [r7, #12]
70001c80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
70001c84:	d901      	bls.n	70001c8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
70001c86:	2303      	movs	r3, #3
70001c88:	e006      	b.n	70001c98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
70001c8a:	687b      	ldr	r3, [r7, #4]
70001c8c:	691b      	ldr	r3, [r3, #16]
70001c8e:	f003 0320 	and.w	r3, r3, #32
70001c92:	2b20      	cmp	r3, #32
70001c94:	d0f0      	beq.n	70001c78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
70001c96:	2300      	movs	r3, #0
}
70001c98:	4618      	mov	r0, r3
70001c9a:	3714      	adds	r7, #20
70001c9c:	46bd      	mov	sp, r7
70001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001ca2:	4770      	bx	lr

70001ca4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
70001ca4:	b480      	push	{r7}
70001ca6:	b087      	sub	sp, #28
70001ca8:	af00      	add	r7, sp, #0
70001caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001cac:	687b      	ldr	r3, [r7, #4]
70001cae:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
70001cb0:	693b      	ldr	r3, [r7, #16]
70001cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001cb6:	689b      	ldr	r3, [r3, #8]
70001cb8:	f003 0306 	and.w	r3, r3, #6
70001cbc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
70001cbe:	68fb      	ldr	r3, [r7, #12]
70001cc0:	2b00      	cmp	r3, #0
70001cc2:	d102      	bne.n	70001cca <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
70001cc4:	2300      	movs	r3, #0
70001cc6:	75fb      	strb	r3, [r7, #23]
70001cc8:	e00a      	b.n	70001ce0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
70001cca:	68fb      	ldr	r3, [r7, #12]
70001ccc:	2b02      	cmp	r3, #2
70001cce:	d002      	beq.n	70001cd6 <USB_GetDevSpeed+0x32>
70001cd0:	68fb      	ldr	r3, [r7, #12]
70001cd2:	2b06      	cmp	r3, #6
70001cd4:	d102      	bne.n	70001cdc <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
70001cd6:	2302      	movs	r3, #2
70001cd8:	75fb      	strb	r3, [r7, #23]
70001cda:	e001      	b.n	70001ce0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
70001cdc:	230f      	movs	r3, #15
70001cde:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
70001ce0:	7dfb      	ldrb	r3, [r7, #23]
}
70001ce2:	4618      	mov	r0, r3
70001ce4:	371c      	adds	r7, #28
70001ce6:	46bd      	mov	sp, r7
70001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
70001cec:	4770      	bx	lr
	...

70001cf0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70001cf0:	b480      	push	{r7}
70001cf2:	b085      	sub	sp, #20
70001cf4:	af00      	add	r7, sp, #0
70001cf6:	6078      	str	r0, [r7, #4]
70001cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001cfa:	687b      	ldr	r3, [r7, #4]
70001cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70001cfe:	683b      	ldr	r3, [r7, #0]
70001d00:	781b      	ldrb	r3, [r3, #0]
70001d02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
70001d04:	683b      	ldr	r3, [r7, #0]
70001d06:	785b      	ldrb	r3, [r3, #1]
70001d08:	2b01      	cmp	r3, #1
70001d0a:	d139      	bne.n	70001d80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
70001d0c:	68fb      	ldr	r3, [r7, #12]
70001d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001d12:	69da      	ldr	r2, [r3, #28]
70001d14:	683b      	ldr	r3, [r7, #0]
70001d16:	781b      	ldrb	r3, [r3, #0]
70001d18:	f003 030f 	and.w	r3, r3, #15
70001d1c:	2101      	movs	r1, #1
70001d1e:	fa01 f303 	lsl.w	r3, r1, r3
70001d22:	b29b      	uxth	r3, r3
70001d24:	68f9      	ldr	r1, [r7, #12]
70001d26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70001d2a:	4313      	orrs	r3, r2
70001d2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
70001d2e:	68bb      	ldr	r3, [r7, #8]
70001d30:	015a      	lsls	r2, r3, #5
70001d32:	68fb      	ldr	r3, [r7, #12]
70001d34:	4413      	add	r3, r2
70001d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001d3a:	681b      	ldr	r3, [r3, #0]
70001d3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70001d40:	2b00      	cmp	r3, #0
70001d42:	d153      	bne.n	70001dec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70001d44:	68bb      	ldr	r3, [r7, #8]
70001d46:	015a      	lsls	r2, r3, #5
70001d48:	68fb      	ldr	r3, [r7, #12]
70001d4a:	4413      	add	r3, r2
70001d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001d50:	681a      	ldr	r2, [r3, #0]
70001d52:	683b      	ldr	r3, [r7, #0]
70001d54:	689b      	ldr	r3, [r3, #8]
70001d56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
70001d5a:	683b      	ldr	r3, [r7, #0]
70001d5c:	791b      	ldrb	r3, [r3, #4]
70001d5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70001d60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
70001d62:	68bb      	ldr	r3, [r7, #8]
70001d64:	059b      	lsls	r3, r3, #22
70001d66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70001d68:	431a      	orrs	r2, r3
70001d6a:	68bb      	ldr	r3, [r7, #8]
70001d6c:	0159      	lsls	r1, r3, #5
70001d6e:	68fb      	ldr	r3, [r7, #12]
70001d70:	440b      	add	r3, r1
70001d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001d76:	4619      	mov	r1, r3
70001d78:	4b20      	ldr	r3, [pc, #128]	@ (70001dfc <USB_ActivateEndpoint+0x10c>)
70001d7a:	4313      	orrs	r3, r2
70001d7c:	600b      	str	r3, [r1, #0]
70001d7e:	e035      	b.n	70001dec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
70001d80:	68fb      	ldr	r3, [r7, #12]
70001d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001d86:	69da      	ldr	r2, [r3, #28]
70001d88:	683b      	ldr	r3, [r7, #0]
70001d8a:	781b      	ldrb	r3, [r3, #0]
70001d8c:	f003 030f 	and.w	r3, r3, #15
70001d90:	2101      	movs	r1, #1
70001d92:	fa01 f303 	lsl.w	r3, r1, r3
70001d96:	041b      	lsls	r3, r3, #16
70001d98:	68f9      	ldr	r1, [r7, #12]
70001d9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70001d9e:	4313      	orrs	r3, r2
70001da0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
70001da2:	68bb      	ldr	r3, [r7, #8]
70001da4:	015a      	lsls	r2, r3, #5
70001da6:	68fb      	ldr	r3, [r7, #12]
70001da8:	4413      	add	r3, r2
70001daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001dae:	681b      	ldr	r3, [r3, #0]
70001db0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70001db4:	2b00      	cmp	r3, #0
70001db6:	d119      	bne.n	70001dec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
70001db8:	68bb      	ldr	r3, [r7, #8]
70001dba:	015a      	lsls	r2, r3, #5
70001dbc:	68fb      	ldr	r3, [r7, #12]
70001dbe:	4413      	add	r3, r2
70001dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001dc4:	681a      	ldr	r2, [r3, #0]
70001dc6:	683b      	ldr	r3, [r7, #0]
70001dc8:	689b      	ldr	r3, [r3, #8]
70001dca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
70001dce:	683b      	ldr	r3, [r7, #0]
70001dd0:	791b      	ldrb	r3, [r3, #4]
70001dd2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
70001dd4:	430b      	orrs	r3, r1
70001dd6:	431a      	orrs	r2, r3
70001dd8:	68bb      	ldr	r3, [r7, #8]
70001dda:	0159      	lsls	r1, r3, #5
70001ddc:	68fb      	ldr	r3, [r7, #12]
70001dde:	440b      	add	r3, r1
70001de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001de4:	4619      	mov	r1, r3
70001de6:	4b05      	ldr	r3, [pc, #20]	@ (70001dfc <USB_ActivateEndpoint+0x10c>)
70001de8:	4313      	orrs	r3, r2
70001dea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
70001dec:	2300      	movs	r3, #0
}
70001dee:	4618      	mov	r0, r3
70001df0:	3714      	adds	r7, #20
70001df2:	46bd      	mov	sp, r7
70001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
70001df8:	4770      	bx	lr
70001dfa:	bf00      	nop
70001dfc:	10008000 	.word	0x10008000

70001e00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
70001e00:	b580      	push	{r7, lr}
70001e02:	b08a      	sub	sp, #40	@ 0x28
70001e04:	af02      	add	r7, sp, #8
70001e06:	60f8      	str	r0, [r7, #12]
70001e08:	60b9      	str	r1, [r7, #8]
70001e0a:	4613      	mov	r3, r2
70001e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001e0e:	68fb      	ldr	r3, [r7, #12]
70001e10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
70001e12:	68bb      	ldr	r3, [r7, #8]
70001e14:	781b      	ldrb	r3, [r3, #0]
70001e16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
70001e18:	68bb      	ldr	r3, [r7, #8]
70001e1a:	785b      	ldrb	r3, [r3, #1]
70001e1c:	2b01      	cmp	r3, #1
70001e1e:	f040 8185 	bne.w	7000212c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
70001e22:	68bb      	ldr	r3, [r7, #8]
70001e24:	691b      	ldr	r3, [r3, #16]
70001e26:	2b00      	cmp	r3, #0
70001e28:	d132      	bne.n	70001e90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
70001e2a:	69bb      	ldr	r3, [r7, #24]
70001e2c:	015a      	lsls	r2, r3, #5
70001e2e:	69fb      	ldr	r3, [r7, #28]
70001e30:	4413      	add	r3, r2
70001e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e36:	691a      	ldr	r2, [r3, #16]
70001e38:	69bb      	ldr	r3, [r7, #24]
70001e3a:	0159      	lsls	r1, r3, #5
70001e3c:	69fb      	ldr	r3, [r7, #28]
70001e3e:	440b      	add	r3, r1
70001e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e44:	4619      	mov	r1, r3
70001e46:	4ba7      	ldr	r3, [pc, #668]	@ (700020e4 <USB_EPStartXfer+0x2e4>)
70001e48:	4013      	ands	r3, r2
70001e4a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
70001e4c:	69bb      	ldr	r3, [r7, #24]
70001e4e:	015a      	lsls	r2, r3, #5
70001e50:	69fb      	ldr	r3, [r7, #28]
70001e52:	4413      	add	r3, r2
70001e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e58:	691b      	ldr	r3, [r3, #16]
70001e5a:	69ba      	ldr	r2, [r7, #24]
70001e5c:	0151      	lsls	r1, r2, #5
70001e5e:	69fa      	ldr	r2, [r7, #28]
70001e60:	440a      	add	r2, r1
70001e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70001e66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70001e6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
70001e6c:	69bb      	ldr	r3, [r7, #24]
70001e6e:	015a      	lsls	r2, r3, #5
70001e70:	69fb      	ldr	r3, [r7, #28]
70001e72:	4413      	add	r3, r2
70001e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e78:	691a      	ldr	r2, [r3, #16]
70001e7a:	69bb      	ldr	r3, [r7, #24]
70001e7c:	0159      	lsls	r1, r3, #5
70001e7e:	69fb      	ldr	r3, [r7, #28]
70001e80:	440b      	add	r3, r1
70001e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e86:	4619      	mov	r1, r3
70001e88:	4b97      	ldr	r3, [pc, #604]	@ (700020e8 <USB_EPStartXfer+0x2e8>)
70001e8a:	4013      	ands	r3, r2
70001e8c:	610b      	str	r3, [r1, #16]
70001e8e:	e097      	b.n	70001fc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
70001e90:	69bb      	ldr	r3, [r7, #24]
70001e92:	015a      	lsls	r2, r3, #5
70001e94:	69fb      	ldr	r3, [r7, #28]
70001e96:	4413      	add	r3, r2
70001e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e9c:	691a      	ldr	r2, [r3, #16]
70001e9e:	69bb      	ldr	r3, [r7, #24]
70001ea0:	0159      	lsls	r1, r3, #5
70001ea2:	69fb      	ldr	r3, [r7, #28]
70001ea4:	440b      	add	r3, r1
70001ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001eaa:	4619      	mov	r1, r3
70001eac:	4b8e      	ldr	r3, [pc, #568]	@ (700020e8 <USB_EPStartXfer+0x2e8>)
70001eae:	4013      	ands	r3, r2
70001eb0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
70001eb2:	69bb      	ldr	r3, [r7, #24]
70001eb4:	015a      	lsls	r2, r3, #5
70001eb6:	69fb      	ldr	r3, [r7, #28]
70001eb8:	4413      	add	r3, r2
70001eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001ebe:	691a      	ldr	r2, [r3, #16]
70001ec0:	69bb      	ldr	r3, [r7, #24]
70001ec2:	0159      	lsls	r1, r3, #5
70001ec4:	69fb      	ldr	r3, [r7, #28]
70001ec6:	440b      	add	r3, r1
70001ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001ecc:	4619      	mov	r1, r3
70001ece:	4b85      	ldr	r3, [pc, #532]	@ (700020e4 <USB_EPStartXfer+0x2e4>)
70001ed0:	4013      	ands	r3, r2
70001ed2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
70001ed4:	69bb      	ldr	r3, [r7, #24]
70001ed6:	2b00      	cmp	r3, #0
70001ed8:	d11a      	bne.n	70001f10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
70001eda:	68bb      	ldr	r3, [r7, #8]
70001edc:	691a      	ldr	r2, [r3, #16]
70001ede:	68bb      	ldr	r3, [r7, #8]
70001ee0:	689b      	ldr	r3, [r3, #8]
70001ee2:	429a      	cmp	r2, r3
70001ee4:	d903      	bls.n	70001eee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
70001ee6:	68bb      	ldr	r3, [r7, #8]
70001ee8:	689a      	ldr	r2, [r3, #8]
70001eea:	68bb      	ldr	r3, [r7, #8]
70001eec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
70001eee:	69bb      	ldr	r3, [r7, #24]
70001ef0:	015a      	lsls	r2, r3, #5
70001ef2:	69fb      	ldr	r3, [r7, #28]
70001ef4:	4413      	add	r3, r2
70001ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001efa:	691b      	ldr	r3, [r3, #16]
70001efc:	69ba      	ldr	r2, [r7, #24]
70001efe:	0151      	lsls	r1, r2, #5
70001f00:	69fa      	ldr	r2, [r7, #28]
70001f02:	440a      	add	r2, r1
70001f04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70001f08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70001f0c:	6113      	str	r3, [r2, #16]
70001f0e:	e044      	b.n	70001f9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
70001f10:	68bb      	ldr	r3, [r7, #8]
70001f12:	691a      	ldr	r2, [r3, #16]
70001f14:	68bb      	ldr	r3, [r7, #8]
70001f16:	689b      	ldr	r3, [r3, #8]
70001f18:	4413      	add	r3, r2
70001f1a:	1e5a      	subs	r2, r3, #1
70001f1c:	68bb      	ldr	r3, [r7, #8]
70001f1e:	689b      	ldr	r3, [r3, #8]
70001f20:	fbb2 f3f3 	udiv	r3, r2, r3
70001f24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
70001f26:	69bb      	ldr	r3, [r7, #24]
70001f28:	015a      	lsls	r2, r3, #5
70001f2a:	69fb      	ldr	r3, [r7, #28]
70001f2c:	4413      	add	r3, r2
70001f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f32:	691a      	ldr	r2, [r3, #16]
70001f34:	8afb      	ldrh	r3, [r7, #22]
70001f36:	04d9      	lsls	r1, r3, #19
70001f38:	4b6c      	ldr	r3, [pc, #432]	@ (700020ec <USB_EPStartXfer+0x2ec>)
70001f3a:	400b      	ands	r3, r1
70001f3c:	69b9      	ldr	r1, [r7, #24]
70001f3e:	0148      	lsls	r0, r1, #5
70001f40:	69f9      	ldr	r1, [r7, #28]
70001f42:	4401      	add	r1, r0
70001f44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70001f48:	4313      	orrs	r3, r2
70001f4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
70001f4c:	68bb      	ldr	r3, [r7, #8]
70001f4e:	791b      	ldrb	r3, [r3, #4]
70001f50:	2b01      	cmp	r3, #1
70001f52:	d122      	bne.n	70001f9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
70001f54:	69bb      	ldr	r3, [r7, #24]
70001f56:	015a      	lsls	r2, r3, #5
70001f58:	69fb      	ldr	r3, [r7, #28]
70001f5a:	4413      	add	r3, r2
70001f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f60:	691b      	ldr	r3, [r3, #16]
70001f62:	69ba      	ldr	r2, [r7, #24]
70001f64:	0151      	lsls	r1, r2, #5
70001f66:	69fa      	ldr	r2, [r7, #28]
70001f68:	440a      	add	r2, r1
70001f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70001f6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
70001f72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
70001f74:	69bb      	ldr	r3, [r7, #24]
70001f76:	015a      	lsls	r2, r3, #5
70001f78:	69fb      	ldr	r3, [r7, #28]
70001f7a:	4413      	add	r3, r2
70001f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f80:	691a      	ldr	r2, [r3, #16]
70001f82:	8afb      	ldrh	r3, [r7, #22]
70001f84:	075b      	lsls	r3, r3, #29
70001f86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
70001f8a:	69b9      	ldr	r1, [r7, #24]
70001f8c:	0148      	lsls	r0, r1, #5
70001f8e:	69f9      	ldr	r1, [r7, #28]
70001f90:	4401      	add	r1, r0
70001f92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70001f96:	4313      	orrs	r3, r2
70001f98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
70001f9a:	69bb      	ldr	r3, [r7, #24]
70001f9c:	015a      	lsls	r2, r3, #5
70001f9e:	69fb      	ldr	r3, [r7, #28]
70001fa0:	4413      	add	r3, r2
70001fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001fa6:	691a      	ldr	r2, [r3, #16]
70001fa8:	68bb      	ldr	r3, [r7, #8]
70001faa:	691b      	ldr	r3, [r3, #16]
70001fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
70001fb0:	69b9      	ldr	r1, [r7, #24]
70001fb2:	0148      	lsls	r0, r1, #5
70001fb4:	69f9      	ldr	r1, [r7, #28]
70001fb6:	4401      	add	r1, r0
70001fb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70001fbc:	4313      	orrs	r3, r2
70001fbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
70001fc0:	79fb      	ldrb	r3, [r7, #7]
70001fc2:	2b01      	cmp	r3, #1
70001fc4:	d14b      	bne.n	7000205e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
70001fc6:	68bb      	ldr	r3, [r7, #8]
70001fc8:	69db      	ldr	r3, [r3, #28]
70001fca:	2b00      	cmp	r3, #0
70001fcc:	d009      	beq.n	70001fe2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
70001fce:	69bb      	ldr	r3, [r7, #24]
70001fd0:	015a      	lsls	r2, r3, #5
70001fd2:	69fb      	ldr	r3, [r7, #28]
70001fd4:	4413      	add	r3, r2
70001fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001fda:	461a      	mov	r2, r3
70001fdc:	68bb      	ldr	r3, [r7, #8]
70001fde:	69db      	ldr	r3, [r3, #28]
70001fe0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
70001fe2:	68bb      	ldr	r3, [r7, #8]
70001fe4:	791b      	ldrb	r3, [r3, #4]
70001fe6:	2b01      	cmp	r3, #1
70001fe8:	d128      	bne.n	7000203c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
70001fea:	69fb      	ldr	r3, [r7, #28]
70001fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001ff0:	689b      	ldr	r3, [r3, #8]
70001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
70001ff6:	2b00      	cmp	r3, #0
70001ff8:	d110      	bne.n	7000201c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
70001ffa:	69bb      	ldr	r3, [r7, #24]
70001ffc:	015a      	lsls	r2, r3, #5
70001ffe:	69fb      	ldr	r3, [r7, #28]
70002000:	4413      	add	r3, r2
70002002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002006:	681b      	ldr	r3, [r3, #0]
70002008:	69ba      	ldr	r2, [r7, #24]
7000200a:	0151      	lsls	r1, r2, #5
7000200c:	69fa      	ldr	r2, [r7, #28]
7000200e:	440a      	add	r2, r1
70002010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002014:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
70002018:	6013      	str	r3, [r2, #0]
7000201a:	e00f      	b.n	7000203c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
7000201c:	69bb      	ldr	r3, [r7, #24]
7000201e:	015a      	lsls	r2, r3, #5
70002020:	69fb      	ldr	r3, [r7, #28]
70002022:	4413      	add	r3, r2
70002024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002028:	681b      	ldr	r3, [r3, #0]
7000202a:	69ba      	ldr	r2, [r7, #24]
7000202c:	0151      	lsls	r1, r2, #5
7000202e:	69fa      	ldr	r2, [r7, #28]
70002030:	440a      	add	r2, r1
70002032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
7000203a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
7000203c:	69bb      	ldr	r3, [r7, #24]
7000203e:	015a      	lsls	r2, r3, #5
70002040:	69fb      	ldr	r3, [r7, #28]
70002042:	4413      	add	r3, r2
70002044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002048:	681b      	ldr	r3, [r3, #0]
7000204a:	69ba      	ldr	r2, [r7, #24]
7000204c:	0151      	lsls	r1, r2, #5
7000204e:	69fa      	ldr	r2, [r7, #28]
70002050:	440a      	add	r2, r1
70002052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002056:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
7000205a:	6013      	str	r3, [r2, #0]
7000205c:	e169      	b.n	70002332 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
7000205e:	69bb      	ldr	r3, [r7, #24]
70002060:	015a      	lsls	r2, r3, #5
70002062:	69fb      	ldr	r3, [r7, #28]
70002064:	4413      	add	r3, r2
70002066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000206a:	681b      	ldr	r3, [r3, #0]
7000206c:	69ba      	ldr	r2, [r7, #24]
7000206e:	0151      	lsls	r1, r2, #5
70002070:	69fa      	ldr	r2, [r7, #28]
70002072:	440a      	add	r2, r1
70002074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002078:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
7000207c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
7000207e:	68bb      	ldr	r3, [r7, #8]
70002080:	791b      	ldrb	r3, [r3, #4]
70002082:	2b01      	cmp	r3, #1
70002084:	d015      	beq.n	700020b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
70002086:	68bb      	ldr	r3, [r7, #8]
70002088:	691b      	ldr	r3, [r3, #16]
7000208a:	2b00      	cmp	r3, #0
7000208c:	f000 8151 	beq.w	70002332 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
70002090:	69fb      	ldr	r3, [r7, #28]
70002092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70002098:	68bb      	ldr	r3, [r7, #8]
7000209a:	781b      	ldrb	r3, [r3, #0]
7000209c:	f003 030f 	and.w	r3, r3, #15
700020a0:	2101      	movs	r1, #1
700020a2:	fa01 f303 	lsl.w	r3, r1, r3
700020a6:	69f9      	ldr	r1, [r7, #28]
700020a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
700020ac:	4313      	orrs	r3, r2
700020ae:	634b      	str	r3, [r1, #52]	@ 0x34
700020b0:	e13f      	b.n	70002332 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
700020b2:	69fb      	ldr	r3, [r7, #28]
700020b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700020b8:	689b      	ldr	r3, [r3, #8]
700020ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700020be:	2b00      	cmp	r3, #0
700020c0:	d116      	bne.n	700020f0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
700020c2:	69bb      	ldr	r3, [r7, #24]
700020c4:	015a      	lsls	r2, r3, #5
700020c6:	69fb      	ldr	r3, [r7, #28]
700020c8:	4413      	add	r3, r2
700020ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700020ce:	681b      	ldr	r3, [r3, #0]
700020d0:	69ba      	ldr	r2, [r7, #24]
700020d2:	0151      	lsls	r1, r2, #5
700020d4:	69fa      	ldr	r2, [r7, #28]
700020d6:	440a      	add	r2, r1
700020d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700020dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700020e0:	6013      	str	r3, [r2, #0]
700020e2:	e015      	b.n	70002110 <USB_EPStartXfer+0x310>
700020e4:	e007ffff 	.word	0xe007ffff
700020e8:	fff80000 	.word	0xfff80000
700020ec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
700020f0:	69bb      	ldr	r3, [r7, #24]
700020f2:	015a      	lsls	r2, r3, #5
700020f4:	69fb      	ldr	r3, [r7, #28]
700020f6:	4413      	add	r3, r2
700020f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700020fc:	681b      	ldr	r3, [r3, #0]
700020fe:	69ba      	ldr	r2, [r7, #24]
70002100:	0151      	lsls	r1, r2, #5
70002102:	69fa      	ldr	r2, [r7, #28]
70002104:	440a      	add	r2, r1
70002106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
7000210e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
70002110:	68bb      	ldr	r3, [r7, #8]
70002112:	68d9      	ldr	r1, [r3, #12]
70002114:	68bb      	ldr	r3, [r7, #8]
70002116:	781a      	ldrb	r2, [r3, #0]
70002118:	68bb      	ldr	r3, [r7, #8]
7000211a:	691b      	ldr	r3, [r3, #16]
7000211c:	b298      	uxth	r0, r3
7000211e:	79fb      	ldrb	r3, [r7, #7]
70002120:	9300      	str	r3, [sp, #0]
70002122:	4603      	mov	r3, r0
70002124:	68f8      	ldr	r0, [r7, #12]
70002126:	f000 f9b9 	bl	7000249c <USB_WritePacket>
7000212a:	e102      	b.n	70002332 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
7000212c:	69bb      	ldr	r3, [r7, #24]
7000212e:	015a      	lsls	r2, r3, #5
70002130:	69fb      	ldr	r3, [r7, #28]
70002132:	4413      	add	r3, r2
70002134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002138:	691a      	ldr	r2, [r3, #16]
7000213a:	69bb      	ldr	r3, [r7, #24]
7000213c:	0159      	lsls	r1, r3, #5
7000213e:	69fb      	ldr	r3, [r7, #28]
70002140:	440b      	add	r3, r1
70002142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002146:	4619      	mov	r1, r3
70002148:	4b7c      	ldr	r3, [pc, #496]	@ (7000233c <USB_EPStartXfer+0x53c>)
7000214a:	4013      	ands	r3, r2
7000214c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
7000214e:	69bb      	ldr	r3, [r7, #24]
70002150:	015a      	lsls	r2, r3, #5
70002152:	69fb      	ldr	r3, [r7, #28]
70002154:	4413      	add	r3, r2
70002156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000215a:	691a      	ldr	r2, [r3, #16]
7000215c:	69bb      	ldr	r3, [r7, #24]
7000215e:	0159      	lsls	r1, r3, #5
70002160:	69fb      	ldr	r3, [r7, #28]
70002162:	440b      	add	r3, r1
70002164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002168:	4619      	mov	r1, r3
7000216a:	4b75      	ldr	r3, [pc, #468]	@ (70002340 <USB_EPStartXfer+0x540>)
7000216c:	4013      	ands	r3, r2
7000216e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
70002170:	69bb      	ldr	r3, [r7, #24]
70002172:	2b00      	cmp	r3, #0
70002174:	d12f      	bne.n	700021d6 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
70002176:	68bb      	ldr	r3, [r7, #8]
70002178:	691b      	ldr	r3, [r3, #16]
7000217a:	2b00      	cmp	r3, #0
7000217c:	d003      	beq.n	70002186 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
7000217e:	68bb      	ldr	r3, [r7, #8]
70002180:	689a      	ldr	r2, [r3, #8]
70002182:	68bb      	ldr	r3, [r7, #8]
70002184:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
70002186:	68bb      	ldr	r3, [r7, #8]
70002188:	689a      	ldr	r2, [r3, #8]
7000218a:	68bb      	ldr	r3, [r7, #8]
7000218c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
7000218e:	69bb      	ldr	r3, [r7, #24]
70002190:	015a      	lsls	r2, r3, #5
70002192:	69fb      	ldr	r3, [r7, #28]
70002194:	4413      	add	r3, r2
70002196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000219a:	691a      	ldr	r2, [r3, #16]
7000219c:	68bb      	ldr	r3, [r7, #8]
7000219e:	6a1b      	ldr	r3, [r3, #32]
700021a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
700021a4:	69b9      	ldr	r1, [r7, #24]
700021a6:	0148      	lsls	r0, r1, #5
700021a8:	69f9      	ldr	r1, [r7, #28]
700021aa:	4401      	add	r1, r0
700021ac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
700021b0:	4313      	orrs	r3, r2
700021b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
700021b4:	69bb      	ldr	r3, [r7, #24]
700021b6:	015a      	lsls	r2, r3, #5
700021b8:	69fb      	ldr	r3, [r7, #28]
700021ba:	4413      	add	r3, r2
700021bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700021c0:	691b      	ldr	r3, [r3, #16]
700021c2:	69ba      	ldr	r2, [r7, #24]
700021c4:	0151      	lsls	r1, r2, #5
700021c6:	69fa      	ldr	r2, [r7, #28]
700021c8:	440a      	add	r2, r1
700021ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700021ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700021d2:	6113      	str	r3, [r2, #16]
700021d4:	e05f      	b.n	70002296 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
700021d6:	68bb      	ldr	r3, [r7, #8]
700021d8:	691b      	ldr	r3, [r3, #16]
700021da:	2b00      	cmp	r3, #0
700021dc:	d123      	bne.n	70002226 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
700021de:	69bb      	ldr	r3, [r7, #24]
700021e0:	015a      	lsls	r2, r3, #5
700021e2:	69fb      	ldr	r3, [r7, #28]
700021e4:	4413      	add	r3, r2
700021e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700021ea:	691a      	ldr	r2, [r3, #16]
700021ec:	68bb      	ldr	r3, [r7, #8]
700021ee:	689b      	ldr	r3, [r3, #8]
700021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
700021f4:	69b9      	ldr	r1, [r7, #24]
700021f6:	0148      	lsls	r0, r1, #5
700021f8:	69f9      	ldr	r1, [r7, #28]
700021fa:	4401      	add	r1, r0
700021fc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
70002200:	4313      	orrs	r3, r2
70002202:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
70002204:	69bb      	ldr	r3, [r7, #24]
70002206:	015a      	lsls	r2, r3, #5
70002208:	69fb      	ldr	r3, [r7, #28]
7000220a:	4413      	add	r3, r2
7000220c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002210:	691b      	ldr	r3, [r3, #16]
70002212:	69ba      	ldr	r2, [r7, #24]
70002214:	0151      	lsls	r1, r2, #5
70002216:	69fa      	ldr	r2, [r7, #28]
70002218:	440a      	add	r2, r1
7000221a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000221e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70002222:	6113      	str	r3, [r2, #16]
70002224:	e037      	b.n	70002296 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
70002226:	68bb      	ldr	r3, [r7, #8]
70002228:	691a      	ldr	r2, [r3, #16]
7000222a:	68bb      	ldr	r3, [r7, #8]
7000222c:	689b      	ldr	r3, [r3, #8]
7000222e:	4413      	add	r3, r2
70002230:	1e5a      	subs	r2, r3, #1
70002232:	68bb      	ldr	r3, [r7, #8]
70002234:	689b      	ldr	r3, [r3, #8]
70002236:	fbb2 f3f3 	udiv	r3, r2, r3
7000223a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
7000223c:	68bb      	ldr	r3, [r7, #8]
7000223e:	689b      	ldr	r3, [r3, #8]
70002240:	8afa      	ldrh	r2, [r7, #22]
70002242:	fb03 f202 	mul.w	r2, r3, r2
70002246:	68bb      	ldr	r3, [r7, #8]
70002248:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
7000224a:	69bb      	ldr	r3, [r7, #24]
7000224c:	015a      	lsls	r2, r3, #5
7000224e:	69fb      	ldr	r3, [r7, #28]
70002250:	4413      	add	r3, r2
70002252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002256:	691a      	ldr	r2, [r3, #16]
70002258:	8afb      	ldrh	r3, [r7, #22]
7000225a:	04d9      	lsls	r1, r3, #19
7000225c:	4b39      	ldr	r3, [pc, #228]	@ (70002344 <USB_EPStartXfer+0x544>)
7000225e:	400b      	ands	r3, r1
70002260:	69b9      	ldr	r1, [r7, #24]
70002262:	0148      	lsls	r0, r1, #5
70002264:	69f9      	ldr	r1, [r7, #28]
70002266:	4401      	add	r1, r0
70002268:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
7000226c:	4313      	orrs	r3, r2
7000226e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
70002270:	69bb      	ldr	r3, [r7, #24]
70002272:	015a      	lsls	r2, r3, #5
70002274:	69fb      	ldr	r3, [r7, #28]
70002276:	4413      	add	r3, r2
70002278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000227c:	691a      	ldr	r2, [r3, #16]
7000227e:	68bb      	ldr	r3, [r7, #8]
70002280:	6a1b      	ldr	r3, [r3, #32]
70002282:	f3c3 0312 	ubfx	r3, r3, #0, #19
70002286:	69b9      	ldr	r1, [r7, #24]
70002288:	0148      	lsls	r0, r1, #5
7000228a:	69f9      	ldr	r1, [r7, #28]
7000228c:	4401      	add	r1, r0
7000228e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
70002292:	4313      	orrs	r3, r2
70002294:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
70002296:	79fb      	ldrb	r3, [r7, #7]
70002298:	2b01      	cmp	r3, #1
7000229a:	d10d      	bne.n	700022b8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
7000229c:	68bb      	ldr	r3, [r7, #8]
7000229e:	68db      	ldr	r3, [r3, #12]
700022a0:	2b00      	cmp	r3, #0
700022a2:	d009      	beq.n	700022b8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
700022a4:	68bb      	ldr	r3, [r7, #8]
700022a6:	68d9      	ldr	r1, [r3, #12]
700022a8:	69bb      	ldr	r3, [r7, #24]
700022aa:	015a      	lsls	r2, r3, #5
700022ac:	69fb      	ldr	r3, [r7, #28]
700022ae:	4413      	add	r3, r2
700022b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700022b4:	460a      	mov	r2, r1
700022b6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
700022b8:	68bb      	ldr	r3, [r7, #8]
700022ba:	791b      	ldrb	r3, [r3, #4]
700022bc:	2b01      	cmp	r3, #1
700022be:	d128      	bne.n	70002312 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
700022c0:	69fb      	ldr	r3, [r7, #28]
700022c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700022c6:	689b      	ldr	r3, [r3, #8]
700022c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700022cc:	2b00      	cmp	r3, #0
700022ce:	d110      	bne.n	700022f2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
700022d0:	69bb      	ldr	r3, [r7, #24]
700022d2:	015a      	lsls	r2, r3, #5
700022d4:	69fb      	ldr	r3, [r7, #28]
700022d6:	4413      	add	r3, r2
700022d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700022dc:	681b      	ldr	r3, [r3, #0]
700022de:	69ba      	ldr	r2, [r7, #24]
700022e0:	0151      	lsls	r1, r2, #5
700022e2:	69fa      	ldr	r2, [r7, #28]
700022e4:	440a      	add	r2, r1
700022e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700022ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700022ee:	6013      	str	r3, [r2, #0]
700022f0:	e00f      	b.n	70002312 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
700022f2:	69bb      	ldr	r3, [r7, #24]
700022f4:	015a      	lsls	r2, r3, #5
700022f6:	69fb      	ldr	r3, [r7, #28]
700022f8:	4413      	add	r3, r2
700022fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700022fe:	681b      	ldr	r3, [r3, #0]
70002300:	69ba      	ldr	r2, [r7, #24]
70002302:	0151      	lsls	r1, r2, #5
70002304:	69fa      	ldr	r2, [r7, #28]
70002306:	440a      	add	r2, r1
70002308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000230c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70002310:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
70002312:	69bb      	ldr	r3, [r7, #24]
70002314:	015a      	lsls	r2, r3, #5
70002316:	69fb      	ldr	r3, [r7, #28]
70002318:	4413      	add	r3, r2
7000231a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000231e:	681b      	ldr	r3, [r3, #0]
70002320:	69ba      	ldr	r2, [r7, #24]
70002322:	0151      	lsls	r1, r2, #5
70002324:	69fa      	ldr	r2, [r7, #28]
70002326:	440a      	add	r2, r1
70002328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000232c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
70002330:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
70002332:	2300      	movs	r3, #0
}
70002334:	4618      	mov	r0, r3
70002336:	3720      	adds	r7, #32
70002338:	46bd      	mov	sp, r7
7000233a:	bd80      	pop	{r7, pc}
7000233c:	fff80000 	.word	0xfff80000
70002340:	e007ffff 	.word	0xe007ffff
70002344:	1ff80000 	.word	0x1ff80000

70002348 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
70002348:	b480      	push	{r7}
7000234a:	b087      	sub	sp, #28
7000234c:	af00      	add	r7, sp, #0
7000234e:	6078      	str	r0, [r7, #4]
70002350:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
70002352:	2300      	movs	r3, #0
70002354:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
70002356:	2300      	movs	r3, #0
70002358:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000235a:	687b      	ldr	r3, [r7, #4]
7000235c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
7000235e:	683b      	ldr	r3, [r7, #0]
70002360:	785b      	ldrb	r3, [r3, #1]
70002362:	2b01      	cmp	r3, #1
70002364:	d14a      	bne.n	700023fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
70002366:	683b      	ldr	r3, [r7, #0]
70002368:	781b      	ldrb	r3, [r3, #0]
7000236a:	015a      	lsls	r2, r3, #5
7000236c:	693b      	ldr	r3, [r7, #16]
7000236e:	4413      	add	r3, r2
70002370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002374:	681b      	ldr	r3, [r3, #0]
70002376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
7000237a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000237e:	f040 8086 	bne.w	7000248e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
70002382:	683b      	ldr	r3, [r7, #0]
70002384:	781b      	ldrb	r3, [r3, #0]
70002386:	015a      	lsls	r2, r3, #5
70002388:	693b      	ldr	r3, [r7, #16]
7000238a:	4413      	add	r3, r2
7000238c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002390:	681b      	ldr	r3, [r3, #0]
70002392:	683a      	ldr	r2, [r7, #0]
70002394:	7812      	ldrb	r2, [r2, #0]
70002396:	0151      	lsls	r1, r2, #5
70002398:	693a      	ldr	r2, [r7, #16]
7000239a:	440a      	add	r2, r1
7000239c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700023a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700023a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
700023a6:	683b      	ldr	r3, [r7, #0]
700023a8:	781b      	ldrb	r3, [r3, #0]
700023aa:	015a      	lsls	r2, r3, #5
700023ac:	693b      	ldr	r3, [r7, #16]
700023ae:	4413      	add	r3, r2
700023b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700023b4:	681b      	ldr	r3, [r3, #0]
700023b6:	683a      	ldr	r2, [r7, #0]
700023b8:	7812      	ldrb	r2, [r2, #0]
700023ba:	0151      	lsls	r1, r2, #5
700023bc:	693a      	ldr	r2, [r7, #16]
700023be:	440a      	add	r2, r1
700023c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700023c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
700023c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
700023ca:	68fb      	ldr	r3, [r7, #12]
700023cc:	3301      	adds	r3, #1
700023ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
700023d0:	68fb      	ldr	r3, [r7, #12]
700023d2:	f242 7210 	movw	r2, #10000	@ 0x2710
700023d6:	4293      	cmp	r3, r2
700023d8:	d902      	bls.n	700023e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
700023da:	2301      	movs	r3, #1
700023dc:	75fb      	strb	r3, [r7, #23]
          break;
700023de:	e056      	b.n	7000248e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
700023e0:	683b      	ldr	r3, [r7, #0]
700023e2:	781b      	ldrb	r3, [r3, #0]
700023e4:	015a      	lsls	r2, r3, #5
700023e6:	693b      	ldr	r3, [r7, #16]
700023e8:	4413      	add	r3, r2
700023ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700023ee:	681b      	ldr	r3, [r3, #0]
700023f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
700023f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
700023f8:	d0e7      	beq.n	700023ca <USB_EPStopXfer+0x82>
700023fa:	e048      	b.n	7000248e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
700023fc:	683b      	ldr	r3, [r7, #0]
700023fe:	781b      	ldrb	r3, [r3, #0]
70002400:	015a      	lsls	r2, r3, #5
70002402:	693b      	ldr	r3, [r7, #16]
70002404:	4413      	add	r3, r2
70002406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000240a:	681b      	ldr	r3, [r3, #0]
7000240c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002410:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002414:	d13b      	bne.n	7000248e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
70002416:	683b      	ldr	r3, [r7, #0]
70002418:	781b      	ldrb	r3, [r3, #0]
7000241a:	015a      	lsls	r2, r3, #5
7000241c:	693b      	ldr	r3, [r7, #16]
7000241e:	4413      	add	r3, r2
70002420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002424:	681b      	ldr	r3, [r3, #0]
70002426:	683a      	ldr	r2, [r7, #0]
70002428:	7812      	ldrb	r2, [r2, #0]
7000242a:	0151      	lsls	r1, r2, #5
7000242c:	693a      	ldr	r2, [r7, #16]
7000242e:	440a      	add	r2, r1
70002430:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002434:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70002438:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
7000243a:	683b      	ldr	r3, [r7, #0]
7000243c:	781b      	ldrb	r3, [r3, #0]
7000243e:	015a      	lsls	r2, r3, #5
70002440:	693b      	ldr	r3, [r7, #16]
70002442:	4413      	add	r3, r2
70002444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002448:	681b      	ldr	r3, [r3, #0]
7000244a:	683a      	ldr	r2, [r7, #0]
7000244c:	7812      	ldrb	r2, [r2, #0]
7000244e:	0151      	lsls	r1, r2, #5
70002450:	693a      	ldr	r2, [r7, #16]
70002452:	440a      	add	r2, r1
70002454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
7000245c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
7000245e:	68fb      	ldr	r3, [r7, #12]
70002460:	3301      	adds	r3, #1
70002462:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
70002464:	68fb      	ldr	r3, [r7, #12]
70002466:	f242 7210 	movw	r2, #10000	@ 0x2710
7000246a:	4293      	cmp	r3, r2
7000246c:	d902      	bls.n	70002474 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
7000246e:	2301      	movs	r3, #1
70002470:	75fb      	strb	r3, [r7, #23]
          break;
70002472:	e00c      	b.n	7000248e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
70002474:	683b      	ldr	r3, [r7, #0]
70002476:	781b      	ldrb	r3, [r3, #0]
70002478:	015a      	lsls	r2, r3, #5
7000247a:	693b      	ldr	r3, [r7, #16]
7000247c:	4413      	add	r3, r2
7000247e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002482:	681b      	ldr	r3, [r3, #0]
70002484:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002488:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000248c:	d0e7      	beq.n	7000245e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
7000248e:	7dfb      	ldrb	r3, [r7, #23]
}
70002490:	4618      	mov	r0, r3
70002492:	371c      	adds	r7, #28
70002494:	46bd      	mov	sp, r7
70002496:	f85d 7b04 	ldr.w	r7, [sp], #4
7000249a:	4770      	bx	lr

7000249c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
7000249c:	b480      	push	{r7}
7000249e:	b089      	sub	sp, #36	@ 0x24
700024a0:	af00      	add	r7, sp, #0
700024a2:	60f8      	str	r0, [r7, #12]
700024a4:	60b9      	str	r1, [r7, #8]
700024a6:	4611      	mov	r1, r2
700024a8:	461a      	mov	r2, r3
700024aa:	460b      	mov	r3, r1
700024ac:	71fb      	strb	r3, [r7, #7]
700024ae:	4613      	mov	r3, r2
700024b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
700024b2:	68fb      	ldr	r3, [r7, #12]
700024b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
700024b6:	68bb      	ldr	r3, [r7, #8]
700024b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
700024ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
700024be:	2b00      	cmp	r3, #0
700024c0:	d123      	bne.n	7000250a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
700024c2:	88bb      	ldrh	r3, [r7, #4]
700024c4:	3303      	adds	r3, #3
700024c6:	089b      	lsrs	r3, r3, #2
700024c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
700024ca:	2300      	movs	r3, #0
700024cc:	61bb      	str	r3, [r7, #24]
700024ce:	e018      	b.n	70002502 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
700024d0:	79fb      	ldrb	r3, [r7, #7]
700024d2:	031a      	lsls	r2, r3, #12
700024d4:	697b      	ldr	r3, [r7, #20]
700024d6:	4413      	add	r3, r2
700024d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
700024dc:	461a      	mov	r2, r3
700024de:	69fb      	ldr	r3, [r7, #28]
700024e0:	681b      	ldr	r3, [r3, #0]
700024e2:	6013      	str	r3, [r2, #0]
      pSrc++;
700024e4:	69fb      	ldr	r3, [r7, #28]
700024e6:	3301      	adds	r3, #1
700024e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
700024ea:	69fb      	ldr	r3, [r7, #28]
700024ec:	3301      	adds	r3, #1
700024ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
700024f0:	69fb      	ldr	r3, [r7, #28]
700024f2:	3301      	adds	r3, #1
700024f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
700024f6:	69fb      	ldr	r3, [r7, #28]
700024f8:	3301      	adds	r3, #1
700024fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
700024fc:	69bb      	ldr	r3, [r7, #24]
700024fe:	3301      	adds	r3, #1
70002500:	61bb      	str	r3, [r7, #24]
70002502:	69ba      	ldr	r2, [r7, #24]
70002504:	693b      	ldr	r3, [r7, #16]
70002506:	429a      	cmp	r2, r3
70002508:	d3e2      	bcc.n	700024d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
7000250a:	2300      	movs	r3, #0
}
7000250c:	4618      	mov	r0, r3
7000250e:	3724      	adds	r7, #36	@ 0x24
70002510:	46bd      	mov	sp, r7
70002512:	f85d 7b04 	ldr.w	r7, [sp], #4
70002516:	4770      	bx	lr

70002518 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
70002518:	b480      	push	{r7}
7000251a:	b08b      	sub	sp, #44	@ 0x2c
7000251c:	af00      	add	r7, sp, #0
7000251e:	60f8      	str	r0, [r7, #12]
70002520:	60b9      	str	r1, [r7, #8]
70002522:	4613      	mov	r3, r2
70002524:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002526:	68fb      	ldr	r3, [r7, #12]
70002528:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
7000252a:	68bb      	ldr	r3, [r7, #8]
7000252c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
7000252e:	88fb      	ldrh	r3, [r7, #6]
70002530:	089b      	lsrs	r3, r3, #2
70002532:	b29b      	uxth	r3, r3
70002534:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
70002536:	88fb      	ldrh	r3, [r7, #6]
70002538:	f003 0303 	and.w	r3, r3, #3
7000253c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
7000253e:	2300      	movs	r3, #0
70002540:	623b      	str	r3, [r7, #32]
70002542:	e014      	b.n	7000256e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
70002544:	69bb      	ldr	r3, [r7, #24]
70002546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000254a:	681a      	ldr	r2, [r3, #0]
7000254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000254e:	601a      	str	r2, [r3, #0]
    pDest++;
70002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002552:	3301      	adds	r3, #1
70002554:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
70002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002558:	3301      	adds	r3, #1
7000255a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
7000255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000255e:	3301      	adds	r3, #1
70002560:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
70002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002564:	3301      	adds	r3, #1
70002566:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
70002568:	6a3b      	ldr	r3, [r7, #32]
7000256a:	3301      	adds	r3, #1
7000256c:	623b      	str	r3, [r7, #32]
7000256e:	6a3a      	ldr	r2, [r7, #32]
70002570:	697b      	ldr	r3, [r7, #20]
70002572:	429a      	cmp	r2, r3
70002574:	d3e6      	bcc.n	70002544 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
70002576:	8bfb      	ldrh	r3, [r7, #30]
70002578:	2b00      	cmp	r3, #0
7000257a:	d01e      	beq.n	700025ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
7000257c:	2300      	movs	r3, #0
7000257e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
70002580:	69bb      	ldr	r3, [r7, #24]
70002582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002586:	461a      	mov	r2, r3
70002588:	f107 0310 	add.w	r3, r7, #16
7000258c:	6812      	ldr	r2, [r2, #0]
7000258e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
70002590:	693a      	ldr	r2, [r7, #16]
70002592:	6a3b      	ldr	r3, [r7, #32]
70002594:	b2db      	uxtb	r3, r3
70002596:	00db      	lsls	r3, r3, #3
70002598:	fa22 f303 	lsr.w	r3, r2, r3
7000259c:	b2da      	uxtb	r2, r3
7000259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700025a0:	701a      	strb	r2, [r3, #0]
      i++;
700025a2:	6a3b      	ldr	r3, [r7, #32]
700025a4:	3301      	adds	r3, #1
700025a6:	623b      	str	r3, [r7, #32]
      pDest++;
700025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700025aa:	3301      	adds	r3, #1
700025ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
700025ae:	8bfb      	ldrh	r3, [r7, #30]
700025b0:	3b01      	subs	r3, #1
700025b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
700025b4:	8bfb      	ldrh	r3, [r7, #30]
700025b6:	2b00      	cmp	r3, #0
700025b8:	d1ea      	bne.n	70002590 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
700025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
700025bc:	4618      	mov	r0, r3
700025be:	372c      	adds	r7, #44	@ 0x2c
700025c0:	46bd      	mov	sp, r7
700025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
700025c6:	4770      	bx	lr

700025c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
700025c8:	b480      	push	{r7}
700025ca:	b085      	sub	sp, #20
700025cc:	af00      	add	r7, sp, #0
700025ce:	6078      	str	r0, [r7, #4]
700025d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
700025d2:	687b      	ldr	r3, [r7, #4]
700025d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
700025d6:	683b      	ldr	r3, [r7, #0]
700025d8:	781b      	ldrb	r3, [r3, #0]
700025da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
700025dc:	683b      	ldr	r3, [r7, #0]
700025de:	785b      	ldrb	r3, [r3, #1]
700025e0:	2b01      	cmp	r3, #1
700025e2:	d12c      	bne.n	7000263e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
700025e4:	68bb      	ldr	r3, [r7, #8]
700025e6:	015a      	lsls	r2, r3, #5
700025e8:	68fb      	ldr	r3, [r7, #12]
700025ea:	4413      	add	r3, r2
700025ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700025f0:	681b      	ldr	r3, [r3, #0]
700025f2:	2b00      	cmp	r3, #0
700025f4:	db12      	blt.n	7000261c <USB_EPSetStall+0x54>
700025f6:	68bb      	ldr	r3, [r7, #8]
700025f8:	2b00      	cmp	r3, #0
700025fa:	d00f      	beq.n	7000261c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
700025fc:	68bb      	ldr	r3, [r7, #8]
700025fe:	015a      	lsls	r2, r3, #5
70002600:	68fb      	ldr	r3, [r7, #12]
70002602:	4413      	add	r3, r2
70002604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002608:	681b      	ldr	r3, [r3, #0]
7000260a:	68ba      	ldr	r2, [r7, #8]
7000260c:	0151      	lsls	r1, r2, #5
7000260e:	68fa      	ldr	r2, [r7, #12]
70002610:	440a      	add	r2, r1
70002612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002616:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
7000261a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
7000261c:	68bb      	ldr	r3, [r7, #8]
7000261e:	015a      	lsls	r2, r3, #5
70002620:	68fb      	ldr	r3, [r7, #12]
70002622:	4413      	add	r3, r2
70002624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002628:	681b      	ldr	r3, [r3, #0]
7000262a:	68ba      	ldr	r2, [r7, #8]
7000262c:	0151      	lsls	r1, r2, #5
7000262e:	68fa      	ldr	r2, [r7, #12]
70002630:	440a      	add	r2, r1
70002632:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002636:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
7000263a:	6013      	str	r3, [r2, #0]
7000263c:	e02b      	b.n	70002696 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
7000263e:	68bb      	ldr	r3, [r7, #8]
70002640:	015a      	lsls	r2, r3, #5
70002642:	68fb      	ldr	r3, [r7, #12]
70002644:	4413      	add	r3, r2
70002646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000264a:	681b      	ldr	r3, [r3, #0]
7000264c:	2b00      	cmp	r3, #0
7000264e:	db12      	blt.n	70002676 <USB_EPSetStall+0xae>
70002650:	68bb      	ldr	r3, [r7, #8]
70002652:	2b00      	cmp	r3, #0
70002654:	d00f      	beq.n	70002676 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
70002656:	68bb      	ldr	r3, [r7, #8]
70002658:	015a      	lsls	r2, r3, #5
7000265a:	68fb      	ldr	r3, [r7, #12]
7000265c:	4413      	add	r3, r2
7000265e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002662:	681b      	ldr	r3, [r3, #0]
70002664:	68ba      	ldr	r2, [r7, #8]
70002666:	0151      	lsls	r1, r2, #5
70002668:	68fa      	ldr	r2, [r7, #12]
7000266a:	440a      	add	r2, r1
7000266c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002670:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
70002674:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
70002676:	68bb      	ldr	r3, [r7, #8]
70002678:	015a      	lsls	r2, r3, #5
7000267a:	68fb      	ldr	r3, [r7, #12]
7000267c:	4413      	add	r3, r2
7000267e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002682:	681b      	ldr	r3, [r3, #0]
70002684:	68ba      	ldr	r2, [r7, #8]
70002686:	0151      	lsls	r1, r2, #5
70002688:	68fa      	ldr	r2, [r7, #12]
7000268a:	440a      	add	r2, r1
7000268c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002690:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
70002694:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
70002696:	2300      	movs	r3, #0
}
70002698:	4618      	mov	r0, r3
7000269a:	3714      	adds	r7, #20
7000269c:	46bd      	mov	sp, r7
7000269e:	f85d 7b04 	ldr.w	r7, [sp], #4
700026a2:	4770      	bx	lr

700026a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
700026a4:	b480      	push	{r7}
700026a6:	b085      	sub	sp, #20
700026a8:	af00      	add	r7, sp, #0
700026aa:	6078      	str	r0, [r7, #4]
700026ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
700026ae:	687b      	ldr	r3, [r7, #4]
700026b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
700026b2:	683b      	ldr	r3, [r7, #0]
700026b4:	781b      	ldrb	r3, [r3, #0]
700026b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
700026b8:	683b      	ldr	r3, [r7, #0]
700026ba:	785b      	ldrb	r3, [r3, #1]
700026bc:	2b01      	cmp	r3, #1
700026be:	d128      	bne.n	70002712 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
700026c0:	68bb      	ldr	r3, [r7, #8]
700026c2:	015a      	lsls	r2, r3, #5
700026c4:	68fb      	ldr	r3, [r7, #12]
700026c6:	4413      	add	r3, r2
700026c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700026cc:	681b      	ldr	r3, [r3, #0]
700026ce:	68ba      	ldr	r2, [r7, #8]
700026d0:	0151      	lsls	r1, r2, #5
700026d2:	68fa      	ldr	r2, [r7, #12]
700026d4:	440a      	add	r2, r1
700026d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700026da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
700026de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
700026e0:	683b      	ldr	r3, [r7, #0]
700026e2:	791b      	ldrb	r3, [r3, #4]
700026e4:	2b03      	cmp	r3, #3
700026e6:	d003      	beq.n	700026f0 <USB_EPClearStall+0x4c>
700026e8:	683b      	ldr	r3, [r7, #0]
700026ea:	791b      	ldrb	r3, [r3, #4]
700026ec:	2b02      	cmp	r3, #2
700026ee:	d138      	bne.n	70002762 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
700026f0:	68bb      	ldr	r3, [r7, #8]
700026f2:	015a      	lsls	r2, r3, #5
700026f4:	68fb      	ldr	r3, [r7, #12]
700026f6:	4413      	add	r3, r2
700026f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700026fc:	681b      	ldr	r3, [r3, #0]
700026fe:	68ba      	ldr	r2, [r7, #8]
70002700:	0151      	lsls	r1, r2, #5
70002702:	68fa      	ldr	r2, [r7, #12]
70002704:	440a      	add	r2, r1
70002706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000270a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
7000270e:	6013      	str	r3, [r2, #0]
70002710:	e027      	b.n	70002762 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
70002712:	68bb      	ldr	r3, [r7, #8]
70002714:	015a      	lsls	r2, r3, #5
70002716:	68fb      	ldr	r3, [r7, #12]
70002718:	4413      	add	r3, r2
7000271a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000271e:	681b      	ldr	r3, [r3, #0]
70002720:	68ba      	ldr	r2, [r7, #8]
70002722:	0151      	lsls	r1, r2, #5
70002724:	68fa      	ldr	r2, [r7, #12]
70002726:	440a      	add	r2, r1
70002728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000272c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70002730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
70002732:	683b      	ldr	r3, [r7, #0]
70002734:	791b      	ldrb	r3, [r3, #4]
70002736:	2b03      	cmp	r3, #3
70002738:	d003      	beq.n	70002742 <USB_EPClearStall+0x9e>
7000273a:	683b      	ldr	r3, [r7, #0]
7000273c:	791b      	ldrb	r3, [r3, #4]
7000273e:	2b02      	cmp	r3, #2
70002740:	d10f      	bne.n	70002762 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
70002742:	68bb      	ldr	r3, [r7, #8]
70002744:	015a      	lsls	r2, r3, #5
70002746:	68fb      	ldr	r3, [r7, #12]
70002748:	4413      	add	r3, r2
7000274a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000274e:	681b      	ldr	r3, [r3, #0]
70002750:	68ba      	ldr	r2, [r7, #8]
70002752:	0151      	lsls	r1, r2, #5
70002754:	68fa      	ldr	r2, [r7, #12]
70002756:	440a      	add	r2, r1
70002758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70002760:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
70002762:	2300      	movs	r3, #0
}
70002764:	4618      	mov	r0, r3
70002766:	3714      	adds	r7, #20
70002768:	46bd      	mov	sp, r7
7000276a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000276e:	4770      	bx	lr

70002770 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
70002770:	b480      	push	{r7}
70002772:	b085      	sub	sp, #20
70002774:	af00      	add	r7, sp, #0
70002776:	6078      	str	r0, [r7, #4]
70002778:	460b      	mov	r3, r1
7000277a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000277c:	687b      	ldr	r3, [r7, #4]
7000277e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
70002780:	68fb      	ldr	r3, [r7, #12]
70002782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002786:	681b      	ldr	r3, [r3, #0]
70002788:	68fa      	ldr	r2, [r7, #12]
7000278a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
7000278e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
70002792:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
70002794:	68fb      	ldr	r3, [r7, #12]
70002796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000279a:	681a      	ldr	r2, [r3, #0]
7000279c:	78fb      	ldrb	r3, [r7, #3]
7000279e:	011b      	lsls	r3, r3, #4
700027a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
700027a4:	68f9      	ldr	r1, [r7, #12]
700027a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
700027aa:	4313      	orrs	r3, r2
700027ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
700027ae:	2300      	movs	r3, #0
}
700027b0:	4618      	mov	r0, r3
700027b2:	3714      	adds	r7, #20
700027b4:	46bd      	mov	sp, r7
700027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
700027ba:	4770      	bx	lr

700027bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
700027bc:	b480      	push	{r7}
700027be:	b085      	sub	sp, #20
700027c0:	af00      	add	r7, sp, #0
700027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
700027c4:	687b      	ldr	r3, [r7, #4]
700027c6:	695b      	ldr	r3, [r3, #20]
700027c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
700027ca:	687b      	ldr	r3, [r7, #4]
700027cc:	699b      	ldr	r3, [r3, #24]
700027ce:	68fa      	ldr	r2, [r7, #12]
700027d0:	4013      	ands	r3, r2
700027d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
700027d4:	68fb      	ldr	r3, [r7, #12]
}
700027d6:	4618      	mov	r0, r3
700027d8:	3714      	adds	r7, #20
700027da:	46bd      	mov	sp, r7
700027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
700027e0:	4770      	bx	lr

700027e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
700027e2:	b480      	push	{r7}
700027e4:	b085      	sub	sp, #20
700027e6:	af00      	add	r7, sp, #0
700027e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
700027ea:	687b      	ldr	r3, [r7, #4]
700027ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
700027ee:	68fb      	ldr	r3, [r7, #12]
700027f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700027f4:	699b      	ldr	r3, [r3, #24]
700027f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
700027f8:	68fb      	ldr	r3, [r7, #12]
700027fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700027fe:	69db      	ldr	r3, [r3, #28]
70002800:	68ba      	ldr	r2, [r7, #8]
70002802:	4013      	ands	r3, r2
70002804:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
70002806:	68bb      	ldr	r3, [r7, #8]
70002808:	0c1b      	lsrs	r3, r3, #16
}
7000280a:	4618      	mov	r0, r3
7000280c:	3714      	adds	r7, #20
7000280e:	46bd      	mov	sp, r7
70002810:	f85d 7b04 	ldr.w	r7, [sp], #4
70002814:	4770      	bx	lr

70002816 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
70002816:	b480      	push	{r7}
70002818:	b085      	sub	sp, #20
7000281a:	af00      	add	r7, sp, #0
7000281c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000281e:	687b      	ldr	r3, [r7, #4]
70002820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
70002822:	68fb      	ldr	r3, [r7, #12]
70002824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002828:	699b      	ldr	r3, [r3, #24]
7000282a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
7000282c:	68fb      	ldr	r3, [r7, #12]
7000282e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002832:	69db      	ldr	r3, [r3, #28]
70002834:	68ba      	ldr	r2, [r7, #8]
70002836:	4013      	ands	r3, r2
70002838:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
7000283a:	68bb      	ldr	r3, [r7, #8]
7000283c:	b29b      	uxth	r3, r3
}
7000283e:	4618      	mov	r0, r3
70002840:	3714      	adds	r7, #20
70002842:	46bd      	mov	sp, r7
70002844:	f85d 7b04 	ldr.w	r7, [sp], #4
70002848:	4770      	bx	lr

7000284a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
7000284a:	b480      	push	{r7}
7000284c:	b085      	sub	sp, #20
7000284e:	af00      	add	r7, sp, #0
70002850:	6078      	str	r0, [r7, #4]
70002852:	460b      	mov	r3, r1
70002854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002856:	687b      	ldr	r3, [r7, #4]
70002858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
7000285a:	78fb      	ldrb	r3, [r7, #3]
7000285c:	015a      	lsls	r2, r3, #5
7000285e:	68fb      	ldr	r3, [r7, #12]
70002860:	4413      	add	r3, r2
70002862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002866:	689b      	ldr	r3, [r3, #8]
70002868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
7000286a:	68fb      	ldr	r3, [r7, #12]
7000286c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002870:	695b      	ldr	r3, [r3, #20]
70002872:	68ba      	ldr	r2, [r7, #8]
70002874:	4013      	ands	r3, r2
70002876:	60bb      	str	r3, [r7, #8]

  return tmpreg;
70002878:	68bb      	ldr	r3, [r7, #8]
}
7000287a:	4618      	mov	r0, r3
7000287c:	3714      	adds	r7, #20
7000287e:	46bd      	mov	sp, r7
70002880:	f85d 7b04 	ldr.w	r7, [sp], #4
70002884:	4770      	bx	lr

70002886 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
70002886:	b480      	push	{r7}
70002888:	b087      	sub	sp, #28
7000288a:	af00      	add	r7, sp, #0
7000288c:	6078      	str	r0, [r7, #4]
7000288e:	460b      	mov	r3, r1
70002890:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002892:	687b      	ldr	r3, [r7, #4]
70002894:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
70002896:	697b      	ldr	r3, [r7, #20]
70002898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000289c:	691b      	ldr	r3, [r3, #16]
7000289e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
700028a0:	697b      	ldr	r3, [r7, #20]
700028a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700028a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
700028a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
700028aa:	78fb      	ldrb	r3, [r7, #3]
700028ac:	f003 030f 	and.w	r3, r3, #15
700028b0:	68fa      	ldr	r2, [r7, #12]
700028b2:	fa22 f303 	lsr.w	r3, r2, r3
700028b6:	01db      	lsls	r3, r3, #7
700028b8:	b2db      	uxtb	r3, r3
700028ba:	693a      	ldr	r2, [r7, #16]
700028bc:	4313      	orrs	r3, r2
700028be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
700028c0:	78fb      	ldrb	r3, [r7, #3]
700028c2:	015a      	lsls	r2, r3, #5
700028c4:	697b      	ldr	r3, [r7, #20]
700028c6:	4413      	add	r3, r2
700028c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700028cc:	689b      	ldr	r3, [r3, #8]
700028ce:	693a      	ldr	r2, [r7, #16]
700028d0:	4013      	ands	r3, r2
700028d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
700028d4:	68bb      	ldr	r3, [r7, #8]
}
700028d6:	4618      	mov	r0, r3
700028d8:	371c      	adds	r7, #28
700028da:	46bd      	mov	sp, r7
700028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
700028e0:	4770      	bx	lr

700028e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
700028e2:	b480      	push	{r7}
700028e4:	b083      	sub	sp, #12
700028e6:	af00      	add	r7, sp, #0
700028e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
700028ea:	687b      	ldr	r3, [r7, #4]
700028ec:	695b      	ldr	r3, [r3, #20]
700028ee:	f003 0301 	and.w	r3, r3, #1
}
700028f2:	4618      	mov	r0, r3
700028f4:	370c      	adds	r7, #12
700028f6:	46bd      	mov	sp, r7
700028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
700028fc:	4770      	bx	lr
	...

70002900 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
70002900:	b480      	push	{r7}
70002902:	b085      	sub	sp, #20
70002904:	af00      	add	r7, sp, #0
70002906:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002908:	687b      	ldr	r3, [r7, #4]
7000290a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
7000290c:	68fb      	ldr	r3, [r7, #12]
7000290e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002912:	681a      	ldr	r2, [r3, #0]
70002914:	68fb      	ldr	r3, [r7, #12]
70002916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000291a:	4619      	mov	r1, r3
7000291c:	4b09      	ldr	r3, [pc, #36]	@ (70002944 <USB_ActivateSetup+0x44>)
7000291e:	4013      	ands	r3, r2
70002920:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
70002922:	68fb      	ldr	r3, [r7, #12]
70002924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002928:	685b      	ldr	r3, [r3, #4]
7000292a:	68fa      	ldr	r2, [r7, #12]
7000292c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70002930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
70002934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
70002936:	2300      	movs	r3, #0
}
70002938:	4618      	mov	r0, r3
7000293a:	3714      	adds	r7, #20
7000293c:	46bd      	mov	sp, r7
7000293e:	f85d 7b04 	ldr.w	r7, [sp], #4
70002942:	4770      	bx	lr
70002944:	fffff800 	.word	0xfffff800

70002948 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
70002948:	b480      	push	{r7}
7000294a:	b087      	sub	sp, #28
7000294c:	af00      	add	r7, sp, #0
7000294e:	60f8      	str	r0, [r7, #12]
70002950:	460b      	mov	r3, r1
70002952:	607a      	str	r2, [r7, #4]
70002954:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002956:	68fb      	ldr	r3, [r7, #12]
70002958:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
7000295a:	68fb      	ldr	r3, [r7, #12]
7000295c:	333c      	adds	r3, #60	@ 0x3c
7000295e:	3304      	adds	r3, #4
70002960:	681b      	ldr	r3, [r3, #0]
70002962:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
70002964:	693b      	ldr	r3, [r7, #16]
70002966:	4a26      	ldr	r2, [pc, #152]	@ (70002a00 <USB_EP0_OutStart+0xb8>)
70002968:	4293      	cmp	r3, r2
7000296a:	d90a      	bls.n	70002982 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
7000296c:	697b      	ldr	r3, [r7, #20]
7000296e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002972:	681b      	ldr	r3, [r3, #0]
70002974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000297c:	d101      	bne.n	70002982 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
7000297e:	2300      	movs	r3, #0
70002980:	e037      	b.n	700029f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
70002982:	697b      	ldr	r3, [r7, #20]
70002984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002988:	461a      	mov	r2, r3
7000298a:	2300      	movs	r3, #0
7000298c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
7000298e:	697b      	ldr	r3, [r7, #20]
70002990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002994:	691b      	ldr	r3, [r3, #16]
70002996:	697a      	ldr	r2, [r7, #20]
70002998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000299c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700029a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
700029a2:	697b      	ldr	r3, [r7, #20]
700029a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700029a8:	691b      	ldr	r3, [r3, #16]
700029aa:	697a      	ldr	r2, [r7, #20]
700029ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700029b0:	f043 0318 	orr.w	r3, r3, #24
700029b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
700029b6:	697b      	ldr	r3, [r7, #20]
700029b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700029bc:	691b      	ldr	r3, [r3, #16]
700029be:	697a      	ldr	r2, [r7, #20]
700029c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700029c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
700029c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
700029ca:	7afb      	ldrb	r3, [r7, #11]
700029cc:	2b01      	cmp	r3, #1
700029ce:	d10f      	bne.n	700029f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
700029d0:	697b      	ldr	r3, [r7, #20]
700029d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700029d6:	461a      	mov	r2, r3
700029d8:	687b      	ldr	r3, [r7, #4]
700029da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
700029dc:	697b      	ldr	r3, [r7, #20]
700029de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700029e2:	681b      	ldr	r3, [r3, #0]
700029e4:	697a      	ldr	r2, [r7, #20]
700029e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700029ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
700029ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
700029f0:	2300      	movs	r3, #0
}
700029f2:	4618      	mov	r0, r3
700029f4:	371c      	adds	r7, #28
700029f6:	46bd      	mov	sp, r7
700029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
700029fc:	4770      	bx	lr
700029fe:	bf00      	nop
70002a00:	4f54300a 	.word	0x4f54300a

70002a04 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
70002a04:	b480      	push	{r7}
70002a06:	b083      	sub	sp, #12
70002a08:	af00      	add	r7, sp, #0
70002a0a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
70002a0c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
70002a0e:	4618      	mov	r0, r3
70002a10:	370c      	adds	r7, #12
70002a12:	46bd      	mov	sp, r7
70002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
70002a18:	4770      	bx	lr

70002a1a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
70002a1a:	b580      	push	{r7, lr}
70002a1c:	b084      	sub	sp, #16
70002a1e:	af00      	add	r7, sp, #0
70002a20:	6078      	str	r0, [r7, #4]
70002a22:	460b      	mov	r3, r1
70002a24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
70002a26:	2300      	movs	r3, #0
70002a28:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
70002a2a:	687b      	ldr	r3, [r7, #4]
70002a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002a30:	2b00      	cmp	r3, #0
70002a32:	d009      	beq.n	70002a48 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
70002a34:	687b      	ldr	r3, [r7, #4]
70002a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002a3a:	681b      	ldr	r3, [r3, #0]
70002a3c:	78fa      	ldrb	r2, [r7, #3]
70002a3e:	4611      	mov	r1, r2
70002a40:	6878      	ldr	r0, [r7, #4]
70002a42:	4798      	blx	r3
70002a44:	4603      	mov	r3, r0
70002a46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70002a48:	7bfb      	ldrb	r3, [r7, #15]
}
70002a4a:	4618      	mov	r0, r3
70002a4c:	3710      	adds	r7, #16
70002a4e:	46bd      	mov	sp, r7
70002a50:	bd80      	pop	{r7, pc}

70002a52 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
70002a52:	b580      	push	{r7, lr}
70002a54:	b084      	sub	sp, #16
70002a56:	af00      	add	r7, sp, #0
70002a58:	6078      	str	r0, [r7, #4]
70002a5a:	460b      	mov	r3, r1
70002a5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
70002a5e:	2300      	movs	r3, #0
70002a60:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
70002a62:	687b      	ldr	r3, [r7, #4]
70002a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002a68:	685b      	ldr	r3, [r3, #4]
70002a6a:	78fa      	ldrb	r2, [r7, #3]
70002a6c:	4611      	mov	r1, r2
70002a6e:	6878      	ldr	r0, [r7, #4]
70002a70:	4798      	blx	r3
70002a72:	4603      	mov	r3, r0
70002a74:	2b00      	cmp	r3, #0
70002a76:	d001      	beq.n	70002a7c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
70002a78:	2303      	movs	r3, #3
70002a7a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
70002a7e:	4618      	mov	r0, r3
70002a80:	3710      	adds	r7, #16
70002a82:	46bd      	mov	sp, r7
70002a84:	bd80      	pop	{r7, pc}

70002a86 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
70002a86:	b580      	push	{r7, lr}
70002a88:	b084      	sub	sp, #16
70002a8a:	af00      	add	r7, sp, #0
70002a8c:	6078      	str	r0, [r7, #4]
70002a8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
70002a90:	687b      	ldr	r3, [r7, #4]
70002a92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002a96:	6839      	ldr	r1, [r7, #0]
70002a98:	4618      	mov	r0, r3
70002a9a:	f001 f8e2 	bl	70003c62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
70002a9e:	687b      	ldr	r3, [r7, #4]
70002aa0:	2201      	movs	r2, #1
70002aa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
70002aa6:	687b      	ldr	r3, [r7, #4]
70002aa8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
70002aac:	461a      	mov	r2, r3
70002aae:	687b      	ldr	r3, [r7, #4]
70002ab0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
70002ab4:	687b      	ldr	r3, [r7, #4]
70002ab6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70002aba:	f003 031f 	and.w	r3, r3, #31
70002abe:	2b02      	cmp	r3, #2
70002ac0:	d01a      	beq.n	70002af8 <USBD_LL_SetupStage+0x72>
70002ac2:	2b02      	cmp	r3, #2
70002ac4:	d822      	bhi.n	70002b0c <USBD_LL_SetupStage+0x86>
70002ac6:	2b00      	cmp	r3, #0
70002ac8:	d002      	beq.n	70002ad0 <USBD_LL_SetupStage+0x4a>
70002aca:	2b01      	cmp	r3, #1
70002acc:	d00a      	beq.n	70002ae4 <USBD_LL_SetupStage+0x5e>
70002ace:	e01d      	b.n	70002b0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
70002ad0:	687b      	ldr	r3, [r7, #4]
70002ad2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002ad6:	4619      	mov	r1, r3
70002ad8:	6878      	ldr	r0, [r7, #4]
70002ada:	f000 fb0f 	bl	700030fc <USBD_StdDevReq>
70002ade:	4603      	mov	r3, r0
70002ae0:	73fb      	strb	r3, [r7, #15]
      break;
70002ae2:	e020      	b.n	70002b26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
70002ae4:	687b      	ldr	r3, [r7, #4]
70002ae6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002aea:	4619      	mov	r1, r3
70002aec:	6878      	ldr	r0, [r7, #4]
70002aee:	f000 fb77 	bl	700031e0 <USBD_StdItfReq>
70002af2:	4603      	mov	r3, r0
70002af4:	73fb      	strb	r3, [r7, #15]
      break;
70002af6:	e016      	b.n	70002b26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
70002af8:	687b      	ldr	r3, [r7, #4]
70002afa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002afe:	4619      	mov	r1, r3
70002b00:	6878      	ldr	r0, [r7, #4]
70002b02:	f000 fbd9 	bl	700032b8 <USBD_StdEPReq>
70002b06:	4603      	mov	r3, r0
70002b08:	73fb      	strb	r3, [r7, #15]
      break;
70002b0a:	e00c      	b.n	70002b26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
70002b0c:	687b      	ldr	r3, [r7, #4]
70002b0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70002b12:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
70002b16:	b2db      	uxtb	r3, r3
70002b18:	4619      	mov	r1, r3
70002b1a:	6878      	ldr	r0, [r7, #4]
70002b1c:	f001 fa76 	bl	7000400c <USBD_LL_StallEP>
70002b20:	4603      	mov	r3, r0
70002b22:	73fb      	strb	r3, [r7, #15]
      break;
70002b24:	bf00      	nop
  }

  return ret;
70002b26:	7bfb      	ldrb	r3, [r7, #15]
}
70002b28:	4618      	mov	r0, r3
70002b2a:	3710      	adds	r7, #16
70002b2c:	46bd      	mov	sp, r7
70002b2e:	bd80      	pop	{r7, pc}

70002b30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
70002b30:	b580      	push	{r7, lr}
70002b32:	b086      	sub	sp, #24
70002b34:	af00      	add	r7, sp, #0
70002b36:	60f8      	str	r0, [r7, #12]
70002b38:	460b      	mov	r3, r1
70002b3a:	607a      	str	r2, [r7, #4]
70002b3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
70002b3e:	2300      	movs	r3, #0
70002b40:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
70002b42:	7afb      	ldrb	r3, [r7, #11]
70002b44:	2b00      	cmp	r3, #0
70002b46:	d16e      	bne.n	70002c26 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
70002b48:	68fb      	ldr	r3, [r7, #12]
70002b4a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
70002b4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
70002b50:	68fb      	ldr	r3, [r7, #12]
70002b52:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
70002b56:	2b03      	cmp	r3, #3
70002b58:	f040 8098 	bne.w	70002c8c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
70002b5c:	693b      	ldr	r3, [r7, #16]
70002b5e:	689a      	ldr	r2, [r3, #8]
70002b60:	693b      	ldr	r3, [r7, #16]
70002b62:	68db      	ldr	r3, [r3, #12]
70002b64:	429a      	cmp	r2, r3
70002b66:	d913      	bls.n	70002b90 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
70002b68:	693b      	ldr	r3, [r7, #16]
70002b6a:	689a      	ldr	r2, [r3, #8]
70002b6c:	693b      	ldr	r3, [r7, #16]
70002b6e:	68db      	ldr	r3, [r3, #12]
70002b70:	1ad2      	subs	r2, r2, r3
70002b72:	693b      	ldr	r3, [r7, #16]
70002b74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
70002b76:	693b      	ldr	r3, [r7, #16]
70002b78:	68da      	ldr	r2, [r3, #12]
70002b7a:	693b      	ldr	r3, [r7, #16]
70002b7c:	689b      	ldr	r3, [r3, #8]
70002b7e:	4293      	cmp	r3, r2
70002b80:	bf28      	it	cs
70002b82:	4613      	movcs	r3, r2
70002b84:	461a      	mov	r2, r3
70002b86:	6879      	ldr	r1, [r7, #4]
70002b88:	68f8      	ldr	r0, [r7, #12]
70002b8a:	f001 f8e1 	bl	70003d50 <USBD_CtlContinueRx>
70002b8e:	e07d      	b.n	70002c8c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
70002b90:	68fb      	ldr	r3, [r7, #12]
70002b92:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70002b96:	f003 031f 	and.w	r3, r3, #31
70002b9a:	2b02      	cmp	r3, #2
70002b9c:	d014      	beq.n	70002bc8 <USBD_LL_DataOutStage+0x98>
70002b9e:	2b02      	cmp	r3, #2
70002ba0:	d81d      	bhi.n	70002bde <USBD_LL_DataOutStage+0xae>
70002ba2:	2b00      	cmp	r3, #0
70002ba4:	d002      	beq.n	70002bac <USBD_LL_DataOutStage+0x7c>
70002ba6:	2b01      	cmp	r3, #1
70002ba8:	d003      	beq.n	70002bb2 <USBD_LL_DataOutStage+0x82>
70002baa:	e018      	b.n	70002bde <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
70002bac:	2300      	movs	r3, #0
70002bae:	75bb      	strb	r3, [r7, #22]
            break;
70002bb0:	e018      	b.n	70002be4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
70002bb2:	68fb      	ldr	r3, [r7, #12]
70002bb4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
70002bb8:	b2db      	uxtb	r3, r3
70002bba:	4619      	mov	r1, r3
70002bbc:	68f8      	ldr	r0, [r7, #12]
70002bbe:	f000 fa64 	bl	7000308a <USBD_CoreFindIF>
70002bc2:	4603      	mov	r3, r0
70002bc4:	75bb      	strb	r3, [r7, #22]
            break;
70002bc6:	e00d      	b.n	70002be4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
70002bc8:	68fb      	ldr	r3, [r7, #12]
70002bca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
70002bce:	b2db      	uxtb	r3, r3
70002bd0:	4619      	mov	r1, r3
70002bd2:	68f8      	ldr	r0, [r7, #12]
70002bd4:	f000 fa66 	bl	700030a4 <USBD_CoreFindEP>
70002bd8:	4603      	mov	r3, r0
70002bda:	75bb      	strb	r3, [r7, #22]
            break;
70002bdc:	e002      	b.n	70002be4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
70002bde:	2300      	movs	r3, #0
70002be0:	75bb      	strb	r3, [r7, #22]
            break;
70002be2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
70002be4:	7dbb      	ldrb	r3, [r7, #22]
70002be6:	2b00      	cmp	r3, #0
70002be8:	d119      	bne.n	70002c1e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002bea:	68fb      	ldr	r3, [r7, #12]
70002bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002bf0:	b2db      	uxtb	r3, r3
70002bf2:	2b03      	cmp	r3, #3
70002bf4:	d113      	bne.n	70002c1e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
70002bf6:	7dba      	ldrb	r2, [r7, #22]
70002bf8:	68fb      	ldr	r3, [r7, #12]
70002bfa:	32ae      	adds	r2, #174	@ 0xae
70002bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c00:	691b      	ldr	r3, [r3, #16]
70002c02:	2b00      	cmp	r3, #0
70002c04:	d00b      	beq.n	70002c1e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
70002c06:	7dba      	ldrb	r2, [r7, #22]
70002c08:	68fb      	ldr	r3, [r7, #12]
70002c0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
70002c0e:	7dba      	ldrb	r2, [r7, #22]
70002c10:	68fb      	ldr	r3, [r7, #12]
70002c12:	32ae      	adds	r2, #174	@ 0xae
70002c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c18:	691b      	ldr	r3, [r3, #16]
70002c1a:	68f8      	ldr	r0, [r7, #12]
70002c1c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
70002c1e:	68f8      	ldr	r0, [r7, #12]
70002c20:	f001 f8a7 	bl	70003d72 <USBD_CtlSendStatus>
70002c24:	e032      	b.n	70002c8c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
70002c26:	7afb      	ldrb	r3, [r7, #11]
70002c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70002c2c:	b2db      	uxtb	r3, r3
70002c2e:	4619      	mov	r1, r3
70002c30:	68f8      	ldr	r0, [r7, #12]
70002c32:	f000 fa37 	bl	700030a4 <USBD_CoreFindEP>
70002c36:	4603      	mov	r3, r0
70002c38:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70002c3a:	7dbb      	ldrb	r3, [r7, #22]
70002c3c:	2bff      	cmp	r3, #255	@ 0xff
70002c3e:	d025      	beq.n	70002c8c <USBD_LL_DataOutStage+0x15c>
70002c40:	7dbb      	ldrb	r3, [r7, #22]
70002c42:	2b00      	cmp	r3, #0
70002c44:	d122      	bne.n	70002c8c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002c46:	68fb      	ldr	r3, [r7, #12]
70002c48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002c4c:	b2db      	uxtb	r3, r3
70002c4e:	2b03      	cmp	r3, #3
70002c50:	d117      	bne.n	70002c82 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
70002c52:	7dba      	ldrb	r2, [r7, #22]
70002c54:	68fb      	ldr	r3, [r7, #12]
70002c56:	32ae      	adds	r2, #174	@ 0xae
70002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c5c:	699b      	ldr	r3, [r3, #24]
70002c5e:	2b00      	cmp	r3, #0
70002c60:	d00f      	beq.n	70002c82 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
70002c62:	7dba      	ldrb	r2, [r7, #22]
70002c64:	68fb      	ldr	r3, [r7, #12]
70002c66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
70002c6a:	7dba      	ldrb	r2, [r7, #22]
70002c6c:	68fb      	ldr	r3, [r7, #12]
70002c6e:	32ae      	adds	r2, #174	@ 0xae
70002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002c74:	699b      	ldr	r3, [r3, #24]
70002c76:	7afa      	ldrb	r2, [r7, #11]
70002c78:	4611      	mov	r1, r2
70002c7a:	68f8      	ldr	r0, [r7, #12]
70002c7c:	4798      	blx	r3
70002c7e:	4603      	mov	r3, r0
70002c80:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
70002c82:	7dfb      	ldrb	r3, [r7, #23]
70002c84:	2b00      	cmp	r3, #0
70002c86:	d001      	beq.n	70002c8c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
70002c88:	7dfb      	ldrb	r3, [r7, #23]
70002c8a:	e000      	b.n	70002c8e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
70002c8c:	2300      	movs	r3, #0
}
70002c8e:	4618      	mov	r0, r3
70002c90:	3718      	adds	r7, #24
70002c92:	46bd      	mov	sp, r7
70002c94:	bd80      	pop	{r7, pc}

70002c96 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
70002c96:	b580      	push	{r7, lr}
70002c98:	b086      	sub	sp, #24
70002c9a:	af00      	add	r7, sp, #0
70002c9c:	60f8      	str	r0, [r7, #12]
70002c9e:	460b      	mov	r3, r1
70002ca0:	607a      	str	r2, [r7, #4]
70002ca2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
70002ca4:	7afb      	ldrb	r3, [r7, #11]
70002ca6:	2b00      	cmp	r3, #0
70002ca8:	d16f      	bne.n	70002d8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
70002caa:	68fb      	ldr	r3, [r7, #12]
70002cac:	3314      	adds	r3, #20
70002cae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
70002cb0:	68fb      	ldr	r3, [r7, #12]
70002cb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
70002cb6:	2b02      	cmp	r3, #2
70002cb8:	d15a      	bne.n	70002d70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
70002cba:	693b      	ldr	r3, [r7, #16]
70002cbc:	689a      	ldr	r2, [r3, #8]
70002cbe:	693b      	ldr	r3, [r7, #16]
70002cc0:	68db      	ldr	r3, [r3, #12]
70002cc2:	429a      	cmp	r2, r3
70002cc4:	d914      	bls.n	70002cf0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
70002cc6:	693b      	ldr	r3, [r7, #16]
70002cc8:	689a      	ldr	r2, [r3, #8]
70002cca:	693b      	ldr	r3, [r7, #16]
70002ccc:	68db      	ldr	r3, [r3, #12]
70002cce:	1ad2      	subs	r2, r2, r3
70002cd0:	693b      	ldr	r3, [r7, #16]
70002cd2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
70002cd4:	693b      	ldr	r3, [r7, #16]
70002cd6:	689b      	ldr	r3, [r3, #8]
70002cd8:	461a      	mov	r2, r3
70002cda:	6879      	ldr	r1, [r7, #4]
70002cdc:	68f8      	ldr	r0, [r7, #12]
70002cde:	f001 f826 	bl	70003d2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70002ce2:	2300      	movs	r3, #0
70002ce4:	2200      	movs	r2, #0
70002ce6:	2100      	movs	r1, #0
70002ce8:	68f8      	ldr	r0, [r7, #12]
70002cea:	f001 fa39 	bl	70004160 <USBD_LL_PrepareReceive>
70002cee:	e03f      	b.n	70002d70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
70002cf0:	693b      	ldr	r3, [r7, #16]
70002cf2:	68da      	ldr	r2, [r3, #12]
70002cf4:	693b      	ldr	r3, [r7, #16]
70002cf6:	689b      	ldr	r3, [r3, #8]
70002cf8:	429a      	cmp	r2, r3
70002cfa:	d11c      	bne.n	70002d36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
70002cfc:	693b      	ldr	r3, [r7, #16]
70002cfe:	685a      	ldr	r2, [r3, #4]
70002d00:	693b      	ldr	r3, [r7, #16]
70002d02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
70002d04:	429a      	cmp	r2, r3
70002d06:	d316      	bcc.n	70002d36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
70002d08:	693b      	ldr	r3, [r7, #16]
70002d0a:	685a      	ldr	r2, [r3, #4]
70002d0c:	68fb      	ldr	r3, [r7, #12]
70002d0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
70002d12:	429a      	cmp	r2, r3
70002d14:	d20f      	bcs.n	70002d36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
70002d16:	2200      	movs	r2, #0
70002d18:	2100      	movs	r1, #0
70002d1a:	68f8      	ldr	r0, [r7, #12]
70002d1c:	f001 f807 	bl	70003d2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
70002d20:	68fb      	ldr	r3, [r7, #12]
70002d22:	2200      	movs	r2, #0
70002d24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70002d28:	2300      	movs	r3, #0
70002d2a:	2200      	movs	r2, #0
70002d2c:	2100      	movs	r1, #0
70002d2e:	68f8      	ldr	r0, [r7, #12]
70002d30:	f001 fa16 	bl	70004160 <USBD_LL_PrepareReceive>
70002d34:	e01c      	b.n	70002d70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002d36:	68fb      	ldr	r3, [r7, #12]
70002d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002d3c:	b2db      	uxtb	r3, r3
70002d3e:	2b03      	cmp	r3, #3
70002d40:	d10f      	bne.n	70002d62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
70002d42:	68fb      	ldr	r3, [r7, #12]
70002d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002d48:	68db      	ldr	r3, [r3, #12]
70002d4a:	2b00      	cmp	r3, #0
70002d4c:	d009      	beq.n	70002d62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
70002d4e:	68fb      	ldr	r3, [r7, #12]
70002d50:	2200      	movs	r2, #0
70002d52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
70002d56:	68fb      	ldr	r3, [r7, #12]
70002d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002d5c:	68db      	ldr	r3, [r3, #12]
70002d5e:	68f8      	ldr	r0, [r7, #12]
70002d60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
70002d62:	2180      	movs	r1, #128	@ 0x80
70002d64:	68f8      	ldr	r0, [r7, #12]
70002d66:	f001 f951 	bl	7000400c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
70002d6a:	68f8      	ldr	r0, [r7, #12]
70002d6c:	f001 f814 	bl	70003d98 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
70002d70:	68fb      	ldr	r3, [r7, #12]
70002d72:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
70002d76:	2b00      	cmp	r3, #0
70002d78:	d03a      	beq.n	70002df0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
70002d7a:	68f8      	ldr	r0, [r7, #12]
70002d7c:	f7ff fe42 	bl	70002a04 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
70002d80:	68fb      	ldr	r3, [r7, #12]
70002d82:	2200      	movs	r2, #0
70002d84:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
70002d88:	e032      	b.n	70002df0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
70002d8a:	7afb      	ldrb	r3, [r7, #11]
70002d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
70002d90:	b2db      	uxtb	r3, r3
70002d92:	4619      	mov	r1, r3
70002d94:	68f8      	ldr	r0, [r7, #12]
70002d96:	f000 f985 	bl	700030a4 <USBD_CoreFindEP>
70002d9a:	4603      	mov	r3, r0
70002d9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70002d9e:	7dfb      	ldrb	r3, [r7, #23]
70002da0:	2bff      	cmp	r3, #255	@ 0xff
70002da2:	d025      	beq.n	70002df0 <USBD_LL_DataInStage+0x15a>
70002da4:	7dfb      	ldrb	r3, [r7, #23]
70002da6:	2b00      	cmp	r3, #0
70002da8:	d122      	bne.n	70002df0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002daa:	68fb      	ldr	r3, [r7, #12]
70002dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002db0:	b2db      	uxtb	r3, r3
70002db2:	2b03      	cmp	r3, #3
70002db4:	d11c      	bne.n	70002df0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
70002db6:	7dfa      	ldrb	r2, [r7, #23]
70002db8:	68fb      	ldr	r3, [r7, #12]
70002dba:	32ae      	adds	r2, #174	@ 0xae
70002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002dc0:	695b      	ldr	r3, [r3, #20]
70002dc2:	2b00      	cmp	r3, #0
70002dc4:	d014      	beq.n	70002df0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
70002dc6:	7dfa      	ldrb	r2, [r7, #23]
70002dc8:	68fb      	ldr	r3, [r7, #12]
70002dca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
70002dce:	7dfa      	ldrb	r2, [r7, #23]
70002dd0:	68fb      	ldr	r3, [r7, #12]
70002dd2:	32ae      	adds	r2, #174	@ 0xae
70002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002dd8:	695b      	ldr	r3, [r3, #20]
70002dda:	7afa      	ldrb	r2, [r7, #11]
70002ddc:	4611      	mov	r1, r2
70002dde:	68f8      	ldr	r0, [r7, #12]
70002de0:	4798      	blx	r3
70002de2:	4603      	mov	r3, r0
70002de4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
70002de6:	7dbb      	ldrb	r3, [r7, #22]
70002de8:	2b00      	cmp	r3, #0
70002dea:	d001      	beq.n	70002df0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
70002dec:	7dbb      	ldrb	r3, [r7, #22]
70002dee:	e000      	b.n	70002df2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
70002df0:	2300      	movs	r3, #0
}
70002df2:	4618      	mov	r0, r3
70002df4:	3718      	adds	r7, #24
70002df6:	46bd      	mov	sp, r7
70002df8:	bd80      	pop	{r7, pc}

70002dfa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
70002dfa:	b580      	push	{r7, lr}
70002dfc:	b084      	sub	sp, #16
70002dfe:	af00      	add	r7, sp, #0
70002e00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
70002e02:	2300      	movs	r3, #0
70002e04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
70002e06:	687b      	ldr	r3, [r7, #4]
70002e08:	2201      	movs	r2, #1
70002e0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
70002e0e:	687b      	ldr	r3, [r7, #4]
70002e10:	2200      	movs	r2, #0
70002e12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
70002e16:	687b      	ldr	r3, [r7, #4]
70002e18:	2200      	movs	r2, #0
70002e1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
70002e1c:	687b      	ldr	r3, [r7, #4]
70002e1e:	2200      	movs	r2, #0
70002e20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
70002e24:	687b      	ldr	r3, [r7, #4]
70002e26:	2200      	movs	r2, #0
70002e28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
70002e2c:	687b      	ldr	r3, [r7, #4]
70002e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002e32:	2b00      	cmp	r3, #0
70002e34:	d014      	beq.n	70002e60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
70002e36:	687b      	ldr	r3, [r7, #4]
70002e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002e3c:	685b      	ldr	r3, [r3, #4]
70002e3e:	2b00      	cmp	r3, #0
70002e40:	d00e      	beq.n	70002e60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
70002e42:	687b      	ldr	r3, [r7, #4]
70002e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002e48:	685b      	ldr	r3, [r3, #4]
70002e4a:	687a      	ldr	r2, [r7, #4]
70002e4c:	6852      	ldr	r2, [r2, #4]
70002e4e:	b2d2      	uxtb	r2, r2
70002e50:	4611      	mov	r1, r2
70002e52:	6878      	ldr	r0, [r7, #4]
70002e54:	4798      	blx	r3
70002e56:	4603      	mov	r3, r0
70002e58:	2b00      	cmp	r3, #0
70002e5a:	d001      	beq.n	70002e60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
70002e5c:	2303      	movs	r3, #3
70002e5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
70002e60:	2340      	movs	r3, #64	@ 0x40
70002e62:	2200      	movs	r2, #0
70002e64:	2100      	movs	r1, #0
70002e66:	6878      	ldr	r0, [r7, #4]
70002e68:	f001 f8aa 	bl	70003fc0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
70002e6c:	687b      	ldr	r3, [r7, #4]
70002e6e:	2201      	movs	r2, #1
70002e70:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
70002e74:	687b      	ldr	r3, [r7, #4]
70002e76:	2240      	movs	r2, #64	@ 0x40
70002e78:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
70002e7c:	2340      	movs	r3, #64	@ 0x40
70002e7e:	2200      	movs	r2, #0
70002e80:	2180      	movs	r1, #128	@ 0x80
70002e82:	6878      	ldr	r0, [r7, #4]
70002e84:	f001 f89c 	bl	70003fc0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
70002e88:	687b      	ldr	r3, [r7, #4]
70002e8a:	2201      	movs	r2, #1
70002e8c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
70002e8e:	687b      	ldr	r3, [r7, #4]
70002e90:	2240      	movs	r2, #64	@ 0x40
70002e92:	621a      	str	r2, [r3, #32]

  return ret;
70002e94:	7bfb      	ldrb	r3, [r7, #15]
}
70002e96:	4618      	mov	r0, r3
70002e98:	3710      	adds	r7, #16
70002e9a:	46bd      	mov	sp, r7
70002e9c:	bd80      	pop	{r7, pc}

70002e9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
70002e9e:	b480      	push	{r7}
70002ea0:	b083      	sub	sp, #12
70002ea2:	af00      	add	r7, sp, #0
70002ea4:	6078      	str	r0, [r7, #4]
70002ea6:	460b      	mov	r3, r1
70002ea8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
70002eaa:	687b      	ldr	r3, [r7, #4]
70002eac:	78fa      	ldrb	r2, [r7, #3]
70002eae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
70002eb0:	2300      	movs	r3, #0
}
70002eb2:	4618      	mov	r0, r3
70002eb4:	370c      	adds	r7, #12
70002eb6:	46bd      	mov	sp, r7
70002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
70002ebc:	4770      	bx	lr

70002ebe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
70002ebe:	b480      	push	{r7}
70002ec0:	b083      	sub	sp, #12
70002ec2:	af00      	add	r7, sp, #0
70002ec4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
70002ec6:	687b      	ldr	r3, [r7, #4]
70002ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002ecc:	b2db      	uxtb	r3, r3
70002ece:	2b04      	cmp	r3, #4
70002ed0:	d006      	beq.n	70002ee0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
70002ed2:	687b      	ldr	r3, [r7, #4]
70002ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002ed8:	b2da      	uxtb	r2, r3
70002eda:	687b      	ldr	r3, [r7, #4]
70002edc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
70002ee0:	687b      	ldr	r3, [r7, #4]
70002ee2:	2204      	movs	r2, #4
70002ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
70002ee8:	2300      	movs	r3, #0
}
70002eea:	4618      	mov	r0, r3
70002eec:	370c      	adds	r7, #12
70002eee:	46bd      	mov	sp, r7
70002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
70002ef4:	4770      	bx	lr

70002ef6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
70002ef6:	b480      	push	{r7}
70002ef8:	b083      	sub	sp, #12
70002efa:	af00      	add	r7, sp, #0
70002efc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
70002efe:	687b      	ldr	r3, [r7, #4]
70002f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002f04:	b2db      	uxtb	r3, r3
70002f06:	2b04      	cmp	r3, #4
70002f08:	d106      	bne.n	70002f18 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
70002f0a:	687b      	ldr	r3, [r7, #4]
70002f0c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
70002f10:	b2da      	uxtb	r2, r3
70002f12:	687b      	ldr	r3, [r7, #4]
70002f14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
70002f18:	2300      	movs	r3, #0
}
70002f1a:	4618      	mov	r0, r3
70002f1c:	370c      	adds	r7, #12
70002f1e:	46bd      	mov	sp, r7
70002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
70002f24:	4770      	bx	lr

70002f26 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
70002f26:	b580      	push	{r7, lr}
70002f28:	b082      	sub	sp, #8
70002f2a:	af00      	add	r7, sp, #0
70002f2c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002f2e:	687b      	ldr	r3, [r7, #4]
70002f30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002f34:	b2db      	uxtb	r3, r3
70002f36:	2b03      	cmp	r3, #3
70002f38:	d110      	bne.n	70002f5c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
70002f3a:	687b      	ldr	r3, [r7, #4]
70002f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002f40:	2b00      	cmp	r3, #0
70002f42:	d00b      	beq.n	70002f5c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
70002f44:	687b      	ldr	r3, [r7, #4]
70002f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002f4a:	69db      	ldr	r3, [r3, #28]
70002f4c:	2b00      	cmp	r3, #0
70002f4e:	d005      	beq.n	70002f5c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
70002f50:	687b      	ldr	r3, [r7, #4]
70002f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002f56:	69db      	ldr	r3, [r3, #28]
70002f58:	6878      	ldr	r0, [r7, #4]
70002f5a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
70002f5c:	2300      	movs	r3, #0
}
70002f5e:	4618      	mov	r0, r3
70002f60:	3708      	adds	r7, #8
70002f62:	46bd      	mov	sp, r7
70002f64:	bd80      	pop	{r7, pc}

70002f66 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
70002f66:	b580      	push	{r7, lr}
70002f68:	b082      	sub	sp, #8
70002f6a:	af00      	add	r7, sp, #0
70002f6c:	6078      	str	r0, [r7, #4]
70002f6e:	460b      	mov	r3, r1
70002f70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
70002f72:	687b      	ldr	r3, [r7, #4]
70002f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70002f78:	687b      	ldr	r3, [r7, #4]
70002f7a:	32ae      	adds	r2, #174	@ 0xae
70002f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002f80:	2b00      	cmp	r3, #0
70002f82:	d101      	bne.n	70002f88 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
70002f84:	2303      	movs	r3, #3
70002f86:	e01c      	b.n	70002fc2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002f88:	687b      	ldr	r3, [r7, #4]
70002f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002f8e:	b2db      	uxtb	r3, r3
70002f90:	2b03      	cmp	r3, #3
70002f92:	d115      	bne.n	70002fc0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
70002f94:	687b      	ldr	r3, [r7, #4]
70002f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70002f9a:	687b      	ldr	r3, [r7, #4]
70002f9c:	32ae      	adds	r2, #174	@ 0xae
70002f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002fa2:	6a1b      	ldr	r3, [r3, #32]
70002fa4:	2b00      	cmp	r3, #0
70002fa6:	d00b      	beq.n	70002fc0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
70002fa8:	687b      	ldr	r3, [r7, #4]
70002faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70002fae:	687b      	ldr	r3, [r7, #4]
70002fb0:	32ae      	adds	r2, #174	@ 0xae
70002fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002fb6:	6a1b      	ldr	r3, [r3, #32]
70002fb8:	78fa      	ldrb	r2, [r7, #3]
70002fba:	4611      	mov	r1, r2
70002fbc:	6878      	ldr	r0, [r7, #4]
70002fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
70002fc0:	2300      	movs	r3, #0
}
70002fc2:	4618      	mov	r0, r3
70002fc4:	3708      	adds	r7, #8
70002fc6:	46bd      	mov	sp, r7
70002fc8:	bd80      	pop	{r7, pc}

70002fca <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
70002fca:	b580      	push	{r7, lr}
70002fcc:	b082      	sub	sp, #8
70002fce:	af00      	add	r7, sp, #0
70002fd0:	6078      	str	r0, [r7, #4]
70002fd2:	460b      	mov	r3, r1
70002fd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
70002fd6:	687b      	ldr	r3, [r7, #4]
70002fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70002fdc:	687b      	ldr	r3, [r7, #4]
70002fde:	32ae      	adds	r2, #174	@ 0xae
70002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002fe4:	2b00      	cmp	r3, #0
70002fe6:	d101      	bne.n	70002fec <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
70002fe8:	2303      	movs	r3, #3
70002fea:	e01c      	b.n	70003026 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002fec:	687b      	ldr	r3, [r7, #4]
70002fee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002ff2:	b2db      	uxtb	r3, r3
70002ff4:	2b03      	cmp	r3, #3
70002ff6:	d115      	bne.n	70003024 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
70002ff8:	687b      	ldr	r3, [r7, #4]
70002ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70002ffe:	687b      	ldr	r3, [r7, #4]
70003000:	32ae      	adds	r2, #174	@ 0xae
70003002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
70003008:	2b00      	cmp	r3, #0
7000300a:	d00b      	beq.n	70003024 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
7000300c:	687b      	ldr	r3, [r7, #4]
7000300e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70003012:	687b      	ldr	r3, [r7, #4]
70003014:	32ae      	adds	r2, #174	@ 0xae
70003016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000301a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
7000301c:	78fa      	ldrb	r2, [r7, #3]
7000301e:	4611      	mov	r1, r2
70003020:	6878      	ldr	r0, [r7, #4]
70003022:	4798      	blx	r3
    }
  }

  return USBD_OK;
70003024:	2300      	movs	r3, #0
}
70003026:	4618      	mov	r0, r3
70003028:	3708      	adds	r7, #8
7000302a:	46bd      	mov	sp, r7
7000302c:	bd80      	pop	{r7, pc}

7000302e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
7000302e:	b480      	push	{r7}
70003030:	b083      	sub	sp, #12
70003032:	af00      	add	r7, sp, #0
70003034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
70003036:	2300      	movs	r3, #0
}
70003038:	4618      	mov	r0, r3
7000303a:	370c      	adds	r7, #12
7000303c:	46bd      	mov	sp, r7
7000303e:	f85d 7b04 	ldr.w	r7, [sp], #4
70003042:	4770      	bx	lr

70003044 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
70003044:	b580      	push	{r7, lr}
70003046:	b084      	sub	sp, #16
70003048:	af00      	add	r7, sp, #0
7000304a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
7000304c:	2300      	movs	r3, #0
7000304e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
70003050:	687b      	ldr	r3, [r7, #4]
70003052:	2201      	movs	r2, #1
70003054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
70003058:	687b      	ldr	r3, [r7, #4]
7000305a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
7000305e:	2b00      	cmp	r3, #0
70003060:	d00e      	beq.n	70003080 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
70003062:	687b      	ldr	r3, [r7, #4]
70003064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003068:	685b      	ldr	r3, [r3, #4]
7000306a:	687a      	ldr	r2, [r7, #4]
7000306c:	6852      	ldr	r2, [r2, #4]
7000306e:	b2d2      	uxtb	r2, r2
70003070:	4611      	mov	r1, r2
70003072:	6878      	ldr	r0, [r7, #4]
70003074:	4798      	blx	r3
70003076:	4603      	mov	r3, r0
70003078:	2b00      	cmp	r3, #0
7000307a:	d001      	beq.n	70003080 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
7000307c:	2303      	movs	r3, #3
7000307e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70003080:	7bfb      	ldrb	r3, [r7, #15]
}
70003082:	4618      	mov	r0, r3
70003084:	3710      	adds	r7, #16
70003086:	46bd      	mov	sp, r7
70003088:	bd80      	pop	{r7, pc}

7000308a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
7000308a:	b480      	push	{r7}
7000308c:	b083      	sub	sp, #12
7000308e:	af00      	add	r7, sp, #0
70003090:	6078      	str	r0, [r7, #4]
70003092:	460b      	mov	r3, r1
70003094:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
70003096:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
70003098:	4618      	mov	r0, r3
7000309a:	370c      	adds	r7, #12
7000309c:	46bd      	mov	sp, r7
7000309e:	f85d 7b04 	ldr.w	r7, [sp], #4
700030a2:	4770      	bx	lr

700030a4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
700030a4:	b480      	push	{r7}
700030a6:	b083      	sub	sp, #12
700030a8:	af00      	add	r7, sp, #0
700030aa:	6078      	str	r0, [r7, #4]
700030ac:	460b      	mov	r3, r1
700030ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
700030b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
700030b2:	4618      	mov	r0, r3
700030b4:	370c      	adds	r7, #12
700030b6:	46bd      	mov	sp, r7
700030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
700030bc:	4770      	bx	lr

700030be <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
700030be:	b480      	push	{r7}
700030c0:	b087      	sub	sp, #28
700030c2:	af00      	add	r7, sp, #0
700030c4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
700030c6:	687b      	ldr	r3, [r7, #4]
700030c8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
700030ca:	697b      	ldr	r3, [r7, #20]
700030cc:	781b      	ldrb	r3, [r3, #0]
700030ce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
700030d0:	697b      	ldr	r3, [r7, #20]
700030d2:	3301      	adds	r3, #1
700030d4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
700030d6:	697b      	ldr	r3, [r7, #20]
700030d8:	781b      	ldrb	r3, [r3, #0]
700030da:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
700030dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
700030e0:	021b      	lsls	r3, r3, #8
700030e2:	b21a      	sxth	r2, r3
700030e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
700030e8:	4313      	orrs	r3, r2
700030ea:	b21b      	sxth	r3, r3
700030ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
700030ee:	89fb      	ldrh	r3, [r7, #14]
}
700030f0:	4618      	mov	r0, r3
700030f2:	371c      	adds	r7, #28
700030f4:	46bd      	mov	sp, r7
700030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
700030fa:	4770      	bx	lr

700030fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700030fc:	b580      	push	{r7, lr}
700030fe:	b084      	sub	sp, #16
70003100:	af00      	add	r7, sp, #0
70003102:	6078      	str	r0, [r7, #4]
70003104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
70003106:	2300      	movs	r3, #0
70003108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
7000310a:	683b      	ldr	r3, [r7, #0]
7000310c:	781b      	ldrb	r3, [r3, #0]
7000310e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
70003112:	2b40      	cmp	r3, #64	@ 0x40
70003114:	d005      	beq.n	70003122 <USBD_StdDevReq+0x26>
70003116:	2b40      	cmp	r3, #64	@ 0x40
70003118:	d857      	bhi.n	700031ca <USBD_StdDevReq+0xce>
7000311a:	2b00      	cmp	r3, #0
7000311c:	d00f      	beq.n	7000313e <USBD_StdDevReq+0x42>
7000311e:	2b20      	cmp	r3, #32
70003120:	d153      	bne.n	700031ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
70003122:	687b      	ldr	r3, [r7, #4]
70003124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70003128:	687b      	ldr	r3, [r7, #4]
7000312a:	32ae      	adds	r2, #174	@ 0xae
7000312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003130:	689b      	ldr	r3, [r3, #8]
70003132:	6839      	ldr	r1, [r7, #0]
70003134:	6878      	ldr	r0, [r7, #4]
70003136:	4798      	blx	r3
70003138:	4603      	mov	r3, r0
7000313a:	73fb      	strb	r3, [r7, #15]
      break;
7000313c:	e04a      	b.n	700031d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
7000313e:	683b      	ldr	r3, [r7, #0]
70003140:	785b      	ldrb	r3, [r3, #1]
70003142:	2b09      	cmp	r3, #9
70003144:	d83b      	bhi.n	700031be <USBD_StdDevReq+0xc2>
70003146:	a201      	add	r2, pc, #4	@ (adr r2, 7000314c <USBD_StdDevReq+0x50>)
70003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000314c:	700031a1 	.word	0x700031a1
70003150:	700031b5 	.word	0x700031b5
70003154:	700031bf 	.word	0x700031bf
70003158:	700031ab 	.word	0x700031ab
7000315c:	700031bf 	.word	0x700031bf
70003160:	7000317f 	.word	0x7000317f
70003164:	70003175 	.word	0x70003175
70003168:	700031bf 	.word	0x700031bf
7000316c:	70003197 	.word	0x70003197
70003170:	70003189 	.word	0x70003189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
70003174:	6839      	ldr	r1, [r7, #0]
70003176:	6878      	ldr	r0, [r7, #4]
70003178:	f000 fa3c 	bl	700035f4 <USBD_GetDescriptor>
          break;
7000317c:	e024      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
7000317e:	6839      	ldr	r1, [r7, #0]
70003180:	6878      	ldr	r0, [r7, #4]
70003182:	f000 fbcb 	bl	7000391c <USBD_SetAddress>
          break;
70003186:	e01f      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
70003188:	6839      	ldr	r1, [r7, #0]
7000318a:	6878      	ldr	r0, [r7, #4]
7000318c:	f000 fc0a 	bl	700039a4 <USBD_SetConfig>
70003190:	4603      	mov	r3, r0
70003192:	73fb      	strb	r3, [r7, #15]
          break;
70003194:	e018      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
70003196:	6839      	ldr	r1, [r7, #0]
70003198:	6878      	ldr	r0, [r7, #4]
7000319a:	f000 fcad 	bl	70003af8 <USBD_GetConfig>
          break;
7000319e:	e013      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
700031a0:	6839      	ldr	r1, [r7, #0]
700031a2:	6878      	ldr	r0, [r7, #4]
700031a4:	f000 fcde 	bl	70003b64 <USBD_GetStatus>
          break;
700031a8:	e00e      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
700031aa:	6839      	ldr	r1, [r7, #0]
700031ac:	6878      	ldr	r0, [r7, #4]
700031ae:	f000 fd0d 	bl	70003bcc <USBD_SetFeature>
          break;
700031b2:	e009      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
700031b4:	6839      	ldr	r1, [r7, #0]
700031b6:	6878      	ldr	r0, [r7, #4]
700031b8:	f000 fd31 	bl	70003c1e <USBD_ClrFeature>
          break;
700031bc:	e004      	b.n	700031c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
700031be:	6839      	ldr	r1, [r7, #0]
700031c0:	6878      	ldr	r0, [r7, #4]
700031c2:	f000 fd88 	bl	70003cd6 <USBD_CtlError>
          break;
700031c6:	bf00      	nop
      }
      break;
700031c8:	e004      	b.n	700031d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
700031ca:	6839      	ldr	r1, [r7, #0]
700031cc:	6878      	ldr	r0, [r7, #4]
700031ce:	f000 fd82 	bl	70003cd6 <USBD_CtlError>
      break;
700031d2:	bf00      	nop
  }

  return ret;
700031d4:	7bfb      	ldrb	r3, [r7, #15]
}
700031d6:	4618      	mov	r0, r3
700031d8:	3710      	adds	r7, #16
700031da:	46bd      	mov	sp, r7
700031dc:	bd80      	pop	{r7, pc}
700031de:	bf00      	nop

700031e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700031e0:	b580      	push	{r7, lr}
700031e2:	b084      	sub	sp, #16
700031e4:	af00      	add	r7, sp, #0
700031e6:	6078      	str	r0, [r7, #4]
700031e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
700031ea:	2300      	movs	r3, #0
700031ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
700031ee:	683b      	ldr	r3, [r7, #0]
700031f0:	781b      	ldrb	r3, [r3, #0]
700031f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
700031f6:	2b40      	cmp	r3, #64	@ 0x40
700031f8:	d005      	beq.n	70003206 <USBD_StdItfReq+0x26>
700031fa:	2b40      	cmp	r3, #64	@ 0x40
700031fc:	d852      	bhi.n	700032a4 <USBD_StdItfReq+0xc4>
700031fe:	2b00      	cmp	r3, #0
70003200:	d001      	beq.n	70003206 <USBD_StdItfReq+0x26>
70003202:	2b20      	cmp	r3, #32
70003204:	d14e      	bne.n	700032a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
70003206:	687b      	ldr	r3, [r7, #4]
70003208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000320c:	b2db      	uxtb	r3, r3
7000320e:	3b01      	subs	r3, #1
70003210:	2b02      	cmp	r3, #2
70003212:	d840      	bhi.n	70003296 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
70003214:	683b      	ldr	r3, [r7, #0]
70003216:	889b      	ldrh	r3, [r3, #4]
70003218:	b2db      	uxtb	r3, r3
7000321a:	2b01      	cmp	r3, #1
7000321c:	d836      	bhi.n	7000328c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
7000321e:	683b      	ldr	r3, [r7, #0]
70003220:	889b      	ldrh	r3, [r3, #4]
70003222:	b2db      	uxtb	r3, r3
70003224:	4619      	mov	r1, r3
70003226:	6878      	ldr	r0, [r7, #4]
70003228:	f7ff ff2f 	bl	7000308a <USBD_CoreFindIF>
7000322c:	4603      	mov	r3, r0
7000322e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70003230:	7bbb      	ldrb	r3, [r7, #14]
70003232:	2bff      	cmp	r3, #255	@ 0xff
70003234:	d01d      	beq.n	70003272 <USBD_StdItfReq+0x92>
70003236:	7bbb      	ldrb	r3, [r7, #14]
70003238:	2b00      	cmp	r3, #0
7000323a:	d11a      	bne.n	70003272 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
7000323c:	7bba      	ldrb	r2, [r7, #14]
7000323e:	687b      	ldr	r3, [r7, #4]
70003240:	32ae      	adds	r2, #174	@ 0xae
70003242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003246:	689b      	ldr	r3, [r3, #8]
70003248:	2b00      	cmp	r3, #0
7000324a:	d00f      	beq.n	7000326c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
7000324c:	7bba      	ldrb	r2, [r7, #14]
7000324e:	687b      	ldr	r3, [r7, #4]
70003250:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
70003254:	7bba      	ldrb	r2, [r7, #14]
70003256:	687b      	ldr	r3, [r7, #4]
70003258:	32ae      	adds	r2, #174	@ 0xae
7000325a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000325e:	689b      	ldr	r3, [r3, #8]
70003260:	6839      	ldr	r1, [r7, #0]
70003262:	6878      	ldr	r0, [r7, #4]
70003264:	4798      	blx	r3
70003266:	4603      	mov	r3, r0
70003268:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
7000326a:	e004      	b.n	70003276 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
7000326c:	2303      	movs	r3, #3
7000326e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
70003270:	e001      	b.n	70003276 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
70003272:	2303      	movs	r3, #3
70003274:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
70003276:	683b      	ldr	r3, [r7, #0]
70003278:	88db      	ldrh	r3, [r3, #6]
7000327a:	2b00      	cmp	r3, #0
7000327c:	d110      	bne.n	700032a0 <USBD_StdItfReq+0xc0>
7000327e:	7bfb      	ldrb	r3, [r7, #15]
70003280:	2b00      	cmp	r3, #0
70003282:	d10d      	bne.n	700032a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
70003284:	6878      	ldr	r0, [r7, #4]
70003286:	f000 fd74 	bl	70003d72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
7000328a:	e009      	b.n	700032a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
7000328c:	6839      	ldr	r1, [r7, #0]
7000328e:	6878      	ldr	r0, [r7, #4]
70003290:	f000 fd21 	bl	70003cd6 <USBD_CtlError>
          break;
70003294:	e004      	b.n	700032a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
70003296:	6839      	ldr	r1, [r7, #0]
70003298:	6878      	ldr	r0, [r7, #4]
7000329a:	f000 fd1c 	bl	70003cd6 <USBD_CtlError>
          break;
7000329e:	e000      	b.n	700032a2 <USBD_StdItfReq+0xc2>
          break;
700032a0:	bf00      	nop
      }
      break;
700032a2:	e004      	b.n	700032ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
700032a4:	6839      	ldr	r1, [r7, #0]
700032a6:	6878      	ldr	r0, [r7, #4]
700032a8:	f000 fd15 	bl	70003cd6 <USBD_CtlError>
      break;
700032ac:	bf00      	nop
  }

  return ret;
700032ae:	7bfb      	ldrb	r3, [r7, #15]
}
700032b0:	4618      	mov	r0, r3
700032b2:	3710      	adds	r7, #16
700032b4:	46bd      	mov	sp, r7
700032b6:	bd80      	pop	{r7, pc}

700032b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700032b8:	b580      	push	{r7, lr}
700032ba:	b084      	sub	sp, #16
700032bc:	af00      	add	r7, sp, #0
700032be:	6078      	str	r0, [r7, #4]
700032c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
700032c2:	2300      	movs	r3, #0
700032c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
700032c6:	683b      	ldr	r3, [r7, #0]
700032c8:	889b      	ldrh	r3, [r3, #4]
700032ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
700032cc:	683b      	ldr	r3, [r7, #0]
700032ce:	781b      	ldrb	r3, [r3, #0]
700032d0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
700032d4:	2b40      	cmp	r3, #64	@ 0x40
700032d6:	d007      	beq.n	700032e8 <USBD_StdEPReq+0x30>
700032d8:	2b40      	cmp	r3, #64	@ 0x40
700032da:	f200 817f 	bhi.w	700035dc <USBD_StdEPReq+0x324>
700032de:	2b00      	cmp	r3, #0
700032e0:	d02a      	beq.n	70003338 <USBD_StdEPReq+0x80>
700032e2:	2b20      	cmp	r3, #32
700032e4:	f040 817a 	bne.w	700035dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
700032e8:	7bbb      	ldrb	r3, [r7, #14]
700032ea:	4619      	mov	r1, r3
700032ec:	6878      	ldr	r0, [r7, #4]
700032ee:	f7ff fed9 	bl	700030a4 <USBD_CoreFindEP>
700032f2:	4603      	mov	r3, r0
700032f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
700032f6:	7b7b      	ldrb	r3, [r7, #13]
700032f8:	2bff      	cmp	r3, #255	@ 0xff
700032fa:	f000 8174 	beq.w	700035e6 <USBD_StdEPReq+0x32e>
700032fe:	7b7b      	ldrb	r3, [r7, #13]
70003300:	2b00      	cmp	r3, #0
70003302:	f040 8170 	bne.w	700035e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
70003306:	7b7a      	ldrb	r2, [r7, #13]
70003308:	687b      	ldr	r3, [r7, #4]
7000330a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
7000330e:	7b7a      	ldrb	r2, [r7, #13]
70003310:	687b      	ldr	r3, [r7, #4]
70003312:	32ae      	adds	r2, #174	@ 0xae
70003314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003318:	689b      	ldr	r3, [r3, #8]
7000331a:	2b00      	cmp	r3, #0
7000331c:	f000 8163 	beq.w	700035e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
70003320:	7b7a      	ldrb	r2, [r7, #13]
70003322:	687b      	ldr	r3, [r7, #4]
70003324:	32ae      	adds	r2, #174	@ 0xae
70003326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000332a:	689b      	ldr	r3, [r3, #8]
7000332c:	6839      	ldr	r1, [r7, #0]
7000332e:	6878      	ldr	r0, [r7, #4]
70003330:	4798      	blx	r3
70003332:	4603      	mov	r3, r0
70003334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
70003336:	e156      	b.n	700035e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
70003338:	683b      	ldr	r3, [r7, #0]
7000333a:	785b      	ldrb	r3, [r3, #1]
7000333c:	2b03      	cmp	r3, #3
7000333e:	d008      	beq.n	70003352 <USBD_StdEPReq+0x9a>
70003340:	2b03      	cmp	r3, #3
70003342:	f300 8145 	bgt.w	700035d0 <USBD_StdEPReq+0x318>
70003346:	2b00      	cmp	r3, #0
70003348:	f000 809b 	beq.w	70003482 <USBD_StdEPReq+0x1ca>
7000334c:	2b01      	cmp	r3, #1
7000334e:	d03c      	beq.n	700033ca <USBD_StdEPReq+0x112>
70003350:	e13e      	b.n	700035d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
70003352:	687b      	ldr	r3, [r7, #4]
70003354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003358:	b2db      	uxtb	r3, r3
7000335a:	2b02      	cmp	r3, #2
7000335c:	d002      	beq.n	70003364 <USBD_StdEPReq+0xac>
7000335e:	2b03      	cmp	r3, #3
70003360:	d016      	beq.n	70003390 <USBD_StdEPReq+0xd8>
70003362:	e02c      	b.n	700033be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
70003364:	7bbb      	ldrb	r3, [r7, #14]
70003366:	2b00      	cmp	r3, #0
70003368:	d00d      	beq.n	70003386 <USBD_StdEPReq+0xce>
7000336a:	7bbb      	ldrb	r3, [r7, #14]
7000336c:	2b80      	cmp	r3, #128	@ 0x80
7000336e:	d00a      	beq.n	70003386 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
70003370:	7bbb      	ldrb	r3, [r7, #14]
70003372:	4619      	mov	r1, r3
70003374:	6878      	ldr	r0, [r7, #4]
70003376:	f000 fe49 	bl	7000400c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
7000337a:	2180      	movs	r1, #128	@ 0x80
7000337c:	6878      	ldr	r0, [r7, #4]
7000337e:	f000 fe45 	bl	7000400c <USBD_LL_StallEP>
70003382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
70003384:	e020      	b.n	700033c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
70003386:	6839      	ldr	r1, [r7, #0]
70003388:	6878      	ldr	r0, [r7, #4]
7000338a:	f000 fca4 	bl	70003cd6 <USBD_CtlError>
              break;
7000338e:	e01b      	b.n	700033c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
70003390:	683b      	ldr	r3, [r7, #0]
70003392:	885b      	ldrh	r3, [r3, #2]
70003394:	2b00      	cmp	r3, #0
70003396:	d10e      	bne.n	700033b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
70003398:	7bbb      	ldrb	r3, [r7, #14]
7000339a:	2b00      	cmp	r3, #0
7000339c:	d00b      	beq.n	700033b6 <USBD_StdEPReq+0xfe>
7000339e:	7bbb      	ldrb	r3, [r7, #14]
700033a0:	2b80      	cmp	r3, #128	@ 0x80
700033a2:	d008      	beq.n	700033b6 <USBD_StdEPReq+0xfe>
700033a4:	683b      	ldr	r3, [r7, #0]
700033a6:	88db      	ldrh	r3, [r3, #6]
700033a8:	2b00      	cmp	r3, #0
700033aa:	d104      	bne.n	700033b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
700033ac:	7bbb      	ldrb	r3, [r7, #14]
700033ae:	4619      	mov	r1, r3
700033b0:	6878      	ldr	r0, [r7, #4]
700033b2:	f000 fe2b 	bl	7000400c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
700033b6:	6878      	ldr	r0, [r7, #4]
700033b8:	f000 fcdb 	bl	70003d72 <USBD_CtlSendStatus>

              break;
700033bc:	e004      	b.n	700033c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
700033be:	6839      	ldr	r1, [r7, #0]
700033c0:	6878      	ldr	r0, [r7, #4]
700033c2:	f000 fc88 	bl	70003cd6 <USBD_CtlError>
              break;
700033c6:	bf00      	nop
          }
          break;
700033c8:	e107      	b.n	700035da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
700033ca:	687b      	ldr	r3, [r7, #4]
700033cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700033d0:	b2db      	uxtb	r3, r3
700033d2:	2b02      	cmp	r3, #2
700033d4:	d002      	beq.n	700033dc <USBD_StdEPReq+0x124>
700033d6:	2b03      	cmp	r3, #3
700033d8:	d016      	beq.n	70003408 <USBD_StdEPReq+0x150>
700033da:	e04b      	b.n	70003474 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
700033dc:	7bbb      	ldrb	r3, [r7, #14]
700033de:	2b00      	cmp	r3, #0
700033e0:	d00d      	beq.n	700033fe <USBD_StdEPReq+0x146>
700033e2:	7bbb      	ldrb	r3, [r7, #14]
700033e4:	2b80      	cmp	r3, #128	@ 0x80
700033e6:	d00a      	beq.n	700033fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
700033e8:	7bbb      	ldrb	r3, [r7, #14]
700033ea:	4619      	mov	r1, r3
700033ec:	6878      	ldr	r0, [r7, #4]
700033ee:	f000 fe0d 	bl	7000400c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
700033f2:	2180      	movs	r1, #128	@ 0x80
700033f4:	6878      	ldr	r0, [r7, #4]
700033f6:	f000 fe09 	bl	7000400c <USBD_LL_StallEP>
700033fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
700033fc:	e040      	b.n	70003480 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
700033fe:	6839      	ldr	r1, [r7, #0]
70003400:	6878      	ldr	r0, [r7, #4]
70003402:	f000 fc68 	bl	70003cd6 <USBD_CtlError>
              break;
70003406:	e03b      	b.n	70003480 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
70003408:	683b      	ldr	r3, [r7, #0]
7000340a:	885b      	ldrh	r3, [r3, #2]
7000340c:	2b00      	cmp	r3, #0
7000340e:	d136      	bne.n	7000347e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
70003410:	7bbb      	ldrb	r3, [r7, #14]
70003412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70003416:	2b00      	cmp	r3, #0
70003418:	d004      	beq.n	70003424 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
7000341a:	7bbb      	ldrb	r3, [r7, #14]
7000341c:	4619      	mov	r1, r3
7000341e:	6878      	ldr	r0, [r7, #4]
70003420:	f000 fe13 	bl	7000404a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
70003424:	6878      	ldr	r0, [r7, #4]
70003426:	f000 fca4 	bl	70003d72 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
7000342a:	7bbb      	ldrb	r3, [r7, #14]
7000342c:	4619      	mov	r1, r3
7000342e:	6878      	ldr	r0, [r7, #4]
70003430:	f7ff fe38 	bl	700030a4 <USBD_CoreFindEP>
70003434:	4603      	mov	r3, r0
70003436:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70003438:	7b7b      	ldrb	r3, [r7, #13]
7000343a:	2bff      	cmp	r3, #255	@ 0xff
7000343c:	d01f      	beq.n	7000347e <USBD_StdEPReq+0x1c6>
7000343e:	7b7b      	ldrb	r3, [r7, #13]
70003440:	2b00      	cmp	r3, #0
70003442:	d11c      	bne.n	7000347e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
70003444:	7b7a      	ldrb	r2, [r7, #13]
70003446:	687b      	ldr	r3, [r7, #4]
70003448:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
7000344c:	7b7a      	ldrb	r2, [r7, #13]
7000344e:	687b      	ldr	r3, [r7, #4]
70003450:	32ae      	adds	r2, #174	@ 0xae
70003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003456:	689b      	ldr	r3, [r3, #8]
70003458:	2b00      	cmp	r3, #0
7000345a:	d010      	beq.n	7000347e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
7000345c:	7b7a      	ldrb	r2, [r7, #13]
7000345e:	687b      	ldr	r3, [r7, #4]
70003460:	32ae      	adds	r2, #174	@ 0xae
70003462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003466:	689b      	ldr	r3, [r3, #8]
70003468:	6839      	ldr	r1, [r7, #0]
7000346a:	6878      	ldr	r0, [r7, #4]
7000346c:	4798      	blx	r3
7000346e:	4603      	mov	r3, r0
70003470:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
70003472:	e004      	b.n	7000347e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
70003474:	6839      	ldr	r1, [r7, #0]
70003476:	6878      	ldr	r0, [r7, #4]
70003478:	f000 fc2d 	bl	70003cd6 <USBD_CtlError>
              break;
7000347c:	e000      	b.n	70003480 <USBD_StdEPReq+0x1c8>
              break;
7000347e:	bf00      	nop
          }
          break;
70003480:	e0ab      	b.n	700035da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
70003482:	687b      	ldr	r3, [r7, #4]
70003484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003488:	b2db      	uxtb	r3, r3
7000348a:	2b02      	cmp	r3, #2
7000348c:	d002      	beq.n	70003494 <USBD_StdEPReq+0x1dc>
7000348e:	2b03      	cmp	r3, #3
70003490:	d032      	beq.n	700034f8 <USBD_StdEPReq+0x240>
70003492:	e097      	b.n	700035c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
70003494:	7bbb      	ldrb	r3, [r7, #14]
70003496:	2b00      	cmp	r3, #0
70003498:	d007      	beq.n	700034aa <USBD_StdEPReq+0x1f2>
7000349a:	7bbb      	ldrb	r3, [r7, #14]
7000349c:	2b80      	cmp	r3, #128	@ 0x80
7000349e:	d004      	beq.n	700034aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
700034a0:	6839      	ldr	r1, [r7, #0]
700034a2:	6878      	ldr	r0, [r7, #4]
700034a4:	f000 fc17 	bl	70003cd6 <USBD_CtlError>
                break;
700034a8:	e091      	b.n	700035ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
700034aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
700034ae:	2b00      	cmp	r3, #0
700034b0:	da0b      	bge.n	700034ca <USBD_StdEPReq+0x212>
700034b2:	7bbb      	ldrb	r3, [r7, #14]
700034b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
700034b8:	4613      	mov	r3, r2
700034ba:	009b      	lsls	r3, r3, #2
700034bc:	4413      	add	r3, r2
700034be:	009b      	lsls	r3, r3, #2
700034c0:	3310      	adds	r3, #16
700034c2:	687a      	ldr	r2, [r7, #4]
700034c4:	4413      	add	r3, r2
700034c6:	3304      	adds	r3, #4
700034c8:	e00b      	b.n	700034e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
700034ca:	7bbb      	ldrb	r3, [r7, #14]
700034cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
700034d0:	4613      	mov	r3, r2
700034d2:	009b      	lsls	r3, r3, #2
700034d4:	4413      	add	r3, r2
700034d6:	009b      	lsls	r3, r3, #2
700034d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
700034dc:	687a      	ldr	r2, [r7, #4]
700034de:	4413      	add	r3, r2
700034e0:	3304      	adds	r3, #4
700034e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
700034e4:	68bb      	ldr	r3, [r7, #8]
700034e6:	2200      	movs	r2, #0
700034e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
700034ea:	68bb      	ldr	r3, [r7, #8]
700034ec:	2202      	movs	r2, #2
700034ee:	4619      	mov	r1, r3
700034f0:	6878      	ldr	r0, [r7, #4]
700034f2:	f000 fc01 	bl	70003cf8 <USBD_CtlSendData>
              break;
700034f6:	e06a      	b.n	700035ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
700034f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
700034fc:	2b00      	cmp	r3, #0
700034fe:	da11      	bge.n	70003524 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
70003500:	7bbb      	ldrb	r3, [r7, #14]
70003502:	f003 020f 	and.w	r2, r3, #15
70003506:	6879      	ldr	r1, [r7, #4]
70003508:	4613      	mov	r3, r2
7000350a:	009b      	lsls	r3, r3, #2
7000350c:	4413      	add	r3, r2
7000350e:	009b      	lsls	r3, r3, #2
70003510:	440b      	add	r3, r1
70003512:	3324      	adds	r3, #36	@ 0x24
70003514:	881b      	ldrh	r3, [r3, #0]
70003516:	2b00      	cmp	r3, #0
70003518:	d117      	bne.n	7000354a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
7000351a:	6839      	ldr	r1, [r7, #0]
7000351c:	6878      	ldr	r0, [r7, #4]
7000351e:	f000 fbda 	bl	70003cd6 <USBD_CtlError>
                  break;
70003522:	e054      	b.n	700035ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
70003524:	7bbb      	ldrb	r3, [r7, #14]
70003526:	f003 020f 	and.w	r2, r3, #15
7000352a:	6879      	ldr	r1, [r7, #4]
7000352c:	4613      	mov	r3, r2
7000352e:	009b      	lsls	r3, r3, #2
70003530:	4413      	add	r3, r2
70003532:	009b      	lsls	r3, r3, #2
70003534:	440b      	add	r3, r1
70003536:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
7000353a:	881b      	ldrh	r3, [r3, #0]
7000353c:	2b00      	cmp	r3, #0
7000353e:	d104      	bne.n	7000354a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
70003540:	6839      	ldr	r1, [r7, #0]
70003542:	6878      	ldr	r0, [r7, #4]
70003544:	f000 fbc7 	bl	70003cd6 <USBD_CtlError>
                  break;
70003548:	e041      	b.n	700035ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
7000354a:	f997 300e 	ldrsb.w	r3, [r7, #14]
7000354e:	2b00      	cmp	r3, #0
70003550:	da0b      	bge.n	7000356a <USBD_StdEPReq+0x2b2>
70003552:	7bbb      	ldrb	r3, [r7, #14]
70003554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
70003558:	4613      	mov	r3, r2
7000355a:	009b      	lsls	r3, r3, #2
7000355c:	4413      	add	r3, r2
7000355e:	009b      	lsls	r3, r3, #2
70003560:	3310      	adds	r3, #16
70003562:	687a      	ldr	r2, [r7, #4]
70003564:	4413      	add	r3, r2
70003566:	3304      	adds	r3, #4
70003568:	e00b      	b.n	70003582 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
7000356a:	7bbb      	ldrb	r3, [r7, #14]
7000356c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70003570:	4613      	mov	r3, r2
70003572:	009b      	lsls	r3, r3, #2
70003574:	4413      	add	r3, r2
70003576:	009b      	lsls	r3, r3, #2
70003578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
7000357c:	687a      	ldr	r2, [r7, #4]
7000357e:	4413      	add	r3, r2
70003580:	3304      	adds	r3, #4
70003582:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
70003584:	7bbb      	ldrb	r3, [r7, #14]
70003586:	2b00      	cmp	r3, #0
70003588:	d002      	beq.n	70003590 <USBD_StdEPReq+0x2d8>
7000358a:	7bbb      	ldrb	r3, [r7, #14]
7000358c:	2b80      	cmp	r3, #128	@ 0x80
7000358e:	d103      	bne.n	70003598 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
70003590:	68bb      	ldr	r3, [r7, #8]
70003592:	2200      	movs	r2, #0
70003594:	601a      	str	r2, [r3, #0]
70003596:	e00e      	b.n	700035b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
70003598:	7bbb      	ldrb	r3, [r7, #14]
7000359a:	4619      	mov	r1, r3
7000359c:	6878      	ldr	r0, [r7, #4]
7000359e:	f000 fd73 	bl	70004088 <USBD_LL_IsStallEP>
700035a2:	4603      	mov	r3, r0
700035a4:	2b00      	cmp	r3, #0
700035a6:	d003      	beq.n	700035b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
700035a8:	68bb      	ldr	r3, [r7, #8]
700035aa:	2201      	movs	r2, #1
700035ac:	601a      	str	r2, [r3, #0]
700035ae:	e002      	b.n	700035b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
700035b0:	68bb      	ldr	r3, [r7, #8]
700035b2:	2200      	movs	r2, #0
700035b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
700035b6:	68bb      	ldr	r3, [r7, #8]
700035b8:	2202      	movs	r2, #2
700035ba:	4619      	mov	r1, r3
700035bc:	6878      	ldr	r0, [r7, #4]
700035be:	f000 fb9b 	bl	70003cf8 <USBD_CtlSendData>
              break;
700035c2:	e004      	b.n	700035ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
700035c4:	6839      	ldr	r1, [r7, #0]
700035c6:	6878      	ldr	r0, [r7, #4]
700035c8:	f000 fb85 	bl	70003cd6 <USBD_CtlError>
              break;
700035cc:	bf00      	nop
          }
          break;
700035ce:	e004      	b.n	700035da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
700035d0:	6839      	ldr	r1, [r7, #0]
700035d2:	6878      	ldr	r0, [r7, #4]
700035d4:	f000 fb7f 	bl	70003cd6 <USBD_CtlError>
          break;
700035d8:	bf00      	nop
      }
      break;
700035da:	e005      	b.n	700035e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
700035dc:	6839      	ldr	r1, [r7, #0]
700035de:	6878      	ldr	r0, [r7, #4]
700035e0:	f000 fb79 	bl	70003cd6 <USBD_CtlError>
      break;
700035e4:	e000      	b.n	700035e8 <USBD_StdEPReq+0x330>
      break;
700035e6:	bf00      	nop
  }

  return ret;
700035e8:	7bfb      	ldrb	r3, [r7, #15]
}
700035ea:	4618      	mov	r0, r3
700035ec:	3710      	adds	r7, #16
700035ee:	46bd      	mov	sp, r7
700035f0:	bd80      	pop	{r7, pc}
	...

700035f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700035f4:	b580      	push	{r7, lr}
700035f6:	b084      	sub	sp, #16
700035f8:	af00      	add	r7, sp, #0
700035fa:	6078      	str	r0, [r7, #4]
700035fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
700035fe:	2300      	movs	r3, #0
70003600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
70003602:	2300      	movs	r3, #0
70003604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
70003606:	2300      	movs	r3, #0
70003608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
7000360a:	683b      	ldr	r3, [r7, #0]
7000360c:	885b      	ldrh	r3, [r3, #2]
7000360e:	0a1b      	lsrs	r3, r3, #8
70003610:	b29b      	uxth	r3, r3
70003612:	3b01      	subs	r3, #1
70003614:	2b0e      	cmp	r3, #14
70003616:	f200 8152 	bhi.w	700038be <USBD_GetDescriptor+0x2ca>
7000361a:	a201      	add	r2, pc, #4	@ (adr r2, 70003620 <USBD_GetDescriptor+0x2c>)
7000361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
70003620:	70003691 	.word	0x70003691
70003624:	700036a9 	.word	0x700036a9
70003628:	700036e9 	.word	0x700036e9
7000362c:	700038bf 	.word	0x700038bf
70003630:	700038bf 	.word	0x700038bf
70003634:	7000385f 	.word	0x7000385f
70003638:	7000388b 	.word	0x7000388b
7000363c:	700038bf 	.word	0x700038bf
70003640:	700038bf 	.word	0x700038bf
70003644:	700038bf 	.word	0x700038bf
70003648:	700038bf 	.word	0x700038bf
7000364c:	700038bf 	.word	0x700038bf
70003650:	700038bf 	.word	0x700038bf
70003654:	700038bf 	.word	0x700038bf
70003658:	7000365d 	.word	0x7000365d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
7000365c:	687b      	ldr	r3, [r7, #4]
7000365e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003662:	69db      	ldr	r3, [r3, #28]
70003664:	2b00      	cmp	r3, #0
70003666:	d00b      	beq.n	70003680 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
70003668:	687b      	ldr	r3, [r7, #4]
7000366a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000366e:	69db      	ldr	r3, [r3, #28]
70003670:	687a      	ldr	r2, [r7, #4]
70003672:	7c12      	ldrb	r2, [r2, #16]
70003674:	f107 0108 	add.w	r1, r7, #8
70003678:	4610      	mov	r0, r2
7000367a:	4798      	blx	r3
7000367c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
7000367e:	e126      	b.n	700038ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
70003680:	6839      	ldr	r1, [r7, #0]
70003682:	6878      	ldr	r0, [r7, #4]
70003684:	f000 fb27 	bl	70003cd6 <USBD_CtlError>
        err++;
70003688:	7afb      	ldrb	r3, [r7, #11]
7000368a:	3301      	adds	r3, #1
7000368c:	72fb      	strb	r3, [r7, #11]
      break;
7000368e:	e11e      	b.n	700038ce <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
70003690:	687b      	ldr	r3, [r7, #4]
70003692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003696:	681b      	ldr	r3, [r3, #0]
70003698:	687a      	ldr	r2, [r7, #4]
7000369a:	7c12      	ldrb	r2, [r2, #16]
7000369c:	f107 0108 	add.w	r1, r7, #8
700036a0:	4610      	mov	r0, r2
700036a2:	4798      	blx	r3
700036a4:	60f8      	str	r0, [r7, #12]
      break;
700036a6:	e112      	b.n	700038ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
700036a8:	687b      	ldr	r3, [r7, #4]
700036aa:	7c1b      	ldrb	r3, [r3, #16]
700036ac:	2b00      	cmp	r3, #0
700036ae:	d10d      	bne.n	700036cc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
700036b0:	687b      	ldr	r3, [r7, #4]
700036b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
700036b8:	f107 0208 	add.w	r2, r7, #8
700036bc:	4610      	mov	r0, r2
700036be:	4798      	blx	r3
700036c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
700036c2:	68fb      	ldr	r3, [r7, #12]
700036c4:	3301      	adds	r3, #1
700036c6:	2202      	movs	r2, #2
700036c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
700036ca:	e100      	b.n	700038ce <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
700036cc:	687b      	ldr	r3, [r7, #4]
700036ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
700036d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
700036d4:	f107 0208 	add.w	r2, r7, #8
700036d8:	4610      	mov	r0, r2
700036da:	4798      	blx	r3
700036dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
700036de:	68fb      	ldr	r3, [r7, #12]
700036e0:	3301      	adds	r3, #1
700036e2:	2202      	movs	r2, #2
700036e4:	701a      	strb	r2, [r3, #0]
      break;
700036e6:	e0f2      	b.n	700038ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
700036e8:	683b      	ldr	r3, [r7, #0]
700036ea:	885b      	ldrh	r3, [r3, #2]
700036ec:	b2db      	uxtb	r3, r3
700036ee:	2b05      	cmp	r3, #5
700036f0:	f200 80ac 	bhi.w	7000384c <USBD_GetDescriptor+0x258>
700036f4:	a201      	add	r2, pc, #4	@ (adr r2, 700036fc <USBD_GetDescriptor+0x108>)
700036f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700036fa:	bf00      	nop
700036fc:	70003715 	.word	0x70003715
70003700:	70003749 	.word	0x70003749
70003704:	7000377d 	.word	0x7000377d
70003708:	700037b1 	.word	0x700037b1
7000370c:	700037e5 	.word	0x700037e5
70003710:	70003819 	.word	0x70003819
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
70003714:	687b      	ldr	r3, [r7, #4]
70003716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000371a:	685b      	ldr	r3, [r3, #4]
7000371c:	2b00      	cmp	r3, #0
7000371e:	d00b      	beq.n	70003738 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
70003720:	687b      	ldr	r3, [r7, #4]
70003722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003726:	685b      	ldr	r3, [r3, #4]
70003728:	687a      	ldr	r2, [r7, #4]
7000372a:	7c12      	ldrb	r2, [r2, #16]
7000372c:	f107 0108 	add.w	r1, r7, #8
70003730:	4610      	mov	r0, r2
70003732:	4798      	blx	r3
70003734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70003736:	e091      	b.n	7000385c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70003738:	6839      	ldr	r1, [r7, #0]
7000373a:	6878      	ldr	r0, [r7, #4]
7000373c:	f000 facb 	bl	70003cd6 <USBD_CtlError>
            err++;
70003740:	7afb      	ldrb	r3, [r7, #11]
70003742:	3301      	adds	r3, #1
70003744:	72fb      	strb	r3, [r7, #11]
          break;
70003746:	e089      	b.n	7000385c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
70003748:	687b      	ldr	r3, [r7, #4]
7000374a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000374e:	689b      	ldr	r3, [r3, #8]
70003750:	2b00      	cmp	r3, #0
70003752:	d00b      	beq.n	7000376c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
70003754:	687b      	ldr	r3, [r7, #4]
70003756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000375a:	689b      	ldr	r3, [r3, #8]
7000375c:	687a      	ldr	r2, [r7, #4]
7000375e:	7c12      	ldrb	r2, [r2, #16]
70003760:	f107 0108 	add.w	r1, r7, #8
70003764:	4610      	mov	r0, r2
70003766:	4798      	blx	r3
70003768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
7000376a:	e077      	b.n	7000385c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
7000376c:	6839      	ldr	r1, [r7, #0]
7000376e:	6878      	ldr	r0, [r7, #4]
70003770:	f000 fab1 	bl	70003cd6 <USBD_CtlError>
            err++;
70003774:	7afb      	ldrb	r3, [r7, #11]
70003776:	3301      	adds	r3, #1
70003778:	72fb      	strb	r3, [r7, #11]
          break;
7000377a:	e06f      	b.n	7000385c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
7000377c:	687b      	ldr	r3, [r7, #4]
7000377e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003782:	68db      	ldr	r3, [r3, #12]
70003784:	2b00      	cmp	r3, #0
70003786:	d00b      	beq.n	700037a0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
70003788:	687b      	ldr	r3, [r7, #4]
7000378a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000378e:	68db      	ldr	r3, [r3, #12]
70003790:	687a      	ldr	r2, [r7, #4]
70003792:	7c12      	ldrb	r2, [r2, #16]
70003794:	f107 0108 	add.w	r1, r7, #8
70003798:	4610      	mov	r0, r2
7000379a:	4798      	blx	r3
7000379c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
7000379e:	e05d      	b.n	7000385c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
700037a0:	6839      	ldr	r1, [r7, #0]
700037a2:	6878      	ldr	r0, [r7, #4]
700037a4:	f000 fa97 	bl	70003cd6 <USBD_CtlError>
            err++;
700037a8:	7afb      	ldrb	r3, [r7, #11]
700037aa:	3301      	adds	r3, #1
700037ac:	72fb      	strb	r3, [r7, #11]
          break;
700037ae:	e055      	b.n	7000385c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
700037b0:	687b      	ldr	r3, [r7, #4]
700037b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700037b6:	691b      	ldr	r3, [r3, #16]
700037b8:	2b00      	cmp	r3, #0
700037ba:	d00b      	beq.n	700037d4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
700037bc:	687b      	ldr	r3, [r7, #4]
700037be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700037c2:	691b      	ldr	r3, [r3, #16]
700037c4:	687a      	ldr	r2, [r7, #4]
700037c6:	7c12      	ldrb	r2, [r2, #16]
700037c8:	f107 0108 	add.w	r1, r7, #8
700037cc:	4610      	mov	r0, r2
700037ce:	4798      	blx	r3
700037d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
700037d2:	e043      	b.n	7000385c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
700037d4:	6839      	ldr	r1, [r7, #0]
700037d6:	6878      	ldr	r0, [r7, #4]
700037d8:	f000 fa7d 	bl	70003cd6 <USBD_CtlError>
            err++;
700037dc:	7afb      	ldrb	r3, [r7, #11]
700037de:	3301      	adds	r3, #1
700037e0:	72fb      	strb	r3, [r7, #11]
          break;
700037e2:	e03b      	b.n	7000385c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
700037e4:	687b      	ldr	r3, [r7, #4]
700037e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700037ea:	695b      	ldr	r3, [r3, #20]
700037ec:	2b00      	cmp	r3, #0
700037ee:	d00b      	beq.n	70003808 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
700037f0:	687b      	ldr	r3, [r7, #4]
700037f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700037f6:	695b      	ldr	r3, [r3, #20]
700037f8:	687a      	ldr	r2, [r7, #4]
700037fa:	7c12      	ldrb	r2, [r2, #16]
700037fc:	f107 0108 	add.w	r1, r7, #8
70003800:	4610      	mov	r0, r2
70003802:	4798      	blx	r3
70003804:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70003806:	e029      	b.n	7000385c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70003808:	6839      	ldr	r1, [r7, #0]
7000380a:	6878      	ldr	r0, [r7, #4]
7000380c:	f000 fa63 	bl	70003cd6 <USBD_CtlError>
            err++;
70003810:	7afb      	ldrb	r3, [r7, #11]
70003812:	3301      	adds	r3, #1
70003814:	72fb      	strb	r3, [r7, #11]
          break;
70003816:	e021      	b.n	7000385c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
70003818:	687b      	ldr	r3, [r7, #4]
7000381a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000381e:	699b      	ldr	r3, [r3, #24]
70003820:	2b00      	cmp	r3, #0
70003822:	d00b      	beq.n	7000383c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
70003824:	687b      	ldr	r3, [r7, #4]
70003826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000382a:	699b      	ldr	r3, [r3, #24]
7000382c:	687a      	ldr	r2, [r7, #4]
7000382e:	7c12      	ldrb	r2, [r2, #16]
70003830:	f107 0108 	add.w	r1, r7, #8
70003834:	4610      	mov	r0, r2
70003836:	4798      	blx	r3
70003838:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
7000383a:	e00f      	b.n	7000385c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
7000383c:	6839      	ldr	r1, [r7, #0]
7000383e:	6878      	ldr	r0, [r7, #4]
70003840:	f000 fa49 	bl	70003cd6 <USBD_CtlError>
            err++;
70003844:	7afb      	ldrb	r3, [r7, #11]
70003846:	3301      	adds	r3, #1
70003848:	72fb      	strb	r3, [r7, #11]
          break;
7000384a:	e007      	b.n	7000385c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
7000384c:	6839      	ldr	r1, [r7, #0]
7000384e:	6878      	ldr	r0, [r7, #4]
70003850:	f000 fa41 	bl	70003cd6 <USBD_CtlError>
          err++;
70003854:	7afb      	ldrb	r3, [r7, #11]
70003856:	3301      	adds	r3, #1
70003858:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
7000385a:	bf00      	nop
      }
      break;
7000385c:	e037      	b.n	700038ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
7000385e:	687b      	ldr	r3, [r7, #4]
70003860:	7c1b      	ldrb	r3, [r3, #16]
70003862:	2b00      	cmp	r3, #0
70003864:	d109      	bne.n	7000387a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
70003866:	687b      	ldr	r3, [r7, #4]
70003868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
7000386c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
7000386e:	f107 0208 	add.w	r2, r7, #8
70003872:	4610      	mov	r0, r2
70003874:	4798      	blx	r3
70003876:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
70003878:	e029      	b.n	700038ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
7000387a:	6839      	ldr	r1, [r7, #0]
7000387c:	6878      	ldr	r0, [r7, #4]
7000387e:	f000 fa2a 	bl	70003cd6 <USBD_CtlError>
        err++;
70003882:	7afb      	ldrb	r3, [r7, #11]
70003884:	3301      	adds	r3, #1
70003886:	72fb      	strb	r3, [r7, #11]
      break;
70003888:	e021      	b.n	700038ce <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
7000388a:	687b      	ldr	r3, [r7, #4]
7000388c:	7c1b      	ldrb	r3, [r3, #16]
7000388e:	2b00      	cmp	r3, #0
70003890:	d10d      	bne.n	700038ae <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
70003892:	687b      	ldr	r3, [r7, #4]
70003894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000389a:	f107 0208 	add.w	r2, r7, #8
7000389e:	4610      	mov	r0, r2
700038a0:	4798      	blx	r3
700038a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
700038a4:	68fb      	ldr	r3, [r7, #12]
700038a6:	3301      	adds	r3, #1
700038a8:	2207      	movs	r2, #7
700038aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
700038ac:	e00f      	b.n	700038ce <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
700038ae:	6839      	ldr	r1, [r7, #0]
700038b0:	6878      	ldr	r0, [r7, #4]
700038b2:	f000 fa10 	bl	70003cd6 <USBD_CtlError>
        err++;
700038b6:	7afb      	ldrb	r3, [r7, #11]
700038b8:	3301      	adds	r3, #1
700038ba:	72fb      	strb	r3, [r7, #11]
      break;
700038bc:	e007      	b.n	700038ce <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
700038be:	6839      	ldr	r1, [r7, #0]
700038c0:	6878      	ldr	r0, [r7, #4]
700038c2:	f000 fa08 	bl	70003cd6 <USBD_CtlError>
      err++;
700038c6:	7afb      	ldrb	r3, [r7, #11]
700038c8:	3301      	adds	r3, #1
700038ca:	72fb      	strb	r3, [r7, #11]
      break;
700038cc:	bf00      	nop
  }

  if (err != 0U)
700038ce:	7afb      	ldrb	r3, [r7, #11]
700038d0:	2b00      	cmp	r3, #0
700038d2:	d11e      	bne.n	70003912 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
700038d4:	683b      	ldr	r3, [r7, #0]
700038d6:	88db      	ldrh	r3, [r3, #6]
700038d8:	2b00      	cmp	r3, #0
700038da:	d016      	beq.n	7000390a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
700038dc:	893b      	ldrh	r3, [r7, #8]
700038de:	2b00      	cmp	r3, #0
700038e0:	d00e      	beq.n	70003900 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
700038e2:	683b      	ldr	r3, [r7, #0]
700038e4:	88da      	ldrh	r2, [r3, #6]
700038e6:	893b      	ldrh	r3, [r7, #8]
700038e8:	4293      	cmp	r3, r2
700038ea:	bf28      	it	cs
700038ec:	4613      	movcs	r3, r2
700038ee:	b29b      	uxth	r3, r3
700038f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
700038f2:	893b      	ldrh	r3, [r7, #8]
700038f4:	461a      	mov	r2, r3
700038f6:	68f9      	ldr	r1, [r7, #12]
700038f8:	6878      	ldr	r0, [r7, #4]
700038fa:	f000 f9fd 	bl	70003cf8 <USBD_CtlSendData>
700038fe:	e009      	b.n	70003914 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
70003900:	6839      	ldr	r1, [r7, #0]
70003902:	6878      	ldr	r0, [r7, #4]
70003904:	f000 f9e7 	bl	70003cd6 <USBD_CtlError>
70003908:	e004      	b.n	70003914 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
7000390a:	6878      	ldr	r0, [r7, #4]
7000390c:	f000 fa31 	bl	70003d72 <USBD_CtlSendStatus>
70003910:	e000      	b.n	70003914 <USBD_GetDescriptor+0x320>
    return;
70003912:	bf00      	nop
  }
}
70003914:	3710      	adds	r7, #16
70003916:	46bd      	mov	sp, r7
70003918:	bd80      	pop	{r7, pc}
7000391a:	bf00      	nop

7000391c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
7000391c:	b580      	push	{r7, lr}
7000391e:	b084      	sub	sp, #16
70003920:	af00      	add	r7, sp, #0
70003922:	6078      	str	r0, [r7, #4]
70003924:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
70003926:	683b      	ldr	r3, [r7, #0]
70003928:	889b      	ldrh	r3, [r3, #4]
7000392a:	2b00      	cmp	r3, #0
7000392c:	d131      	bne.n	70003992 <USBD_SetAddress+0x76>
7000392e:	683b      	ldr	r3, [r7, #0]
70003930:	88db      	ldrh	r3, [r3, #6]
70003932:	2b00      	cmp	r3, #0
70003934:	d12d      	bne.n	70003992 <USBD_SetAddress+0x76>
70003936:	683b      	ldr	r3, [r7, #0]
70003938:	885b      	ldrh	r3, [r3, #2]
7000393a:	2b7f      	cmp	r3, #127	@ 0x7f
7000393c:	d829      	bhi.n	70003992 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
7000393e:	683b      	ldr	r3, [r7, #0]
70003940:	885b      	ldrh	r3, [r3, #2]
70003942:	b2db      	uxtb	r3, r3
70003944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70003948:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
7000394a:	687b      	ldr	r3, [r7, #4]
7000394c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003950:	b2db      	uxtb	r3, r3
70003952:	2b03      	cmp	r3, #3
70003954:	d104      	bne.n	70003960 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
70003956:	6839      	ldr	r1, [r7, #0]
70003958:	6878      	ldr	r0, [r7, #4]
7000395a:	f000 f9bc 	bl	70003cd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
7000395e:	e01d      	b.n	7000399c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
70003960:	687b      	ldr	r3, [r7, #4]
70003962:	7bfa      	ldrb	r2, [r7, #15]
70003964:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
70003968:	7bfb      	ldrb	r3, [r7, #15]
7000396a:	4619      	mov	r1, r3
7000396c:	6878      	ldr	r0, [r7, #4]
7000396e:	f000 fbb7 	bl	700040e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
70003972:	6878      	ldr	r0, [r7, #4]
70003974:	f000 f9fd 	bl	70003d72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
70003978:	7bfb      	ldrb	r3, [r7, #15]
7000397a:	2b00      	cmp	r3, #0
7000397c:	d004      	beq.n	70003988 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
7000397e:	687b      	ldr	r3, [r7, #4]
70003980:	2202      	movs	r2, #2
70003982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003986:	e009      	b.n	7000399c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
70003988:	687b      	ldr	r3, [r7, #4]
7000398a:	2201      	movs	r2, #1
7000398c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003990:	e004      	b.n	7000399c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
70003992:	6839      	ldr	r1, [r7, #0]
70003994:	6878      	ldr	r0, [r7, #4]
70003996:	f000 f99e 	bl	70003cd6 <USBD_CtlError>
  }
}
7000399a:	bf00      	nop
7000399c:	bf00      	nop
7000399e:	3710      	adds	r7, #16
700039a0:	46bd      	mov	sp, r7
700039a2:	bd80      	pop	{r7, pc}

700039a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700039a4:	b580      	push	{r7, lr}
700039a6:	b084      	sub	sp, #16
700039a8:	af00      	add	r7, sp, #0
700039aa:	6078      	str	r0, [r7, #4]
700039ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
700039ae:	2300      	movs	r3, #0
700039b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
700039b2:	683b      	ldr	r3, [r7, #0]
700039b4:	885b      	ldrh	r3, [r3, #2]
700039b6:	b2da      	uxtb	r2, r3
700039b8:	4b4e      	ldr	r3, [pc, #312]	@ (70003af4 <USBD_SetConfig+0x150>)
700039ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
700039bc:	4b4d      	ldr	r3, [pc, #308]	@ (70003af4 <USBD_SetConfig+0x150>)
700039be:	781b      	ldrb	r3, [r3, #0]
700039c0:	2b01      	cmp	r3, #1
700039c2:	d905      	bls.n	700039d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
700039c4:	6839      	ldr	r1, [r7, #0]
700039c6:	6878      	ldr	r0, [r7, #4]
700039c8:	f000 f985 	bl	70003cd6 <USBD_CtlError>
    return USBD_FAIL;
700039cc:	2303      	movs	r3, #3
700039ce:	e08c      	b.n	70003aea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
700039d0:	687b      	ldr	r3, [r7, #4]
700039d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700039d6:	b2db      	uxtb	r3, r3
700039d8:	2b02      	cmp	r3, #2
700039da:	d002      	beq.n	700039e2 <USBD_SetConfig+0x3e>
700039dc:	2b03      	cmp	r3, #3
700039de:	d029      	beq.n	70003a34 <USBD_SetConfig+0x90>
700039e0:	e075      	b.n	70003ace <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
700039e2:	4b44      	ldr	r3, [pc, #272]	@ (70003af4 <USBD_SetConfig+0x150>)
700039e4:	781b      	ldrb	r3, [r3, #0]
700039e6:	2b00      	cmp	r3, #0
700039e8:	d020      	beq.n	70003a2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
700039ea:	4b42      	ldr	r3, [pc, #264]	@ (70003af4 <USBD_SetConfig+0x150>)
700039ec:	781b      	ldrb	r3, [r3, #0]
700039ee:	461a      	mov	r2, r3
700039f0:	687b      	ldr	r3, [r7, #4]
700039f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
700039f4:	4b3f      	ldr	r3, [pc, #252]	@ (70003af4 <USBD_SetConfig+0x150>)
700039f6:	781b      	ldrb	r3, [r3, #0]
700039f8:	4619      	mov	r1, r3
700039fa:	6878      	ldr	r0, [r7, #4]
700039fc:	f7ff f80d 	bl	70002a1a <USBD_SetClassConfig>
70003a00:	4603      	mov	r3, r0
70003a02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
70003a04:	7bfb      	ldrb	r3, [r7, #15]
70003a06:	2b00      	cmp	r3, #0
70003a08:	d008      	beq.n	70003a1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
70003a0a:	6839      	ldr	r1, [r7, #0]
70003a0c:	6878      	ldr	r0, [r7, #4]
70003a0e:	f000 f962 	bl	70003cd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
70003a12:	687b      	ldr	r3, [r7, #4]
70003a14:	2202      	movs	r2, #2
70003a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
70003a1a:	e065      	b.n	70003ae8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
70003a1c:	6878      	ldr	r0, [r7, #4]
70003a1e:	f000 f9a8 	bl	70003d72 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
70003a22:	687b      	ldr	r3, [r7, #4]
70003a24:	2203      	movs	r2, #3
70003a26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
70003a2a:	e05d      	b.n	70003ae8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
70003a2c:	6878      	ldr	r0, [r7, #4]
70003a2e:	f000 f9a0 	bl	70003d72 <USBD_CtlSendStatus>
      break;
70003a32:	e059      	b.n	70003ae8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
70003a34:	4b2f      	ldr	r3, [pc, #188]	@ (70003af4 <USBD_SetConfig+0x150>)
70003a36:	781b      	ldrb	r3, [r3, #0]
70003a38:	2b00      	cmp	r3, #0
70003a3a:	d112      	bne.n	70003a62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
70003a3c:	687b      	ldr	r3, [r7, #4]
70003a3e:	2202      	movs	r2, #2
70003a40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
70003a44:	4b2b      	ldr	r3, [pc, #172]	@ (70003af4 <USBD_SetConfig+0x150>)
70003a46:	781b      	ldrb	r3, [r3, #0]
70003a48:	461a      	mov	r2, r3
70003a4a:	687b      	ldr	r3, [r7, #4]
70003a4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
70003a4e:	4b29      	ldr	r3, [pc, #164]	@ (70003af4 <USBD_SetConfig+0x150>)
70003a50:	781b      	ldrb	r3, [r3, #0]
70003a52:	4619      	mov	r1, r3
70003a54:	6878      	ldr	r0, [r7, #4]
70003a56:	f7fe fffc 	bl	70002a52 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
70003a5a:	6878      	ldr	r0, [r7, #4]
70003a5c:	f000 f989 	bl	70003d72 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
70003a60:	e042      	b.n	70003ae8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
70003a62:	4b24      	ldr	r3, [pc, #144]	@ (70003af4 <USBD_SetConfig+0x150>)
70003a64:	781b      	ldrb	r3, [r3, #0]
70003a66:	461a      	mov	r2, r3
70003a68:	687b      	ldr	r3, [r7, #4]
70003a6a:	685b      	ldr	r3, [r3, #4]
70003a6c:	429a      	cmp	r2, r3
70003a6e:	d02a      	beq.n	70003ac6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
70003a70:	687b      	ldr	r3, [r7, #4]
70003a72:	685b      	ldr	r3, [r3, #4]
70003a74:	b2db      	uxtb	r3, r3
70003a76:	4619      	mov	r1, r3
70003a78:	6878      	ldr	r0, [r7, #4]
70003a7a:	f7fe ffea 	bl	70002a52 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
70003a7e:	4b1d      	ldr	r3, [pc, #116]	@ (70003af4 <USBD_SetConfig+0x150>)
70003a80:	781b      	ldrb	r3, [r3, #0]
70003a82:	461a      	mov	r2, r3
70003a84:	687b      	ldr	r3, [r7, #4]
70003a86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
70003a88:	4b1a      	ldr	r3, [pc, #104]	@ (70003af4 <USBD_SetConfig+0x150>)
70003a8a:	781b      	ldrb	r3, [r3, #0]
70003a8c:	4619      	mov	r1, r3
70003a8e:	6878      	ldr	r0, [r7, #4]
70003a90:	f7fe ffc3 	bl	70002a1a <USBD_SetClassConfig>
70003a94:	4603      	mov	r3, r0
70003a96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
70003a98:	7bfb      	ldrb	r3, [r7, #15]
70003a9a:	2b00      	cmp	r3, #0
70003a9c:	d00f      	beq.n	70003abe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
70003a9e:	6839      	ldr	r1, [r7, #0]
70003aa0:	6878      	ldr	r0, [r7, #4]
70003aa2:	f000 f918 	bl	70003cd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
70003aa6:	687b      	ldr	r3, [r7, #4]
70003aa8:	685b      	ldr	r3, [r3, #4]
70003aaa:	b2db      	uxtb	r3, r3
70003aac:	4619      	mov	r1, r3
70003aae:	6878      	ldr	r0, [r7, #4]
70003ab0:	f7fe ffcf 	bl	70002a52 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
70003ab4:	687b      	ldr	r3, [r7, #4]
70003ab6:	2202      	movs	r2, #2
70003ab8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
70003abc:	e014      	b.n	70003ae8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
70003abe:	6878      	ldr	r0, [r7, #4]
70003ac0:	f000 f957 	bl	70003d72 <USBD_CtlSendStatus>
      break;
70003ac4:	e010      	b.n	70003ae8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
70003ac6:	6878      	ldr	r0, [r7, #4]
70003ac8:	f000 f953 	bl	70003d72 <USBD_CtlSendStatus>
      break;
70003acc:	e00c      	b.n	70003ae8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
70003ace:	6839      	ldr	r1, [r7, #0]
70003ad0:	6878      	ldr	r0, [r7, #4]
70003ad2:	f000 f900 	bl	70003cd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
70003ad6:	4b07      	ldr	r3, [pc, #28]	@ (70003af4 <USBD_SetConfig+0x150>)
70003ad8:	781b      	ldrb	r3, [r3, #0]
70003ada:	4619      	mov	r1, r3
70003adc:	6878      	ldr	r0, [r7, #4]
70003ade:	f7fe ffb8 	bl	70002a52 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
70003ae2:	2303      	movs	r3, #3
70003ae4:	73fb      	strb	r3, [r7, #15]
      break;
70003ae6:	bf00      	nop
  }

  return ret;
70003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
70003aea:	4618      	mov	r0, r3
70003aec:	3710      	adds	r7, #16
70003aee:	46bd      	mov	sp, r7
70003af0:	bd80      	pop	{r7, pc}
70003af2:	bf00      	nop
70003af4:	2400002c 	.word	0x2400002c

70003af8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003af8:	b580      	push	{r7, lr}
70003afa:	b082      	sub	sp, #8
70003afc:	af00      	add	r7, sp, #0
70003afe:	6078      	str	r0, [r7, #4]
70003b00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
70003b02:	683b      	ldr	r3, [r7, #0]
70003b04:	88db      	ldrh	r3, [r3, #6]
70003b06:	2b01      	cmp	r3, #1
70003b08:	d004      	beq.n	70003b14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
70003b0a:	6839      	ldr	r1, [r7, #0]
70003b0c:	6878      	ldr	r0, [r7, #4]
70003b0e:	f000 f8e2 	bl	70003cd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
70003b12:	e023      	b.n	70003b5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
70003b14:	687b      	ldr	r3, [r7, #4]
70003b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003b1a:	b2db      	uxtb	r3, r3
70003b1c:	2b02      	cmp	r3, #2
70003b1e:	dc02      	bgt.n	70003b26 <USBD_GetConfig+0x2e>
70003b20:	2b00      	cmp	r3, #0
70003b22:	dc03      	bgt.n	70003b2c <USBD_GetConfig+0x34>
70003b24:	e015      	b.n	70003b52 <USBD_GetConfig+0x5a>
70003b26:	2b03      	cmp	r3, #3
70003b28:	d00b      	beq.n	70003b42 <USBD_GetConfig+0x4a>
70003b2a:	e012      	b.n	70003b52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
70003b2c:	687b      	ldr	r3, [r7, #4]
70003b2e:	2200      	movs	r2, #0
70003b30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
70003b32:	687b      	ldr	r3, [r7, #4]
70003b34:	3308      	adds	r3, #8
70003b36:	2201      	movs	r2, #1
70003b38:	4619      	mov	r1, r3
70003b3a:	6878      	ldr	r0, [r7, #4]
70003b3c:	f000 f8dc 	bl	70003cf8 <USBD_CtlSendData>
        break;
70003b40:	e00c      	b.n	70003b5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
70003b42:	687b      	ldr	r3, [r7, #4]
70003b44:	3304      	adds	r3, #4
70003b46:	2201      	movs	r2, #1
70003b48:	4619      	mov	r1, r3
70003b4a:	6878      	ldr	r0, [r7, #4]
70003b4c:	f000 f8d4 	bl	70003cf8 <USBD_CtlSendData>
        break;
70003b50:	e004      	b.n	70003b5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
70003b52:	6839      	ldr	r1, [r7, #0]
70003b54:	6878      	ldr	r0, [r7, #4]
70003b56:	f000 f8be 	bl	70003cd6 <USBD_CtlError>
        break;
70003b5a:	bf00      	nop
}
70003b5c:	bf00      	nop
70003b5e:	3708      	adds	r7, #8
70003b60:	46bd      	mov	sp, r7
70003b62:	bd80      	pop	{r7, pc}

70003b64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003b64:	b580      	push	{r7, lr}
70003b66:	b082      	sub	sp, #8
70003b68:	af00      	add	r7, sp, #0
70003b6a:	6078      	str	r0, [r7, #4]
70003b6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
70003b6e:	687b      	ldr	r3, [r7, #4]
70003b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003b74:	b2db      	uxtb	r3, r3
70003b76:	3b01      	subs	r3, #1
70003b78:	2b02      	cmp	r3, #2
70003b7a:	d81e      	bhi.n	70003bba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
70003b7c:	683b      	ldr	r3, [r7, #0]
70003b7e:	88db      	ldrh	r3, [r3, #6]
70003b80:	2b02      	cmp	r3, #2
70003b82:	d004      	beq.n	70003b8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
70003b84:	6839      	ldr	r1, [r7, #0]
70003b86:	6878      	ldr	r0, [r7, #4]
70003b88:	f000 f8a5 	bl	70003cd6 <USBD_CtlError>
        break;
70003b8c:	e01a      	b.n	70003bc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
70003b8e:	687b      	ldr	r3, [r7, #4]
70003b90:	2201      	movs	r2, #1
70003b92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
70003b94:	687b      	ldr	r3, [r7, #4]
70003b96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
70003b9a:	2b00      	cmp	r3, #0
70003b9c:	d005      	beq.n	70003baa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
70003b9e:	687b      	ldr	r3, [r7, #4]
70003ba0:	68db      	ldr	r3, [r3, #12]
70003ba2:	f043 0202 	orr.w	r2, r3, #2
70003ba6:	687b      	ldr	r3, [r7, #4]
70003ba8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
70003baa:	687b      	ldr	r3, [r7, #4]
70003bac:	330c      	adds	r3, #12
70003bae:	2202      	movs	r2, #2
70003bb0:	4619      	mov	r1, r3
70003bb2:	6878      	ldr	r0, [r7, #4]
70003bb4:	f000 f8a0 	bl	70003cf8 <USBD_CtlSendData>
      break;
70003bb8:	e004      	b.n	70003bc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
70003bba:	6839      	ldr	r1, [r7, #0]
70003bbc:	6878      	ldr	r0, [r7, #4]
70003bbe:	f000 f88a 	bl	70003cd6 <USBD_CtlError>
      break;
70003bc2:	bf00      	nop
  }
}
70003bc4:	bf00      	nop
70003bc6:	3708      	adds	r7, #8
70003bc8:	46bd      	mov	sp, r7
70003bca:	bd80      	pop	{r7, pc}

70003bcc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003bcc:	b580      	push	{r7, lr}
70003bce:	b082      	sub	sp, #8
70003bd0:	af00      	add	r7, sp, #0
70003bd2:	6078      	str	r0, [r7, #4]
70003bd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
70003bd6:	683b      	ldr	r3, [r7, #0]
70003bd8:	885b      	ldrh	r3, [r3, #2]
70003bda:	2b01      	cmp	r3, #1
70003bdc:	d107      	bne.n	70003bee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
70003bde:	687b      	ldr	r3, [r7, #4]
70003be0:	2201      	movs	r2, #1
70003be2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
70003be6:	6878      	ldr	r0, [r7, #4]
70003be8:	f000 f8c3 	bl	70003d72 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
70003bec:	e013      	b.n	70003c16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
70003bee:	683b      	ldr	r3, [r7, #0]
70003bf0:	885b      	ldrh	r3, [r3, #2]
70003bf2:	2b02      	cmp	r3, #2
70003bf4:	d10b      	bne.n	70003c0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
70003bf6:	683b      	ldr	r3, [r7, #0]
70003bf8:	889b      	ldrh	r3, [r3, #4]
70003bfa:	0a1b      	lsrs	r3, r3, #8
70003bfc:	b29b      	uxth	r3, r3
70003bfe:	b2da      	uxtb	r2, r3
70003c00:	687b      	ldr	r3, [r7, #4]
70003c02:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
70003c06:	6878      	ldr	r0, [r7, #4]
70003c08:	f000 f8b3 	bl	70003d72 <USBD_CtlSendStatus>
}
70003c0c:	e003      	b.n	70003c16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
70003c0e:	6839      	ldr	r1, [r7, #0]
70003c10:	6878      	ldr	r0, [r7, #4]
70003c12:	f000 f860 	bl	70003cd6 <USBD_CtlError>
}
70003c16:	bf00      	nop
70003c18:	3708      	adds	r7, #8
70003c1a:	46bd      	mov	sp, r7
70003c1c:	bd80      	pop	{r7, pc}

70003c1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003c1e:	b580      	push	{r7, lr}
70003c20:	b082      	sub	sp, #8
70003c22:	af00      	add	r7, sp, #0
70003c24:	6078      	str	r0, [r7, #4]
70003c26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
70003c28:	687b      	ldr	r3, [r7, #4]
70003c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003c2e:	b2db      	uxtb	r3, r3
70003c30:	3b01      	subs	r3, #1
70003c32:	2b02      	cmp	r3, #2
70003c34:	d80b      	bhi.n	70003c4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
70003c36:	683b      	ldr	r3, [r7, #0]
70003c38:	885b      	ldrh	r3, [r3, #2]
70003c3a:	2b01      	cmp	r3, #1
70003c3c:	d10c      	bne.n	70003c58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
70003c3e:	687b      	ldr	r3, [r7, #4]
70003c40:	2200      	movs	r2, #0
70003c42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
70003c46:	6878      	ldr	r0, [r7, #4]
70003c48:	f000 f893 	bl	70003d72 <USBD_CtlSendStatus>
      }
      break;
70003c4c:	e004      	b.n	70003c58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
70003c4e:	6839      	ldr	r1, [r7, #0]
70003c50:	6878      	ldr	r0, [r7, #4]
70003c52:	f000 f840 	bl	70003cd6 <USBD_CtlError>
      break;
70003c56:	e000      	b.n	70003c5a <USBD_ClrFeature+0x3c>
      break;
70003c58:	bf00      	nop
  }
}
70003c5a:	bf00      	nop
70003c5c:	3708      	adds	r7, #8
70003c5e:	46bd      	mov	sp, r7
70003c60:	bd80      	pop	{r7, pc}

70003c62 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
70003c62:	b580      	push	{r7, lr}
70003c64:	b084      	sub	sp, #16
70003c66:	af00      	add	r7, sp, #0
70003c68:	6078      	str	r0, [r7, #4]
70003c6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
70003c6c:	683b      	ldr	r3, [r7, #0]
70003c6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
70003c70:	68fb      	ldr	r3, [r7, #12]
70003c72:	781a      	ldrb	r2, [r3, #0]
70003c74:	687b      	ldr	r3, [r7, #4]
70003c76:	701a      	strb	r2, [r3, #0]

  pbuff++;
70003c78:	68fb      	ldr	r3, [r7, #12]
70003c7a:	3301      	adds	r3, #1
70003c7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
70003c7e:	68fb      	ldr	r3, [r7, #12]
70003c80:	781a      	ldrb	r2, [r3, #0]
70003c82:	687b      	ldr	r3, [r7, #4]
70003c84:	705a      	strb	r2, [r3, #1]

  pbuff++;
70003c86:	68fb      	ldr	r3, [r7, #12]
70003c88:	3301      	adds	r3, #1
70003c8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
70003c8c:	68f8      	ldr	r0, [r7, #12]
70003c8e:	f7ff fa16 	bl	700030be <SWAPBYTE>
70003c92:	4603      	mov	r3, r0
70003c94:	461a      	mov	r2, r3
70003c96:	687b      	ldr	r3, [r7, #4]
70003c98:	805a      	strh	r2, [r3, #2]

  pbuff++;
70003c9a:	68fb      	ldr	r3, [r7, #12]
70003c9c:	3301      	adds	r3, #1
70003c9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
70003ca0:	68fb      	ldr	r3, [r7, #12]
70003ca2:	3301      	adds	r3, #1
70003ca4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
70003ca6:	68f8      	ldr	r0, [r7, #12]
70003ca8:	f7ff fa09 	bl	700030be <SWAPBYTE>
70003cac:	4603      	mov	r3, r0
70003cae:	461a      	mov	r2, r3
70003cb0:	687b      	ldr	r3, [r7, #4]
70003cb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
70003cb4:	68fb      	ldr	r3, [r7, #12]
70003cb6:	3301      	adds	r3, #1
70003cb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
70003cba:	68fb      	ldr	r3, [r7, #12]
70003cbc:	3301      	adds	r3, #1
70003cbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
70003cc0:	68f8      	ldr	r0, [r7, #12]
70003cc2:	f7ff f9fc 	bl	700030be <SWAPBYTE>
70003cc6:	4603      	mov	r3, r0
70003cc8:	461a      	mov	r2, r3
70003cca:	687b      	ldr	r3, [r7, #4]
70003ccc:	80da      	strh	r2, [r3, #6]
}
70003cce:	bf00      	nop
70003cd0:	3710      	adds	r7, #16
70003cd2:	46bd      	mov	sp, r7
70003cd4:	bd80      	pop	{r7, pc}

70003cd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003cd6:	b580      	push	{r7, lr}
70003cd8:	b082      	sub	sp, #8
70003cda:	af00      	add	r7, sp, #0
70003cdc:	6078      	str	r0, [r7, #4]
70003cde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
70003ce0:	2180      	movs	r1, #128	@ 0x80
70003ce2:	6878      	ldr	r0, [r7, #4]
70003ce4:	f000 f992 	bl	7000400c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
70003ce8:	2100      	movs	r1, #0
70003cea:	6878      	ldr	r0, [r7, #4]
70003cec:	f000 f98e 	bl	7000400c <USBD_LL_StallEP>
}
70003cf0:	bf00      	nop
70003cf2:	3708      	adds	r7, #8
70003cf4:	46bd      	mov	sp, r7
70003cf6:	bd80      	pop	{r7, pc}

70003cf8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
70003cf8:	b580      	push	{r7, lr}
70003cfa:	b084      	sub	sp, #16
70003cfc:	af00      	add	r7, sp, #0
70003cfe:	60f8      	str	r0, [r7, #12]
70003d00:	60b9      	str	r1, [r7, #8]
70003d02:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
70003d04:	68fb      	ldr	r3, [r7, #12]
70003d06:	2202      	movs	r2, #2
70003d08:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
70003d0c:	68fb      	ldr	r3, [r7, #12]
70003d0e:	687a      	ldr	r2, [r7, #4]
70003d10:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
70003d12:	68fb      	ldr	r3, [r7, #12]
70003d14:	687a      	ldr	r2, [r7, #4]
70003d16:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
70003d18:	687b      	ldr	r3, [r7, #4]
70003d1a:	68ba      	ldr	r2, [r7, #8]
70003d1c:	2100      	movs	r1, #0
70003d1e:	68f8      	ldr	r0, [r7, #12]
70003d20:	f000 f9fd 	bl	7000411e <USBD_LL_Transmit>

  return USBD_OK;
70003d24:	2300      	movs	r3, #0
}
70003d26:	4618      	mov	r0, r3
70003d28:	3710      	adds	r7, #16
70003d2a:	46bd      	mov	sp, r7
70003d2c:	bd80      	pop	{r7, pc}

70003d2e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
70003d2e:	b580      	push	{r7, lr}
70003d30:	b084      	sub	sp, #16
70003d32:	af00      	add	r7, sp, #0
70003d34:	60f8      	str	r0, [r7, #12]
70003d36:	60b9      	str	r1, [r7, #8]
70003d38:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
70003d3a:	687b      	ldr	r3, [r7, #4]
70003d3c:	68ba      	ldr	r2, [r7, #8]
70003d3e:	2100      	movs	r1, #0
70003d40:	68f8      	ldr	r0, [r7, #12]
70003d42:	f000 f9ec 	bl	7000411e <USBD_LL_Transmit>

  return USBD_OK;
70003d46:	2300      	movs	r3, #0
}
70003d48:	4618      	mov	r0, r3
70003d4a:	3710      	adds	r7, #16
70003d4c:	46bd      	mov	sp, r7
70003d4e:	bd80      	pop	{r7, pc}

70003d50 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
70003d50:	b580      	push	{r7, lr}
70003d52:	b084      	sub	sp, #16
70003d54:	af00      	add	r7, sp, #0
70003d56:	60f8      	str	r0, [r7, #12]
70003d58:	60b9      	str	r1, [r7, #8]
70003d5a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
70003d5c:	687b      	ldr	r3, [r7, #4]
70003d5e:	68ba      	ldr	r2, [r7, #8]
70003d60:	2100      	movs	r1, #0
70003d62:	68f8      	ldr	r0, [r7, #12]
70003d64:	f000 f9fc 	bl	70004160 <USBD_LL_PrepareReceive>

  return USBD_OK;
70003d68:	2300      	movs	r3, #0
}
70003d6a:	4618      	mov	r0, r3
70003d6c:	3710      	adds	r7, #16
70003d6e:	46bd      	mov	sp, r7
70003d70:	bd80      	pop	{r7, pc}

70003d72 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
70003d72:	b580      	push	{r7, lr}
70003d74:	b082      	sub	sp, #8
70003d76:	af00      	add	r7, sp, #0
70003d78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
70003d7a:	687b      	ldr	r3, [r7, #4]
70003d7c:	2204      	movs	r2, #4
70003d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
70003d82:	2300      	movs	r3, #0
70003d84:	2200      	movs	r2, #0
70003d86:	2100      	movs	r1, #0
70003d88:	6878      	ldr	r0, [r7, #4]
70003d8a:	f000 f9c8 	bl	7000411e <USBD_LL_Transmit>

  return USBD_OK;
70003d8e:	2300      	movs	r3, #0
}
70003d90:	4618      	mov	r0, r3
70003d92:	3708      	adds	r7, #8
70003d94:	46bd      	mov	sp, r7
70003d96:	bd80      	pop	{r7, pc}

70003d98 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
70003d98:	b580      	push	{r7, lr}
70003d9a:	b082      	sub	sp, #8
70003d9c:	af00      	add	r7, sp, #0
70003d9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
70003da0:	687b      	ldr	r3, [r7, #4]
70003da2:	2205      	movs	r2, #5
70003da4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70003da8:	2300      	movs	r3, #0
70003daa:	2200      	movs	r2, #0
70003dac:	2100      	movs	r1, #0
70003dae:	6878      	ldr	r0, [r7, #4]
70003db0:	f000 f9d6 	bl	70004160 <USBD_LL_PrepareReceive>

  return USBD_OK;
70003db4:	2300      	movs	r3, #0
}
70003db6:	4618      	mov	r0, r3
70003db8:	3708      	adds	r7, #8
70003dba:	46bd      	mov	sp, r7
70003dbc:	bd80      	pop	{r7, pc}

70003dbe <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003dbe:	b580      	push	{r7, lr}
70003dc0:	b082      	sub	sp, #8
70003dc2:	af00      	add	r7, sp, #0
70003dc4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
70003dc6:	687b      	ldr	r3, [r7, #4]
70003dc8:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
70003dcc:	687b      	ldr	r3, [r7, #4]
70003dce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70003dd2:	4619      	mov	r1, r3
70003dd4:	4610      	mov	r0, r2
70003dd6:	f7fe fe56 	bl	70002a86 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PostTreatment */

}
70003dda:	bf00      	nop
70003ddc:	3708      	adds	r7, #8
70003dde:	46bd      	mov	sp, r7
70003de0:	bd80      	pop	{r7, pc}

70003de2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003de2:	b580      	push	{r7, lr}
70003de4:	b082      	sub	sp, #8
70003de6:	af00      	add	r7, sp, #0
70003de8:	6078      	str	r0, [r7, #4]
70003dea:	460b      	mov	r3, r1
70003dec:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
70003dee:	687b      	ldr	r3, [r7, #4]
70003df0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
70003df4:	78fa      	ldrb	r2, [r7, #3]
70003df6:	6879      	ldr	r1, [r7, #4]
70003df8:	4613      	mov	r3, r2
70003dfa:	00db      	lsls	r3, r3, #3
70003dfc:	4413      	add	r3, r2
70003dfe:	009b      	lsls	r3, r3, #2
70003e00:	440b      	add	r3, r1
70003e02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
70003e06:	681a      	ldr	r2, [r3, #0]
70003e08:	78fb      	ldrb	r3, [r7, #3]
70003e0a:	4619      	mov	r1, r3
70003e0c:	f7fe fe90 	bl	70002b30 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
70003e10:	bf00      	nop
70003e12:	3708      	adds	r7, #8
70003e14:	46bd      	mov	sp, r7
70003e16:	bd80      	pop	{r7, pc}

70003e18 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003e18:	b580      	push	{r7, lr}
70003e1a:	b082      	sub	sp, #8
70003e1c:	af00      	add	r7, sp, #0
70003e1e:	6078      	str	r0, [r7, #4]
70003e20:	460b      	mov	r3, r1
70003e22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
70003e24:	687b      	ldr	r3, [r7, #4]
70003e26:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
70003e2a:	78fa      	ldrb	r2, [r7, #3]
70003e2c:	6879      	ldr	r1, [r7, #4]
70003e2e:	4613      	mov	r3, r2
70003e30:	00db      	lsls	r3, r3, #3
70003e32:	4413      	add	r3, r2
70003e34:	009b      	lsls	r3, r3, #2
70003e36:	440b      	add	r3, r1
70003e38:	3320      	adds	r3, #32
70003e3a:	681a      	ldr	r2, [r3, #0]
70003e3c:	78fb      	ldrb	r3, [r7, #3]
70003e3e:	4619      	mov	r1, r3
70003e40:	f7fe ff29 	bl	70002c96 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
70003e44:	bf00      	nop
70003e46:	3708      	adds	r7, #8
70003e48:	46bd      	mov	sp, r7
70003e4a:	bd80      	pop	{r7, pc}

70003e4c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003e4c:	b580      	push	{r7, lr}
70003e4e:	b082      	sub	sp, #8
70003e50:	af00      	add	r7, sp, #0
70003e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SofCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
70003e54:	687b      	ldr	r3, [r7, #4]
70003e56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003e5a:	4618      	mov	r0, r3
70003e5c:	f7ff f863 	bl	70002f26 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SofCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PostTreatment */
}
70003e60:	bf00      	nop
70003e62:	3708      	adds	r7, #8
70003e64:	46bd      	mov	sp, r7
70003e66:	bd80      	pop	{r7, pc}

70003e68 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003e68:	b580      	push	{r7, lr}
70003e6a:	b084      	sub	sp, #16
70003e6c:	af00      	add	r7, sp, #0
70003e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
70003e70:	2301      	movs	r3, #1
70003e72:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_HIGH)
70003e74:	687b      	ldr	r3, [r7, #4]
70003e76:	79db      	ldrb	r3, [r3, #7]
70003e78:	2b00      	cmp	r3, #0
70003e7a:	d102      	bne.n	70003e82 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
70003e7c:	2300      	movs	r3, #0
70003e7e:	73fb      	strb	r3, [r7, #15]
70003e80:	e008      	b.n	70003e94 <HAL_PCD_ResetCallback+0x2c>
  }
  else if (hpcd->Init.speed == PCD_SPEED_FULL)
70003e82:	687b      	ldr	r3, [r7, #4]
70003e84:	79db      	ldrb	r3, [r3, #7]
70003e86:	2b02      	cmp	r3, #2
70003e88:	d102      	bne.n	70003e90 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
70003e8a:	2301      	movs	r3, #1
70003e8c:	73fb      	strb	r3, [r7, #15]
70003e8e:	e001      	b.n	70003e94 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
70003e90:	f7fc fa34 	bl	700002fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
70003e94:	687b      	ldr	r3, [r7, #4]
70003e96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003e9a:	7bfa      	ldrb	r2, [r7, #15]
70003e9c:	4611      	mov	r1, r2
70003e9e:	4618      	mov	r0, r3
70003ea0:	f7fe fffd 	bl	70002e9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
70003ea4:	687b      	ldr	r3, [r7, #4]
70003ea6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003eaa:	4618      	mov	r0, r3
70003eac:	f7fe ffa5 	bl	70002dfa <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
70003eb0:	bf00      	nop
70003eb2:	3710      	adds	r7, #16
70003eb4:	46bd      	mov	sp, r7
70003eb6:	bd80      	pop	{r7, pc}

70003eb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003eb8:	b580      	push	{r7, lr}
70003eba:	b082      	sub	sp, #8
70003ebc:	af00      	add	r7, sp, #0
70003ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */

  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
70003ec0:	687b      	ldr	r3, [r7, #4]
70003ec2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003ec6:	4618      	mov	r0, r3
70003ec8:	f7fe fff9 	bl	70002ebe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
70003ecc:	687b      	ldr	r3, [r7, #4]
70003ece:	7adb      	ldrb	r3, [r3, #11]
70003ed0:	2b00      	cmp	r3, #0
70003ed2:	d007      	beq.n	70003ee4 <HAL_PCD_SuspendCallback+0x2c>
  {
	HAL_SuspendTick();
70003ed4:	f7fc fb00 	bl	700004d8 <HAL_SuspendTick>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
70003ed8:	4b04      	ldr	r3, [pc, #16]	@ (70003eec <HAL_PCD_SuspendCallback+0x34>)
70003eda:	691b      	ldr	r3, [r3, #16]
70003edc:	4a03      	ldr	r2, [pc, #12]	@ (70003eec <HAL_PCD_SuspendCallback+0x34>)
70003ede:	f043 0306 	orr.w	r3, r3, #6
70003ee2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
70003ee4:	bf00      	nop
70003ee6:	3708      	adds	r7, #8
70003ee8:	46bd      	mov	sp, r7
70003eea:	bd80      	pop	{r7, pc}
70003eec:	e000ed00 	.word	0xe000ed00

70003ef0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003ef0:	b580      	push	{r7, lr}
70003ef2:	b082      	sub	sp, #8
70003ef4:	af00      	add	r7, sp, #0
70003ef6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
70003ef8:	687b      	ldr	r3, [r7, #4]
70003efa:	7adb      	ldrb	r3, [r3, #11]
70003efc:	2b00      	cmp	r3, #0
70003efe:	d007      	beq.n	70003f10 <HAL_PCD_ResumeCallback+0x20>
  {
    HAL_ResumeTick();
70003f00:	f7fc fafa 	bl	700004f8 <HAL_ResumeTick>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
70003f04:	4b0d      	ldr	r3, [pc, #52]	@ (70003f3c <HAL_PCD_ResumeCallback+0x4c>)
70003f06:	691b      	ldr	r3, [r3, #16]
70003f08:	4a0c      	ldr	r2, [pc, #48]	@ (70003f3c <HAL_PCD_ResumeCallback+0x4c>)
70003f0a:	f023 0306 	bic.w	r3, r3, #6
70003f0e:	6113      	str	r3, [r2, #16]

  }
  /* USER CODE END 3 */
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
70003f10:	687b      	ldr	r3, [r7, #4]
70003f12:	681b      	ldr	r3, [r3, #0]
70003f14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
70003f18:	681b      	ldr	r3, [r3, #0]
70003f1a:	687a      	ldr	r2, [r7, #4]
70003f1c:	6812      	ldr	r2, [r2, #0]
70003f1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
70003f22:	f023 0301 	bic.w	r3, r3, #1
70003f26:	6013      	str	r3, [r2, #0]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
70003f28:	687b      	ldr	r3, [r7, #4]
70003f2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f2e:	4618      	mov	r0, r3
70003f30:	f7fe ffe1 	bl	70002ef6 <USBD_LL_Resume>

  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
70003f34:	bf00      	nop
70003f36:	3708      	adds	r7, #8
70003f38:	46bd      	mov	sp, r7
70003f3a:	bd80      	pop	{r7, pc}
70003f3c:	e000ed00 	.word	0xe000ed00

70003f40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003f40:	b580      	push	{r7, lr}
70003f42:	b082      	sub	sp, #8
70003f44:	af00      	add	r7, sp, #0
70003f46:	6078      	str	r0, [r7, #4]
70003f48:	460b      	mov	r3, r1
70003f4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
70003f4c:	687b      	ldr	r3, [r7, #4]
70003f4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f52:	78fa      	ldrb	r2, [r7, #3]
70003f54:	4611      	mov	r1, r2
70003f56:	4618      	mov	r0, r3
70003f58:	f7ff f837 	bl	70002fca <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

}
70003f5c:	bf00      	nop
70003f5e:	3708      	adds	r7, #8
70003f60:	46bd      	mov	sp, r7
70003f62:	bd80      	pop	{r7, pc}

70003f64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003f64:	b580      	push	{r7, lr}
70003f66:	b082      	sub	sp, #8
70003f68:	af00      	add	r7, sp, #0
70003f6a:	6078      	str	r0, [r7, #4]
70003f6c:	460b      	mov	r3, r1
70003f6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
70003f70:	687b      	ldr	r3, [r7, #4]
70003f72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f76:	78fa      	ldrb	r2, [r7, #3]
70003f78:	4611      	mov	r1, r2
70003f7a:	4618      	mov	r0, r3
70003f7c:	f7fe fff3 	bl	70002f66 <USBD_LL_IsoINIncomplete>

  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
70003f80:	bf00      	nop
70003f82:	3708      	adds	r7, #8
70003f84:	46bd      	mov	sp, r7
70003f86:	bd80      	pop	{r7, pc}

70003f88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003f88:	b580      	push	{r7, lr}
70003f8a:	b082      	sub	sp, #8
70003f8c:	af00      	add	r7, sp, #0
70003f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
70003f90:	687b      	ldr	r3, [r7, #4]
70003f92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f96:	4618      	mov	r0, r3
70003f98:	f7ff f849 	bl	7000302e <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
70003f9c:	bf00      	nop
70003f9e:	3708      	adds	r7, #8
70003fa0:	46bd      	mov	sp, r7
70003fa2:	bd80      	pop	{r7, pc}

70003fa4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003fa4:	b580      	push	{r7, lr}
70003fa6:	b082      	sub	sp, #8
70003fa8:	af00      	add	r7, sp, #0
70003faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
70003fac:	687b      	ldr	r3, [r7, #4]
70003fae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003fb2:	4618      	mov	r0, r3
70003fb4:	f7ff f846 	bl	70003044 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
70003fb8:	bf00      	nop
70003fba:	3708      	adds	r7, #8
70003fbc:	46bd      	mov	sp, r7
70003fbe:	bd80      	pop	{r7, pc}

70003fc0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
70003fc0:	b580      	push	{r7, lr}
70003fc2:	b084      	sub	sp, #16
70003fc4:	af00      	add	r7, sp, #0
70003fc6:	6078      	str	r0, [r7, #4]
70003fc8:	4608      	mov	r0, r1
70003fca:	4611      	mov	r1, r2
70003fcc:	461a      	mov	r2, r3
70003fce:	4603      	mov	r3, r0
70003fd0:	70fb      	strb	r3, [r7, #3]
70003fd2:	460b      	mov	r3, r1
70003fd4:	70bb      	strb	r3, [r7, #2]
70003fd6:	4613      	mov	r3, r2
70003fd8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
70003fda:	2300      	movs	r3, #0
70003fdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
70003fde:	2300      	movs	r3, #0
70003fe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
70003fe2:	687b      	ldr	r3, [r7, #4]
70003fe4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
70003fe8:	78bb      	ldrb	r3, [r7, #2]
70003fea:	883a      	ldrh	r2, [r7, #0]
70003fec:	78f9      	ldrb	r1, [r7, #3]
70003fee:	f7fd f868 	bl	700010c2 <HAL_PCD_EP_Open>
70003ff2:	4603      	mov	r3, r0
70003ff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70003ff6:	7bfb      	ldrb	r3, [r7, #15]
70003ff8:	4618      	mov	r0, r3
70003ffa:	f000 f8d3 	bl	700041a4 <USBD_Get_USB_Status>
70003ffe:	4603      	mov	r3, r0
70004000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70004002:	7bbb      	ldrb	r3, [r7, #14]
}
70004004:	4618      	mov	r0, r3
70004006:	3710      	adds	r7, #16
70004008:	46bd      	mov	sp, r7
7000400a:	bd80      	pop	{r7, pc}

7000400c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
7000400c:	b580      	push	{r7, lr}
7000400e:	b084      	sub	sp, #16
70004010:	af00      	add	r7, sp, #0
70004012:	6078      	str	r0, [r7, #4]
70004014:	460b      	mov	r3, r1
70004016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
70004018:	2300      	movs	r3, #0
7000401a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000401c:	2300      	movs	r3, #0
7000401e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
70004020:	687b      	ldr	r3, [r7, #4]
70004022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
70004026:	78fa      	ldrb	r2, [r7, #3]
70004028:	4611      	mov	r1, r2
7000402a:	4618      	mov	r0, r3
7000402c:	f7fd f928 	bl	70001280 <HAL_PCD_EP_SetStall>
70004030:	4603      	mov	r3, r0
70004032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70004034:	7bfb      	ldrb	r3, [r7, #15]
70004036:	4618      	mov	r0, r3
70004038:	f000 f8b4 	bl	700041a4 <USBD_Get_USB_Status>
7000403c:	4603      	mov	r3, r0
7000403e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70004040:	7bbb      	ldrb	r3, [r7, #14]
}
70004042:	4618      	mov	r0, r3
70004044:	3710      	adds	r7, #16
70004046:	46bd      	mov	sp, r7
70004048:	bd80      	pop	{r7, pc}

7000404a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
7000404a:	b580      	push	{r7, lr}
7000404c:	b084      	sub	sp, #16
7000404e:	af00      	add	r7, sp, #0
70004050:	6078      	str	r0, [r7, #4]
70004052:	460b      	mov	r3, r1
70004054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
70004056:	2300      	movs	r3, #0
70004058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000405a:	2300      	movs	r3, #0
7000405c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
7000405e:	687b      	ldr	r3, [r7, #4]
70004060:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
70004064:	78fa      	ldrb	r2, [r7, #3]
70004066:	4611      	mov	r1, r2
70004068:	4618      	mov	r0, r3
7000406a:	f7fd f96c 	bl	70001346 <HAL_PCD_EP_ClrStall>
7000406e:	4603      	mov	r3, r0
70004070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70004072:	7bfb      	ldrb	r3, [r7, #15]
70004074:	4618      	mov	r0, r3
70004076:	f000 f895 	bl	700041a4 <USBD_Get_USB_Status>
7000407a:	4603      	mov	r3, r0
7000407c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
7000407e:	7bbb      	ldrb	r3, [r7, #14]
}
70004080:	4618      	mov	r0, r3
70004082:	3710      	adds	r7, #16
70004084:	46bd      	mov	sp, r7
70004086:	bd80      	pop	{r7, pc}

70004088 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
70004088:	b480      	push	{r7}
7000408a:	b085      	sub	sp, #20
7000408c:	af00      	add	r7, sp, #0
7000408e:	6078      	str	r0, [r7, #4]
70004090:	460b      	mov	r3, r1
70004092:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
70004094:	687b      	ldr	r3, [r7, #4]
70004096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
7000409a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
7000409c:	f997 3003 	ldrsb.w	r3, [r7, #3]
700040a0:	2b00      	cmp	r3, #0
700040a2:	da0b      	bge.n	700040bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
700040a4:	78fb      	ldrb	r3, [r7, #3]
700040a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
700040aa:	68f9      	ldr	r1, [r7, #12]
700040ac:	4613      	mov	r3, r2
700040ae:	00db      	lsls	r3, r3, #3
700040b0:	4413      	add	r3, r2
700040b2:	009b      	lsls	r3, r3, #2
700040b4:	440b      	add	r3, r1
700040b6:	3316      	adds	r3, #22
700040b8:	781b      	ldrb	r3, [r3, #0]
700040ba:	e00b      	b.n	700040d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
700040bc:	78fb      	ldrb	r3, [r7, #3]
700040be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
700040c2:	68f9      	ldr	r1, [r7, #12]
700040c4:	4613      	mov	r3, r2
700040c6:	00db      	lsls	r3, r3, #3
700040c8:	4413      	add	r3, r2
700040ca:	009b      	lsls	r3, r3, #2
700040cc:	440b      	add	r3, r1
700040ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
700040d2:	781b      	ldrb	r3, [r3, #0]
  }
}
700040d4:	4618      	mov	r0, r3
700040d6:	3714      	adds	r7, #20
700040d8:	46bd      	mov	sp, r7
700040da:	f85d 7b04 	ldr.w	r7, [sp], #4
700040de:	4770      	bx	lr

700040e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
700040e0:	b580      	push	{r7, lr}
700040e2:	b084      	sub	sp, #16
700040e4:	af00      	add	r7, sp, #0
700040e6:	6078      	str	r0, [r7, #4]
700040e8:	460b      	mov	r3, r1
700040ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
700040ec:	2300      	movs	r3, #0
700040ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
700040f0:	2300      	movs	r3, #0
700040f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
700040f4:	687b      	ldr	r3, [r7, #4]
700040f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
700040fa:	78fa      	ldrb	r2, [r7, #3]
700040fc:	4611      	mov	r1, r2
700040fe:	4618      	mov	r0, r3
70004100:	f7fc ffbb 	bl	7000107a <HAL_PCD_SetAddress>
70004104:	4603      	mov	r3, r0
70004106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70004108:	7bfb      	ldrb	r3, [r7, #15]
7000410a:	4618      	mov	r0, r3
7000410c:	f000 f84a 	bl	700041a4 <USBD_Get_USB_Status>
70004110:	4603      	mov	r3, r0
70004112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70004114:	7bbb      	ldrb	r3, [r7, #14]
}
70004116:	4618      	mov	r0, r3
70004118:	3710      	adds	r7, #16
7000411a:	46bd      	mov	sp, r7
7000411c:	bd80      	pop	{r7, pc}

7000411e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
7000411e:	b580      	push	{r7, lr}
70004120:	b086      	sub	sp, #24
70004122:	af00      	add	r7, sp, #0
70004124:	60f8      	str	r0, [r7, #12]
70004126:	607a      	str	r2, [r7, #4]
70004128:	603b      	str	r3, [r7, #0]
7000412a:	460b      	mov	r3, r1
7000412c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
7000412e:	2300      	movs	r3, #0
70004130:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
70004132:	2300      	movs	r3, #0
70004134:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
70004136:	68fb      	ldr	r3, [r7, #12]
70004138:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
7000413c:	7af9      	ldrb	r1, [r7, #11]
7000413e:	683b      	ldr	r3, [r7, #0]
70004140:	687a      	ldr	r2, [r7, #4]
70004142:	f7fd f863 	bl	7000120c <HAL_PCD_EP_Transmit>
70004146:	4603      	mov	r3, r0
70004148:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000414a:	7dfb      	ldrb	r3, [r7, #23]
7000414c:	4618      	mov	r0, r3
7000414e:	f000 f829 	bl	700041a4 <USBD_Get_USB_Status>
70004152:	4603      	mov	r3, r0
70004154:	75bb      	strb	r3, [r7, #22]

  return usb_status;
70004156:	7dbb      	ldrb	r3, [r7, #22]
}
70004158:	4618      	mov	r0, r3
7000415a:	3718      	adds	r7, #24
7000415c:	46bd      	mov	sp, r7
7000415e:	bd80      	pop	{r7, pc}

70004160 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
70004160:	b580      	push	{r7, lr}
70004162:	b086      	sub	sp, #24
70004164:	af00      	add	r7, sp, #0
70004166:	60f8      	str	r0, [r7, #12]
70004168:	607a      	str	r2, [r7, #4]
7000416a:	603b      	str	r3, [r7, #0]
7000416c:	460b      	mov	r3, r1
7000416e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
70004170:	2300      	movs	r3, #0
70004172:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
70004174:	2300      	movs	r3, #0
70004176:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
70004178:	68fb      	ldr	r3, [r7, #12]
7000417a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
7000417e:	7af9      	ldrb	r1, [r7, #11]
70004180:	683b      	ldr	r3, [r7, #0]
70004182:	687a      	ldr	r2, [r7, #4]
70004184:	f7fd f807 	bl	70001196 <HAL_PCD_EP_Receive>
70004188:	4603      	mov	r3, r0
7000418a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000418c:	7dfb      	ldrb	r3, [r7, #23]
7000418e:	4618      	mov	r0, r3
70004190:	f000 f808 	bl	700041a4 <USBD_Get_USB_Status>
70004194:	4603      	mov	r3, r0
70004196:	75bb      	strb	r3, [r7, #22]

  return usb_status;
70004198:	7dbb      	ldrb	r3, [r7, #22]
}
7000419a:	4618      	mov	r0, r3
7000419c:	3718      	adds	r7, #24
7000419e:	46bd      	mov	sp, r7
700041a0:	bd80      	pop	{r7, pc}
	...

700041a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
700041a4:	b480      	push	{r7}
700041a6:	b085      	sub	sp, #20
700041a8:	af00      	add	r7, sp, #0
700041aa:	4603      	mov	r3, r0
700041ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
700041ae:	2300      	movs	r3, #0
700041b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
700041b2:	79fb      	ldrb	r3, [r7, #7]
700041b4:	2b03      	cmp	r3, #3
700041b6:	d817      	bhi.n	700041e8 <USBD_Get_USB_Status+0x44>
700041b8:	a201      	add	r2, pc, #4	@ (adr r2, 700041c0 <USBD_Get_USB_Status+0x1c>)
700041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700041be:	bf00      	nop
700041c0:	700041d1 	.word	0x700041d1
700041c4:	700041d7 	.word	0x700041d7
700041c8:	700041dd 	.word	0x700041dd
700041cc:	700041e3 	.word	0x700041e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
700041d0:	2300      	movs	r3, #0
700041d2:	73fb      	strb	r3, [r7, #15]
    break;
700041d4:	e00b      	b.n	700041ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
700041d6:	2303      	movs	r3, #3
700041d8:	73fb      	strb	r3, [r7, #15]
    break;
700041da:	e008      	b.n	700041ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
700041dc:	2301      	movs	r3, #1
700041de:	73fb      	strb	r3, [r7, #15]
    break;
700041e0:	e005      	b.n	700041ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
700041e2:	2303      	movs	r3, #3
700041e4:	73fb      	strb	r3, [r7, #15]
    break;
700041e6:	e002      	b.n	700041ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
700041e8:	2303      	movs	r3, #3
700041ea:	73fb      	strb	r3, [r7, #15]
    break;
700041ec:	bf00      	nop
  }
  return usb_status;
700041ee:	7bfb      	ldrb	r3, [r7, #15]
}
700041f0:	4618      	mov	r0, r3
700041f2:	3714      	adds	r7, #20
700041f4:	46bd      	mov	sp, r7
700041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
700041fa:	4770      	bx	lr

700041fc <__libc_init_array>:
700041fc:	b570      	push	{r4, r5, r6, lr}
700041fe:	4d0d      	ldr	r5, [pc, #52]	@ (70004234 <__libc_init_array+0x38>)
70004200:	4c0d      	ldr	r4, [pc, #52]	@ (70004238 <__libc_init_array+0x3c>)
70004202:	1b64      	subs	r4, r4, r5
70004204:	10a4      	asrs	r4, r4, #2
70004206:	2600      	movs	r6, #0
70004208:	42a6      	cmp	r6, r4
7000420a:	d109      	bne.n	70004220 <__libc_init_array+0x24>
7000420c:	4d0b      	ldr	r5, [pc, #44]	@ (7000423c <__libc_init_array+0x40>)
7000420e:	4c0c      	ldr	r4, [pc, #48]	@ (70004240 <__libc_init_array+0x44>)
70004210:	f000 f818 	bl	70004244 <_init>
70004214:	1b64      	subs	r4, r4, r5
70004216:	10a4      	asrs	r4, r4, #2
70004218:	2600      	movs	r6, #0
7000421a:	42a6      	cmp	r6, r4
7000421c:	d105      	bne.n	7000422a <__libc_init_array+0x2e>
7000421e:	bd70      	pop	{r4, r5, r6, pc}
70004220:	f855 3b04 	ldr.w	r3, [r5], #4
70004224:	4798      	blx	r3
70004226:	3601      	adds	r6, #1
70004228:	e7ee      	b.n	70004208 <__libc_init_array+0xc>
7000422a:	f855 3b04 	ldr.w	r3, [r5], #4
7000422e:	4798      	blx	r3
70004230:	3601      	adds	r6, #1
70004232:	e7f2      	b.n	7000421a <__libc_init_array+0x1e>
70004234:	70004264 	.word	0x70004264
70004238:	70004264 	.word	0x70004264
7000423c:	70004264 	.word	0x70004264
70004240:	70004268 	.word	0x70004268

70004244 <_init>:
70004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70004246:	bf00      	nop
70004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
7000424a:	bc08      	pop	{r3}
7000424c:	469e      	mov	lr, r3
7000424e:	4770      	bx	lr

70004250 <_fini>:
70004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70004252:	bf00      	nop
70004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
70004256:	bc08      	pop	{r3}
70004258:	469e      	mov	lr, r3
7000425a:	4770      	bx	lr
