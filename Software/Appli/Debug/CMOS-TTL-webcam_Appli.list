
CMOS-TTL-webcam_Appli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002b0  70000000  70000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  700002b0  700002b0  000012b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  7000431c  7000431c  0000531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  70004324  70004324  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  70004324  70004324  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  70004324  70004324  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  70004324  70004324  00005324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  70004328  70004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  24000000  7000432c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2400000c  70004338  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00001000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da8f  00000000  00000000  0000603a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d6  00000000  00000000  00013ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  00015ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008db  00000000  00000000  00016780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030f31  00000000  00000000  0001705b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df46  00000000  00000000  00047f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00130ec3  00000000  00000000  00055ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186d95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  00186dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00189eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

700002b0 <__do_global_dtors_aux>:
700002b0:	b510      	push	{r4, lr}
700002b2:	4c05      	ldr	r4, [pc, #20]	@ (700002c8 <__do_global_dtors_aux+0x18>)
700002b4:	7823      	ldrb	r3, [r4, #0]
700002b6:	b933      	cbnz	r3, 700002c6 <__do_global_dtors_aux+0x16>
700002b8:	4b04      	ldr	r3, [pc, #16]	@ (700002cc <__do_global_dtors_aux+0x1c>)
700002ba:	b113      	cbz	r3, 700002c2 <__do_global_dtors_aux+0x12>
700002bc:	4804      	ldr	r0, [pc, #16]	@ (700002d0 <__do_global_dtors_aux+0x20>)
700002be:	f3af 8000 	nop.w
700002c2:	2301      	movs	r3, #1
700002c4:	7023      	strb	r3, [r4, #0]
700002c6:	bd10      	pop	{r4, pc}
700002c8:	2400000c 	.word	0x2400000c
700002cc:	00000000 	.word	0x00000000
700002d0:	70004304 	.word	0x70004304

700002d4 <frame_dummy>:
700002d4:	b508      	push	{r3, lr}
700002d6:	4b03      	ldr	r3, [pc, #12]	@ (700002e4 <frame_dummy+0x10>)
700002d8:	b11b      	cbz	r3, 700002e2 <frame_dummy+0xe>
700002da:	4903      	ldr	r1, [pc, #12]	@ (700002e8 <frame_dummy+0x14>)
700002dc:	4803      	ldr	r0, [pc, #12]	@ (700002ec <frame_dummy+0x18>)
700002de:	f3af 8000 	nop.w
700002e2:	bd08      	pop	{r3, pc}
700002e4:	00000000 	.word	0x00000000
700002e8:	24000010 	.word	0x24000010
700002ec:	70004304 	.word	0x70004304

700002f0 <main>:
void DMA_Init(void);
void USB_Init(void);
void Error_Handler(void);

int main(void)
{
700002f0:	b580      	push	{r7, lr}
700002f2:	af00      	add	r7, sp, #0
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
700002f4:	f000 f8b7 	bl	70000466 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
700002f8:	f000 f80c 	bl	70000314 <SystemClock_Config>

    /* Initialize all configured peripherals */
    GPIO_Init();
700002fc:	f000 f811 	bl	70000322 <GPIO_Init>
    DMA_Init();
70000300:	f000 f816 	bl	70000330 <DMA_Init>
    DCMI_Init();
70000304:	f000 f81b 	bl	7000033e <DCMI_Init>
    USB_Init();
70000308:	f000 f820 	bl	7000034c <USB_Init>
    /* Start DCMI capture in continuous mode with DMA */

    while (1)
    {
        /* Main loop - USB and DMA handle frame transfers */
        HAL_Delay(10);
7000030c:	200a      	movs	r0, #10
7000030e:	f000 f91f 	bl	70000550 <HAL_Delay>
70000312:	e7fb      	b.n	7000030c <main+0x1c>

70000314 <SystemClock_Config>:
    }
}

void SystemClock_Config(void)
{
70000314:	b480      	push	{r7}
70000316:	af00      	add	r7, sp, #0

}
70000318:	bf00      	nop
7000031a:	46bd      	mov	sp, r7
7000031c:	f85d 7b04 	ldr.w	r7, [sp], #4
70000320:	4770      	bx	lr

70000322 <GPIO_Init>:

void GPIO_Init(void)
{
70000322:	b480      	push	{r7}
70000324:	af00      	add	r7, sp, #0

}
70000326:	bf00      	nop
70000328:	46bd      	mov	sp, r7
7000032a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000032e:	4770      	bx	lr

70000330 <DMA_Init>:

void DMA_Init(void)
{
70000330:	b480      	push	{r7}
70000332:	af00      	add	r7, sp, #0

}
70000334:	bf00      	nop
70000336:	46bd      	mov	sp, r7
70000338:	f85d 7b04 	ldr.w	r7, [sp], #4
7000033c:	4770      	bx	lr

7000033e <DCMI_Init>:

void DCMI_Init(void)
{
7000033e:	b480      	push	{r7}
70000340:	af00      	add	r7, sp, #0

}
70000342:	bf00      	nop
70000344:	46bd      	mov	sp, r7
70000346:	f85d 7b04 	ldr.w	r7, [sp], #4
7000034a:	4770      	bx	lr

7000034c <USB_Init>:

void USB_Init(void)
{
7000034c:	b480      	push	{r7}
7000034e:	af00      	add	r7, sp, #0

}
70000350:	bf00      	nop
70000352:	46bd      	mov	sp, r7
70000354:	f85d 7b04 	ldr.w	r7, [sp], #4
70000358:	4770      	bx	lr

7000035a <Error_Handler>:

void Error_Handler(void)
{
7000035a:	b480      	push	{r7}
7000035c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
7000035e:	b672      	cpsid	i
}
70000360:	bf00      	nop
    __disable_irq();
    while (1)
70000362:	bf00      	nop
70000364:	e7fd      	b.n	70000362 <Error_Handler+0x8>

70000366 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
70000366:	b480      	push	{r7}
70000368:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
7000036a:	bf00      	nop
7000036c:	46bd      	mov	sp, r7
7000036e:	f85d 7b04 	ldr.w	r7, [sp], #4
70000372:	4770      	bx	lr

70000374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
70000374:	b480      	push	{r7}
70000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
70000378:	bf00      	nop
7000037a:	e7fd      	b.n	70000378 <NMI_Handler+0x4>

7000037c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
7000037c:	b480      	push	{r7}
7000037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
70000380:	bf00      	nop
70000382:	e7fd      	b.n	70000380 <HardFault_Handler+0x4>

70000384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
70000384:	b480      	push	{r7}
70000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
70000388:	bf00      	nop
7000038a:	e7fd      	b.n	70000388 <MemManage_Handler+0x4>

7000038c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
7000038c:	b480      	push	{r7}
7000038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
70000390:	bf00      	nop
70000392:	e7fd      	b.n	70000390 <BusFault_Handler+0x4>

70000394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
70000394:	b480      	push	{r7}
70000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
70000398:	bf00      	nop
7000039a:	e7fd      	b.n	70000398 <UsageFault_Handler+0x4>

7000039c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
7000039c:	b480      	push	{r7}
7000039e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
700003a0:	bf00      	nop
700003a2:	46bd      	mov	sp, r7
700003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
700003a8:	4770      	bx	lr

700003aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
700003aa:	b480      	push	{r7}
700003ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
700003ae:	bf00      	nop
700003b0:	46bd      	mov	sp, r7
700003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
700003b6:	4770      	bx	lr

700003b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
700003b8:	b480      	push	{r7}
700003ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
700003bc:	bf00      	nop
700003be:	46bd      	mov	sp, r7
700003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
700003c4:	4770      	bx	lr

700003c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
700003c6:	b580      	push	{r7, lr}
700003c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
700003ca:	f000 f8a1 	bl	70000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
700003ce:	bf00      	nop
700003d0:	bd80      	pop	{r7, pc}
	...

700003d4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS interrupt.
  */
void OTG_HS_IRQHandler(void)
{
700003d4:	b580      	push	{r7, lr}
700003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
700003d8:	4802      	ldr	r0, [pc, #8]	@ (700003e4 <OTG_HS_IRQHandler+0x10>)
700003da:	f000 f9e0 	bl	7000079e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
700003de:	bf00      	nop
700003e0:	bd80      	pop	{r7, pc}
700003e2:	bf00      	nop
700003e4:	24000030 	.word	0x24000030

700003e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
700003e8:	b480      	push	{r7}
700003ea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = INTVECT_START;
700003ec:	4b07      	ldr	r3, [pc, #28]	@ (7000040c <SystemInit+0x24>)
700003ee:	4a08      	ldr	r2, [pc, #32]	@ (70000410 <SystemInit+0x28>)
700003f0:	609a      	str	r2, [r3, #8]

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
700003f2:	4b06      	ldr	r3, [pc, #24]	@ (7000040c <SystemInit+0x24>)
700003f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
700003f8:	4a04      	ldr	r2, [pc, #16]	@ (7000040c <SystemInit+0x24>)
700003fa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
700003fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
70000402:	bf00      	nop
70000404:	46bd      	mov	sp, r7
70000406:	f85d 7b04 	ldr.w	r7, [sp], #4
7000040a:	4770      	bx	lr
7000040c:	e000ed00 	.word	0xe000ed00
70000410:	70000000 	.word	0x70000000

70000414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
70000414:	480d      	ldr	r0, [pc, #52]	@ (7000044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
70000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
70000418:	f7ff ffe6 	bl	700003e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
7000041c:	480c      	ldr	r0, [pc, #48]	@ (70000450 <LoopForever+0x6>)
  ldr r1, =_edata
7000041e:	490d      	ldr	r1, [pc, #52]	@ (70000454 <LoopForever+0xa>)
  ldr r2, =_sidata
70000420:	4a0d      	ldr	r2, [pc, #52]	@ (70000458 <LoopForever+0xe>)
  movs r3, #0
70000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
70000424:	e002      	b.n	7000042c <LoopCopyDataInit>

70000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
70000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
70000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
7000042a:	3304      	adds	r3, #4

7000042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
7000042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
7000042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
70000430:	d3f9      	bcc.n	70000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
70000432:	4a0a      	ldr	r2, [pc, #40]	@ (7000045c <LoopForever+0x12>)
  ldr r4, =_ebss
70000434:	4c0a      	ldr	r4, [pc, #40]	@ (70000460 <LoopForever+0x16>)
  movs r3, #0
70000436:	2300      	movs	r3, #0
  b LoopFillZerobss
70000438:	e001      	b.n	7000043e <LoopFillZerobss>

7000043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
7000043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
7000043c:	3204      	adds	r2, #4

7000043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
7000043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
70000440:	d3fb      	bcc.n	7000043a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
70000442:	f003 ff3b 	bl	700042bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
70000446:	f7ff ff53 	bl	700002f0 <main>

7000044a <LoopForever>:

LoopForever:
  b LoopForever
7000044a:	e7fe      	b.n	7000044a <LoopForever>
  ldr   r0, =_estack
7000044c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
70000450:	24000000 	.word	0x24000000
  ldr r1, =_edata
70000454:	2400000c 	.word	0x2400000c
  ldr r2, =_sidata
70000458:	7000432c 	.word	0x7000432c
  ldr r2, =_sbss
7000045c:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
70000460:	24000514 	.word	0x24000514

70000464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
70000464:	e7fe      	b.n	70000464 <ADC1_2_IRQHandler>

70000466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
70000466:	b580      	push	{r7, lr}
70000468:	b082      	sub	sp, #8
7000046a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
7000046c:	2300      	movs	r3, #0
7000046e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
70000470:	2003      	movs	r0, #3
70000472:	f000 f963 	bl	7000073c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
70000476:	200f      	movs	r0, #15
70000478:	f000 f80e 	bl	70000498 <HAL_InitTick>
7000047c:	4603      	mov	r3, r0
7000047e:	2b00      	cmp	r3, #0
70000480:	d002      	beq.n	70000488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
70000482:	2301      	movs	r3, #1
70000484:	71fb      	strb	r3, [r7, #7]
70000486:	e001      	b.n	7000048c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
70000488:	f7ff ff6d 	bl	70000366 <HAL_MspInit>
  }

  /* Return function status */
  return status;
7000048c:	79fb      	ldrb	r3, [r7, #7]
}
7000048e:	4618      	mov	r0, r3
70000490:	3708      	adds	r7, #8
70000492:	46bd      	mov	sp, r7
70000494:	bd80      	pop	{r7, pc}
	...

70000498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
70000498:	b580      	push	{r7, lr}
7000049a:	b084      	sub	sp, #16
7000049c:	af00      	add	r7, sp, #0
7000049e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
700004a0:	2300      	movs	r3, #0
700004a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
700004a4:	4b17      	ldr	r3, [pc, #92]	@ (70000504 <HAL_InitTick+0x6c>)
700004a6:	781b      	ldrb	r3, [r3, #0]
700004a8:	2b00      	cmp	r3, #0
700004aa:	d023      	beq.n	700004f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
700004ac:	4b16      	ldr	r3, [pc, #88]	@ (70000508 <HAL_InitTick+0x70>)
700004ae:	681a      	ldr	r2, [r3, #0]
700004b0:	4b14      	ldr	r3, [pc, #80]	@ (70000504 <HAL_InitTick+0x6c>)
700004b2:	781b      	ldrb	r3, [r3, #0]
700004b4:	4619      	mov	r1, r3
700004b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
700004ba:	fbb3 f3f1 	udiv	r3, r3, r1
700004be:	fbb2 f3f3 	udiv	r3, r2, r3
700004c2:	4618      	mov	r0, r3
700004c4:	f000 f95f 	bl	70000786 <HAL_SYSTICK_Config>
700004c8:	4603      	mov	r3, r0
700004ca:	2b00      	cmp	r3, #0
700004cc:	d10f      	bne.n	700004ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
700004ce:	687b      	ldr	r3, [r7, #4]
700004d0:	2b0f      	cmp	r3, #15
700004d2:	d809      	bhi.n	700004e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
700004d4:	2200      	movs	r2, #0
700004d6:	6879      	ldr	r1, [r7, #4]
700004d8:	f04f 30ff 	mov.w	r0, #4294967295
700004dc:	f000 f939 	bl	70000752 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
700004e0:	4a0a      	ldr	r2, [pc, #40]	@ (7000050c <HAL_InitTick+0x74>)
700004e2:	687b      	ldr	r3, [r7, #4]
700004e4:	6013      	str	r3, [r2, #0]
700004e6:	e007      	b.n	700004f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
700004e8:	2301      	movs	r3, #1
700004ea:	73fb      	strb	r3, [r7, #15]
700004ec:	e004      	b.n	700004f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
700004ee:	2301      	movs	r3, #1
700004f0:	73fb      	strb	r3, [r7, #15]
700004f2:	e001      	b.n	700004f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
700004f4:	2301      	movs	r3, #1
700004f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
700004f8:	7bfb      	ldrb	r3, [r7, #15]
}
700004fa:	4618      	mov	r0, r3
700004fc:	3710      	adds	r7, #16
700004fe:	46bd      	mov	sp, r7
70000500:	bd80      	pop	{r7, pc}
70000502:	bf00      	nop
70000504:	24000008 	.word	0x24000008
70000508:	24000000 	.word	0x24000000
7000050c:	24000004 	.word	0x24000004

70000510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
70000510:	b480      	push	{r7}
70000512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
70000514:	4b06      	ldr	r3, [pc, #24]	@ (70000530 <HAL_IncTick+0x20>)
70000516:	781b      	ldrb	r3, [r3, #0]
70000518:	461a      	mov	r2, r3
7000051a:	4b06      	ldr	r3, [pc, #24]	@ (70000534 <HAL_IncTick+0x24>)
7000051c:	681b      	ldr	r3, [r3, #0]
7000051e:	4413      	add	r3, r2
70000520:	4a04      	ldr	r2, [pc, #16]	@ (70000534 <HAL_IncTick+0x24>)
70000522:	6013      	str	r3, [r2, #0]
}
70000524:	bf00      	nop
70000526:	46bd      	mov	sp, r7
70000528:	f85d 7b04 	ldr.w	r7, [sp], #4
7000052c:	4770      	bx	lr
7000052e:	bf00      	nop
70000530:	24000008 	.word	0x24000008
70000534:	24000028 	.word	0x24000028

70000538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
70000538:	b480      	push	{r7}
7000053a:	af00      	add	r7, sp, #0
  return uwTick;
7000053c:	4b03      	ldr	r3, [pc, #12]	@ (7000054c <HAL_GetTick+0x14>)
7000053e:	681b      	ldr	r3, [r3, #0]
}
70000540:	4618      	mov	r0, r3
70000542:	46bd      	mov	sp, r7
70000544:	f85d 7b04 	ldr.w	r7, [sp], #4
70000548:	4770      	bx	lr
7000054a:	bf00      	nop
7000054c:	24000028 	.word	0x24000028

70000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
70000550:	b580      	push	{r7, lr}
70000552:	b084      	sub	sp, #16
70000554:	af00      	add	r7, sp, #0
70000556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
70000558:	f7ff ffee 	bl	70000538 <HAL_GetTick>
7000055c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
7000055e:	687b      	ldr	r3, [r7, #4]
70000560:	60fb      	str	r3, [r7, #12]

  /* Add a period to ensure minimum wait */
  if (wait < HAL_MAX_DELAY)
70000562:	68fb      	ldr	r3, [r7, #12]
70000564:	f1b3 3fff 	cmp.w	r3, #4294967295
70000568:	d005      	beq.n	70000576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
7000056a:	4b0a      	ldr	r3, [pc, #40]	@ (70000594 <HAL_Delay+0x44>)
7000056c:	781b      	ldrb	r3, [r3, #0]
7000056e:	461a      	mov	r2, r3
70000570:	68fb      	ldr	r3, [r7, #12]
70000572:	4413      	add	r3, r2
70000574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
70000576:	bf00      	nop
70000578:	f7ff ffde 	bl	70000538 <HAL_GetTick>
7000057c:	4602      	mov	r2, r0
7000057e:	68bb      	ldr	r3, [r7, #8]
70000580:	1ad3      	subs	r3, r2, r3
70000582:	68fa      	ldr	r2, [r7, #12]
70000584:	429a      	cmp	r2, r3
70000586:	d8f7      	bhi.n	70000578 <HAL_Delay+0x28>
  {
  }
}
70000588:	bf00      	nop
7000058a:	bf00      	nop
7000058c:	3710      	adds	r7, #16
7000058e:	46bd      	mov	sp, r7
70000590:	bd80      	pop	{r7, pc}
70000592:	bf00      	nop
70000594:	24000008 	.word	0x24000008

70000598 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
70000598:	b480      	push	{r7}
7000059a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
7000059c:	4b05      	ldr	r3, [pc, #20]	@ (700005b4 <HAL_SuspendTick+0x1c>)
7000059e:	681b      	ldr	r3, [r3, #0]
700005a0:	4a04      	ldr	r2, [pc, #16]	@ (700005b4 <HAL_SuspendTick+0x1c>)
700005a2:	f023 0302 	bic.w	r3, r3, #2
700005a6:	6013      	str	r3, [r2, #0]
}
700005a8:	bf00      	nop
700005aa:	46bd      	mov	sp, r7
700005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
700005b0:	4770      	bx	lr
700005b2:	bf00      	nop
700005b4:	e000e010 	.word	0xe000e010

700005b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
700005b8:	b480      	push	{r7}
700005ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
700005bc:	4b05      	ldr	r3, [pc, #20]	@ (700005d4 <HAL_ResumeTick+0x1c>)
700005be:	681b      	ldr	r3, [r3, #0]
700005c0:	4a04      	ldr	r2, [pc, #16]	@ (700005d4 <HAL_ResumeTick+0x1c>)
700005c2:	f043 0302 	orr.w	r3, r3, #2
700005c6:	6013      	str	r3, [r2, #0]
}
700005c8:	bf00      	nop
700005ca:	46bd      	mov	sp, r7
700005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
700005d0:	4770      	bx	lr
700005d2:	bf00      	nop
700005d4:	e000e010 	.word	0xe000e010

700005d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
700005d8:	b480      	push	{r7}
700005da:	b085      	sub	sp, #20
700005dc:	af00      	add	r7, sp, #0
700005de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
700005e0:	687b      	ldr	r3, [r7, #4]
700005e2:	f003 0307 	and.w	r3, r3, #7
700005e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
700005e8:	4b0b      	ldr	r3, [pc, #44]	@ (70000618 <__NVIC_SetPriorityGrouping+0x40>)
700005ea:	68db      	ldr	r3, [r3, #12]
700005ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
700005ee:	68ba      	ldr	r2, [r7, #8]
700005f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
700005f4:	4013      	ands	r3, r2
700005f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
700005f8:	68fb      	ldr	r3, [r7, #12]
700005fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
700005fc:	68bb      	ldr	r3, [r7, #8]
700005fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
70000600:	4b06      	ldr	r3, [pc, #24]	@ (7000061c <__NVIC_SetPriorityGrouping+0x44>)
70000602:	4313      	orrs	r3, r2
70000604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
70000606:	4a04      	ldr	r2, [pc, #16]	@ (70000618 <__NVIC_SetPriorityGrouping+0x40>)
70000608:	68bb      	ldr	r3, [r7, #8]
7000060a:	60d3      	str	r3, [r2, #12]
}
7000060c:	bf00      	nop
7000060e:	3714      	adds	r7, #20
70000610:	46bd      	mov	sp, r7
70000612:	f85d 7b04 	ldr.w	r7, [sp], #4
70000616:	4770      	bx	lr
70000618:	e000ed00 	.word	0xe000ed00
7000061c:	05fa0000 	.word	0x05fa0000

70000620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
70000620:	b480      	push	{r7}
70000622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
70000624:	4b04      	ldr	r3, [pc, #16]	@ (70000638 <__NVIC_GetPriorityGrouping+0x18>)
70000626:	68db      	ldr	r3, [r3, #12]
70000628:	0a1b      	lsrs	r3, r3, #8
7000062a:	f003 0307 	and.w	r3, r3, #7
}
7000062e:	4618      	mov	r0, r3
70000630:	46bd      	mov	sp, r7
70000632:	f85d 7b04 	ldr.w	r7, [sp], #4
70000636:	4770      	bx	lr
70000638:	e000ed00 	.word	0xe000ed00

7000063c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
7000063c:	b480      	push	{r7}
7000063e:	b083      	sub	sp, #12
70000640:	af00      	add	r7, sp, #0
70000642:	4603      	mov	r3, r0
70000644:	6039      	str	r1, [r7, #0]
70000646:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
70000648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000064c:	2b00      	cmp	r3, #0
7000064e:	db0a      	blt.n	70000666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70000650:	683b      	ldr	r3, [r7, #0]
70000652:	b2da      	uxtb	r2, r3
70000654:	490c      	ldr	r1, [pc, #48]	@ (70000688 <__NVIC_SetPriority+0x4c>)
70000656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
7000065a:	0112      	lsls	r2, r2, #4
7000065c:	b2d2      	uxtb	r2, r2
7000065e:	440b      	add	r3, r1
70000660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
70000664:	e00a      	b.n	7000067c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
70000666:	683b      	ldr	r3, [r7, #0]
70000668:	b2da      	uxtb	r2, r3
7000066a:	4908      	ldr	r1, [pc, #32]	@ (7000068c <__NVIC_SetPriority+0x50>)
7000066c:	88fb      	ldrh	r3, [r7, #6]
7000066e:	f003 030f 	and.w	r3, r3, #15
70000672:	3b04      	subs	r3, #4
70000674:	0112      	lsls	r2, r2, #4
70000676:	b2d2      	uxtb	r2, r2
70000678:	440b      	add	r3, r1
7000067a:	761a      	strb	r2, [r3, #24]
}
7000067c:	bf00      	nop
7000067e:	370c      	adds	r7, #12
70000680:	46bd      	mov	sp, r7
70000682:	f85d 7b04 	ldr.w	r7, [sp], #4
70000686:	4770      	bx	lr
70000688:	e000e100 	.word	0xe000e100
7000068c:	e000ed00 	.word	0xe000ed00

70000690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
70000690:	b480      	push	{r7}
70000692:	b089      	sub	sp, #36	@ 0x24
70000694:	af00      	add	r7, sp, #0
70000696:	60f8      	str	r0, [r7, #12]
70000698:	60b9      	str	r1, [r7, #8]
7000069a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
7000069c:	68fb      	ldr	r3, [r7, #12]
7000069e:	f003 0307 	and.w	r3, r3, #7
700006a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
700006a4:	69fb      	ldr	r3, [r7, #28]
700006a6:	f1c3 0307 	rsb	r3, r3, #7
700006aa:	2b04      	cmp	r3, #4
700006ac:	bf28      	it	cs
700006ae:	2304      	movcs	r3, #4
700006b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
700006b2:	69fb      	ldr	r3, [r7, #28]
700006b4:	3304      	adds	r3, #4
700006b6:	2b06      	cmp	r3, #6
700006b8:	d902      	bls.n	700006c0 <NVIC_EncodePriority+0x30>
700006ba:	69fb      	ldr	r3, [r7, #28]
700006bc:	3b03      	subs	r3, #3
700006be:	e000      	b.n	700006c2 <NVIC_EncodePriority+0x32>
700006c0:	2300      	movs	r3, #0
700006c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700006c4:	f04f 32ff 	mov.w	r2, #4294967295
700006c8:	69bb      	ldr	r3, [r7, #24]
700006ca:	fa02 f303 	lsl.w	r3, r2, r3
700006ce:	43da      	mvns	r2, r3
700006d0:	68bb      	ldr	r3, [r7, #8]
700006d2:	401a      	ands	r2, r3
700006d4:	697b      	ldr	r3, [r7, #20]
700006d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
700006d8:	f04f 31ff 	mov.w	r1, #4294967295
700006dc:	697b      	ldr	r3, [r7, #20]
700006de:	fa01 f303 	lsl.w	r3, r1, r3
700006e2:	43d9      	mvns	r1, r3
700006e4:	687b      	ldr	r3, [r7, #4]
700006e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
700006e8:	4313      	orrs	r3, r2
         );
}
700006ea:	4618      	mov	r0, r3
700006ec:	3724      	adds	r7, #36	@ 0x24
700006ee:	46bd      	mov	sp, r7
700006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
700006f4:	4770      	bx	lr
	...

700006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
700006f8:	b580      	push	{r7, lr}
700006fa:	b082      	sub	sp, #8
700006fc:	af00      	add	r7, sp, #0
700006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
70000700:	687b      	ldr	r3, [r7, #4]
70000702:	3b01      	subs	r3, #1
70000704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
70000708:	d301      	bcc.n	7000070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
7000070a:	2301      	movs	r3, #1
7000070c:	e00f      	b.n	7000072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
7000070e:	4a0a      	ldr	r2, [pc, #40]	@ (70000738 <SysTick_Config+0x40>)
70000710:	687b      	ldr	r3, [r7, #4]
70000712:	3b01      	subs	r3, #1
70000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
70000716:	210f      	movs	r1, #15
70000718:	f04f 30ff 	mov.w	r0, #4294967295
7000071c:	f7ff ff8e 	bl	7000063c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
70000720:	4b05      	ldr	r3, [pc, #20]	@ (70000738 <SysTick_Config+0x40>)
70000722:	2200      	movs	r2, #0
70000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
70000726:	4b04      	ldr	r3, [pc, #16]	@ (70000738 <SysTick_Config+0x40>)
70000728:	2207      	movs	r2, #7
7000072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
7000072c:	2300      	movs	r3, #0
}
7000072e:	4618      	mov	r0, r3
70000730:	3708      	adds	r7, #8
70000732:	46bd      	mov	sp, r7
70000734:	bd80      	pop	{r7, pc}
70000736:	bf00      	nop
70000738:	e000e010 	.word	0xe000e010

7000073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
7000073c:	b580      	push	{r7, lr}
7000073e:	b082      	sub	sp, #8
70000740:	af00      	add	r7, sp, #0
70000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
70000744:	6878      	ldr	r0, [r7, #4]
70000746:	f7ff ff47 	bl	700005d8 <__NVIC_SetPriorityGrouping>
}
7000074a:	bf00      	nop
7000074c:	3708      	adds	r7, #8
7000074e:	46bd      	mov	sp, r7
70000750:	bd80      	pop	{r7, pc}

70000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
70000752:	b580      	push	{r7, lr}
70000754:	b086      	sub	sp, #24
70000756:	af00      	add	r7, sp, #0
70000758:	4603      	mov	r3, r0
7000075a:	60b9      	str	r1, [r7, #8]
7000075c:	607a      	str	r2, [r7, #4]
7000075e:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIO_INTERRUPT(IRQn));
  prioritygroup = NVIC_GetPriorityGrouping();
70000760:	f7ff ff5e 	bl	70000620 <__NVIC_GetPriorityGrouping>
70000764:	6178      	str	r0, [r7, #20]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
70000766:	687a      	ldr	r2, [r7, #4]
70000768:	68b9      	ldr	r1, [r7, #8]
7000076a:	6978      	ldr	r0, [r7, #20]
7000076c:	f7ff ff90 	bl	70000690 <NVIC_EncodePriority>
70000770:	4602      	mov	r2, r0
70000772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
70000776:	4611      	mov	r1, r2
70000778:	4618      	mov	r0, r3
7000077a:	f7ff ff5f 	bl	7000063c <__NVIC_SetPriority>
}
7000077e:	bf00      	nop
70000780:	3718      	adds	r7, #24
70000782:	46bd      	mov	sp, r7
70000784:	bd80      	pop	{r7, pc}

70000786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
70000786:	b580      	push	{r7, lr}
70000788:	b082      	sub	sp, #8
7000078a:	af00      	add	r7, sp, #0
7000078c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
7000078e:	6878      	ldr	r0, [r7, #4]
70000790:	f7ff ffb2 	bl	700006f8 <SysTick_Config>
70000794:	4603      	mov	r3, r0
}
70000796:	4618      	mov	r0, r3
70000798:	3708      	adds	r7, #8
7000079a:	46bd      	mov	sp, r7
7000079c:	bd80      	pop	{r7, pc}

7000079e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
7000079e:	b590      	push	{r4, r7, lr}
700007a0:	b08d      	sub	sp, #52	@ 0x34
700007a2:	af00      	add	r7, sp, #0
700007a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
700007a6:	687b      	ldr	r3, [r7, #4]
700007a8:	681b      	ldr	r3, [r3, #0]
700007aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
700007ac:	6a3b      	ldr	r3, [r7, #32]
700007ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
700007b0:	687b      	ldr	r3, [r7, #4]
700007b2:	681b      	ldr	r3, [r3, #0]
700007b4:	4618      	mov	r0, r3
700007b6:	f002 f8f4 	bl	700029a2 <USB_GetMode>
700007ba:	4603      	mov	r3, r0
700007bc:	2b00      	cmp	r3, #0
700007be:	f040 84b9 	bne.w	70001134 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
700007c2:	687b      	ldr	r3, [r7, #4]
700007c4:	681b      	ldr	r3, [r3, #0]
700007c6:	4618      	mov	r0, r3
700007c8:	f002 f858 	bl	7000287c <USB_ReadInterrupts>
700007cc:	4603      	mov	r3, r0
700007ce:	2b00      	cmp	r3, #0
700007d0:	f000 84af 	beq.w	70001132 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
700007d4:	69fb      	ldr	r3, [r7, #28]
700007d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700007da:	689b      	ldr	r3, [r3, #8]
700007dc:	0a1b      	lsrs	r3, r3, #8
700007de:	f3c3 020d 	ubfx	r2, r3, #0, #14
700007e2:	687b      	ldr	r3, [r7, #4]
700007e4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
700007e8:	687b      	ldr	r3, [r7, #4]
700007ea:	681b      	ldr	r3, [r3, #0]
700007ec:	4618      	mov	r0, r3
700007ee:	f002 f845 	bl	7000287c <USB_ReadInterrupts>
700007f2:	4603      	mov	r3, r0
700007f4:	f003 0302 	and.w	r3, r3, #2
700007f8:	2b02      	cmp	r3, #2
700007fa:	d107      	bne.n	7000080c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
700007fc:	687b      	ldr	r3, [r7, #4]
700007fe:	681b      	ldr	r3, [r3, #0]
70000800:	695a      	ldr	r2, [r3, #20]
70000802:	687b      	ldr	r3, [r7, #4]
70000804:	681b      	ldr	r3, [r3, #0]
70000806:	f002 0202 	and.w	r2, r2, #2
7000080a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
7000080c:	687b      	ldr	r3, [r7, #4]
7000080e:	681b      	ldr	r3, [r3, #0]
70000810:	4618      	mov	r0, r3
70000812:	f002 f833 	bl	7000287c <USB_ReadInterrupts>
70000816:	4603      	mov	r3, r0
70000818:	f003 0310 	and.w	r3, r3, #16
7000081c:	2b10      	cmp	r3, #16
7000081e:	d161      	bne.n	700008e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
70000820:	687b      	ldr	r3, [r7, #4]
70000822:	681b      	ldr	r3, [r3, #0]
70000824:	699a      	ldr	r2, [r3, #24]
70000826:	687b      	ldr	r3, [r7, #4]
70000828:	681b      	ldr	r3, [r3, #0]
7000082a:	f022 0210 	bic.w	r2, r2, #16
7000082e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
70000830:	6a3b      	ldr	r3, [r7, #32]
70000832:	6a1b      	ldr	r3, [r3, #32]
70000834:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
70000836:	69bb      	ldr	r3, [r7, #24]
70000838:	f003 020f 	and.w	r2, r3, #15
7000083c:	4613      	mov	r3, r2
7000083e:	00db      	lsls	r3, r3, #3
70000840:	4413      	add	r3, r2
70000842:	009b      	lsls	r3, r3, #2
70000844:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70000848:	687a      	ldr	r2, [r7, #4]
7000084a:	4413      	add	r3, r2
7000084c:	3304      	adds	r3, #4
7000084e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
70000850:	69bb      	ldr	r3, [r7, #24]
70000852:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
70000856:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
7000085a:	d124      	bne.n	700008a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
7000085c:	69ba      	ldr	r2, [r7, #24]
7000085e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
70000862:	4013      	ands	r3, r2
70000864:	2b00      	cmp	r3, #0
70000866:	d035      	beq.n	700008d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
70000868:	697b      	ldr	r3, [r7, #20]
7000086a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
7000086c:	69bb      	ldr	r3, [r7, #24]
7000086e:	091b      	lsrs	r3, r3, #4
70000870:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
70000872:	f3c3 030a 	ubfx	r3, r3, #0, #11
70000876:	b29b      	uxth	r3, r3
70000878:	461a      	mov	r2, r3
7000087a:	6a38      	ldr	r0, [r7, #32]
7000087c:	f001 feac 	bl	700025d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
70000880:	697b      	ldr	r3, [r7, #20]
70000882:	68da      	ldr	r2, [r3, #12]
70000884:	69bb      	ldr	r3, [r7, #24]
70000886:	091b      	lsrs	r3, r3, #4
70000888:	f3c3 030a 	ubfx	r3, r3, #0, #11
7000088c:	441a      	add	r2, r3
7000088e:	697b      	ldr	r3, [r7, #20]
70000890:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
70000892:	697b      	ldr	r3, [r7, #20]
70000894:	695a      	ldr	r2, [r3, #20]
70000896:	69bb      	ldr	r3, [r7, #24]
70000898:	091b      	lsrs	r3, r3, #4
7000089a:	f3c3 030a 	ubfx	r3, r3, #0, #11
7000089e:	441a      	add	r2, r3
700008a0:	697b      	ldr	r3, [r7, #20]
700008a2:	615a      	str	r2, [r3, #20]
700008a4:	e016      	b.n	700008d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
700008a6:	69bb      	ldr	r3, [r7, #24]
700008a8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
700008ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
700008b0:	d110      	bne.n	700008d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
700008b2:	687b      	ldr	r3, [r7, #4]
700008b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
700008b8:	2208      	movs	r2, #8
700008ba:	4619      	mov	r1, r3
700008bc:	6a38      	ldr	r0, [r7, #32]
700008be:	f001 fe8b 	bl	700025d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
700008c2:	697b      	ldr	r3, [r7, #20]
700008c4:	695a      	ldr	r2, [r3, #20]
700008c6:	69bb      	ldr	r3, [r7, #24]
700008c8:	091b      	lsrs	r3, r3, #4
700008ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
700008ce:	441a      	add	r2, r3
700008d0:	697b      	ldr	r3, [r7, #20]
700008d2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
700008d4:	687b      	ldr	r3, [r7, #4]
700008d6:	681b      	ldr	r3, [r3, #0]
700008d8:	699a      	ldr	r2, [r3, #24]
700008da:	687b      	ldr	r3, [r7, #4]
700008dc:	681b      	ldr	r3, [r3, #0]
700008de:	f042 0210 	orr.w	r2, r2, #16
700008e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
700008e4:	687b      	ldr	r3, [r7, #4]
700008e6:	681b      	ldr	r3, [r3, #0]
700008e8:	4618      	mov	r0, r3
700008ea:	f001 ffc7 	bl	7000287c <USB_ReadInterrupts>
700008ee:	4603      	mov	r3, r0
700008f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
700008f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
700008f8:	f040 80a7 	bne.w	70000a4a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
700008fc:	2300      	movs	r3, #0
700008fe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
70000900:	687b      	ldr	r3, [r7, #4]
70000902:	681b      	ldr	r3, [r3, #0]
70000904:	4618      	mov	r0, r3
70000906:	f001 ffcc 	bl	700028a2 <USB_ReadDevAllOutEpInterrupt>
7000090a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
7000090c:	e099      	b.n	70000a42 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
7000090e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000910:	f003 0301 	and.w	r3, r3, #1
70000914:	2b00      	cmp	r3, #0
70000916:	f000 808e 	beq.w	70000a36 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
7000091a:	687b      	ldr	r3, [r7, #4]
7000091c:	681b      	ldr	r3, [r3, #0]
7000091e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000920:	b2d2      	uxtb	r2, r2
70000922:	4611      	mov	r1, r2
70000924:	4618      	mov	r0, r3
70000926:	f001 fff0 	bl	7000290a <USB_ReadDevOutEPInterrupt>
7000092a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
7000092c:	693b      	ldr	r3, [r7, #16]
7000092e:	f003 0301 	and.w	r3, r3, #1
70000932:	2b00      	cmp	r3, #0
70000934:	d00c      	beq.n	70000950 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
70000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000938:	015a      	lsls	r2, r3, #5
7000093a:	69fb      	ldr	r3, [r7, #28]
7000093c:	4413      	add	r3, r2
7000093e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000942:	461a      	mov	r2, r3
70000944:	2301      	movs	r3, #1
70000946:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
70000948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000094a:	6878      	ldr	r0, [r7, #4]
7000094c:	f000 fe6e 	bl	7000162c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
70000950:	693b      	ldr	r3, [r7, #16]
70000952:	f003 0308 	and.w	r3, r3, #8
70000956:	2b00      	cmp	r3, #0
70000958:	d00c      	beq.n	70000974 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
7000095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000095c:	015a      	lsls	r2, r3, #5
7000095e:	69fb      	ldr	r3, [r7, #28]
70000960:	4413      	add	r3, r2
70000962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000966:	461a      	mov	r2, r3
70000968:	2308      	movs	r3, #8
7000096a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
7000096c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
7000096e:	6878      	ldr	r0, [r7, #4]
70000970:	f000 ff44 	bl	700017fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
70000974:	693b      	ldr	r3, [r7, #16]
70000976:	f003 0310 	and.w	r3, r3, #16
7000097a:	2b00      	cmp	r3, #0
7000097c:	d008      	beq.n	70000990 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
7000097e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000980:	015a      	lsls	r2, r3, #5
70000982:	69fb      	ldr	r3, [r7, #28]
70000984:	4413      	add	r3, r2
70000986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000098a:	461a      	mov	r2, r3
7000098c:	2310      	movs	r3, #16
7000098e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
70000990:	693b      	ldr	r3, [r7, #16]
70000992:	f003 0302 	and.w	r3, r3, #2
70000996:	2b00      	cmp	r3, #0
70000998:	d030      	beq.n	700009fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
7000099a:	6a3b      	ldr	r3, [r7, #32]
7000099c:	695b      	ldr	r3, [r3, #20]
7000099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
700009a2:	2b80      	cmp	r3, #128	@ 0x80
700009a4:	d109      	bne.n	700009ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
700009a6:	69fb      	ldr	r3, [r7, #28]
700009a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700009ac:	685b      	ldr	r3, [r3, #4]
700009ae:	69fa      	ldr	r2, [r7, #28]
700009b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
700009b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
700009b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
700009ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
700009bc:	4613      	mov	r3, r2
700009be:	00db      	lsls	r3, r3, #3
700009c0:	4413      	add	r3, r2
700009c2:	009b      	lsls	r3, r3, #2
700009c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700009c8:	687a      	ldr	r2, [r7, #4]
700009ca:	4413      	add	r3, r2
700009cc:	3304      	adds	r3, #4
700009ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
700009d0:	697b      	ldr	r3, [r7, #20]
700009d2:	78db      	ldrb	r3, [r3, #3]
700009d4:	2b01      	cmp	r3, #1
700009d6:	d108      	bne.n	700009ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
700009d8:	697b      	ldr	r3, [r7, #20]
700009da:	2200      	movs	r2, #0
700009dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
700009de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700009e0:	b2db      	uxtb	r3, r3
700009e2:	4619      	mov	r1, r3
700009e4:	6878      	ldr	r0, [r7, #4]
700009e6:	f003 fb0b 	bl	70004000 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
700009ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700009ec:	015a      	lsls	r2, r3, #5
700009ee:	69fb      	ldr	r3, [r7, #28]
700009f0:	4413      	add	r3, r2
700009f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700009f6:	461a      	mov	r2, r3
700009f8:	2302      	movs	r3, #2
700009fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
700009fc:	693b      	ldr	r3, [r7, #16]
700009fe:	f003 0320 	and.w	r3, r3, #32
70000a02:	2b00      	cmp	r3, #0
70000a04:	d008      	beq.n	70000a18 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
70000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a08:	015a      	lsls	r2, r3, #5
70000a0a:	69fb      	ldr	r3, [r7, #28]
70000a0c:	4413      	add	r3, r2
70000a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000a12:	461a      	mov	r2, r3
70000a14:	2320      	movs	r3, #32
70000a16:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
70000a18:	693b      	ldr	r3, [r7, #16]
70000a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000a1e:	2b00      	cmp	r3, #0
70000a20:	d009      	beq.n	70000a36 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
70000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a24:	015a      	lsls	r2, r3, #5
70000a26:	69fb      	ldr	r3, [r7, #28]
70000a28:	4413      	add	r3, r2
70000a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000a2e:	461a      	mov	r2, r3
70000a30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
70000a34:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
70000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a38:	3301      	adds	r3, #1
70000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
70000a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000a3e:	085b      	lsrs	r3, r3, #1
70000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
70000a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000a44:	2b00      	cmp	r3, #0
70000a46:	f47f af62 	bne.w	7000090e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
70000a4a:	687b      	ldr	r3, [r7, #4]
70000a4c:	681b      	ldr	r3, [r3, #0]
70000a4e:	4618      	mov	r0, r3
70000a50:	f001 ff14 	bl	7000287c <USB_ReadInterrupts>
70000a54:	4603      	mov	r3, r0
70000a56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
70000a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
70000a5e:	f040 80db 	bne.w	70000c18 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
70000a62:	687b      	ldr	r3, [r7, #4]
70000a64:	681b      	ldr	r3, [r3, #0]
70000a66:	4618      	mov	r0, r3
70000a68:	f001 ff35 	bl	700028d6 <USB_ReadDevAllInEpInterrupt>
70000a6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
70000a6e:	2300      	movs	r3, #0
70000a70:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
70000a72:	e0cd      	b.n	70000c10 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
70000a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000a76:	f003 0301 	and.w	r3, r3, #1
70000a7a:	2b00      	cmp	r3, #0
70000a7c:	f000 80c2 	beq.w	70000c04 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
70000a80:	687b      	ldr	r3, [r7, #4]
70000a82:	681b      	ldr	r3, [r3, #0]
70000a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000a86:	b2d2      	uxtb	r2, r2
70000a88:	4611      	mov	r1, r2
70000a8a:	4618      	mov	r0, r3
70000a8c:	f001 ff5b 	bl	70002946 <USB_ReadDevInEPInterrupt>
70000a90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
70000a92:	693b      	ldr	r3, [r7, #16]
70000a94:	f003 0301 	and.w	r3, r3, #1
70000a98:	2b00      	cmp	r3, #0
70000a9a:	d057      	beq.n	70000b4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
70000a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000a9e:	f003 030f 	and.w	r3, r3, #15
70000aa2:	2201      	movs	r2, #1
70000aa4:	fa02 f303 	lsl.w	r3, r2, r3
70000aa8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
70000aaa:	69fb      	ldr	r3, [r7, #28]
70000aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70000ab2:	68fb      	ldr	r3, [r7, #12]
70000ab4:	43db      	mvns	r3, r3
70000ab6:	69f9      	ldr	r1, [r7, #28]
70000ab8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70000abc:	4013      	ands	r3, r2
70000abe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
70000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ac2:	015a      	lsls	r2, r3, #5
70000ac4:	69fb      	ldr	r3, [r7, #28]
70000ac6:	4413      	add	r3, r2
70000ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000acc:	461a      	mov	r2, r3
70000ace:	2301      	movs	r3, #1
70000ad0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
70000ad2:	687b      	ldr	r3, [r7, #4]
70000ad4:	799b      	ldrb	r3, [r3, #6]
70000ad6:	2b01      	cmp	r3, #1
70000ad8:	d132      	bne.n	70000b40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
70000ada:	6879      	ldr	r1, [r7, #4]
70000adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000ade:	4613      	mov	r3, r2
70000ae0:	00db      	lsls	r3, r3, #3
70000ae2:	4413      	add	r3, r2
70000ae4:	009b      	lsls	r3, r3, #2
70000ae6:	440b      	add	r3, r1
70000ae8:	3320      	adds	r3, #32
70000aea:	6819      	ldr	r1, [r3, #0]
70000aec:	6878      	ldr	r0, [r7, #4]
70000aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000af0:	4613      	mov	r3, r2
70000af2:	00db      	lsls	r3, r3, #3
70000af4:	4413      	add	r3, r2
70000af6:	009b      	lsls	r3, r3, #2
70000af8:	4403      	add	r3, r0
70000afa:	331c      	adds	r3, #28
70000afc:	681b      	ldr	r3, [r3, #0]
70000afe:	4419      	add	r1, r3
70000b00:	6878      	ldr	r0, [r7, #4]
70000b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000b04:	4613      	mov	r3, r2
70000b06:	00db      	lsls	r3, r3, #3
70000b08:	4413      	add	r3, r2
70000b0a:	009b      	lsls	r3, r3, #2
70000b0c:	4403      	add	r3, r0
70000b0e:	3320      	adds	r3, #32
70000b10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
70000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b14:	2b00      	cmp	r3, #0
70000b16:	d113      	bne.n	70000b40 <HAL_PCD_IRQHandler+0x3a2>
70000b18:	6879      	ldr	r1, [r7, #4]
70000b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000b1c:	4613      	mov	r3, r2
70000b1e:	00db      	lsls	r3, r3, #3
70000b20:	4413      	add	r3, r2
70000b22:	009b      	lsls	r3, r3, #2
70000b24:	440b      	add	r3, r1
70000b26:	3324      	adds	r3, #36	@ 0x24
70000b28:	681b      	ldr	r3, [r3, #0]
70000b2a:	2b00      	cmp	r3, #0
70000b2c:	d108      	bne.n	70000b40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
70000b2e:	687b      	ldr	r3, [r7, #4]
70000b30:	6818      	ldr	r0, [r3, #0]
70000b32:	687b      	ldr	r3, [r7, #4]
70000b34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70000b38:	461a      	mov	r2, r3
70000b3a:	2101      	movs	r1, #1
70000b3c:	f001 ff64 	bl	70002a08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
70000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b42:	b2db      	uxtb	r3, r3
70000b44:	4619      	mov	r1, r3
70000b46:	6878      	ldr	r0, [r7, #4]
70000b48:	f003 f9c6 	bl	70003ed8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
70000b4c:	693b      	ldr	r3, [r7, #16]
70000b4e:	f003 0308 	and.w	r3, r3, #8
70000b52:	2b00      	cmp	r3, #0
70000b54:	d008      	beq.n	70000b68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
70000b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b58:	015a      	lsls	r2, r3, #5
70000b5a:	69fb      	ldr	r3, [r7, #28]
70000b5c:	4413      	add	r3, r2
70000b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000b62:	461a      	mov	r2, r3
70000b64:	2308      	movs	r3, #8
70000b66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
70000b68:	693b      	ldr	r3, [r7, #16]
70000b6a:	f003 0310 	and.w	r3, r3, #16
70000b6e:	2b00      	cmp	r3, #0
70000b70:	d008      	beq.n	70000b84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
70000b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b74:	015a      	lsls	r2, r3, #5
70000b76:	69fb      	ldr	r3, [r7, #28]
70000b78:	4413      	add	r3, r2
70000b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000b7e:	461a      	mov	r2, r3
70000b80:	2310      	movs	r3, #16
70000b82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
70000b84:	693b      	ldr	r3, [r7, #16]
70000b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
70000b8a:	2b00      	cmp	r3, #0
70000b8c:	d008      	beq.n	70000ba0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
70000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000b90:	015a      	lsls	r2, r3, #5
70000b92:	69fb      	ldr	r3, [r7, #28]
70000b94:	4413      	add	r3, r2
70000b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000b9a:	461a      	mov	r2, r3
70000b9c:	2340      	movs	r3, #64	@ 0x40
70000b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
70000ba0:	693b      	ldr	r3, [r7, #16]
70000ba2:	f003 0302 	and.w	r3, r3, #2
70000ba6:	2b00      	cmp	r3, #0
70000ba8:	d023      	beq.n	70000bf2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
70000baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70000bac:	6a38      	ldr	r0, [r7, #32]
70000bae:	f001 f8a7 	bl	70001d00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
70000bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000bb4:	4613      	mov	r3, r2
70000bb6:	00db      	lsls	r3, r3, #3
70000bb8:	4413      	add	r3, r2
70000bba:	009b      	lsls	r3, r3, #2
70000bbc:	3310      	adds	r3, #16
70000bbe:	687a      	ldr	r2, [r7, #4]
70000bc0:	4413      	add	r3, r2
70000bc2:	3304      	adds	r3, #4
70000bc4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
70000bc6:	697b      	ldr	r3, [r7, #20]
70000bc8:	78db      	ldrb	r3, [r3, #3]
70000bca:	2b01      	cmp	r3, #1
70000bcc:	d108      	bne.n	70000be0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
70000bce:	697b      	ldr	r3, [r7, #20]
70000bd0:	2200      	movs	r2, #0
70000bd2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
70000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000bd6:	b2db      	uxtb	r3, r3
70000bd8:	4619      	mov	r1, r3
70000bda:	6878      	ldr	r0, [r7, #4]
70000bdc:	f003 fa22 	bl	70004024 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
70000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000be2:	015a      	lsls	r2, r3, #5
70000be4:	69fb      	ldr	r3, [r7, #28]
70000be6:	4413      	add	r3, r2
70000be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000bec:	461a      	mov	r2, r3
70000bee:	2302      	movs	r3, #2
70000bf0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
70000bf2:	693b      	ldr	r3, [r7, #16]
70000bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70000bf8:	2b00      	cmp	r3, #0
70000bfa:	d003      	beq.n	70000c04 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
70000bfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
70000bfe:	6878      	ldr	r0, [r7, #4]
70000c00:	f000 fc88 	bl	70001514 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
70000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000c06:	3301      	adds	r3, #1
70000c08:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
70000c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000c0c:	085b      	lsrs	r3, r3, #1
70000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
70000c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
70000c12:	2b00      	cmp	r3, #0
70000c14:	f47f af2e 	bne.w	70000a74 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
70000c18:	687b      	ldr	r3, [r7, #4]
70000c1a:	681b      	ldr	r3, [r3, #0]
70000c1c:	4618      	mov	r0, r3
70000c1e:	f001 fe2d 	bl	7000287c <USB_ReadInterrupts>
70000c22:	4603      	mov	r3, r0
70000c24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70000c28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70000c2c:	d122      	bne.n	70000c74 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
70000c2e:	69fb      	ldr	r3, [r7, #28]
70000c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000c34:	685b      	ldr	r3, [r3, #4]
70000c36:	69fa      	ldr	r2, [r7, #28]
70000c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000c3c:	f023 0301 	bic.w	r3, r3, #1
70000c40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
70000c42:	687b      	ldr	r3, [r7, #4]
70000c44:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
70000c48:	2b01      	cmp	r3, #1
70000c4a:	d108      	bne.n	70000c5e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
70000c4c:	687b      	ldr	r3, [r7, #4]
70000c4e:	2200      	movs	r2, #0
70000c50:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
70000c54:	2100      	movs	r1, #0
70000c56:	6878      	ldr	r0, [r7, #4]
70000c58:	f000 fe16 	bl	70001888 <HAL_PCDEx_LPM_Callback>
70000c5c:	e002      	b.n	70000c64 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
70000c5e:	6878      	ldr	r0, [r7, #4]
70000c60:	f003 f9a6 	bl	70003fb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
70000c64:	687b      	ldr	r3, [r7, #4]
70000c66:	681b      	ldr	r3, [r3, #0]
70000c68:	695a      	ldr	r2, [r3, #20]
70000c6a:	687b      	ldr	r3, [r7, #4]
70000c6c:	681b      	ldr	r3, [r3, #0]
70000c6e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
70000c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
70000c74:	687b      	ldr	r3, [r7, #4]
70000c76:	681b      	ldr	r3, [r3, #0]
70000c78:	4618      	mov	r0, r3
70000c7a:	f001 fdff 	bl	7000287c <USB_ReadInterrupts>
70000c7e:	4603      	mov	r3, r0
70000c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
70000c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
70000c88:	d112      	bne.n	70000cb0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
70000c8a:	69fb      	ldr	r3, [r7, #28]
70000c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000c90:	689b      	ldr	r3, [r3, #8]
70000c92:	f003 0301 	and.w	r3, r3, #1
70000c96:	2b01      	cmp	r3, #1
70000c98:	d102      	bne.n	70000ca0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
70000c9a:	6878      	ldr	r0, [r7, #4]
70000c9c:	f003 f96c 	bl	70003f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
70000ca0:	687b      	ldr	r3, [r7, #4]
70000ca2:	681b      	ldr	r3, [r3, #0]
70000ca4:	695a      	ldr	r2, [r3, #20]
70000ca6:	687b      	ldr	r3, [r7, #4]
70000ca8:	681b      	ldr	r3, [r3, #0]
70000caa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
70000cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
70000cb0:	687b      	ldr	r3, [r7, #4]
70000cb2:	681b      	ldr	r3, [r3, #0]
70000cb4:	4618      	mov	r0, r3
70000cb6:	f001 fde1 	bl	7000287c <USB_ReadInterrupts>
70000cba:	4603      	mov	r3, r0
70000cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
70000cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
70000cc4:	d121      	bne.n	70000d0a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
70000cc6:	687b      	ldr	r3, [r7, #4]
70000cc8:	681b      	ldr	r3, [r3, #0]
70000cca:	695a      	ldr	r2, [r3, #20]
70000ccc:	687b      	ldr	r3, [r7, #4]
70000cce:	681b      	ldr	r3, [r3, #0]
70000cd0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
70000cd4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
70000cd6:	687b      	ldr	r3, [r7, #4]
70000cd8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
70000cdc:	2b00      	cmp	r3, #0
70000cde:	d111      	bne.n	70000d04 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
70000ce0:	687b      	ldr	r3, [r7, #4]
70000ce2:	2201      	movs	r2, #1
70000ce4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
70000ce8:	687b      	ldr	r3, [r7, #4]
70000cea:	681b      	ldr	r3, [r3, #0]
70000cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
70000cee:	089b      	lsrs	r3, r3, #2
70000cf0:	f003 020f 	and.w	r2, r3, #15
70000cf4:	687b      	ldr	r3, [r7, #4]
70000cf6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
70000cfa:	2101      	movs	r1, #1
70000cfc:	6878      	ldr	r0, [r7, #4]
70000cfe:	f000 fdc3 	bl	70001888 <HAL_PCDEx_LPM_Callback>
70000d02:	e002      	b.n	70000d0a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
70000d04:	6878      	ldr	r0, [r7, #4]
70000d06:	f003 f937 	bl	70003f78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
70000d0a:	687b      	ldr	r3, [r7, #4]
70000d0c:	681b      	ldr	r3, [r3, #0]
70000d0e:	4618      	mov	r0, r3
70000d10:	f001 fdb4 	bl	7000287c <USB_ReadInterrupts>
70000d14:	4603      	mov	r3, r0
70000d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
70000d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
70000d1e:	f040 80b7 	bne.w	70000e90 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
70000d22:	69fb      	ldr	r3, [r7, #28]
70000d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000d28:	685b      	ldr	r3, [r3, #4]
70000d2a:	69fa      	ldr	r2, [r7, #28]
70000d2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000d30:	f023 0301 	bic.w	r3, r3, #1
70000d34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
70000d36:	687b      	ldr	r3, [r7, #4]
70000d38:	681b      	ldr	r3, [r3, #0]
70000d3a:	2110      	movs	r1, #16
70000d3c:	4618      	mov	r0, r3
70000d3e:	f000 ffdf 	bl	70001d00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
70000d42:	2300      	movs	r3, #0
70000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
70000d46:	e046      	b.n	70000dd6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
70000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000d4a:	015a      	lsls	r2, r3, #5
70000d4c:	69fb      	ldr	r3, [r7, #28]
70000d4e:	4413      	add	r3, r2
70000d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000d54:	461a      	mov	r2, r3
70000d56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
70000d5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
70000d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000d5e:	015a      	lsls	r2, r3, #5
70000d60:	69fb      	ldr	r3, [r7, #28]
70000d62:	4413      	add	r3, r2
70000d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000d68:	681b      	ldr	r3, [r3, #0]
70000d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70000d6c:	0151      	lsls	r1, r2, #5
70000d6e:	69fa      	ldr	r2, [r7, #28]
70000d70:	440a      	add	r2, r1
70000d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70000d76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70000d7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
70000d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000d7e:	015a      	lsls	r2, r3, #5
70000d80:	69fb      	ldr	r3, [r7, #28]
70000d82:	4413      	add	r3, r2
70000d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000d88:	461a      	mov	r2, r3
70000d8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
70000d8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
70000d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000d92:	015a      	lsls	r2, r3, #5
70000d94:	69fb      	ldr	r3, [r7, #28]
70000d96:	4413      	add	r3, r2
70000d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000d9c:	681b      	ldr	r3, [r3, #0]
70000d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70000da0:	0151      	lsls	r1, r2, #5
70000da2:	69fa      	ldr	r2, [r7, #28]
70000da4:	440a      	add	r2, r1
70000da6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70000daa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
70000dae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
70000db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000db2:	015a      	lsls	r2, r3, #5
70000db4:	69fb      	ldr	r3, [r7, #28]
70000db6:	4413      	add	r3, r2
70000db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70000dbc:	681b      	ldr	r3, [r3, #0]
70000dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
70000dc0:	0151      	lsls	r1, r2, #5
70000dc2:	69fa      	ldr	r2, [r7, #28]
70000dc4:	440a      	add	r2, r1
70000dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70000dca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70000dce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
70000dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000dd2:	3301      	adds	r3, #1
70000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
70000dd6:	687b      	ldr	r3, [r7, #4]
70000dd8:	791b      	ldrb	r3, [r3, #4]
70000dda:	461a      	mov	r2, r3
70000ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
70000dde:	4293      	cmp	r3, r2
70000de0:	d3b2      	bcc.n	70000d48 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
70000de2:	69fb      	ldr	r3, [r7, #28]
70000de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000de8:	69db      	ldr	r3, [r3, #28]
70000dea:	69fa      	ldr	r2, [r7, #28]
70000dec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000df0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
70000df4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
70000df6:	687b      	ldr	r3, [r7, #4]
70000df8:	7bdb      	ldrb	r3, [r3, #15]
70000dfa:	2b00      	cmp	r3, #0
70000dfc:	d016      	beq.n	70000e2c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
70000dfe:	69fb      	ldr	r3, [r7, #28]
70000e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
70000e08:	69fa      	ldr	r2, [r7, #28]
70000e0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000e0e:	f043 030b 	orr.w	r3, r3, #11
70000e12:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
70000e16:	69fb      	ldr	r3, [r7, #28]
70000e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
70000e1e:	69fa      	ldr	r2, [r7, #28]
70000e20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000e24:	f043 030b 	orr.w	r3, r3, #11
70000e28:	6453      	str	r3, [r2, #68]	@ 0x44
70000e2a:	e015      	b.n	70000e58 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
70000e2c:	69fb      	ldr	r3, [r7, #28]
70000e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000e32:	695a      	ldr	r2, [r3, #20]
70000e34:	69fb      	ldr	r3, [r7, #28]
70000e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000e3a:	4619      	mov	r1, r3
70000e3c:	f242 032b 	movw	r3, #8235	@ 0x202b
70000e40:	4313      	orrs	r3, r2
70000e42:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
70000e44:	69fb      	ldr	r3, [r7, #28]
70000e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000e4a:	691b      	ldr	r3, [r3, #16]
70000e4c:	69fa      	ldr	r2, [r7, #28]
70000e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000e52:	f043 030b 	orr.w	r3, r3, #11
70000e56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
70000e58:	69fb      	ldr	r3, [r7, #28]
70000e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70000e5e:	681b      	ldr	r3, [r3, #0]
70000e60:	69fa      	ldr	r2, [r7, #28]
70000e62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
70000e66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
70000e6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
70000e6c:	687b      	ldr	r3, [r7, #4]
70000e6e:	6818      	ldr	r0, [r3, #0]
70000e70:	687b      	ldr	r3, [r7, #4]
70000e72:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
70000e74:	687b      	ldr	r3, [r7, #4]
70000e76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
70000e7a:	461a      	mov	r2, r3
70000e7c:	f001 fdc4 	bl	70002a08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
70000e80:	687b      	ldr	r3, [r7, #4]
70000e82:	681b      	ldr	r3, [r3, #0]
70000e84:	695a      	ldr	r2, [r3, #20]
70000e86:	687b      	ldr	r3, [r7, #4]
70000e88:	681b      	ldr	r3, [r3, #0]
70000e8a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
70000e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
70000e90:	687b      	ldr	r3, [r7, #4]
70000e92:	681b      	ldr	r3, [r3, #0]
70000e94:	4618      	mov	r0, r3
70000e96:	f001 fcf1 	bl	7000287c <USB_ReadInterrupts>
70000e9a:	4603      	mov	r3, r0
70000e9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
70000ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
70000ea4:	d123      	bne.n	70000eee <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
70000ea6:	687b      	ldr	r3, [r7, #4]
70000ea8:	681b      	ldr	r3, [r3, #0]
70000eaa:	4618      	mov	r0, r3
70000eac:	f001 fd88 	bl	700029c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
70000eb0:	687b      	ldr	r3, [r7, #4]
70000eb2:	681b      	ldr	r3, [r3, #0]
70000eb4:	4618      	mov	r0, r3
70000eb6:	f000 ff55 	bl	70001d64 <USB_GetDevSpeed>
70000eba:	4603      	mov	r3, r0
70000ebc:	461a      	mov	r2, r3
70000ebe:	687b      	ldr	r3, [r7, #4]
70000ec0:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
70000ec2:	687b      	ldr	r3, [r7, #4]
70000ec4:	681c      	ldr	r4, [r3, #0]
70000ec6:	f000 fe51 	bl	70001b6c <HAL_RCC_GetHCLKFreq>
70000eca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
70000ecc:	687b      	ldr	r3, [r7, #4]
70000ece:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
70000ed0:	461a      	mov	r2, r3
70000ed2:	4620      	mov	r0, r4
70000ed4:	f000 fe72 	bl	70001bbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
70000ed8:	6878      	ldr	r0, [r7, #4]
70000eda:	f003 f825 	bl	70003f28 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
70000ede:	687b      	ldr	r3, [r7, #4]
70000ee0:	681b      	ldr	r3, [r3, #0]
70000ee2:	695a      	ldr	r2, [r3, #20]
70000ee4:	687b      	ldr	r3, [r7, #4]
70000ee6:	681b      	ldr	r3, [r3, #0]
70000ee8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
70000eec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
70000eee:	687b      	ldr	r3, [r7, #4]
70000ef0:	681b      	ldr	r3, [r3, #0]
70000ef2:	4618      	mov	r0, r3
70000ef4:	f001 fcc2 	bl	7000287c <USB_ReadInterrupts>
70000ef8:	4603      	mov	r3, r0
70000efa:	f003 0308 	and.w	r3, r3, #8
70000efe:	2b08      	cmp	r3, #8
70000f00:	d10a      	bne.n	70000f18 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
70000f02:	6878      	ldr	r0, [r7, #4]
70000f04:	f003 f802 	bl	70003f0c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
70000f08:	687b      	ldr	r3, [r7, #4]
70000f0a:	681b      	ldr	r3, [r3, #0]
70000f0c:	695a      	ldr	r2, [r3, #20]
70000f0e:	687b      	ldr	r3, [r7, #4]
70000f10:	681b      	ldr	r3, [r3, #0]
70000f12:	f002 0208 	and.w	r2, r2, #8
70000f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
70000f18:	687b      	ldr	r3, [r7, #4]
70000f1a:	681b      	ldr	r3, [r3, #0]
70000f1c:	4618      	mov	r0, r3
70000f1e:	f001 fcad 	bl	7000287c <USB_ReadInterrupts>
70000f22:	4603      	mov	r3, r0
70000f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
70000f28:	2b80      	cmp	r3, #128	@ 0x80
70000f2a:	d123      	bne.n	70000f74 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
70000f2c:	6a3b      	ldr	r3, [r7, #32]
70000f2e:	699b      	ldr	r3, [r3, #24]
70000f30:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
70000f34:	6a3b      	ldr	r3, [r7, #32]
70000f36:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000f38:	2301      	movs	r3, #1
70000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
70000f3c:	e014      	b.n	70000f68 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
70000f3e:	6879      	ldr	r1, [r7, #4]
70000f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000f42:	4613      	mov	r3, r2
70000f44:	00db      	lsls	r3, r3, #3
70000f46:	4413      	add	r3, r2
70000f48:	009b      	lsls	r3, r3, #2
70000f4a:	440b      	add	r3, r1
70000f4c:	f203 2357 	addw	r3, r3, #599	@ 0x257
70000f50:	781b      	ldrb	r3, [r3, #0]
70000f52:	2b01      	cmp	r3, #1
70000f54:	d105      	bne.n	70000f62 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
70000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f58:	b2db      	uxtb	r3, r3
70000f5a:	4619      	mov	r1, r3
70000f5c:	6878      	ldr	r0, [r7, #4]
70000f5e:	f000 faa8 	bl	700014b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f64:	3301      	adds	r3, #1
70000f66:	627b      	str	r3, [r7, #36]	@ 0x24
70000f68:	687b      	ldr	r3, [r7, #4]
70000f6a:	791b      	ldrb	r3, [r3, #4]
70000f6c:	461a      	mov	r2, r3
70000f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f70:	4293      	cmp	r3, r2
70000f72:	d3e4      	bcc.n	70000f3e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
70000f74:	687b      	ldr	r3, [r7, #4]
70000f76:	681b      	ldr	r3, [r3, #0]
70000f78:	4618      	mov	r0, r3
70000f7a:	f001 fc7f 	bl	7000287c <USB_ReadInterrupts>
70000f7e:	4603      	mov	r3, r0
70000f80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
70000f84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
70000f88:	d13c      	bne.n	70001004 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000f8a:	2301      	movs	r3, #1
70000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
70000f8e:	e02b      	b.n	70000fe8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
70000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000f92:	015a      	lsls	r2, r3, #5
70000f94:	69fb      	ldr	r3, [r7, #28]
70000f96:	4413      	add	r3, r2
70000f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70000f9c:	681b      	ldr	r3, [r3, #0]
70000f9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
70000fa0:	6879      	ldr	r1, [r7, #4]
70000fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000fa4:	4613      	mov	r3, r2
70000fa6:	00db      	lsls	r3, r3, #3
70000fa8:	4413      	add	r3, r2
70000faa:	009b      	lsls	r3, r3, #2
70000fac:	440b      	add	r3, r1
70000fae:	3318      	adds	r3, #24
70000fb0:	781b      	ldrb	r3, [r3, #0]
70000fb2:	2b01      	cmp	r3, #1
70000fb4:	d115      	bne.n	70000fe2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
70000fb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
70000fb8:	2b00      	cmp	r3, #0
70000fba:	da12      	bge.n	70000fe2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
70000fbc:	6879      	ldr	r1, [r7, #4]
70000fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70000fc0:	4613      	mov	r3, r2
70000fc2:	00db      	lsls	r3, r3, #3
70000fc4:	4413      	add	r3, r2
70000fc6:	009b      	lsls	r3, r3, #2
70000fc8:	440b      	add	r3, r1
70000fca:	3317      	adds	r3, #23
70000fcc:	2201      	movs	r2, #1
70000fce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
70000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000fd2:	b2db      	uxtb	r3, r3
70000fd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
70000fd8:	b2db      	uxtb	r3, r3
70000fda:	4619      	mov	r1, r3
70000fdc:	6878      	ldr	r0, [r7, #4]
70000fde:	f000 fa68 	bl	700014b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
70000fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000fe4:	3301      	adds	r3, #1
70000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
70000fe8:	687b      	ldr	r3, [r7, #4]
70000fea:	791b      	ldrb	r3, [r3, #4]
70000fec:	461a      	mov	r2, r3
70000fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70000ff0:	4293      	cmp	r3, r2
70000ff2:	d3cd      	bcc.n	70000f90 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
70000ff4:	687b      	ldr	r3, [r7, #4]
70000ff6:	681b      	ldr	r3, [r3, #0]
70000ff8:	695a      	ldr	r2, [r3, #20]
70000ffa:	687b      	ldr	r3, [r7, #4]
70000ffc:	681b      	ldr	r3, [r3, #0]
70000ffe:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
70001002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
70001004:	687b      	ldr	r3, [r7, #4]
70001006:	681b      	ldr	r3, [r3, #0]
70001008:	4618      	mov	r0, r3
7000100a:	f001 fc37 	bl	7000287c <USB_ReadInterrupts>
7000100e:	4603      	mov	r3, r0
70001010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
70001014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
70001018:	d156      	bne.n	700010c8 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
7000101a:	2301      	movs	r3, #1
7000101c:	627b      	str	r3, [r7, #36]	@ 0x24
7000101e:	e045      	b.n	700010ac <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
70001020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70001022:	015a      	lsls	r2, r3, #5
70001024:	69fb      	ldr	r3, [r7, #28]
70001026:	4413      	add	r3, r2
70001028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000102c:	681b      	ldr	r3, [r3, #0]
7000102e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
70001030:	6879      	ldr	r1, [r7, #4]
70001032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70001034:	4613      	mov	r3, r2
70001036:	00db      	lsls	r3, r3, #3
70001038:	4413      	add	r3, r2
7000103a:	009b      	lsls	r3, r3, #2
7000103c:	440b      	add	r3, r1
7000103e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
70001042:	781b      	ldrb	r3, [r3, #0]
70001044:	2b01      	cmp	r3, #1
70001046:	d12e      	bne.n	700010a6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
70001048:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
7000104a:	2b00      	cmp	r3, #0
7000104c:	da2b      	bge.n	700010a6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
7000104e:	69bb      	ldr	r3, [r7, #24]
70001050:	0c1a      	lsrs	r2, r3, #16
70001052:	687b      	ldr	r3, [r7, #4]
70001054:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
70001058:	4053      	eors	r3, r2
7000105a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
7000105e:	2b00      	cmp	r3, #0
70001060:	d121      	bne.n	700010a6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
70001062:	6879      	ldr	r1, [r7, #4]
70001064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
70001066:	4613      	mov	r3, r2
70001068:	00db      	lsls	r3, r3, #3
7000106a:	4413      	add	r3, r2
7000106c:	009b      	lsls	r3, r3, #2
7000106e:	440b      	add	r3, r1
70001070:	f203 2357 	addw	r3, r3, #599	@ 0x257
70001074:	2201      	movs	r2, #1
70001076:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
70001078:	6a3b      	ldr	r3, [r7, #32]
7000107a:	699b      	ldr	r3, [r3, #24]
7000107c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
70001080:	6a3b      	ldr	r3, [r7, #32]
70001082:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
70001084:	6a3b      	ldr	r3, [r7, #32]
70001086:	695b      	ldr	r3, [r3, #20]
70001088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
7000108c:	2b00      	cmp	r3, #0
7000108e:	d10a      	bne.n	700010a6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
70001090:	69fb      	ldr	r3, [r7, #28]
70001092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001096:	685b      	ldr	r3, [r3, #4]
70001098:	69fa      	ldr	r2, [r7, #28]
7000109a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
7000109e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
700010a2:	6053      	str	r3, [r2, #4]
            break;
700010a4:	e008      	b.n	700010b8 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
700010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700010a8:	3301      	adds	r3, #1
700010aa:	627b      	str	r3, [r7, #36]	@ 0x24
700010ac:	687b      	ldr	r3, [r7, #4]
700010ae:	791b      	ldrb	r3, [r3, #4]
700010b0:	461a      	mov	r2, r3
700010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
700010b4:	4293      	cmp	r3, r2
700010b6:	d3b3      	bcc.n	70001020 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
700010b8:	687b      	ldr	r3, [r7, #4]
700010ba:	681b      	ldr	r3, [r3, #0]
700010bc:	695a      	ldr	r2, [r3, #20]
700010be:	687b      	ldr	r3, [r7, #4]
700010c0:	681b      	ldr	r3, [r3, #0]
700010c2:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
700010c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
700010c8:	687b      	ldr	r3, [r7, #4]
700010ca:	681b      	ldr	r3, [r3, #0]
700010cc:	4618      	mov	r0, r3
700010ce:	f001 fbd5 	bl	7000287c <USB_ReadInterrupts>
700010d2:	4603      	mov	r3, r0
700010d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
700010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
700010dc:	d10a      	bne.n	700010f4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
700010de:	6878      	ldr	r0, [r7, #4]
700010e0:	f002 ffb2 	bl	70004048 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
700010e4:	687b      	ldr	r3, [r7, #4]
700010e6:	681b      	ldr	r3, [r3, #0]
700010e8:	695a      	ldr	r2, [r3, #20]
700010ea:	687b      	ldr	r3, [r7, #4]
700010ec:	681b      	ldr	r3, [r3, #0]
700010ee:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
700010f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
700010f4:	687b      	ldr	r3, [r7, #4]
700010f6:	681b      	ldr	r3, [r3, #0]
700010f8:	4618      	mov	r0, r3
700010fa:	f001 fbbf 	bl	7000287c <USB_ReadInterrupts>
700010fe:	4603      	mov	r3, r0
70001100:	f003 0304 	and.w	r3, r3, #4
70001104:	2b04      	cmp	r3, #4
70001106:	d115      	bne.n	70001134 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
70001108:	687b      	ldr	r3, [r7, #4]
7000110a:	681b      	ldr	r3, [r3, #0]
7000110c:	685b      	ldr	r3, [r3, #4]
7000110e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
70001110:	69bb      	ldr	r3, [r7, #24]
70001112:	f003 0304 	and.w	r3, r3, #4
70001116:	2b00      	cmp	r3, #0
70001118:	d002      	beq.n	70001120 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
7000111a:	6878      	ldr	r0, [r7, #4]
7000111c:	f002 ffa2 	bl	70004064 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
70001120:	687b      	ldr	r3, [r7, #4]
70001122:	681b      	ldr	r3, [r3, #0]
70001124:	6859      	ldr	r1, [r3, #4]
70001126:	687b      	ldr	r3, [r7, #4]
70001128:	681b      	ldr	r3, [r3, #0]
7000112a:	69ba      	ldr	r2, [r7, #24]
7000112c:	430a      	orrs	r2, r1
7000112e:	605a      	str	r2, [r3, #4]
70001130:	e000      	b.n	70001134 <HAL_PCD_IRQHandler+0x996>
      return;
70001132:	bf00      	nop
    }
  }
}
70001134:	3734      	adds	r7, #52	@ 0x34
70001136:	46bd      	mov	sp, r7
70001138:	bd90      	pop	{r4, r7, pc}

7000113a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
7000113a:	b580      	push	{r7, lr}
7000113c:	b082      	sub	sp, #8
7000113e:	af00      	add	r7, sp, #0
70001140:	6078      	str	r0, [r7, #4]
70001142:	460b      	mov	r3, r1
70001144:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
70001146:	687b      	ldr	r3, [r7, #4]
70001148:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
7000114c:	2b01      	cmp	r3, #1
7000114e:	d101      	bne.n	70001154 <HAL_PCD_SetAddress+0x1a>
70001150:	2302      	movs	r3, #2
70001152:	e012      	b.n	7000117a <HAL_PCD_SetAddress+0x40>
70001154:	687b      	ldr	r3, [r7, #4]
70001156:	2201      	movs	r2, #1
70001158:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
7000115c:	687b      	ldr	r3, [r7, #4]
7000115e:	78fa      	ldrb	r2, [r7, #3]
70001160:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
70001162:	687b      	ldr	r3, [r7, #4]
70001164:	681b      	ldr	r3, [r3, #0]
70001166:	78fa      	ldrb	r2, [r7, #3]
70001168:	4611      	mov	r1, r2
7000116a:	4618      	mov	r0, r3
7000116c:	f001 fb60 	bl	70002830 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
70001170:	687b      	ldr	r3, [r7, #4]
70001172:	2200      	movs	r2, #0
70001174:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
70001178:	2300      	movs	r3, #0
}
7000117a:	4618      	mov	r0, r3
7000117c:	3708      	adds	r7, #8
7000117e:	46bd      	mov	sp, r7
70001180:	bd80      	pop	{r7, pc}

70001182 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
70001182:	b580      	push	{r7, lr}
70001184:	b084      	sub	sp, #16
70001186:	af00      	add	r7, sp, #0
70001188:	6078      	str	r0, [r7, #4]
7000118a:	4608      	mov	r0, r1
7000118c:	4611      	mov	r1, r2
7000118e:	461a      	mov	r2, r3
70001190:	4603      	mov	r3, r0
70001192:	70fb      	strb	r3, [r7, #3]
70001194:	460b      	mov	r3, r1
70001196:	803b      	strh	r3, [r7, #0]
70001198:	4613      	mov	r3, r2
7000119a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
7000119c:	2300      	movs	r3, #0
7000119e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
700011a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
700011a4:	2b00      	cmp	r3, #0
700011a6:	da0f      	bge.n	700011c8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700011a8:	78fb      	ldrb	r3, [r7, #3]
700011aa:	f003 020f 	and.w	r2, r3, #15
700011ae:	4613      	mov	r3, r2
700011b0:	00db      	lsls	r3, r3, #3
700011b2:	4413      	add	r3, r2
700011b4:	009b      	lsls	r3, r3, #2
700011b6:	3310      	adds	r3, #16
700011b8:	687a      	ldr	r2, [r7, #4]
700011ba:	4413      	add	r3, r2
700011bc:	3304      	adds	r3, #4
700011be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
700011c0:	68fb      	ldr	r3, [r7, #12]
700011c2:	2201      	movs	r2, #1
700011c4:	705a      	strb	r2, [r3, #1]
700011c6:	e00f      	b.n	700011e8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
700011c8:	78fb      	ldrb	r3, [r7, #3]
700011ca:	f003 020f 	and.w	r2, r3, #15
700011ce:	4613      	mov	r3, r2
700011d0:	00db      	lsls	r3, r3, #3
700011d2:	4413      	add	r3, r2
700011d4:	009b      	lsls	r3, r3, #2
700011d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700011da:	687a      	ldr	r2, [r7, #4]
700011dc:	4413      	add	r3, r2
700011de:	3304      	adds	r3, #4
700011e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
700011e2:	68fb      	ldr	r3, [r7, #12]
700011e4:	2200      	movs	r2, #0
700011e6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
700011e8:	78fb      	ldrb	r3, [r7, #3]
700011ea:	f003 030f 	and.w	r3, r3, #15
700011ee:	b2da      	uxtb	r2, r3
700011f0:	68fb      	ldr	r3, [r7, #12]
700011f2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
700011f4:	883b      	ldrh	r3, [r7, #0]
700011f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
700011fa:	68fb      	ldr	r3, [r7, #12]
700011fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
700011fe:	68fb      	ldr	r3, [r7, #12]
70001200:	78ba      	ldrb	r2, [r7, #2]
70001202:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
70001204:	68fb      	ldr	r3, [r7, #12]
70001206:	785b      	ldrb	r3, [r3, #1]
70001208:	2b00      	cmp	r3, #0
7000120a:	d004      	beq.n	70001216 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
7000120c:	68fb      	ldr	r3, [r7, #12]
7000120e:	781b      	ldrb	r3, [r3, #0]
70001210:	461a      	mov	r2, r3
70001212:	68fb      	ldr	r3, [r7, #12]
70001214:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
70001216:	78bb      	ldrb	r3, [r7, #2]
70001218:	2b02      	cmp	r3, #2
7000121a:	d102      	bne.n	70001222 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
7000121c:	68fb      	ldr	r3, [r7, #12]
7000121e:	2200      	movs	r2, #0
70001220:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
70001222:	687b      	ldr	r3, [r7, #4]
70001224:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70001228:	2b01      	cmp	r3, #1
7000122a:	d101      	bne.n	70001230 <HAL_PCD_EP_Open+0xae>
7000122c:	2302      	movs	r3, #2
7000122e:	e00e      	b.n	7000124e <HAL_PCD_EP_Open+0xcc>
70001230:	687b      	ldr	r3, [r7, #4]
70001232:	2201      	movs	r2, #1
70001234:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
70001238:	687b      	ldr	r3, [r7, #4]
7000123a:	681b      	ldr	r3, [r3, #0]
7000123c:	68f9      	ldr	r1, [r7, #12]
7000123e:	4618      	mov	r0, r3
70001240:	f000 fdb6 	bl	70001db0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
70001244:	687b      	ldr	r3, [r7, #4]
70001246:	2200      	movs	r2, #0
70001248:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
7000124c:	7afb      	ldrb	r3, [r7, #11]
}
7000124e:	4618      	mov	r0, r3
70001250:	3710      	adds	r7, #16
70001252:	46bd      	mov	sp, r7
70001254:	bd80      	pop	{r7, pc}

70001256 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
70001256:	b580      	push	{r7, lr}
70001258:	b086      	sub	sp, #24
7000125a:	af00      	add	r7, sp, #0
7000125c:	60f8      	str	r0, [r7, #12]
7000125e:	607a      	str	r2, [r7, #4]
70001260:	603b      	str	r3, [r7, #0]
70001262:	460b      	mov	r3, r1
70001264:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
70001266:	7afb      	ldrb	r3, [r7, #11]
70001268:	f003 020f 	and.w	r2, r3, #15
7000126c:	4613      	mov	r3, r2
7000126e:	00db      	lsls	r3, r3, #3
70001270:	4413      	add	r3, r2
70001272:	009b      	lsls	r3, r3, #2
70001274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70001278:	68fa      	ldr	r2, [r7, #12]
7000127a:	4413      	add	r3, r2
7000127c:	3304      	adds	r3, #4
7000127e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
70001280:	697b      	ldr	r3, [r7, #20]
70001282:	687a      	ldr	r2, [r7, #4]
70001284:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
70001286:	697b      	ldr	r3, [r7, #20]
70001288:	683a      	ldr	r2, [r7, #0]
7000128a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
7000128c:	697b      	ldr	r3, [r7, #20]
7000128e:	2200      	movs	r2, #0
70001290:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
70001292:	697b      	ldr	r3, [r7, #20]
70001294:	2200      	movs	r2, #0
70001296:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
70001298:	7afb      	ldrb	r3, [r7, #11]
7000129a:	f003 030f 	and.w	r3, r3, #15
7000129e:	b2da      	uxtb	r2, r3
700012a0:	697b      	ldr	r3, [r7, #20]
700012a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
700012a4:	68fb      	ldr	r3, [r7, #12]
700012a6:	799b      	ldrb	r3, [r3, #6]
700012a8:	2b01      	cmp	r3, #1
700012aa:	d102      	bne.n	700012b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
700012ac:	687a      	ldr	r2, [r7, #4]
700012ae:	697b      	ldr	r3, [r7, #20]
700012b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
700012b2:	68fb      	ldr	r3, [r7, #12]
700012b4:	6818      	ldr	r0, [r3, #0]
700012b6:	68fb      	ldr	r3, [r7, #12]
700012b8:	799b      	ldrb	r3, [r3, #6]
700012ba:	461a      	mov	r2, r3
700012bc:	6979      	ldr	r1, [r7, #20]
700012be:	f000 fdff 	bl	70001ec0 <USB_EPStartXfer>

  return HAL_OK;
700012c2:	2300      	movs	r3, #0
}
700012c4:	4618      	mov	r0, r3
700012c6:	3718      	adds	r7, #24
700012c8:	46bd      	mov	sp, r7
700012ca:	bd80      	pop	{r7, pc}

700012cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
700012cc:	b580      	push	{r7, lr}
700012ce:	b086      	sub	sp, #24
700012d0:	af00      	add	r7, sp, #0
700012d2:	60f8      	str	r0, [r7, #12]
700012d4:	607a      	str	r2, [r7, #4]
700012d6:	603b      	str	r3, [r7, #0]
700012d8:	460b      	mov	r3, r1
700012da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700012dc:	7afb      	ldrb	r3, [r7, #11]
700012de:	f003 020f 	and.w	r2, r3, #15
700012e2:	4613      	mov	r3, r2
700012e4:	00db      	lsls	r3, r3, #3
700012e6:	4413      	add	r3, r2
700012e8:	009b      	lsls	r3, r3, #2
700012ea:	3310      	adds	r3, #16
700012ec:	68fa      	ldr	r2, [r7, #12]
700012ee:	4413      	add	r3, r2
700012f0:	3304      	adds	r3, #4
700012f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
700012f4:	697b      	ldr	r3, [r7, #20]
700012f6:	687a      	ldr	r2, [r7, #4]
700012f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
700012fa:	697b      	ldr	r3, [r7, #20]
700012fc:	683a      	ldr	r2, [r7, #0]
700012fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
70001300:	697b      	ldr	r3, [r7, #20]
70001302:	2200      	movs	r2, #0
70001304:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
70001306:	697b      	ldr	r3, [r7, #20]
70001308:	2201      	movs	r2, #1
7000130a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
7000130c:	7afb      	ldrb	r3, [r7, #11]
7000130e:	f003 030f 	and.w	r3, r3, #15
70001312:	b2da      	uxtb	r2, r3
70001314:	697b      	ldr	r3, [r7, #20]
70001316:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
70001318:	68fb      	ldr	r3, [r7, #12]
7000131a:	799b      	ldrb	r3, [r3, #6]
7000131c:	2b01      	cmp	r3, #1
7000131e:	d102      	bne.n	70001326 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
70001320:	687a      	ldr	r2, [r7, #4]
70001322:	697b      	ldr	r3, [r7, #20]
70001324:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
70001326:	68fb      	ldr	r3, [r7, #12]
70001328:	6818      	ldr	r0, [r3, #0]
7000132a:	68fb      	ldr	r3, [r7, #12]
7000132c:	799b      	ldrb	r3, [r3, #6]
7000132e:	461a      	mov	r2, r3
70001330:	6979      	ldr	r1, [r7, #20]
70001332:	f000 fdc5 	bl	70001ec0 <USB_EPStartXfer>

  return HAL_OK;
70001336:	2300      	movs	r3, #0
}
70001338:	4618      	mov	r0, r3
7000133a:	3718      	adds	r7, #24
7000133c:	46bd      	mov	sp, r7
7000133e:	bd80      	pop	{r7, pc}

70001340 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
70001340:	b580      	push	{r7, lr}
70001342:	b084      	sub	sp, #16
70001344:	af00      	add	r7, sp, #0
70001346:	6078      	str	r0, [r7, #4]
70001348:	460b      	mov	r3, r1
7000134a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
7000134c:	78fb      	ldrb	r3, [r7, #3]
7000134e:	f003 030f 	and.w	r3, r3, #15
70001352:	687a      	ldr	r2, [r7, #4]
70001354:	7912      	ldrb	r2, [r2, #4]
70001356:	4293      	cmp	r3, r2
70001358:	d901      	bls.n	7000135e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
7000135a:	2301      	movs	r3, #1
7000135c:	e04f      	b.n	700013fe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
7000135e:	f997 3003 	ldrsb.w	r3, [r7, #3]
70001362:	2b00      	cmp	r3, #0
70001364:	da0f      	bge.n	70001386 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
70001366:	78fb      	ldrb	r3, [r7, #3]
70001368:	f003 020f 	and.w	r2, r3, #15
7000136c:	4613      	mov	r3, r2
7000136e:	00db      	lsls	r3, r3, #3
70001370:	4413      	add	r3, r2
70001372:	009b      	lsls	r3, r3, #2
70001374:	3310      	adds	r3, #16
70001376:	687a      	ldr	r2, [r7, #4]
70001378:	4413      	add	r3, r2
7000137a:	3304      	adds	r3, #4
7000137c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
7000137e:	68fb      	ldr	r3, [r7, #12]
70001380:	2201      	movs	r2, #1
70001382:	705a      	strb	r2, [r3, #1]
70001384:	e00d      	b.n	700013a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
70001386:	78fa      	ldrb	r2, [r7, #3]
70001388:	4613      	mov	r3, r2
7000138a:	00db      	lsls	r3, r3, #3
7000138c:	4413      	add	r3, r2
7000138e:	009b      	lsls	r3, r3, #2
70001390:	f503 7314 	add.w	r3, r3, #592	@ 0x250
70001394:	687a      	ldr	r2, [r7, #4]
70001396:	4413      	add	r3, r2
70001398:	3304      	adds	r3, #4
7000139a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
7000139c:	68fb      	ldr	r3, [r7, #12]
7000139e:	2200      	movs	r2, #0
700013a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
700013a2:	68fb      	ldr	r3, [r7, #12]
700013a4:	2201      	movs	r2, #1
700013a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
700013a8:	78fb      	ldrb	r3, [r7, #3]
700013aa:	f003 030f 	and.w	r3, r3, #15
700013ae:	b2da      	uxtb	r2, r3
700013b0:	68fb      	ldr	r3, [r7, #12]
700013b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
700013b4:	687b      	ldr	r3, [r7, #4]
700013b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
700013ba:	2b01      	cmp	r3, #1
700013bc:	d101      	bne.n	700013c2 <HAL_PCD_EP_SetStall+0x82>
700013be:	2302      	movs	r3, #2
700013c0:	e01d      	b.n	700013fe <HAL_PCD_EP_SetStall+0xbe>
700013c2:	687b      	ldr	r3, [r7, #4]
700013c4:	2201      	movs	r2, #1
700013c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
700013ca:	687b      	ldr	r3, [r7, #4]
700013cc:	681b      	ldr	r3, [r3, #0]
700013ce:	68f9      	ldr	r1, [r7, #12]
700013d0:	4618      	mov	r0, r3
700013d2:	f001 f959 	bl	70002688 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
700013d6:	78fb      	ldrb	r3, [r7, #3]
700013d8:	f003 030f 	and.w	r3, r3, #15
700013dc:	2b00      	cmp	r3, #0
700013de:	d109      	bne.n	700013f4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
700013e0:	687b      	ldr	r3, [r7, #4]
700013e2:	6818      	ldr	r0, [r3, #0]
700013e4:	687b      	ldr	r3, [r7, #4]
700013e6:	7999      	ldrb	r1, [r3, #6]
700013e8:	687b      	ldr	r3, [r7, #4]
700013ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
700013ee:	461a      	mov	r2, r3
700013f0:	f001 fb0a 	bl	70002a08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
700013f4:	687b      	ldr	r3, [r7, #4]
700013f6:	2200      	movs	r2, #0
700013f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
700013fc:	2300      	movs	r3, #0
}
700013fe:	4618      	mov	r0, r3
70001400:	3710      	adds	r7, #16
70001402:	46bd      	mov	sp, r7
70001404:	bd80      	pop	{r7, pc}

70001406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
70001406:	b580      	push	{r7, lr}
70001408:	b084      	sub	sp, #16
7000140a:	af00      	add	r7, sp, #0
7000140c:	6078      	str	r0, [r7, #4]
7000140e:	460b      	mov	r3, r1
70001410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
70001412:	78fb      	ldrb	r3, [r7, #3]
70001414:	f003 030f 	and.w	r3, r3, #15
70001418:	687a      	ldr	r2, [r7, #4]
7000141a:	7912      	ldrb	r2, [r2, #4]
7000141c:	4293      	cmp	r3, r2
7000141e:	d901      	bls.n	70001424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
70001420:	2301      	movs	r3, #1
70001422:	e042      	b.n	700014aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
70001424:	f997 3003 	ldrsb.w	r3, [r7, #3]
70001428:	2b00      	cmp	r3, #0
7000142a:	da0f      	bge.n	7000144c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
7000142c:	78fb      	ldrb	r3, [r7, #3]
7000142e:	f003 020f 	and.w	r2, r3, #15
70001432:	4613      	mov	r3, r2
70001434:	00db      	lsls	r3, r3, #3
70001436:	4413      	add	r3, r2
70001438:	009b      	lsls	r3, r3, #2
7000143a:	3310      	adds	r3, #16
7000143c:	687a      	ldr	r2, [r7, #4]
7000143e:	4413      	add	r3, r2
70001440:	3304      	adds	r3, #4
70001442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
70001444:	68fb      	ldr	r3, [r7, #12]
70001446:	2201      	movs	r2, #1
70001448:	705a      	strb	r2, [r3, #1]
7000144a:	e00f      	b.n	7000146c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
7000144c:	78fb      	ldrb	r3, [r7, #3]
7000144e:	f003 020f 	and.w	r2, r3, #15
70001452:	4613      	mov	r3, r2
70001454:	00db      	lsls	r3, r3, #3
70001456:	4413      	add	r3, r2
70001458:	009b      	lsls	r3, r3, #2
7000145a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
7000145e:	687a      	ldr	r2, [r7, #4]
70001460:	4413      	add	r3, r2
70001462:	3304      	adds	r3, #4
70001464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
70001466:	68fb      	ldr	r3, [r7, #12]
70001468:	2200      	movs	r2, #0
7000146a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
7000146c:	68fb      	ldr	r3, [r7, #12]
7000146e:	2200      	movs	r2, #0
70001470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
70001472:	78fb      	ldrb	r3, [r7, #3]
70001474:	f003 030f 	and.w	r3, r3, #15
70001478:	b2da      	uxtb	r2, r3
7000147a:	68fb      	ldr	r3, [r7, #12]
7000147c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
7000147e:	687b      	ldr	r3, [r7, #4]
70001480:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
70001484:	2b01      	cmp	r3, #1
70001486:	d101      	bne.n	7000148c <HAL_PCD_EP_ClrStall+0x86>
70001488:	2302      	movs	r3, #2
7000148a:	e00e      	b.n	700014aa <HAL_PCD_EP_ClrStall+0xa4>
7000148c:	687b      	ldr	r3, [r7, #4]
7000148e:	2201      	movs	r2, #1
70001490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
70001494:	687b      	ldr	r3, [r7, #4]
70001496:	681b      	ldr	r3, [r3, #0]
70001498:	68f9      	ldr	r1, [r7, #12]
7000149a:	4618      	mov	r0, r3
7000149c:	f001 f962 	bl	70002764 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
700014a0:	687b      	ldr	r3, [r7, #4]
700014a2:	2200      	movs	r2, #0
700014a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
700014a8:	2300      	movs	r3, #0
}
700014aa:	4618      	mov	r0, r3
700014ac:	3710      	adds	r7, #16
700014ae:	46bd      	mov	sp, r7
700014b0:	bd80      	pop	{r7, pc}

700014b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
700014b2:	b580      	push	{r7, lr}
700014b4:	b084      	sub	sp, #16
700014b6:	af00      	add	r7, sp, #0
700014b8:	6078      	str	r0, [r7, #4]
700014ba:	460b      	mov	r3, r1
700014bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
700014be:	f997 3003 	ldrsb.w	r3, [r7, #3]
700014c2:	2b00      	cmp	r3, #0
700014c4:	da0c      	bge.n	700014e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
700014c6:	78fb      	ldrb	r3, [r7, #3]
700014c8:	f003 020f 	and.w	r2, r3, #15
700014cc:	4613      	mov	r3, r2
700014ce:	00db      	lsls	r3, r3, #3
700014d0:	4413      	add	r3, r2
700014d2:	009b      	lsls	r3, r3, #2
700014d4:	3310      	adds	r3, #16
700014d6:	687a      	ldr	r2, [r7, #4]
700014d8:	4413      	add	r3, r2
700014da:	3304      	adds	r3, #4
700014dc:	60fb      	str	r3, [r7, #12]
700014de:	e00c      	b.n	700014fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
700014e0:	78fb      	ldrb	r3, [r7, #3]
700014e2:	f003 020f 	and.w	r2, r3, #15
700014e6:	4613      	mov	r3, r2
700014e8:	00db      	lsls	r3, r3, #3
700014ea:	4413      	add	r3, r2
700014ec:	009b      	lsls	r3, r3, #2
700014ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700014f2:	687a      	ldr	r2, [r7, #4]
700014f4:	4413      	add	r3, r2
700014f6:	3304      	adds	r3, #4
700014f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
700014fa:	687b      	ldr	r3, [r7, #4]
700014fc:	681b      	ldr	r3, [r3, #0]
700014fe:	68f9      	ldr	r1, [r7, #12]
70001500:	4618      	mov	r0, r3
70001502:	f000 ff81 	bl	70002408 <USB_EPStopXfer>
70001506:	4603      	mov	r3, r0
70001508:	72fb      	strb	r3, [r7, #11]

  return ret;
7000150a:	7afb      	ldrb	r3, [r7, #11]
}
7000150c:	4618      	mov	r0, r3
7000150e:	3710      	adds	r7, #16
70001510:	46bd      	mov	sp, r7
70001512:	bd80      	pop	{r7, pc}

70001514 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
70001514:	b580      	push	{r7, lr}
70001516:	b08a      	sub	sp, #40	@ 0x28
70001518:	af02      	add	r7, sp, #8
7000151a:	6078      	str	r0, [r7, #4]
7000151c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
7000151e:	687b      	ldr	r3, [r7, #4]
70001520:	681b      	ldr	r3, [r3, #0]
70001522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001524:	697b      	ldr	r3, [r7, #20]
70001526:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
70001528:	683a      	ldr	r2, [r7, #0]
7000152a:	4613      	mov	r3, r2
7000152c:	00db      	lsls	r3, r3, #3
7000152e:	4413      	add	r3, r2
70001530:	009b      	lsls	r3, r3, #2
70001532:	3310      	adds	r3, #16
70001534:	687a      	ldr	r2, [r7, #4]
70001536:	4413      	add	r3, r2
70001538:	3304      	adds	r3, #4
7000153a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
7000153c:	68fb      	ldr	r3, [r7, #12]
7000153e:	695a      	ldr	r2, [r3, #20]
70001540:	68fb      	ldr	r3, [r7, #12]
70001542:	691b      	ldr	r3, [r3, #16]
70001544:	429a      	cmp	r2, r3
70001546:	d901      	bls.n	7000154c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
70001548:	2301      	movs	r3, #1
7000154a:	e06b      	b.n	70001624 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
7000154c:	68fb      	ldr	r3, [r7, #12]
7000154e:	691a      	ldr	r2, [r3, #16]
70001550:	68fb      	ldr	r3, [r7, #12]
70001552:	695b      	ldr	r3, [r3, #20]
70001554:	1ad3      	subs	r3, r2, r3
70001556:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
70001558:	68fb      	ldr	r3, [r7, #12]
7000155a:	689b      	ldr	r3, [r3, #8]
7000155c:	69fa      	ldr	r2, [r7, #28]
7000155e:	429a      	cmp	r2, r3
70001560:	d902      	bls.n	70001568 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
70001562:	68fb      	ldr	r3, [r7, #12]
70001564:	689b      	ldr	r3, [r3, #8]
70001566:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
70001568:	69fb      	ldr	r3, [r7, #28]
7000156a:	3303      	adds	r3, #3
7000156c:	089b      	lsrs	r3, r3, #2
7000156e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
70001570:	e02a      	b.n	700015c8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
70001572:	68fb      	ldr	r3, [r7, #12]
70001574:	691a      	ldr	r2, [r3, #16]
70001576:	68fb      	ldr	r3, [r7, #12]
70001578:	695b      	ldr	r3, [r3, #20]
7000157a:	1ad3      	subs	r3, r2, r3
7000157c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
7000157e:	68fb      	ldr	r3, [r7, #12]
70001580:	689b      	ldr	r3, [r3, #8]
70001582:	69fa      	ldr	r2, [r7, #28]
70001584:	429a      	cmp	r2, r3
70001586:	d902      	bls.n	7000158e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
70001588:	68fb      	ldr	r3, [r7, #12]
7000158a:	689b      	ldr	r3, [r3, #8]
7000158c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
7000158e:	69fb      	ldr	r3, [r7, #28]
70001590:	3303      	adds	r3, #3
70001592:	089b      	lsrs	r3, r3, #2
70001594:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
70001596:	68fb      	ldr	r3, [r7, #12]
70001598:	68d9      	ldr	r1, [r3, #12]
7000159a:	683b      	ldr	r3, [r7, #0]
7000159c:	b2da      	uxtb	r2, r3
7000159e:	69fb      	ldr	r3, [r7, #28]
700015a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
700015a2:	687b      	ldr	r3, [r7, #4]
700015a4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
700015a6:	9300      	str	r3, [sp, #0]
700015a8:	4603      	mov	r3, r0
700015aa:	6978      	ldr	r0, [r7, #20]
700015ac:	f000 ffd6 	bl	7000255c <USB_WritePacket>

    ep->xfer_buff  += len;
700015b0:	68fb      	ldr	r3, [r7, #12]
700015b2:	68da      	ldr	r2, [r3, #12]
700015b4:	69fb      	ldr	r3, [r7, #28]
700015b6:	441a      	add	r2, r3
700015b8:	68fb      	ldr	r3, [r7, #12]
700015ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
700015bc:	68fb      	ldr	r3, [r7, #12]
700015be:	695a      	ldr	r2, [r3, #20]
700015c0:	69fb      	ldr	r3, [r7, #28]
700015c2:	441a      	add	r2, r3
700015c4:	68fb      	ldr	r3, [r7, #12]
700015c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
700015c8:	683b      	ldr	r3, [r7, #0]
700015ca:	015a      	lsls	r2, r3, #5
700015cc:	693b      	ldr	r3, [r7, #16]
700015ce:	4413      	add	r3, r2
700015d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700015d4:	699b      	ldr	r3, [r3, #24]
700015d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
700015d8:	69ba      	ldr	r2, [r7, #24]
700015da:	429a      	cmp	r2, r3
700015dc:	d809      	bhi.n	700015f2 <PCD_WriteEmptyTxFifo+0xde>
700015de:	68fb      	ldr	r3, [r7, #12]
700015e0:	695a      	ldr	r2, [r3, #20]
700015e2:	68fb      	ldr	r3, [r7, #12]
700015e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
700015e6:	429a      	cmp	r2, r3
700015e8:	d203      	bcs.n	700015f2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
700015ea:	68fb      	ldr	r3, [r7, #12]
700015ec:	691b      	ldr	r3, [r3, #16]
700015ee:	2b00      	cmp	r3, #0
700015f0:	d1bf      	bne.n	70001572 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
700015f2:	68fb      	ldr	r3, [r7, #12]
700015f4:	691a      	ldr	r2, [r3, #16]
700015f6:	68fb      	ldr	r3, [r7, #12]
700015f8:	695b      	ldr	r3, [r3, #20]
700015fa:	429a      	cmp	r2, r3
700015fc:	d811      	bhi.n	70001622 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
700015fe:	683b      	ldr	r3, [r7, #0]
70001600:	f003 030f 	and.w	r3, r3, #15
70001604:	2201      	movs	r2, #1
70001606:	fa02 f303 	lsl.w	r3, r2, r3
7000160a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
7000160c:	693b      	ldr	r3, [r7, #16]
7000160e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001612:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70001614:	68bb      	ldr	r3, [r7, #8]
70001616:	43db      	mvns	r3, r3
70001618:	6939      	ldr	r1, [r7, #16]
7000161a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000161e:	4013      	ands	r3, r2
70001620:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
70001622:	2300      	movs	r3, #0
}
70001624:	4618      	mov	r0, r3
70001626:	3720      	adds	r7, #32
70001628:	46bd      	mov	sp, r7
7000162a:	bd80      	pop	{r7, pc}

7000162c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
7000162c:	b580      	push	{r7, lr}
7000162e:	b088      	sub	sp, #32
70001630:	af00      	add	r7, sp, #0
70001632:	6078      	str	r0, [r7, #4]
70001634:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70001636:	687b      	ldr	r3, [r7, #4]
70001638:	681b      	ldr	r3, [r3, #0]
7000163a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000163c:	69fb      	ldr	r3, [r7, #28]
7000163e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70001640:	69fb      	ldr	r3, [r7, #28]
70001642:	333c      	adds	r3, #60	@ 0x3c
70001644:	3304      	adds	r3, #4
70001646:	681b      	ldr	r3, [r3, #0]
70001648:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
7000164a:	683b      	ldr	r3, [r7, #0]
7000164c:	015a      	lsls	r2, r3, #5
7000164e:	69bb      	ldr	r3, [r7, #24]
70001650:	4413      	add	r3, r2
70001652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001656:	689b      	ldr	r3, [r3, #8]
70001658:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
7000165a:	687b      	ldr	r3, [r7, #4]
7000165c:	799b      	ldrb	r3, [r3, #6]
7000165e:	2b01      	cmp	r3, #1
70001660:	d17b      	bne.n	7000175a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
70001662:	693b      	ldr	r3, [r7, #16]
70001664:	f003 0308 	and.w	r3, r3, #8
70001668:	2b00      	cmp	r3, #0
7000166a:	d015      	beq.n	70001698 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
7000166c:	697b      	ldr	r3, [r7, #20]
7000166e:	4a61      	ldr	r2, [pc, #388]	@ (700017f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
70001670:	4293      	cmp	r3, r2
70001672:	f240 80b9 	bls.w	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
70001676:	693b      	ldr	r3, [r7, #16]
70001678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
7000167c:	2b00      	cmp	r3, #0
7000167e:	f000 80b3 	beq.w	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
70001682:	683b      	ldr	r3, [r7, #0]
70001684:	015a      	lsls	r2, r3, #5
70001686:	69bb      	ldr	r3, [r7, #24]
70001688:	4413      	add	r3, r2
7000168a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000168e:	461a      	mov	r2, r3
70001690:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
70001694:	6093      	str	r3, [r2, #8]
70001696:	e0a7      	b.n	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
70001698:	693b      	ldr	r3, [r7, #16]
7000169a:	f003 0320 	and.w	r3, r3, #32
7000169e:	2b00      	cmp	r3, #0
700016a0:	d009      	beq.n	700016b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
700016a2:	683b      	ldr	r3, [r7, #0]
700016a4:	015a      	lsls	r2, r3, #5
700016a6:	69bb      	ldr	r3, [r7, #24]
700016a8:	4413      	add	r3, r2
700016aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700016ae:	461a      	mov	r2, r3
700016b0:	2320      	movs	r3, #32
700016b2:	6093      	str	r3, [r2, #8]
700016b4:	e098      	b.n	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
700016b6:	693b      	ldr	r3, [r7, #16]
700016b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
700016bc:	2b00      	cmp	r3, #0
700016be:	f040 8093 	bne.w	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
700016c2:	697b      	ldr	r3, [r7, #20]
700016c4:	4a4b      	ldr	r2, [pc, #300]	@ (700017f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
700016c6:	4293      	cmp	r3, r2
700016c8:	d90f      	bls.n	700016ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
700016ca:	693b      	ldr	r3, [r7, #16]
700016cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
700016d0:	2b00      	cmp	r3, #0
700016d2:	d00a      	beq.n	700016ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
700016d4:	683b      	ldr	r3, [r7, #0]
700016d6:	015a      	lsls	r2, r3, #5
700016d8:	69bb      	ldr	r3, [r7, #24]
700016da:	4413      	add	r3, r2
700016dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700016e0:	461a      	mov	r2, r3
700016e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
700016e6:	6093      	str	r3, [r2, #8]
700016e8:	e07e      	b.n	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
700016ea:	683a      	ldr	r2, [r7, #0]
700016ec:	4613      	mov	r3, r2
700016ee:	00db      	lsls	r3, r3, #3
700016f0:	4413      	add	r3, r2
700016f2:	009b      	lsls	r3, r3, #2
700016f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
700016f8:	687a      	ldr	r2, [r7, #4]
700016fa:	4413      	add	r3, r2
700016fc:	3304      	adds	r3, #4
700016fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
70001700:	68fb      	ldr	r3, [r7, #12]
70001702:	6a1a      	ldr	r2, [r3, #32]
70001704:	683b      	ldr	r3, [r7, #0]
70001706:	0159      	lsls	r1, r3, #5
70001708:	69bb      	ldr	r3, [r7, #24]
7000170a:	440b      	add	r3, r1
7000170c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001710:	691b      	ldr	r3, [r3, #16]
70001712:	f3c3 0312 	ubfx	r3, r3, #0, #19
70001716:	1ad2      	subs	r2, r2, r3
70001718:	68fb      	ldr	r3, [r7, #12]
7000171a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
7000171c:	683b      	ldr	r3, [r7, #0]
7000171e:	2b00      	cmp	r3, #0
70001720:	d114      	bne.n	7000174c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
70001722:	68fb      	ldr	r3, [r7, #12]
70001724:	691b      	ldr	r3, [r3, #16]
70001726:	2b00      	cmp	r3, #0
70001728:	d109      	bne.n	7000173e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
7000172a:	687b      	ldr	r3, [r7, #4]
7000172c:	6818      	ldr	r0, [r3, #0]
7000172e:	687b      	ldr	r3, [r7, #4]
70001730:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70001734:	461a      	mov	r2, r3
70001736:	2101      	movs	r1, #1
70001738:	f001 f966 	bl	70002a08 <USB_EP0_OutStart>
7000173c:	e006      	b.n	7000174c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
7000173e:	68fb      	ldr	r3, [r7, #12]
70001740:	68da      	ldr	r2, [r3, #12]
70001742:	68fb      	ldr	r3, [r7, #12]
70001744:	695b      	ldr	r3, [r3, #20]
70001746:	441a      	add	r2, r3
70001748:	68fb      	ldr	r3, [r7, #12]
7000174a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
7000174c:	683b      	ldr	r3, [r7, #0]
7000174e:	b2db      	uxtb	r3, r3
70001750:	4619      	mov	r1, r3
70001752:	6878      	ldr	r0, [r7, #4]
70001754:	f002 fba5 	bl	70003ea2 <HAL_PCD_DataOutStageCallback>
70001758:	e046      	b.n	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
7000175a:	697b      	ldr	r3, [r7, #20]
7000175c:	4a26      	ldr	r2, [pc, #152]	@ (700017f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
7000175e:	4293      	cmp	r3, r2
70001760:	d124      	bne.n	700017ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
70001762:	693b      	ldr	r3, [r7, #16]
70001764:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70001768:	2b00      	cmp	r3, #0
7000176a:	d00a      	beq.n	70001782 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
7000176c:	683b      	ldr	r3, [r7, #0]
7000176e:	015a      	lsls	r2, r3, #5
70001770:	69bb      	ldr	r3, [r7, #24]
70001772:	4413      	add	r3, r2
70001774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001778:	461a      	mov	r2, r3
7000177a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
7000177e:	6093      	str	r3, [r2, #8]
70001780:	e032      	b.n	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
70001782:	693b      	ldr	r3, [r7, #16]
70001784:	f003 0320 	and.w	r3, r3, #32
70001788:	2b00      	cmp	r3, #0
7000178a:	d008      	beq.n	7000179e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
7000178c:	683b      	ldr	r3, [r7, #0]
7000178e:	015a      	lsls	r2, r3, #5
70001790:	69bb      	ldr	r3, [r7, #24]
70001792:	4413      	add	r3, r2
70001794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001798:	461a      	mov	r2, r3
7000179a:	2320      	movs	r3, #32
7000179c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
7000179e:	683b      	ldr	r3, [r7, #0]
700017a0:	b2db      	uxtb	r3, r3
700017a2:	4619      	mov	r1, r3
700017a4:	6878      	ldr	r0, [r7, #4]
700017a6:	f002 fb7c 	bl	70003ea2 <HAL_PCD_DataOutStageCallback>
700017aa:	e01d      	b.n	700017e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
700017ac:	683b      	ldr	r3, [r7, #0]
700017ae:	2b00      	cmp	r3, #0
700017b0:	d114      	bne.n	700017dc <PCD_EP_OutXfrComplete_int+0x1b0>
700017b2:	6879      	ldr	r1, [r7, #4]
700017b4:	683a      	ldr	r2, [r7, #0]
700017b6:	4613      	mov	r3, r2
700017b8:	00db      	lsls	r3, r3, #3
700017ba:	4413      	add	r3, r2
700017bc:	009b      	lsls	r3, r3, #2
700017be:	440b      	add	r3, r1
700017c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
700017c4:	681b      	ldr	r3, [r3, #0]
700017c6:	2b00      	cmp	r3, #0
700017c8:	d108      	bne.n	700017dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
700017ca:	687b      	ldr	r3, [r7, #4]
700017cc:	6818      	ldr	r0, [r3, #0]
700017ce:	687b      	ldr	r3, [r7, #4]
700017d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
700017d4:	461a      	mov	r2, r3
700017d6:	2100      	movs	r1, #0
700017d8:	f001 f916 	bl	70002a08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
700017dc:	683b      	ldr	r3, [r7, #0]
700017de:	b2db      	uxtb	r3, r3
700017e0:	4619      	mov	r1, r3
700017e2:	6878      	ldr	r0, [r7, #4]
700017e4:	f002 fb5d 	bl	70003ea2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
700017e8:	2300      	movs	r3, #0
}
700017ea:	4618      	mov	r0, r3
700017ec:	3720      	adds	r7, #32
700017ee:	46bd      	mov	sp, r7
700017f0:	bd80      	pop	{r7, pc}
700017f2:	bf00      	nop
700017f4:	4f54300a 	.word	0x4f54300a
700017f8:	4f54310a 	.word	0x4f54310a

700017fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
700017fc:	b580      	push	{r7, lr}
700017fe:	b086      	sub	sp, #24
70001800:	af00      	add	r7, sp, #0
70001802:	6078      	str	r0, [r7, #4]
70001804:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
70001806:	687b      	ldr	r3, [r7, #4]
70001808:	681b      	ldr	r3, [r3, #0]
7000180a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000180c:	697b      	ldr	r3, [r7, #20]
7000180e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70001810:	697b      	ldr	r3, [r7, #20]
70001812:	333c      	adds	r3, #60	@ 0x3c
70001814:	3304      	adds	r3, #4
70001816:	681b      	ldr	r3, [r3, #0]
70001818:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
7000181a:	683b      	ldr	r3, [r7, #0]
7000181c:	015a      	lsls	r2, r3, #5
7000181e:	693b      	ldr	r3, [r7, #16]
70001820:	4413      	add	r3, r2
70001822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001826:	689b      	ldr	r3, [r3, #8]
70001828:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
7000182a:	68fb      	ldr	r3, [r7, #12]
7000182c:	4a15      	ldr	r2, [pc, #84]	@ (70001884 <PCD_EP_OutSetupPacket_int+0x88>)
7000182e:	4293      	cmp	r3, r2
70001830:	d90e      	bls.n	70001850 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
70001832:	68bb      	ldr	r3, [r7, #8]
70001834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
70001838:	2b00      	cmp	r3, #0
7000183a:	d009      	beq.n	70001850 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
7000183c:	683b      	ldr	r3, [r7, #0]
7000183e:	015a      	lsls	r2, r3, #5
70001840:	693b      	ldr	r3, [r7, #16]
70001842:	4413      	add	r3, r2
70001844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001848:	461a      	mov	r2, r3
7000184a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
7000184e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
70001850:	6878      	ldr	r0, [r7, #4]
70001852:	f002 fb14 	bl	70003e7e <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
70001856:	68fb      	ldr	r3, [r7, #12]
70001858:	4a0a      	ldr	r2, [pc, #40]	@ (70001884 <PCD_EP_OutSetupPacket_int+0x88>)
7000185a:	4293      	cmp	r3, r2
7000185c:	d90c      	bls.n	70001878 <PCD_EP_OutSetupPacket_int+0x7c>
7000185e:	687b      	ldr	r3, [r7, #4]
70001860:	799b      	ldrb	r3, [r3, #6]
70001862:	2b01      	cmp	r3, #1
70001864:	d108      	bne.n	70001878 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
70001866:	687b      	ldr	r3, [r7, #4]
70001868:	6818      	ldr	r0, [r3, #0]
7000186a:	687b      	ldr	r3, [r7, #4]
7000186c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70001870:	461a      	mov	r2, r3
70001872:	2101      	movs	r1, #1
70001874:	f001 f8c8 	bl	70002a08 <USB_EP0_OutStart>
  }

  return HAL_OK;
70001878:	2300      	movs	r3, #0
}
7000187a:	4618      	mov	r0, r3
7000187c:	3718      	adds	r7, #24
7000187e:	46bd      	mov	sp, r7
70001880:	bd80      	pop	{r7, pc}
70001882:	bf00      	nop
70001884:	4f54300a 	.word	0x4f54300a

70001888 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
70001888:	b480      	push	{r7}
7000188a:	b083      	sub	sp, #12
7000188c:	af00      	add	r7, sp, #0
7000188e:	6078      	str	r0, [r7, #4]
70001890:	460b      	mov	r3, r1
70001892:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
70001894:	bf00      	nop
70001896:	370c      	adds	r7, #12
70001898:	46bd      	mov	sp, r7
7000189a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000189e:	4770      	bx	lr

700018a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
700018a0:	b480      	push	{r7}
700018a2:	b08b      	sub	sp, #44	@ 0x2c
700018a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t prescaler;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
700018a6:	4baa      	ldr	r3, [pc, #680]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
700018a8:	691b      	ldr	r3, [r3, #16]
700018aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
700018ae:	2b18      	cmp	r3, #24
700018b0:	f200 8136 	bhi.w	70001b20 <HAL_RCC_GetSysClockFreq+0x280>
700018b4:	a201      	add	r2, pc, #4	@ (adr r2, 700018bc <HAL_RCC_GetSysClockFreq+0x1c>)
700018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700018ba:	bf00      	nop
700018bc:	70001921 	.word	0x70001921
700018c0:	70001b21 	.word	0x70001b21
700018c4:	70001b21 	.word	0x70001b21
700018c8:	70001b21 	.word	0x70001b21
700018cc:	70001b21 	.word	0x70001b21
700018d0:	70001b21 	.word	0x70001b21
700018d4:	70001b21 	.word	0x70001b21
700018d8:	70001b21 	.word	0x70001b21
700018dc:	70001947 	.word	0x70001947
700018e0:	70001b21 	.word	0x70001b21
700018e4:	70001b21 	.word	0x70001b21
700018e8:	70001b21 	.word	0x70001b21
700018ec:	70001b21 	.word	0x70001b21
700018f0:	70001b21 	.word	0x70001b21
700018f4:	70001b21 	.word	0x70001b21
700018f8:	70001b21 	.word	0x70001b21
700018fc:	7000194d 	.word	0x7000194d
70001900:	70001b21 	.word	0x70001b21
70001904:	70001b21 	.word	0x70001b21
70001908:	70001b21 	.word	0x70001b21
7000190c:	70001b21 	.word	0x70001b21
70001910:	70001b21 	.word	0x70001b21
70001914:	70001b21 	.word	0x70001b21
70001918:	70001b21 	.word	0x70001b21
7000191c:	70001953 	.word	0x70001953
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */

      if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
70001920:	4b8b      	ldr	r3, [pc, #556]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001922:	681b      	ldr	r3, [r3, #0]
70001924:	f003 0320 	and.w	r3, r3, #32
70001928:	2b00      	cmp	r3, #0
7000192a:	d009      	beq.n	70001940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
7000192c:	4b88      	ldr	r3, [pc, #544]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000192e:	681b      	ldr	r3, [r3, #0]
70001930:	08db      	lsrs	r3, r3, #3
70001932:	f003 0303 	and.w	r3, r3, #3
70001936:	4a87      	ldr	r2, [pc, #540]	@ (70001b54 <HAL_RCC_GetSysClockFreq+0x2b4>)
70001938:	fa22 f303 	lsr.w	r3, r2, r3
7000193c:	623b      	str	r3, [r7, #32]
      {
        /* Can't retrieve HSIDIV value */
        sysclockfreq = 0U;
      }

      break;
7000193e:	e0f2      	b.n	70001b26 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70001940:	2300      	movs	r3, #0
70001942:	623b      	str	r3, [r7, #32]
      break;
70001944:	e0ef      	b.n	70001b26 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
70001946:	4b84      	ldr	r3, [pc, #528]	@ (70001b58 <HAL_RCC_GetSysClockFreq+0x2b8>)
70001948:	623b      	str	r3, [r7, #32]
      break;
7000194a:	e0ec      	b.n	70001b26 <HAL_RCC_GetSysClockFreq+0x286>

    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
7000194c:	4b83      	ldr	r3, [pc, #524]	@ (70001b5c <HAL_RCC_GetSysClockFreq+0x2bc>)
7000194e:	623b      	str	r3, [r7, #32]
      break;
70001950:	e0e9      	b.n	70001b26 <HAL_RCC_GetSysClockFreq+0x286>
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
70001952:	4b7f      	ldr	r3, [pc, #508]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70001956:	f003 0303 	and.w	r3, r3, #3
7000195a:	61fb      	str	r3, [r7, #28]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos)  ;
7000195c:	4b7c      	ldr	r3, [pc, #496]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70001960:	091b      	lsrs	r3, r3, #4
70001962:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
70001966:	61bb      	str	r3, [r7, #24]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
70001968:	4b79      	ldr	r3, [pc, #484]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
7000196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
7000196c:	f003 0301 	and.w	r3, r3, #1
70001970:	617b      	str	r3, [r7, #20]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN) >> 3));
70001972:	4b77      	ldr	r3, [pc, #476]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70001976:	08db      	lsrs	r3, r3, #3
70001978:	f3c3 030c 	ubfx	r3, r3, #0, #13
7000197c:	697a      	ldr	r2, [r7, #20]
7000197e:	fb02 f303 	mul.w	r3, r2, r3
70001982:	ee07 3a90 	vmov	s15, r3
70001986:	eef8 7a67 	vcvt.f32.u32	s15, s15
7000198a:	edc7 7a04 	vstr	s15, [r7, #16]

      if (pllm != 0U)
7000198e:	69bb      	ldr	r3, [r7, #24]
70001990:	2b00      	cmp	r3, #0
70001992:	f000 80c2 	beq.w	70001b1a <HAL_RCC_GetSysClockFreq+0x27a>
      {
        switch (pllsource)
70001996:	69fb      	ldr	r3, [r7, #28]
70001998:	2b02      	cmp	r3, #2
7000199a:	d064      	beq.n	70001a66 <HAL_RCC_GetSysClockFreq+0x1c6>
7000199c:	69fb      	ldr	r3, [r7, #28]
7000199e:	2b02      	cmp	r3, #2
700019a0:	f200 8083 	bhi.w	70001aaa <HAL_RCC_GetSysClockFreq+0x20a>
700019a4:	69fb      	ldr	r3, [r7, #28]
700019a6:	2b00      	cmp	r3, #0
700019a8:	d003      	beq.n	700019b2 <HAL_RCC_GetSysClockFreq+0x112>
700019aa:	69fb      	ldr	r3, [r7, #28]
700019ac:	2b01      	cmp	r3, #1
700019ae:	d038      	beq.n	70001a22 <HAL_RCC_GetSysClockFreq+0x182>
700019b0:	e07b      	b.n	70001aaa <HAL_RCC_GetSysClockFreq+0x20a>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (READ_BIT(RCC->CR, RCC_CR_HSIDIVF) != 0U)
700019b2:	4b67      	ldr	r3, [pc, #412]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
700019b4:	681b      	ldr	r3, [r3, #0]
700019b6:	f003 0320 	and.w	r3, r3, #32
700019ba:	2b00      	cmp	r3, #0
700019bc:	d02d      	beq.n	70001a1a <HAL_RCC_GetSysClockFreq+0x17a>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
700019be:	4b64      	ldr	r3, [pc, #400]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
700019c0:	681b      	ldr	r3, [r3, #0]
700019c2:	08db      	lsrs	r3, r3, #3
700019c4:	f003 0303 	and.w	r3, r3, #3
700019c8:	4a62      	ldr	r2, [pc, #392]	@ (70001b54 <HAL_RCC_GetSysClockFreq+0x2b4>)
700019ca:	fa22 f303 	lsr.w	r3, r2, r3
700019ce:	60fb      	str	r3, [r7, #12]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
700019d0:	68fb      	ldr	r3, [r7, #12]
700019d2:	ee07 3a90 	vmov	s15, r3
700019d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
700019da:	69bb      	ldr	r3, [r7, #24]
700019dc:	ee07 3a90 	vmov	s15, r3
700019e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
700019e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
700019e8:	4b59      	ldr	r3, [pc, #356]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
700019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
700019ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
700019f0:	ee07 3a90 	vmov	s15, r3
700019f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
700019f8:	ed97 6a04 	vldr	s12, [r7, #16]
700019fc:	eddf 5a58 	vldr	s11, [pc, #352]	@ 70001b60 <HAL_RCC_GetSysClockFreq+0x2c0>
70001a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001a08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
70001a14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            else
            {
              /* Can't retrieve HSIDIV value */
              pllvco = (float_t)0;
            }
            break;
70001a18:	e069      	b.n	70001aee <HAL_RCC_GetSysClockFreq+0x24e>
              pllvco = (float_t)0;
70001a1a:	f04f 0300 	mov.w	r3, #0
70001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
70001a20:	e065      	b.n	70001aee <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70001a22:	69bb      	ldr	r3, [r7, #24]
70001a24:	ee07 3a90 	vmov	s15, r3
70001a28:	eef8 7a67 	vcvt.f32.u32	s15, s15
70001a2c:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 70001b64 <HAL_RCC_GetSysClockFreq+0x2c4>
70001a30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70001a34:	4b46      	ldr	r3, [pc, #280]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001a3c:	ee07 3a90 	vmov	s15, r3
70001a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001a44:	ed97 6a04 	vldr	s12, [r7, #16]
70001a48:	eddf 5a45 	vldr	s11, [pc, #276]	@ 70001b60 <HAL_RCC_GetSysClockFreq+0x2c0>
70001a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
70001a60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70001a64:	e043      	b.n	70001aee <HAL_RCC_GetSysClockFreq+0x24e>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70001a66:	69bb      	ldr	r3, [r7, #24]
70001a68:	ee07 3a90 	vmov	s15, r3
70001a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
70001a70:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 70001b68 <HAL_RCC_GetSysClockFreq+0x2c8>
70001a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70001a78:	4b35      	ldr	r3, [pc, #212]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001a80:	ee07 3a90 	vmov	s15, r3
70001a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001a88:	ed97 6a04 	vldr	s12, [r7, #16]
70001a8c:	eddf 5a34 	vldr	s11, [pc, #208]	@ 70001b60 <HAL_RCC_GetSysClockFreq+0x2c0>
70001a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001a98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
70001aa4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70001aa8:	e021      	b.n	70001aee <HAL_RCC_GetSysClockFreq+0x24e>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVN) + (fracn1 / (float_t)0x2000) + (float_t)1);
70001aaa:	69bb      	ldr	r3, [r7, #24]
70001aac:	ee07 3a90 	vmov	s15, r3
70001ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
70001ab4:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 70001b64 <HAL_RCC_GetSysClockFreq+0x2c4>
70001ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
70001abc:	4b24      	ldr	r3, [pc, #144]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
70001ac4:	ee07 3a90 	vmov	s15, r3
70001ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
70001acc:	ed97 6a04 	vldr	s12, [r7, #16]
70001ad0:	eddf 5a23 	vldr	s11, [pc, #140]	@ 70001b60 <HAL_RCC_GetSysClockFreq+0x2c0>
70001ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
70001ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
70001adc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
70001ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
70001ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
70001ae8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            break;
70001aec:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR1 & RCC_PLL1DIVR1_DIVP) >> RCC_PLL1DIVR1_DIVP_Pos) + 1U) ;
70001aee:	4b18      	ldr	r3, [pc, #96]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
70001af2:	0a5b      	lsrs	r3, r3, #9
70001af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70001af8:	3301      	adds	r3, #1
70001afa:	60bb      	str	r3, [r7, #8]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
70001afc:	68bb      	ldr	r3, [r7, #8]
70001afe:	ee07 3a90 	vmov	s15, r3
70001b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
70001b06:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
70001b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
70001b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
70001b12:	ee17 3a90 	vmov	r3, s15
70001b16:	623b      	str	r3, [r7, #32]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
70001b18:	e005      	b.n	70001b26 <HAL_RCC_GetSysClockFreq+0x286>
        sysclockfreq = 0U;
70001b1a:	2300      	movs	r3, #0
70001b1c:	623b      	str	r3, [r7, #32]
      break;
70001b1e:	e002      	b.n	70001b26 <HAL_RCC_GetSysClockFreq+0x286>

    default:
      sysclockfreq = CSI_VALUE;
70001b20:	4b0d      	ldr	r3, [pc, #52]	@ (70001b58 <HAL_RCC_GetSysClockFreq+0x2b8>)
70001b22:	623b      	str	r3, [r7, #32]
      break;
70001b24:	bf00      	nop
  }

  prescaler = RCC->CDCFGR & RCC_CDCFGR_CPRE;
70001b26:	4b0a      	ldr	r3, [pc, #40]	@ (70001b50 <HAL_RCC_GetSysClockFreq+0x2b0>)
70001b28:	699b      	ldr	r3, [r3, #24]
70001b2a:	f003 030f 	and.w	r3, r3, #15
70001b2e:	607b      	str	r3, [r7, #4]
  if (prescaler >= 8U)
70001b30:	687b      	ldr	r3, [r7, #4]
70001b32:	2b07      	cmp	r3, #7
70001b34:	d905      	bls.n	70001b42 <HAL_RCC_GetSysClockFreq+0x2a2>
  {
    sysclockfreq = sysclockfreq >> (prescaler - RCC_CDCFGR_CPRE_3 + 1U);
70001b36:	687b      	ldr	r3, [r7, #4]
70001b38:	3b07      	subs	r3, #7
70001b3a:	6a3a      	ldr	r2, [r7, #32]
70001b3c:	fa22 f303 	lsr.w	r3, r2, r3
70001b40:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
70001b42:	6a3b      	ldr	r3, [r7, #32]
}
70001b44:	4618      	mov	r0, r3
70001b46:	372c      	adds	r7, #44	@ 0x2c
70001b48:	46bd      	mov	sp, r7
70001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
70001b4e:	4770      	bx	lr
70001b50:	58024400 	.word	0x58024400
70001b54:	03d09000 	.word	0x03d09000
70001b58:	003d0900 	.word	0x003d0900
70001b5c:	016e3600 	.word	0x016e3600
70001b60:	46000000 	.word	0x46000000
70001b64:	4a742400 	.word	0x4a742400
70001b68:	4bb71b00 	.word	0x4bb71b00

70001b6c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
70001b6c:	b580      	push	{r7, lr}
70001b6e:	b084      	sub	sp, #16
70001b70:	af00      	add	r7, sp, #0
  uint32_t clock;
  uint32_t prescaler;
  const uint8_t AHBPrescTable[8] = {1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
70001b72:	4a10      	ldr	r2, [pc, #64]	@ (70001bb4 <HAL_RCC_GetHCLKFreq+0x48>)
70001b74:	463b      	mov	r3, r7
70001b76:	e892 0003 	ldmia.w	r2, {r0, r1}
70001b7a:	e883 0003 	stmia.w	r3, {r0, r1}

  /* SysClk */
  clock = HAL_RCC_GetSysClockFreq();
70001b7e:	f7ff fe8f 	bl	700018a0 <HAL_RCC_GetSysClockFreq>
70001b82:	60f8      	str	r0, [r7, #12]
  /* Bus matrix divider */
  prescaler = (RCC->BMCFGR & RCC_BMCFGR_BMPRE) >> RCC_BMCFGR_BMPRE_Pos;
70001b84:	4b0c      	ldr	r3, [pc, #48]	@ (70001bb8 <HAL_RCC_GetHCLKFreq+0x4c>)
70001b86:	69db      	ldr	r3, [r3, #28]
70001b88:	f003 030f 	and.w	r3, r3, #15
70001b8c:	60bb      	str	r3, [r7, #8]
  if (prescaler >= 8U)
70001b8e:	68bb      	ldr	r3, [r7, #8]
70001b90:	2b07      	cmp	r3, #7
70001b92:	d909      	bls.n	70001ba8 <HAL_RCC_GetHCLKFreq+0x3c>
  {
    clock = clock >> AHBPrescTable[prescaler - 8U];
70001b94:	68bb      	ldr	r3, [r7, #8]
70001b96:	3b08      	subs	r3, #8
70001b98:	3310      	adds	r3, #16
70001b9a:	443b      	add	r3, r7
70001b9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
70001ba0:	461a      	mov	r2, r3
70001ba2:	68fb      	ldr	r3, [r7, #12]
70001ba4:	40d3      	lsrs	r3, r2
70001ba6:	60fb      	str	r3, [r7, #12]
  }
  return (clock);
70001ba8:	68fb      	ldr	r3, [r7, #12]
}
70001baa:	4618      	mov	r0, r3
70001bac:	3710      	adds	r7, #16
70001bae:	46bd      	mov	sp, r7
70001bb0:	bd80      	pop	{r7, pc}
70001bb2:	bf00      	nop
70001bb4:	7000431c 	.word	0x7000431c
70001bb8:	58024400 	.word	0x58024400

70001bbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
70001bbc:	b480      	push	{r7}
70001bbe:	b087      	sub	sp, #28
70001bc0:	af00      	add	r7, sp, #0
70001bc2:	60f8      	str	r0, [r7, #12]
70001bc4:	60b9      	str	r1, [r7, #8]
70001bc6:	4613      	mov	r3, r2
70001bc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
70001bca:	79fb      	ldrb	r3, [r7, #7]
70001bcc:	2b02      	cmp	r3, #2
70001bce:	d165      	bne.n	70001c9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
70001bd0:	68bb      	ldr	r3, [r7, #8]
70001bd2:	4a41      	ldr	r2, [pc, #260]	@ (70001cd8 <USB_SetTurnaroundTime+0x11c>)
70001bd4:	4293      	cmp	r3, r2
70001bd6:	d906      	bls.n	70001be6 <USB_SetTurnaroundTime+0x2a>
70001bd8:	68bb      	ldr	r3, [r7, #8]
70001bda:	4a40      	ldr	r2, [pc, #256]	@ (70001cdc <USB_SetTurnaroundTime+0x120>)
70001bdc:	4293      	cmp	r3, r2
70001bde:	d202      	bcs.n	70001be6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
70001be0:	230f      	movs	r3, #15
70001be2:	617b      	str	r3, [r7, #20]
70001be4:	e062      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
70001be6:	68bb      	ldr	r3, [r7, #8]
70001be8:	4a3c      	ldr	r2, [pc, #240]	@ (70001cdc <USB_SetTurnaroundTime+0x120>)
70001bea:	4293      	cmp	r3, r2
70001bec:	d306      	bcc.n	70001bfc <USB_SetTurnaroundTime+0x40>
70001bee:	68bb      	ldr	r3, [r7, #8]
70001bf0:	4a3b      	ldr	r2, [pc, #236]	@ (70001ce0 <USB_SetTurnaroundTime+0x124>)
70001bf2:	4293      	cmp	r3, r2
70001bf4:	d202      	bcs.n	70001bfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
70001bf6:	230e      	movs	r3, #14
70001bf8:	617b      	str	r3, [r7, #20]
70001bfa:	e057      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
70001bfc:	68bb      	ldr	r3, [r7, #8]
70001bfe:	4a38      	ldr	r2, [pc, #224]	@ (70001ce0 <USB_SetTurnaroundTime+0x124>)
70001c00:	4293      	cmp	r3, r2
70001c02:	d306      	bcc.n	70001c12 <USB_SetTurnaroundTime+0x56>
70001c04:	68bb      	ldr	r3, [r7, #8]
70001c06:	4a37      	ldr	r2, [pc, #220]	@ (70001ce4 <USB_SetTurnaroundTime+0x128>)
70001c08:	4293      	cmp	r3, r2
70001c0a:	d202      	bcs.n	70001c12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
70001c0c:	230d      	movs	r3, #13
70001c0e:	617b      	str	r3, [r7, #20]
70001c10:	e04c      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
70001c12:	68bb      	ldr	r3, [r7, #8]
70001c14:	4a33      	ldr	r2, [pc, #204]	@ (70001ce4 <USB_SetTurnaroundTime+0x128>)
70001c16:	4293      	cmp	r3, r2
70001c18:	d306      	bcc.n	70001c28 <USB_SetTurnaroundTime+0x6c>
70001c1a:	68bb      	ldr	r3, [r7, #8]
70001c1c:	4a32      	ldr	r2, [pc, #200]	@ (70001ce8 <USB_SetTurnaroundTime+0x12c>)
70001c1e:	4293      	cmp	r3, r2
70001c20:	d802      	bhi.n	70001c28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
70001c22:	230c      	movs	r3, #12
70001c24:	617b      	str	r3, [r7, #20]
70001c26:	e041      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
70001c28:	68bb      	ldr	r3, [r7, #8]
70001c2a:	4a2f      	ldr	r2, [pc, #188]	@ (70001ce8 <USB_SetTurnaroundTime+0x12c>)
70001c2c:	4293      	cmp	r3, r2
70001c2e:	d906      	bls.n	70001c3e <USB_SetTurnaroundTime+0x82>
70001c30:	68bb      	ldr	r3, [r7, #8]
70001c32:	4a2e      	ldr	r2, [pc, #184]	@ (70001cec <USB_SetTurnaroundTime+0x130>)
70001c34:	4293      	cmp	r3, r2
70001c36:	d802      	bhi.n	70001c3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
70001c38:	230b      	movs	r3, #11
70001c3a:	617b      	str	r3, [r7, #20]
70001c3c:	e036      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
70001c3e:	68bb      	ldr	r3, [r7, #8]
70001c40:	4a2a      	ldr	r2, [pc, #168]	@ (70001cec <USB_SetTurnaroundTime+0x130>)
70001c42:	4293      	cmp	r3, r2
70001c44:	d906      	bls.n	70001c54 <USB_SetTurnaroundTime+0x98>
70001c46:	68bb      	ldr	r3, [r7, #8]
70001c48:	4a29      	ldr	r2, [pc, #164]	@ (70001cf0 <USB_SetTurnaroundTime+0x134>)
70001c4a:	4293      	cmp	r3, r2
70001c4c:	d802      	bhi.n	70001c54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
70001c4e:	230a      	movs	r3, #10
70001c50:	617b      	str	r3, [r7, #20]
70001c52:	e02b      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
70001c54:	68bb      	ldr	r3, [r7, #8]
70001c56:	4a26      	ldr	r2, [pc, #152]	@ (70001cf0 <USB_SetTurnaroundTime+0x134>)
70001c58:	4293      	cmp	r3, r2
70001c5a:	d906      	bls.n	70001c6a <USB_SetTurnaroundTime+0xae>
70001c5c:	68bb      	ldr	r3, [r7, #8]
70001c5e:	4a25      	ldr	r2, [pc, #148]	@ (70001cf4 <USB_SetTurnaroundTime+0x138>)
70001c60:	4293      	cmp	r3, r2
70001c62:	d202      	bcs.n	70001c6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
70001c64:	2309      	movs	r3, #9
70001c66:	617b      	str	r3, [r7, #20]
70001c68:	e020      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
70001c6a:	68bb      	ldr	r3, [r7, #8]
70001c6c:	4a21      	ldr	r2, [pc, #132]	@ (70001cf4 <USB_SetTurnaroundTime+0x138>)
70001c6e:	4293      	cmp	r3, r2
70001c70:	d306      	bcc.n	70001c80 <USB_SetTurnaroundTime+0xc4>
70001c72:	68bb      	ldr	r3, [r7, #8]
70001c74:	4a20      	ldr	r2, [pc, #128]	@ (70001cf8 <USB_SetTurnaroundTime+0x13c>)
70001c76:	4293      	cmp	r3, r2
70001c78:	d802      	bhi.n	70001c80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
70001c7a:	2308      	movs	r3, #8
70001c7c:	617b      	str	r3, [r7, #20]
70001c7e:	e015      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
70001c80:	68bb      	ldr	r3, [r7, #8]
70001c82:	4a1d      	ldr	r2, [pc, #116]	@ (70001cf8 <USB_SetTurnaroundTime+0x13c>)
70001c84:	4293      	cmp	r3, r2
70001c86:	d906      	bls.n	70001c96 <USB_SetTurnaroundTime+0xda>
70001c88:	68bb      	ldr	r3, [r7, #8]
70001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (70001cfc <USB_SetTurnaroundTime+0x140>)
70001c8c:	4293      	cmp	r3, r2
70001c8e:	d202      	bcs.n	70001c96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
70001c90:	2307      	movs	r3, #7
70001c92:	617b      	str	r3, [r7, #20]
70001c94:	e00a      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
70001c96:	2306      	movs	r3, #6
70001c98:	617b      	str	r3, [r7, #20]
70001c9a:	e007      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
70001c9c:	79fb      	ldrb	r3, [r7, #7]
70001c9e:	2b00      	cmp	r3, #0
70001ca0:	d102      	bne.n	70001ca8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
70001ca2:	2309      	movs	r3, #9
70001ca4:	617b      	str	r3, [r7, #20]
70001ca6:	e001      	b.n	70001cac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
70001ca8:	2309      	movs	r3, #9
70001caa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
70001cac:	68fb      	ldr	r3, [r7, #12]
70001cae:	68db      	ldr	r3, [r3, #12]
70001cb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
70001cb4:	68fb      	ldr	r3, [r7, #12]
70001cb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
70001cb8:	68fb      	ldr	r3, [r7, #12]
70001cba:	68da      	ldr	r2, [r3, #12]
70001cbc:	697b      	ldr	r3, [r7, #20]
70001cbe:	029b      	lsls	r3, r3, #10
70001cc0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
70001cc4:	431a      	orrs	r2, r3
70001cc6:	68fb      	ldr	r3, [r7, #12]
70001cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
70001cca:	2300      	movs	r3, #0
}
70001ccc:	4618      	mov	r0, r3
70001cce:	371c      	adds	r7, #28
70001cd0:	46bd      	mov	sp, r7
70001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
70001cd6:	4770      	bx	lr
70001cd8:	00d8acbf 	.word	0x00d8acbf
70001cdc:	00e4e1c0 	.word	0x00e4e1c0
70001ce0:	00f42400 	.word	0x00f42400
70001ce4:	01067380 	.word	0x01067380
70001ce8:	011a499f 	.word	0x011a499f
70001cec:	01312cff 	.word	0x01312cff
70001cf0:	014ca43f 	.word	0x014ca43f
70001cf4:	016e3600 	.word	0x016e3600
70001cf8:	01a6ab1f 	.word	0x01a6ab1f
70001cfc:	01e84800 	.word	0x01e84800

70001d00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
70001d00:	b480      	push	{r7}
70001d02:	b085      	sub	sp, #20
70001d04:	af00      	add	r7, sp, #0
70001d06:	6078      	str	r0, [r7, #4]
70001d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
70001d0a:	2300      	movs	r3, #0
70001d0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
70001d0e:	68fb      	ldr	r3, [r7, #12]
70001d10:	3301      	adds	r3, #1
70001d12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
70001d14:	68fb      	ldr	r3, [r7, #12]
70001d16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
70001d1a:	d901      	bls.n	70001d20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
70001d1c:	2303      	movs	r3, #3
70001d1e:	e01b      	b.n	70001d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
70001d20:	687b      	ldr	r3, [r7, #4]
70001d22:	691b      	ldr	r3, [r3, #16]
70001d24:	2b00      	cmp	r3, #0
70001d26:	daf2      	bge.n	70001d0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
70001d28:	2300      	movs	r3, #0
70001d2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
70001d2c:	683b      	ldr	r3, [r7, #0]
70001d2e:	019b      	lsls	r3, r3, #6
70001d30:	f043 0220 	orr.w	r2, r3, #32
70001d34:	687b      	ldr	r3, [r7, #4]
70001d36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
70001d38:	68fb      	ldr	r3, [r7, #12]
70001d3a:	3301      	adds	r3, #1
70001d3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
70001d3e:	68fb      	ldr	r3, [r7, #12]
70001d40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
70001d44:	d901      	bls.n	70001d4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
70001d46:	2303      	movs	r3, #3
70001d48:	e006      	b.n	70001d58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
70001d4a:	687b      	ldr	r3, [r7, #4]
70001d4c:	691b      	ldr	r3, [r3, #16]
70001d4e:	f003 0320 	and.w	r3, r3, #32
70001d52:	2b20      	cmp	r3, #32
70001d54:	d0f0      	beq.n	70001d38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
70001d56:	2300      	movs	r3, #0
}
70001d58:	4618      	mov	r0, r3
70001d5a:	3714      	adds	r7, #20
70001d5c:	46bd      	mov	sp, r7
70001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
70001d62:	4770      	bx	lr

70001d64 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
70001d64:	b480      	push	{r7}
70001d66:	b087      	sub	sp, #28
70001d68:	af00      	add	r7, sp, #0
70001d6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001d6c:	687b      	ldr	r3, [r7, #4]
70001d6e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
70001d70:	693b      	ldr	r3, [r7, #16]
70001d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001d76:	689b      	ldr	r3, [r3, #8]
70001d78:	f003 0306 	and.w	r3, r3, #6
70001d7c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
70001d7e:	68fb      	ldr	r3, [r7, #12]
70001d80:	2b00      	cmp	r3, #0
70001d82:	d102      	bne.n	70001d8a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
70001d84:	2300      	movs	r3, #0
70001d86:	75fb      	strb	r3, [r7, #23]
70001d88:	e00a      	b.n	70001da0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
70001d8a:	68fb      	ldr	r3, [r7, #12]
70001d8c:	2b02      	cmp	r3, #2
70001d8e:	d002      	beq.n	70001d96 <USB_GetDevSpeed+0x32>
70001d90:	68fb      	ldr	r3, [r7, #12]
70001d92:	2b06      	cmp	r3, #6
70001d94:	d102      	bne.n	70001d9c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
70001d96:	2302      	movs	r3, #2
70001d98:	75fb      	strb	r3, [r7, #23]
70001d9a:	e001      	b.n	70001da0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
70001d9c:	230f      	movs	r3, #15
70001d9e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
70001da0:	7dfb      	ldrb	r3, [r7, #23]
}
70001da2:	4618      	mov	r0, r3
70001da4:	371c      	adds	r7, #28
70001da6:	46bd      	mov	sp, r7
70001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
70001dac:	4770      	bx	lr
	...

70001db0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70001db0:	b480      	push	{r7}
70001db2:	b085      	sub	sp, #20
70001db4:	af00      	add	r7, sp, #0
70001db6:	6078      	str	r0, [r7, #4]
70001db8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001dba:	687b      	ldr	r3, [r7, #4]
70001dbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70001dbe:	683b      	ldr	r3, [r7, #0]
70001dc0:	781b      	ldrb	r3, [r3, #0]
70001dc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
70001dc4:	683b      	ldr	r3, [r7, #0]
70001dc6:	785b      	ldrb	r3, [r3, #1]
70001dc8:	2b01      	cmp	r3, #1
70001dca:	d139      	bne.n	70001e40 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
70001dcc:	68fb      	ldr	r3, [r7, #12]
70001dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001dd2:	69da      	ldr	r2, [r3, #28]
70001dd4:	683b      	ldr	r3, [r7, #0]
70001dd6:	781b      	ldrb	r3, [r3, #0]
70001dd8:	f003 030f 	and.w	r3, r3, #15
70001ddc:	2101      	movs	r1, #1
70001dde:	fa01 f303 	lsl.w	r3, r1, r3
70001de2:	b29b      	uxth	r3, r3
70001de4:	68f9      	ldr	r1, [r7, #12]
70001de6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70001dea:	4313      	orrs	r3, r2
70001dec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
70001dee:	68bb      	ldr	r3, [r7, #8]
70001df0:	015a      	lsls	r2, r3, #5
70001df2:	68fb      	ldr	r3, [r7, #12]
70001df4:	4413      	add	r3, r2
70001df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001dfa:	681b      	ldr	r3, [r3, #0]
70001dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70001e00:	2b00      	cmp	r3, #0
70001e02:	d153      	bne.n	70001eac <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70001e04:	68bb      	ldr	r3, [r7, #8]
70001e06:	015a      	lsls	r2, r3, #5
70001e08:	68fb      	ldr	r3, [r7, #12]
70001e0a:	4413      	add	r3, r2
70001e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e10:	681a      	ldr	r2, [r3, #0]
70001e12:	683b      	ldr	r3, [r7, #0]
70001e14:	689b      	ldr	r3, [r3, #8]
70001e16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
70001e1a:	683b      	ldr	r3, [r7, #0]
70001e1c:	791b      	ldrb	r3, [r3, #4]
70001e1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70001e20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
70001e22:	68bb      	ldr	r3, [r7, #8]
70001e24:	059b      	lsls	r3, r3, #22
70001e26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
70001e28:	431a      	orrs	r2, r3
70001e2a:	68bb      	ldr	r3, [r7, #8]
70001e2c:	0159      	lsls	r1, r3, #5
70001e2e:	68fb      	ldr	r3, [r7, #12]
70001e30:	440b      	add	r3, r1
70001e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001e36:	4619      	mov	r1, r3
70001e38:	4b20      	ldr	r3, [pc, #128]	@ (70001ebc <USB_ActivateEndpoint+0x10c>)
70001e3a:	4313      	orrs	r3, r2
70001e3c:	600b      	str	r3, [r1, #0]
70001e3e:	e035      	b.n	70001eac <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
70001e40:	68fb      	ldr	r3, [r7, #12]
70001e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70001e46:	69da      	ldr	r2, [r3, #28]
70001e48:	683b      	ldr	r3, [r7, #0]
70001e4a:	781b      	ldrb	r3, [r3, #0]
70001e4c:	f003 030f 	and.w	r3, r3, #15
70001e50:	2101      	movs	r1, #1
70001e52:	fa01 f303 	lsl.w	r3, r1, r3
70001e56:	041b      	lsls	r3, r3, #16
70001e58:	68f9      	ldr	r1, [r7, #12]
70001e5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
70001e5e:	4313      	orrs	r3, r2
70001e60:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
70001e62:	68bb      	ldr	r3, [r7, #8]
70001e64:	015a      	lsls	r2, r3, #5
70001e66:	68fb      	ldr	r3, [r7, #12]
70001e68:	4413      	add	r3, r2
70001e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001e6e:	681b      	ldr	r3, [r3, #0]
70001e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
70001e74:	2b00      	cmp	r3, #0
70001e76:	d119      	bne.n	70001eac <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
70001e78:	68bb      	ldr	r3, [r7, #8]
70001e7a:	015a      	lsls	r2, r3, #5
70001e7c:	68fb      	ldr	r3, [r7, #12]
70001e7e:	4413      	add	r3, r2
70001e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001e84:	681a      	ldr	r2, [r3, #0]
70001e86:	683b      	ldr	r3, [r7, #0]
70001e88:	689b      	ldr	r3, [r3, #8]
70001e8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
70001e8e:	683b      	ldr	r3, [r7, #0]
70001e90:	791b      	ldrb	r3, [r3, #4]
70001e92:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
70001e94:	430b      	orrs	r3, r1
70001e96:	431a      	orrs	r2, r3
70001e98:	68bb      	ldr	r3, [r7, #8]
70001e9a:	0159      	lsls	r1, r3, #5
70001e9c:	68fb      	ldr	r3, [r7, #12]
70001e9e:	440b      	add	r3, r1
70001ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70001ea4:	4619      	mov	r1, r3
70001ea6:	4b05      	ldr	r3, [pc, #20]	@ (70001ebc <USB_ActivateEndpoint+0x10c>)
70001ea8:	4313      	orrs	r3, r2
70001eaa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
70001eac:	2300      	movs	r3, #0
}
70001eae:	4618      	mov	r0, r3
70001eb0:	3714      	adds	r7, #20
70001eb2:	46bd      	mov	sp, r7
70001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
70001eb8:	4770      	bx	lr
70001eba:	bf00      	nop
70001ebc:	10008000 	.word	0x10008000

70001ec0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
70001ec0:	b580      	push	{r7, lr}
70001ec2:	b08a      	sub	sp, #40	@ 0x28
70001ec4:	af02      	add	r7, sp, #8
70001ec6:	60f8      	str	r0, [r7, #12]
70001ec8:	60b9      	str	r1, [r7, #8]
70001eca:	4613      	mov	r3, r2
70001ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
70001ece:	68fb      	ldr	r3, [r7, #12]
70001ed0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
70001ed2:	68bb      	ldr	r3, [r7, #8]
70001ed4:	781b      	ldrb	r3, [r3, #0]
70001ed6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
70001ed8:	68bb      	ldr	r3, [r7, #8]
70001eda:	785b      	ldrb	r3, [r3, #1]
70001edc:	2b01      	cmp	r3, #1
70001ede:	f040 8185 	bne.w	700021ec <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
70001ee2:	68bb      	ldr	r3, [r7, #8]
70001ee4:	691b      	ldr	r3, [r3, #16]
70001ee6:	2b00      	cmp	r3, #0
70001ee8:	d132      	bne.n	70001f50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
70001eea:	69bb      	ldr	r3, [r7, #24]
70001eec:	015a      	lsls	r2, r3, #5
70001eee:	69fb      	ldr	r3, [r7, #28]
70001ef0:	4413      	add	r3, r2
70001ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001ef6:	691a      	ldr	r2, [r3, #16]
70001ef8:	69bb      	ldr	r3, [r7, #24]
70001efa:	0159      	lsls	r1, r3, #5
70001efc:	69fb      	ldr	r3, [r7, #28]
70001efe:	440b      	add	r3, r1
70001f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f04:	4619      	mov	r1, r3
70001f06:	4ba7      	ldr	r3, [pc, #668]	@ (700021a4 <USB_EPStartXfer+0x2e4>)
70001f08:	4013      	ands	r3, r2
70001f0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
70001f0c:	69bb      	ldr	r3, [r7, #24]
70001f0e:	015a      	lsls	r2, r3, #5
70001f10:	69fb      	ldr	r3, [r7, #28]
70001f12:	4413      	add	r3, r2
70001f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f18:	691b      	ldr	r3, [r3, #16]
70001f1a:	69ba      	ldr	r2, [r7, #24]
70001f1c:	0151      	lsls	r1, r2, #5
70001f1e:	69fa      	ldr	r2, [r7, #28]
70001f20:	440a      	add	r2, r1
70001f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70001f26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70001f2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
70001f2c:	69bb      	ldr	r3, [r7, #24]
70001f2e:	015a      	lsls	r2, r3, #5
70001f30:	69fb      	ldr	r3, [r7, #28]
70001f32:	4413      	add	r3, r2
70001f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f38:	691a      	ldr	r2, [r3, #16]
70001f3a:	69bb      	ldr	r3, [r7, #24]
70001f3c:	0159      	lsls	r1, r3, #5
70001f3e:	69fb      	ldr	r3, [r7, #28]
70001f40:	440b      	add	r3, r1
70001f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f46:	4619      	mov	r1, r3
70001f48:	4b97      	ldr	r3, [pc, #604]	@ (700021a8 <USB_EPStartXfer+0x2e8>)
70001f4a:	4013      	ands	r3, r2
70001f4c:	610b      	str	r3, [r1, #16]
70001f4e:	e097      	b.n	70002080 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
70001f50:	69bb      	ldr	r3, [r7, #24]
70001f52:	015a      	lsls	r2, r3, #5
70001f54:	69fb      	ldr	r3, [r7, #28]
70001f56:	4413      	add	r3, r2
70001f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f5c:	691a      	ldr	r2, [r3, #16]
70001f5e:	69bb      	ldr	r3, [r7, #24]
70001f60:	0159      	lsls	r1, r3, #5
70001f62:	69fb      	ldr	r3, [r7, #28]
70001f64:	440b      	add	r3, r1
70001f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f6a:	4619      	mov	r1, r3
70001f6c:	4b8e      	ldr	r3, [pc, #568]	@ (700021a8 <USB_EPStartXfer+0x2e8>)
70001f6e:	4013      	ands	r3, r2
70001f70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
70001f72:	69bb      	ldr	r3, [r7, #24]
70001f74:	015a      	lsls	r2, r3, #5
70001f76:	69fb      	ldr	r3, [r7, #28]
70001f78:	4413      	add	r3, r2
70001f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f7e:	691a      	ldr	r2, [r3, #16]
70001f80:	69bb      	ldr	r3, [r7, #24]
70001f82:	0159      	lsls	r1, r3, #5
70001f84:	69fb      	ldr	r3, [r7, #28]
70001f86:	440b      	add	r3, r1
70001f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001f8c:	4619      	mov	r1, r3
70001f8e:	4b85      	ldr	r3, [pc, #532]	@ (700021a4 <USB_EPStartXfer+0x2e4>)
70001f90:	4013      	ands	r3, r2
70001f92:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
70001f94:	69bb      	ldr	r3, [r7, #24]
70001f96:	2b00      	cmp	r3, #0
70001f98:	d11a      	bne.n	70001fd0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
70001f9a:	68bb      	ldr	r3, [r7, #8]
70001f9c:	691a      	ldr	r2, [r3, #16]
70001f9e:	68bb      	ldr	r3, [r7, #8]
70001fa0:	689b      	ldr	r3, [r3, #8]
70001fa2:	429a      	cmp	r2, r3
70001fa4:	d903      	bls.n	70001fae <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
70001fa6:	68bb      	ldr	r3, [r7, #8]
70001fa8:	689a      	ldr	r2, [r3, #8]
70001faa:	68bb      	ldr	r3, [r7, #8]
70001fac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
70001fae:	69bb      	ldr	r3, [r7, #24]
70001fb0:	015a      	lsls	r2, r3, #5
70001fb2:	69fb      	ldr	r3, [r7, #28]
70001fb4:	4413      	add	r3, r2
70001fb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001fba:	691b      	ldr	r3, [r3, #16]
70001fbc:	69ba      	ldr	r2, [r7, #24]
70001fbe:	0151      	lsls	r1, r2, #5
70001fc0:	69fa      	ldr	r2, [r7, #28]
70001fc2:	440a      	add	r2, r1
70001fc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70001fc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70001fcc:	6113      	str	r3, [r2, #16]
70001fce:	e044      	b.n	7000205a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
70001fd0:	68bb      	ldr	r3, [r7, #8]
70001fd2:	691a      	ldr	r2, [r3, #16]
70001fd4:	68bb      	ldr	r3, [r7, #8]
70001fd6:	689b      	ldr	r3, [r3, #8]
70001fd8:	4413      	add	r3, r2
70001fda:	1e5a      	subs	r2, r3, #1
70001fdc:	68bb      	ldr	r3, [r7, #8]
70001fde:	689b      	ldr	r3, [r3, #8]
70001fe0:	fbb2 f3f3 	udiv	r3, r2, r3
70001fe4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
70001fe6:	69bb      	ldr	r3, [r7, #24]
70001fe8:	015a      	lsls	r2, r3, #5
70001fea:	69fb      	ldr	r3, [r7, #28]
70001fec:	4413      	add	r3, r2
70001fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70001ff2:	691a      	ldr	r2, [r3, #16]
70001ff4:	8afb      	ldrh	r3, [r7, #22]
70001ff6:	04d9      	lsls	r1, r3, #19
70001ff8:	4b6c      	ldr	r3, [pc, #432]	@ (700021ac <USB_EPStartXfer+0x2ec>)
70001ffa:	400b      	ands	r3, r1
70001ffc:	69b9      	ldr	r1, [r7, #24]
70001ffe:	0148      	lsls	r0, r1, #5
70002000:	69f9      	ldr	r1, [r7, #28]
70002002:	4401      	add	r1, r0
70002004:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70002008:	4313      	orrs	r3, r2
7000200a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
7000200c:	68bb      	ldr	r3, [r7, #8]
7000200e:	791b      	ldrb	r3, [r3, #4]
70002010:	2b01      	cmp	r3, #1
70002012:	d122      	bne.n	7000205a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
70002014:	69bb      	ldr	r3, [r7, #24]
70002016:	015a      	lsls	r2, r3, #5
70002018:	69fb      	ldr	r3, [r7, #28]
7000201a:	4413      	add	r3, r2
7000201c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002020:	691b      	ldr	r3, [r3, #16]
70002022:	69ba      	ldr	r2, [r7, #24]
70002024:	0151      	lsls	r1, r2, #5
70002026:	69fa      	ldr	r2, [r7, #28]
70002028:	440a      	add	r2, r1
7000202a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000202e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
70002032:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
70002034:	69bb      	ldr	r3, [r7, #24]
70002036:	015a      	lsls	r2, r3, #5
70002038:	69fb      	ldr	r3, [r7, #28]
7000203a:	4413      	add	r3, r2
7000203c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002040:	691a      	ldr	r2, [r3, #16]
70002042:	8afb      	ldrh	r3, [r7, #22]
70002044:	075b      	lsls	r3, r3, #29
70002046:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
7000204a:	69b9      	ldr	r1, [r7, #24]
7000204c:	0148      	lsls	r0, r1, #5
7000204e:	69f9      	ldr	r1, [r7, #28]
70002050:	4401      	add	r1, r0
70002052:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
70002056:	4313      	orrs	r3, r2
70002058:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
7000205a:	69bb      	ldr	r3, [r7, #24]
7000205c:	015a      	lsls	r2, r3, #5
7000205e:	69fb      	ldr	r3, [r7, #28]
70002060:	4413      	add	r3, r2
70002062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002066:	691a      	ldr	r2, [r3, #16]
70002068:	68bb      	ldr	r3, [r7, #8]
7000206a:	691b      	ldr	r3, [r3, #16]
7000206c:	f3c3 0312 	ubfx	r3, r3, #0, #19
70002070:	69b9      	ldr	r1, [r7, #24]
70002072:	0148      	lsls	r0, r1, #5
70002074:	69f9      	ldr	r1, [r7, #28]
70002076:	4401      	add	r1, r0
70002078:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
7000207c:	4313      	orrs	r3, r2
7000207e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
70002080:	79fb      	ldrb	r3, [r7, #7]
70002082:	2b01      	cmp	r3, #1
70002084:	d14b      	bne.n	7000211e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
70002086:	68bb      	ldr	r3, [r7, #8]
70002088:	69db      	ldr	r3, [r3, #28]
7000208a:	2b00      	cmp	r3, #0
7000208c:	d009      	beq.n	700020a2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
7000208e:	69bb      	ldr	r3, [r7, #24]
70002090:	015a      	lsls	r2, r3, #5
70002092:	69fb      	ldr	r3, [r7, #28]
70002094:	4413      	add	r3, r2
70002096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000209a:	461a      	mov	r2, r3
7000209c:	68bb      	ldr	r3, [r7, #8]
7000209e:	69db      	ldr	r3, [r3, #28]
700020a0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
700020a2:	68bb      	ldr	r3, [r7, #8]
700020a4:	791b      	ldrb	r3, [r3, #4]
700020a6:	2b01      	cmp	r3, #1
700020a8:	d128      	bne.n	700020fc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
700020aa:	69fb      	ldr	r3, [r7, #28]
700020ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700020b0:	689b      	ldr	r3, [r3, #8]
700020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
700020b6:	2b00      	cmp	r3, #0
700020b8:	d110      	bne.n	700020dc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
700020ba:	69bb      	ldr	r3, [r7, #24]
700020bc:	015a      	lsls	r2, r3, #5
700020be:	69fb      	ldr	r3, [r7, #28]
700020c0:	4413      	add	r3, r2
700020c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700020c6:	681b      	ldr	r3, [r3, #0]
700020c8:	69ba      	ldr	r2, [r7, #24]
700020ca:	0151      	lsls	r1, r2, #5
700020cc:	69fa      	ldr	r2, [r7, #28]
700020ce:	440a      	add	r2, r1
700020d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700020d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700020d8:	6013      	str	r3, [r2, #0]
700020da:	e00f      	b.n	700020fc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
700020dc:	69bb      	ldr	r3, [r7, #24]
700020de:	015a      	lsls	r2, r3, #5
700020e0:	69fb      	ldr	r3, [r7, #28]
700020e2:	4413      	add	r3, r2
700020e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700020e8:	681b      	ldr	r3, [r3, #0]
700020ea:	69ba      	ldr	r2, [r7, #24]
700020ec:	0151      	lsls	r1, r2, #5
700020ee:	69fa      	ldr	r2, [r7, #28]
700020f0:	440a      	add	r2, r1
700020f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700020f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700020fa:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
700020fc:	69bb      	ldr	r3, [r7, #24]
700020fe:	015a      	lsls	r2, r3, #5
70002100:	69fb      	ldr	r3, [r7, #28]
70002102:	4413      	add	r3, r2
70002104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002108:	681b      	ldr	r3, [r3, #0]
7000210a:	69ba      	ldr	r2, [r7, #24]
7000210c:	0151      	lsls	r1, r2, #5
7000210e:	69fa      	ldr	r2, [r7, #28]
70002110:	440a      	add	r2, r1
70002112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002116:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
7000211a:	6013      	str	r3, [r2, #0]
7000211c:	e169      	b.n	700023f2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
7000211e:	69bb      	ldr	r3, [r7, #24]
70002120:	015a      	lsls	r2, r3, #5
70002122:	69fb      	ldr	r3, [r7, #28]
70002124:	4413      	add	r3, r2
70002126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000212a:	681b      	ldr	r3, [r3, #0]
7000212c:	69ba      	ldr	r2, [r7, #24]
7000212e:	0151      	lsls	r1, r2, #5
70002130:	69fa      	ldr	r2, [r7, #28]
70002132:	440a      	add	r2, r1
70002134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002138:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
7000213c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
7000213e:	68bb      	ldr	r3, [r7, #8]
70002140:	791b      	ldrb	r3, [r3, #4]
70002142:	2b01      	cmp	r3, #1
70002144:	d015      	beq.n	70002172 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
70002146:	68bb      	ldr	r3, [r7, #8]
70002148:	691b      	ldr	r3, [r3, #16]
7000214a:	2b00      	cmp	r3, #0
7000214c:	f000 8151 	beq.w	700023f2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
70002150:	69fb      	ldr	r3, [r7, #28]
70002152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
70002158:	68bb      	ldr	r3, [r7, #8]
7000215a:	781b      	ldrb	r3, [r3, #0]
7000215c:	f003 030f 	and.w	r3, r3, #15
70002160:	2101      	movs	r1, #1
70002162:	fa01 f303 	lsl.w	r3, r1, r3
70002166:	69f9      	ldr	r1, [r7, #28]
70002168:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000216c:	4313      	orrs	r3, r2
7000216e:	634b      	str	r3, [r1, #52]	@ 0x34
70002170:	e13f      	b.n	700023f2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
70002172:	69fb      	ldr	r3, [r7, #28]
70002174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002178:	689b      	ldr	r3, [r3, #8]
7000217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000217e:	2b00      	cmp	r3, #0
70002180:	d116      	bne.n	700021b0 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
70002182:	69bb      	ldr	r3, [r7, #24]
70002184:	015a      	lsls	r2, r3, #5
70002186:	69fb      	ldr	r3, [r7, #28]
70002188:	4413      	add	r3, r2
7000218a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000218e:	681b      	ldr	r3, [r3, #0]
70002190:	69ba      	ldr	r2, [r7, #24]
70002192:	0151      	lsls	r1, r2, #5
70002194:	69fa      	ldr	r2, [r7, #28]
70002196:	440a      	add	r2, r1
70002198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000219c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700021a0:	6013      	str	r3, [r2, #0]
700021a2:	e015      	b.n	700021d0 <USB_EPStartXfer+0x310>
700021a4:	e007ffff 	.word	0xe007ffff
700021a8:	fff80000 	.word	0xfff80000
700021ac:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
700021b0:	69bb      	ldr	r3, [r7, #24]
700021b2:	015a      	lsls	r2, r3, #5
700021b4:	69fb      	ldr	r3, [r7, #28]
700021b6:	4413      	add	r3, r2
700021b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700021bc:	681b      	ldr	r3, [r3, #0]
700021be:	69ba      	ldr	r2, [r7, #24]
700021c0:	0151      	lsls	r1, r2, #5
700021c2:	69fa      	ldr	r2, [r7, #28]
700021c4:	440a      	add	r2, r1
700021c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700021ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700021ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
700021d0:	68bb      	ldr	r3, [r7, #8]
700021d2:	68d9      	ldr	r1, [r3, #12]
700021d4:	68bb      	ldr	r3, [r7, #8]
700021d6:	781a      	ldrb	r2, [r3, #0]
700021d8:	68bb      	ldr	r3, [r7, #8]
700021da:	691b      	ldr	r3, [r3, #16]
700021dc:	b298      	uxth	r0, r3
700021de:	79fb      	ldrb	r3, [r7, #7]
700021e0:	9300      	str	r3, [sp, #0]
700021e2:	4603      	mov	r3, r0
700021e4:	68f8      	ldr	r0, [r7, #12]
700021e6:	f000 f9b9 	bl	7000255c <USB_WritePacket>
700021ea:	e102      	b.n	700023f2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
700021ec:	69bb      	ldr	r3, [r7, #24]
700021ee:	015a      	lsls	r2, r3, #5
700021f0:	69fb      	ldr	r3, [r7, #28]
700021f2:	4413      	add	r3, r2
700021f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700021f8:	691a      	ldr	r2, [r3, #16]
700021fa:	69bb      	ldr	r3, [r7, #24]
700021fc:	0159      	lsls	r1, r3, #5
700021fe:	69fb      	ldr	r3, [r7, #28]
70002200:	440b      	add	r3, r1
70002202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002206:	4619      	mov	r1, r3
70002208:	4b7c      	ldr	r3, [pc, #496]	@ (700023fc <USB_EPStartXfer+0x53c>)
7000220a:	4013      	ands	r3, r2
7000220c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
7000220e:	69bb      	ldr	r3, [r7, #24]
70002210:	015a      	lsls	r2, r3, #5
70002212:	69fb      	ldr	r3, [r7, #28]
70002214:	4413      	add	r3, r2
70002216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000221a:	691a      	ldr	r2, [r3, #16]
7000221c:	69bb      	ldr	r3, [r7, #24]
7000221e:	0159      	lsls	r1, r3, #5
70002220:	69fb      	ldr	r3, [r7, #28]
70002222:	440b      	add	r3, r1
70002224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002228:	4619      	mov	r1, r3
7000222a:	4b75      	ldr	r3, [pc, #468]	@ (70002400 <USB_EPStartXfer+0x540>)
7000222c:	4013      	ands	r3, r2
7000222e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
70002230:	69bb      	ldr	r3, [r7, #24]
70002232:	2b00      	cmp	r3, #0
70002234:	d12f      	bne.n	70002296 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
70002236:	68bb      	ldr	r3, [r7, #8]
70002238:	691b      	ldr	r3, [r3, #16]
7000223a:	2b00      	cmp	r3, #0
7000223c:	d003      	beq.n	70002246 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
7000223e:	68bb      	ldr	r3, [r7, #8]
70002240:	689a      	ldr	r2, [r3, #8]
70002242:	68bb      	ldr	r3, [r7, #8]
70002244:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
70002246:	68bb      	ldr	r3, [r7, #8]
70002248:	689a      	ldr	r2, [r3, #8]
7000224a:	68bb      	ldr	r3, [r7, #8]
7000224c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
7000224e:	69bb      	ldr	r3, [r7, #24]
70002250:	015a      	lsls	r2, r3, #5
70002252:	69fb      	ldr	r3, [r7, #28]
70002254:	4413      	add	r3, r2
70002256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000225a:	691a      	ldr	r2, [r3, #16]
7000225c:	68bb      	ldr	r3, [r7, #8]
7000225e:	6a1b      	ldr	r3, [r3, #32]
70002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
70002264:	69b9      	ldr	r1, [r7, #24]
70002266:	0148      	lsls	r0, r1, #5
70002268:	69f9      	ldr	r1, [r7, #28]
7000226a:	4401      	add	r1, r0
7000226c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
70002270:	4313      	orrs	r3, r2
70002272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
70002274:	69bb      	ldr	r3, [r7, #24]
70002276:	015a      	lsls	r2, r3, #5
70002278:	69fb      	ldr	r3, [r7, #28]
7000227a:	4413      	add	r3, r2
7000227c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002280:	691b      	ldr	r3, [r3, #16]
70002282:	69ba      	ldr	r2, [r7, #24]
70002284:	0151      	lsls	r1, r2, #5
70002286:	69fa      	ldr	r2, [r7, #28]
70002288:	440a      	add	r2, r1
7000228a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000228e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70002292:	6113      	str	r3, [r2, #16]
70002294:	e05f      	b.n	70002356 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
70002296:	68bb      	ldr	r3, [r7, #8]
70002298:	691b      	ldr	r3, [r3, #16]
7000229a:	2b00      	cmp	r3, #0
7000229c:	d123      	bne.n	700022e6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
7000229e:	69bb      	ldr	r3, [r7, #24]
700022a0:	015a      	lsls	r2, r3, #5
700022a2:	69fb      	ldr	r3, [r7, #28]
700022a4:	4413      	add	r3, r2
700022a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700022aa:	691a      	ldr	r2, [r3, #16]
700022ac:	68bb      	ldr	r3, [r7, #8]
700022ae:	689b      	ldr	r3, [r3, #8]
700022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
700022b4:	69b9      	ldr	r1, [r7, #24]
700022b6:	0148      	lsls	r0, r1, #5
700022b8:	69f9      	ldr	r1, [r7, #28]
700022ba:	4401      	add	r1, r0
700022bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
700022c0:	4313      	orrs	r3, r2
700022c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
700022c4:	69bb      	ldr	r3, [r7, #24]
700022c6:	015a      	lsls	r2, r3, #5
700022c8:	69fb      	ldr	r3, [r7, #28]
700022ca:	4413      	add	r3, r2
700022cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700022d0:	691b      	ldr	r3, [r3, #16]
700022d2:	69ba      	ldr	r2, [r7, #24]
700022d4:	0151      	lsls	r1, r2, #5
700022d6:	69fa      	ldr	r2, [r7, #28]
700022d8:	440a      	add	r2, r1
700022da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700022de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
700022e2:	6113      	str	r3, [r2, #16]
700022e4:	e037      	b.n	70002356 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
700022e6:	68bb      	ldr	r3, [r7, #8]
700022e8:	691a      	ldr	r2, [r3, #16]
700022ea:	68bb      	ldr	r3, [r7, #8]
700022ec:	689b      	ldr	r3, [r3, #8]
700022ee:	4413      	add	r3, r2
700022f0:	1e5a      	subs	r2, r3, #1
700022f2:	68bb      	ldr	r3, [r7, #8]
700022f4:	689b      	ldr	r3, [r3, #8]
700022f6:	fbb2 f3f3 	udiv	r3, r2, r3
700022fa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
700022fc:	68bb      	ldr	r3, [r7, #8]
700022fe:	689b      	ldr	r3, [r3, #8]
70002300:	8afa      	ldrh	r2, [r7, #22]
70002302:	fb03 f202 	mul.w	r2, r3, r2
70002306:	68bb      	ldr	r3, [r7, #8]
70002308:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
7000230a:	69bb      	ldr	r3, [r7, #24]
7000230c:	015a      	lsls	r2, r3, #5
7000230e:	69fb      	ldr	r3, [r7, #28]
70002310:	4413      	add	r3, r2
70002312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002316:	691a      	ldr	r2, [r3, #16]
70002318:	8afb      	ldrh	r3, [r7, #22]
7000231a:	04d9      	lsls	r1, r3, #19
7000231c:	4b39      	ldr	r3, [pc, #228]	@ (70002404 <USB_EPStartXfer+0x544>)
7000231e:	400b      	ands	r3, r1
70002320:	69b9      	ldr	r1, [r7, #24]
70002322:	0148      	lsls	r0, r1, #5
70002324:	69f9      	ldr	r1, [r7, #28]
70002326:	4401      	add	r1, r0
70002328:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
7000232c:	4313      	orrs	r3, r2
7000232e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
70002330:	69bb      	ldr	r3, [r7, #24]
70002332:	015a      	lsls	r2, r3, #5
70002334:	69fb      	ldr	r3, [r7, #28]
70002336:	4413      	add	r3, r2
70002338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000233c:	691a      	ldr	r2, [r3, #16]
7000233e:	68bb      	ldr	r3, [r7, #8]
70002340:	6a1b      	ldr	r3, [r3, #32]
70002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
70002346:	69b9      	ldr	r1, [r7, #24]
70002348:	0148      	lsls	r0, r1, #5
7000234a:	69f9      	ldr	r1, [r7, #28]
7000234c:	4401      	add	r1, r0
7000234e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
70002352:	4313      	orrs	r3, r2
70002354:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
70002356:	79fb      	ldrb	r3, [r7, #7]
70002358:	2b01      	cmp	r3, #1
7000235a:	d10d      	bne.n	70002378 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
7000235c:	68bb      	ldr	r3, [r7, #8]
7000235e:	68db      	ldr	r3, [r3, #12]
70002360:	2b00      	cmp	r3, #0
70002362:	d009      	beq.n	70002378 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
70002364:	68bb      	ldr	r3, [r7, #8]
70002366:	68d9      	ldr	r1, [r3, #12]
70002368:	69bb      	ldr	r3, [r7, #24]
7000236a:	015a      	lsls	r2, r3, #5
7000236c:	69fb      	ldr	r3, [r7, #28]
7000236e:	4413      	add	r3, r2
70002370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002374:	460a      	mov	r2, r1
70002376:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
70002378:	68bb      	ldr	r3, [r7, #8]
7000237a:	791b      	ldrb	r3, [r3, #4]
7000237c:	2b01      	cmp	r3, #1
7000237e:	d128      	bne.n	700023d2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
70002380:	69fb      	ldr	r3, [r7, #28]
70002382:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002386:	689b      	ldr	r3, [r3, #8]
70002388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
7000238c:	2b00      	cmp	r3, #0
7000238e:	d110      	bne.n	700023b2 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
70002390:	69bb      	ldr	r3, [r7, #24]
70002392:	015a      	lsls	r2, r3, #5
70002394:	69fb      	ldr	r3, [r7, #28]
70002396:	4413      	add	r3, r2
70002398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000239c:	681b      	ldr	r3, [r3, #0]
7000239e:	69ba      	ldr	r2, [r7, #24]
700023a0:	0151      	lsls	r1, r2, #5
700023a2:	69fa      	ldr	r2, [r7, #28]
700023a4:	440a      	add	r2, r1
700023a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700023aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
700023ae:	6013      	str	r3, [r2, #0]
700023b0:	e00f      	b.n	700023d2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
700023b2:	69bb      	ldr	r3, [r7, #24]
700023b4:	015a      	lsls	r2, r3, #5
700023b6:	69fb      	ldr	r3, [r7, #28]
700023b8:	4413      	add	r3, r2
700023ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700023be:	681b      	ldr	r3, [r3, #0]
700023c0:	69ba      	ldr	r2, [r7, #24]
700023c2:	0151      	lsls	r1, r2, #5
700023c4:	69fa      	ldr	r2, [r7, #28]
700023c6:	440a      	add	r2, r1
700023c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700023cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700023d0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
700023d2:	69bb      	ldr	r3, [r7, #24]
700023d4:	015a      	lsls	r2, r3, #5
700023d6:	69fb      	ldr	r3, [r7, #28]
700023d8:	4413      	add	r3, r2
700023da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700023de:	681b      	ldr	r3, [r3, #0]
700023e0:	69ba      	ldr	r2, [r7, #24]
700023e2:	0151      	lsls	r1, r2, #5
700023e4:	69fa      	ldr	r2, [r7, #28]
700023e6:	440a      	add	r2, r1
700023e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700023ec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
700023f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
700023f2:	2300      	movs	r3, #0
}
700023f4:	4618      	mov	r0, r3
700023f6:	3720      	adds	r7, #32
700023f8:	46bd      	mov	sp, r7
700023fa:	bd80      	pop	{r7, pc}
700023fc:	fff80000 	.word	0xfff80000
70002400:	e007ffff 	.word	0xe007ffff
70002404:	1ff80000 	.word	0x1ff80000

70002408 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
70002408:	b480      	push	{r7}
7000240a:	b087      	sub	sp, #28
7000240c:	af00      	add	r7, sp, #0
7000240e:	6078      	str	r0, [r7, #4]
70002410:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
70002412:	2300      	movs	r3, #0
70002414:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
70002416:	2300      	movs	r3, #0
70002418:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000241a:	687b      	ldr	r3, [r7, #4]
7000241c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
7000241e:	683b      	ldr	r3, [r7, #0]
70002420:	785b      	ldrb	r3, [r3, #1]
70002422:	2b01      	cmp	r3, #1
70002424:	d14a      	bne.n	700024bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
70002426:	683b      	ldr	r3, [r7, #0]
70002428:	781b      	ldrb	r3, [r3, #0]
7000242a:	015a      	lsls	r2, r3, #5
7000242c:	693b      	ldr	r3, [r7, #16]
7000242e:	4413      	add	r3, r2
70002430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002434:	681b      	ldr	r3, [r3, #0]
70002436:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
7000243a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000243e:	f040 8086 	bne.w	7000254e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
70002442:	683b      	ldr	r3, [r7, #0]
70002444:	781b      	ldrb	r3, [r3, #0]
70002446:	015a      	lsls	r2, r3, #5
70002448:	693b      	ldr	r3, [r7, #16]
7000244a:	4413      	add	r3, r2
7000244c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002450:	681b      	ldr	r3, [r3, #0]
70002452:	683a      	ldr	r2, [r7, #0]
70002454:	7812      	ldrb	r2, [r2, #0]
70002456:	0151      	lsls	r1, r2, #5
70002458:	693a      	ldr	r2, [r7, #16]
7000245a:	440a      	add	r2, r1
7000245c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002460:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
70002464:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
70002466:	683b      	ldr	r3, [r7, #0]
70002468:	781b      	ldrb	r3, [r3, #0]
7000246a:	015a      	lsls	r2, r3, #5
7000246c:	693b      	ldr	r3, [r7, #16]
7000246e:	4413      	add	r3, r2
70002470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
70002474:	681b      	ldr	r3, [r3, #0]
70002476:	683a      	ldr	r2, [r7, #0]
70002478:	7812      	ldrb	r2, [r2, #0]
7000247a:	0151      	lsls	r1, r2, #5
7000247c:	693a      	ldr	r2, [r7, #16]
7000247e:	440a      	add	r2, r1
70002480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
70002484:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
70002488:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
7000248a:	68fb      	ldr	r3, [r7, #12]
7000248c:	3301      	adds	r3, #1
7000248e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
70002490:	68fb      	ldr	r3, [r7, #12]
70002492:	f242 7210 	movw	r2, #10000	@ 0x2710
70002496:	4293      	cmp	r3, r2
70002498:	d902      	bls.n	700024a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
7000249a:	2301      	movs	r3, #1
7000249c:	75fb      	strb	r3, [r7, #23]
          break;
7000249e:	e056      	b.n	7000254e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
700024a0:	683b      	ldr	r3, [r7, #0]
700024a2:	781b      	ldrb	r3, [r3, #0]
700024a4:	015a      	lsls	r2, r3, #5
700024a6:	693b      	ldr	r3, [r7, #16]
700024a8:	4413      	add	r3, r2
700024aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700024ae:	681b      	ldr	r3, [r3, #0]
700024b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
700024b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
700024b8:	d0e7      	beq.n	7000248a <USB_EPStopXfer+0x82>
700024ba:	e048      	b.n	7000254e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
700024bc:	683b      	ldr	r3, [r7, #0]
700024be:	781b      	ldrb	r3, [r3, #0]
700024c0:	015a      	lsls	r2, r3, #5
700024c2:	693b      	ldr	r3, [r7, #16]
700024c4:	4413      	add	r3, r2
700024c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700024ca:	681b      	ldr	r3, [r3, #0]
700024cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
700024d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
700024d4:	d13b      	bne.n	7000254e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
700024d6:	683b      	ldr	r3, [r7, #0]
700024d8:	781b      	ldrb	r3, [r3, #0]
700024da:	015a      	lsls	r2, r3, #5
700024dc:	693b      	ldr	r3, [r7, #16]
700024de:	4413      	add	r3, r2
700024e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700024e4:	681b      	ldr	r3, [r3, #0]
700024e6:	683a      	ldr	r2, [r7, #0]
700024e8:	7812      	ldrb	r2, [r2, #0]
700024ea:	0151      	lsls	r1, r2, #5
700024ec:	693a      	ldr	r2, [r7, #16]
700024ee:	440a      	add	r2, r1
700024f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700024f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
700024f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
700024fa:	683b      	ldr	r3, [r7, #0]
700024fc:	781b      	ldrb	r3, [r3, #0]
700024fe:	015a      	lsls	r2, r3, #5
70002500:	693b      	ldr	r3, [r7, #16]
70002502:	4413      	add	r3, r2
70002504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002508:	681b      	ldr	r3, [r3, #0]
7000250a:	683a      	ldr	r2, [r7, #0]
7000250c:	7812      	ldrb	r2, [r2, #0]
7000250e:	0151      	lsls	r1, r2, #5
70002510:	693a      	ldr	r2, [r7, #16]
70002512:	440a      	add	r2, r1
70002514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002518:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
7000251c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
7000251e:	68fb      	ldr	r3, [r7, #12]
70002520:	3301      	adds	r3, #1
70002522:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
70002524:	68fb      	ldr	r3, [r7, #12]
70002526:	f242 7210 	movw	r2, #10000	@ 0x2710
7000252a:	4293      	cmp	r3, r2
7000252c:	d902      	bls.n	70002534 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
7000252e:	2301      	movs	r3, #1
70002530:	75fb      	strb	r3, [r7, #23]
          break;
70002532:	e00c      	b.n	7000254e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
70002534:	683b      	ldr	r3, [r7, #0]
70002536:	781b      	ldrb	r3, [r3, #0]
70002538:	015a      	lsls	r2, r3, #5
7000253a:	693b      	ldr	r3, [r7, #16]
7000253c:	4413      	add	r3, r2
7000253e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002542:	681b      	ldr	r3, [r3, #0]
70002544:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002548:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
7000254c:	d0e7      	beq.n	7000251e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
7000254e:	7dfb      	ldrb	r3, [r7, #23]
}
70002550:	4618      	mov	r0, r3
70002552:	371c      	adds	r7, #28
70002554:	46bd      	mov	sp, r7
70002556:	f85d 7b04 	ldr.w	r7, [sp], #4
7000255a:	4770      	bx	lr

7000255c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
7000255c:	b480      	push	{r7}
7000255e:	b089      	sub	sp, #36	@ 0x24
70002560:	af00      	add	r7, sp, #0
70002562:	60f8      	str	r0, [r7, #12]
70002564:	60b9      	str	r1, [r7, #8]
70002566:	4611      	mov	r1, r2
70002568:	461a      	mov	r2, r3
7000256a:	460b      	mov	r3, r1
7000256c:	71fb      	strb	r3, [r7, #7]
7000256e:	4613      	mov	r3, r2
70002570:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002572:	68fb      	ldr	r3, [r7, #12]
70002574:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
70002576:	68bb      	ldr	r3, [r7, #8]
70002578:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
7000257a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
7000257e:	2b00      	cmp	r3, #0
70002580:	d123      	bne.n	700025ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
70002582:	88bb      	ldrh	r3, [r7, #4]
70002584:	3303      	adds	r3, #3
70002586:	089b      	lsrs	r3, r3, #2
70002588:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
7000258a:	2300      	movs	r3, #0
7000258c:	61bb      	str	r3, [r7, #24]
7000258e:	e018      	b.n	700025c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
70002590:	79fb      	ldrb	r3, [r7, #7]
70002592:	031a      	lsls	r2, r3, #12
70002594:	697b      	ldr	r3, [r7, #20]
70002596:	4413      	add	r3, r2
70002598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000259c:	461a      	mov	r2, r3
7000259e:	69fb      	ldr	r3, [r7, #28]
700025a0:	681b      	ldr	r3, [r3, #0]
700025a2:	6013      	str	r3, [r2, #0]
      pSrc++;
700025a4:	69fb      	ldr	r3, [r7, #28]
700025a6:	3301      	adds	r3, #1
700025a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
700025aa:	69fb      	ldr	r3, [r7, #28]
700025ac:	3301      	adds	r3, #1
700025ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
700025b0:	69fb      	ldr	r3, [r7, #28]
700025b2:	3301      	adds	r3, #1
700025b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
700025b6:	69fb      	ldr	r3, [r7, #28]
700025b8:	3301      	adds	r3, #1
700025ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
700025bc:	69bb      	ldr	r3, [r7, #24]
700025be:	3301      	adds	r3, #1
700025c0:	61bb      	str	r3, [r7, #24]
700025c2:	69ba      	ldr	r2, [r7, #24]
700025c4:	693b      	ldr	r3, [r7, #16]
700025c6:	429a      	cmp	r2, r3
700025c8:	d3e2      	bcc.n	70002590 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
700025ca:	2300      	movs	r3, #0
}
700025cc:	4618      	mov	r0, r3
700025ce:	3724      	adds	r7, #36	@ 0x24
700025d0:	46bd      	mov	sp, r7
700025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
700025d6:	4770      	bx	lr

700025d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
700025d8:	b480      	push	{r7}
700025da:	b08b      	sub	sp, #44	@ 0x2c
700025dc:	af00      	add	r7, sp, #0
700025de:	60f8      	str	r0, [r7, #12]
700025e0:	60b9      	str	r1, [r7, #8]
700025e2:	4613      	mov	r3, r2
700025e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
700025e6:	68fb      	ldr	r3, [r7, #12]
700025e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
700025ea:	68bb      	ldr	r3, [r7, #8]
700025ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
700025ee:	88fb      	ldrh	r3, [r7, #6]
700025f0:	089b      	lsrs	r3, r3, #2
700025f2:	b29b      	uxth	r3, r3
700025f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
700025f6:	88fb      	ldrh	r3, [r7, #6]
700025f8:	f003 0303 	and.w	r3, r3, #3
700025fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
700025fe:	2300      	movs	r3, #0
70002600:	623b      	str	r3, [r7, #32]
70002602:	e014      	b.n	7000262e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
70002604:	69bb      	ldr	r3, [r7, #24]
70002606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
7000260a:	681a      	ldr	r2, [r3, #0]
7000260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000260e:	601a      	str	r2, [r3, #0]
    pDest++;
70002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002612:	3301      	adds	r3, #1
70002614:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
70002616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002618:	3301      	adds	r3, #1
7000261a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
7000261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000261e:	3301      	adds	r3, #1
70002620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
70002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002624:	3301      	adds	r3, #1
70002626:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
70002628:	6a3b      	ldr	r3, [r7, #32]
7000262a:	3301      	adds	r3, #1
7000262c:	623b      	str	r3, [r7, #32]
7000262e:	6a3a      	ldr	r2, [r7, #32]
70002630:	697b      	ldr	r3, [r7, #20]
70002632:	429a      	cmp	r2, r3
70002634:	d3e6      	bcc.n	70002604 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
70002636:	8bfb      	ldrh	r3, [r7, #30]
70002638:	2b00      	cmp	r3, #0
7000263a:	d01e      	beq.n	7000267a <USB_ReadPacket+0xa2>
  {
    i = 0U;
7000263c:	2300      	movs	r3, #0
7000263e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
70002640:	69bb      	ldr	r3, [r7, #24]
70002642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
70002646:	461a      	mov	r2, r3
70002648:	f107 0310 	add.w	r3, r7, #16
7000264c:	6812      	ldr	r2, [r2, #0]
7000264e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
70002650:	693a      	ldr	r2, [r7, #16]
70002652:	6a3b      	ldr	r3, [r7, #32]
70002654:	b2db      	uxtb	r3, r3
70002656:	00db      	lsls	r3, r3, #3
70002658:	fa22 f303 	lsr.w	r3, r2, r3
7000265c:	b2da      	uxtb	r2, r3
7000265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
70002660:	701a      	strb	r2, [r3, #0]
      i++;
70002662:	6a3b      	ldr	r3, [r7, #32]
70002664:	3301      	adds	r3, #1
70002666:	623b      	str	r3, [r7, #32]
      pDest++;
70002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
7000266a:	3301      	adds	r3, #1
7000266c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
7000266e:	8bfb      	ldrh	r3, [r7, #30]
70002670:	3b01      	subs	r3, #1
70002672:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
70002674:	8bfb      	ldrh	r3, [r7, #30]
70002676:	2b00      	cmp	r3, #0
70002678:	d1ea      	bne.n	70002650 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
7000267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
7000267c:	4618      	mov	r0, r3
7000267e:	372c      	adds	r7, #44	@ 0x2c
70002680:	46bd      	mov	sp, r7
70002682:	f85d 7b04 	ldr.w	r7, [sp], #4
70002686:	4770      	bx	lr

70002688 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70002688:	b480      	push	{r7}
7000268a:	b085      	sub	sp, #20
7000268c:	af00      	add	r7, sp, #0
7000268e:	6078      	str	r0, [r7, #4]
70002690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002692:	687b      	ldr	r3, [r7, #4]
70002694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70002696:	683b      	ldr	r3, [r7, #0]
70002698:	781b      	ldrb	r3, [r3, #0]
7000269a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
7000269c:	683b      	ldr	r3, [r7, #0]
7000269e:	785b      	ldrb	r3, [r3, #1]
700026a0:	2b01      	cmp	r3, #1
700026a2:	d12c      	bne.n	700026fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
700026a4:	68bb      	ldr	r3, [r7, #8]
700026a6:	015a      	lsls	r2, r3, #5
700026a8:	68fb      	ldr	r3, [r7, #12]
700026aa:	4413      	add	r3, r2
700026ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700026b0:	681b      	ldr	r3, [r3, #0]
700026b2:	2b00      	cmp	r3, #0
700026b4:	db12      	blt.n	700026dc <USB_EPSetStall+0x54>
700026b6:	68bb      	ldr	r3, [r7, #8]
700026b8:	2b00      	cmp	r3, #0
700026ba:	d00f      	beq.n	700026dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
700026bc:	68bb      	ldr	r3, [r7, #8]
700026be:	015a      	lsls	r2, r3, #5
700026c0:	68fb      	ldr	r3, [r7, #12]
700026c2:	4413      	add	r3, r2
700026c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700026c8:	681b      	ldr	r3, [r3, #0]
700026ca:	68ba      	ldr	r2, [r7, #8]
700026cc:	0151      	lsls	r1, r2, #5
700026ce:	68fa      	ldr	r2, [r7, #12]
700026d0:	440a      	add	r2, r1
700026d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700026d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
700026da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
700026dc:	68bb      	ldr	r3, [r7, #8]
700026de:	015a      	lsls	r2, r3, #5
700026e0:	68fb      	ldr	r3, [r7, #12]
700026e2:	4413      	add	r3, r2
700026e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700026e8:	681b      	ldr	r3, [r3, #0]
700026ea:	68ba      	ldr	r2, [r7, #8]
700026ec:	0151      	lsls	r1, r2, #5
700026ee:	68fa      	ldr	r2, [r7, #12]
700026f0:	440a      	add	r2, r1
700026f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700026f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
700026fa:	6013      	str	r3, [r2, #0]
700026fc:	e02b      	b.n	70002756 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
700026fe:	68bb      	ldr	r3, [r7, #8]
70002700:	015a      	lsls	r2, r3, #5
70002702:	68fb      	ldr	r3, [r7, #12]
70002704:	4413      	add	r3, r2
70002706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000270a:	681b      	ldr	r3, [r3, #0]
7000270c:	2b00      	cmp	r3, #0
7000270e:	db12      	blt.n	70002736 <USB_EPSetStall+0xae>
70002710:	68bb      	ldr	r3, [r7, #8]
70002712:	2b00      	cmp	r3, #0
70002714:	d00f      	beq.n	70002736 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
70002716:	68bb      	ldr	r3, [r7, #8]
70002718:	015a      	lsls	r2, r3, #5
7000271a:	68fb      	ldr	r3, [r7, #12]
7000271c:	4413      	add	r3, r2
7000271e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002722:	681b      	ldr	r3, [r3, #0]
70002724:	68ba      	ldr	r2, [r7, #8]
70002726:	0151      	lsls	r1, r2, #5
70002728:	68fa      	ldr	r2, [r7, #12]
7000272a:	440a      	add	r2, r1
7000272c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002730:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
70002734:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
70002736:	68bb      	ldr	r3, [r7, #8]
70002738:	015a      	lsls	r2, r3, #5
7000273a:	68fb      	ldr	r3, [r7, #12]
7000273c:	4413      	add	r3, r2
7000273e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002742:	681b      	ldr	r3, [r3, #0]
70002744:	68ba      	ldr	r2, [r7, #8]
70002746:	0151      	lsls	r1, r2, #5
70002748:	68fa      	ldr	r2, [r7, #12]
7000274a:	440a      	add	r2, r1
7000274c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
70002754:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
70002756:	2300      	movs	r3, #0
}
70002758:	4618      	mov	r0, r3
7000275a:	3714      	adds	r7, #20
7000275c:	46bd      	mov	sp, r7
7000275e:	f85d 7b04 	ldr.w	r7, [sp], #4
70002762:	4770      	bx	lr

70002764 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
70002764:	b480      	push	{r7}
70002766:	b085      	sub	sp, #20
70002768:	af00      	add	r7, sp, #0
7000276a:	6078      	str	r0, [r7, #4]
7000276c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000276e:	687b      	ldr	r3, [r7, #4]
70002770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
70002772:	683b      	ldr	r3, [r7, #0]
70002774:	781b      	ldrb	r3, [r3, #0]
70002776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
70002778:	683b      	ldr	r3, [r7, #0]
7000277a:	785b      	ldrb	r3, [r3, #1]
7000277c:	2b01      	cmp	r3, #1
7000277e:	d128      	bne.n	700027d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
70002780:	68bb      	ldr	r3, [r7, #8]
70002782:	015a      	lsls	r2, r3, #5
70002784:	68fb      	ldr	r3, [r7, #12]
70002786:	4413      	add	r3, r2
70002788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000278c:	681b      	ldr	r3, [r3, #0]
7000278e:	68ba      	ldr	r2, [r7, #8]
70002790:	0151      	lsls	r1, r2, #5
70002792:	68fa      	ldr	r2, [r7, #12]
70002794:	440a      	add	r2, r1
70002796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
7000279a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
7000279e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
700027a0:	683b      	ldr	r3, [r7, #0]
700027a2:	791b      	ldrb	r3, [r3, #4]
700027a4:	2b03      	cmp	r3, #3
700027a6:	d003      	beq.n	700027b0 <USB_EPClearStall+0x4c>
700027a8:	683b      	ldr	r3, [r7, #0]
700027aa:	791b      	ldrb	r3, [r3, #4]
700027ac:	2b02      	cmp	r3, #2
700027ae:	d138      	bne.n	70002822 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
700027b0:	68bb      	ldr	r3, [r7, #8]
700027b2:	015a      	lsls	r2, r3, #5
700027b4:	68fb      	ldr	r3, [r7, #12]
700027b6:	4413      	add	r3, r2
700027b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700027bc:	681b      	ldr	r3, [r3, #0]
700027be:	68ba      	ldr	r2, [r7, #8]
700027c0:	0151      	lsls	r1, r2, #5
700027c2:	68fa      	ldr	r2, [r7, #12]
700027c4:	440a      	add	r2, r1
700027c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
700027ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
700027ce:	6013      	str	r3, [r2, #0]
700027d0:	e027      	b.n	70002822 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
700027d2:	68bb      	ldr	r3, [r7, #8]
700027d4:	015a      	lsls	r2, r3, #5
700027d6:	68fb      	ldr	r3, [r7, #12]
700027d8:	4413      	add	r3, r2
700027da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
700027de:	681b      	ldr	r3, [r3, #0]
700027e0:	68ba      	ldr	r2, [r7, #8]
700027e2:	0151      	lsls	r1, r2, #5
700027e4:	68fa      	ldr	r2, [r7, #12]
700027e6:	440a      	add	r2, r1
700027e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
700027ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
700027f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
700027f2:	683b      	ldr	r3, [r7, #0]
700027f4:	791b      	ldrb	r3, [r3, #4]
700027f6:	2b03      	cmp	r3, #3
700027f8:	d003      	beq.n	70002802 <USB_EPClearStall+0x9e>
700027fa:	683b      	ldr	r3, [r7, #0]
700027fc:	791b      	ldrb	r3, [r3, #4]
700027fe:	2b02      	cmp	r3, #2
70002800:	d10f      	bne.n	70002822 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
70002802:	68bb      	ldr	r3, [r7, #8]
70002804:	015a      	lsls	r2, r3, #5
70002806:	68fb      	ldr	r3, [r7, #12]
70002808:	4413      	add	r3, r2
7000280a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
7000280e:	681b      	ldr	r3, [r3, #0]
70002810:	68ba      	ldr	r2, [r7, #8]
70002812:	0151      	lsls	r1, r2, #5
70002814:	68fa      	ldr	r2, [r7, #12]
70002816:	440a      	add	r2, r1
70002818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
7000281c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
70002820:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
70002822:	2300      	movs	r3, #0
}
70002824:	4618      	mov	r0, r3
70002826:	3714      	adds	r7, #20
70002828:	46bd      	mov	sp, r7
7000282a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000282e:	4770      	bx	lr

70002830 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
70002830:	b480      	push	{r7}
70002832:	b085      	sub	sp, #20
70002834:	af00      	add	r7, sp, #0
70002836:	6078      	str	r0, [r7, #4]
70002838:	460b      	mov	r3, r1
7000283a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
7000283c:	687b      	ldr	r3, [r7, #4]
7000283e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
70002840:	68fb      	ldr	r3, [r7, #12]
70002842:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002846:	681b      	ldr	r3, [r3, #0]
70002848:	68fa      	ldr	r2, [r7, #12]
7000284a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
7000284e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
70002852:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
70002854:	68fb      	ldr	r3, [r7, #12]
70002856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000285a:	681a      	ldr	r2, [r3, #0]
7000285c:	78fb      	ldrb	r3, [r7, #3]
7000285e:	011b      	lsls	r3, r3, #4
70002860:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
70002864:	68f9      	ldr	r1, [r7, #12]
70002866:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
7000286a:	4313      	orrs	r3, r2
7000286c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
7000286e:	2300      	movs	r3, #0
}
70002870:	4618      	mov	r0, r3
70002872:	3714      	adds	r7, #20
70002874:	46bd      	mov	sp, r7
70002876:	f85d 7b04 	ldr.w	r7, [sp], #4
7000287a:	4770      	bx	lr

7000287c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
7000287c:	b480      	push	{r7}
7000287e:	b085      	sub	sp, #20
70002880:	af00      	add	r7, sp, #0
70002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
70002884:	687b      	ldr	r3, [r7, #4]
70002886:	695b      	ldr	r3, [r3, #20]
70002888:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
7000288a:	687b      	ldr	r3, [r7, #4]
7000288c:	699b      	ldr	r3, [r3, #24]
7000288e:	68fa      	ldr	r2, [r7, #12]
70002890:	4013      	ands	r3, r2
70002892:	60fb      	str	r3, [r7, #12]

  return tmpreg;
70002894:	68fb      	ldr	r3, [r7, #12]
}
70002896:	4618      	mov	r0, r3
70002898:	3714      	adds	r7, #20
7000289a:	46bd      	mov	sp, r7
7000289c:	f85d 7b04 	ldr.w	r7, [sp], #4
700028a0:	4770      	bx	lr

700028a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
700028a2:	b480      	push	{r7}
700028a4:	b085      	sub	sp, #20
700028a6:	af00      	add	r7, sp, #0
700028a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
700028aa:	687b      	ldr	r3, [r7, #4]
700028ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
700028ae:	68fb      	ldr	r3, [r7, #12]
700028b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700028b4:	699b      	ldr	r3, [r3, #24]
700028b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
700028b8:	68fb      	ldr	r3, [r7, #12]
700028ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700028be:	69db      	ldr	r3, [r3, #28]
700028c0:	68ba      	ldr	r2, [r7, #8]
700028c2:	4013      	ands	r3, r2
700028c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
700028c6:	68bb      	ldr	r3, [r7, #8]
700028c8:	0c1b      	lsrs	r3, r3, #16
}
700028ca:	4618      	mov	r0, r3
700028cc:	3714      	adds	r7, #20
700028ce:	46bd      	mov	sp, r7
700028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
700028d4:	4770      	bx	lr

700028d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
700028d6:	b480      	push	{r7}
700028d8:	b085      	sub	sp, #20
700028da:	af00      	add	r7, sp, #0
700028dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
700028de:	687b      	ldr	r3, [r7, #4]
700028e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
700028e2:	68fb      	ldr	r3, [r7, #12]
700028e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700028e8:	699b      	ldr	r3, [r3, #24]
700028ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
700028ec:	68fb      	ldr	r3, [r7, #12]
700028ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700028f2:	69db      	ldr	r3, [r3, #28]
700028f4:	68ba      	ldr	r2, [r7, #8]
700028f6:	4013      	ands	r3, r2
700028f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
700028fa:	68bb      	ldr	r3, [r7, #8]
700028fc:	b29b      	uxth	r3, r3
}
700028fe:	4618      	mov	r0, r3
70002900:	3714      	adds	r7, #20
70002902:	46bd      	mov	sp, r7
70002904:	f85d 7b04 	ldr.w	r7, [sp], #4
70002908:	4770      	bx	lr

7000290a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
7000290a:	b480      	push	{r7}
7000290c:	b085      	sub	sp, #20
7000290e:	af00      	add	r7, sp, #0
70002910:	6078      	str	r0, [r7, #4]
70002912:	460b      	mov	r3, r1
70002914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002916:	687b      	ldr	r3, [r7, #4]
70002918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
7000291a:	78fb      	ldrb	r3, [r7, #3]
7000291c:	015a      	lsls	r2, r3, #5
7000291e:	68fb      	ldr	r3, [r7, #12]
70002920:	4413      	add	r3, r2
70002922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002926:	689b      	ldr	r3, [r3, #8]
70002928:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
7000292a:	68fb      	ldr	r3, [r7, #12]
7000292c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002930:	695b      	ldr	r3, [r3, #20]
70002932:	68ba      	ldr	r2, [r7, #8]
70002934:	4013      	ands	r3, r2
70002936:	60bb      	str	r3, [r7, #8]

  return tmpreg;
70002938:	68bb      	ldr	r3, [r7, #8]
}
7000293a:	4618      	mov	r0, r3
7000293c:	3714      	adds	r7, #20
7000293e:	46bd      	mov	sp, r7
70002940:	f85d 7b04 	ldr.w	r7, [sp], #4
70002944:	4770      	bx	lr

70002946 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
70002946:	b480      	push	{r7}
70002948:	b087      	sub	sp, #28
7000294a:	af00      	add	r7, sp, #0
7000294c:	6078      	str	r0, [r7, #4]
7000294e:	460b      	mov	r3, r1
70002950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002952:	687b      	ldr	r3, [r7, #4]
70002954:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
70002956:	697b      	ldr	r3, [r7, #20]
70002958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
7000295c:	691b      	ldr	r3, [r3, #16]
7000295e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
70002960:	697b      	ldr	r3, [r7, #20]
70002962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
70002966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
70002968:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
7000296a:	78fb      	ldrb	r3, [r7, #3]
7000296c:	f003 030f 	and.w	r3, r3, #15
70002970:	68fa      	ldr	r2, [r7, #12]
70002972:	fa22 f303 	lsr.w	r3, r2, r3
70002976:	01db      	lsls	r3, r3, #7
70002978:	b2db      	uxtb	r3, r3
7000297a:	693a      	ldr	r2, [r7, #16]
7000297c:	4313      	orrs	r3, r2
7000297e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
70002980:	78fb      	ldrb	r3, [r7, #3]
70002982:	015a      	lsls	r2, r3, #5
70002984:	697b      	ldr	r3, [r7, #20]
70002986:	4413      	add	r3, r2
70002988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
7000298c:	689b      	ldr	r3, [r3, #8]
7000298e:	693a      	ldr	r2, [r7, #16]
70002990:	4013      	ands	r3, r2
70002992:	60bb      	str	r3, [r7, #8]

  return tmpreg;
70002994:	68bb      	ldr	r3, [r7, #8]
}
70002996:	4618      	mov	r0, r3
70002998:	371c      	adds	r7, #28
7000299a:	46bd      	mov	sp, r7
7000299c:	f85d 7b04 	ldr.w	r7, [sp], #4
700029a0:	4770      	bx	lr

700029a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
700029a2:	b480      	push	{r7}
700029a4:	b083      	sub	sp, #12
700029a6:	af00      	add	r7, sp, #0
700029a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
700029aa:	687b      	ldr	r3, [r7, #4]
700029ac:	695b      	ldr	r3, [r3, #20]
700029ae:	f003 0301 	and.w	r3, r3, #1
}
700029b2:	4618      	mov	r0, r3
700029b4:	370c      	adds	r7, #12
700029b6:	46bd      	mov	sp, r7
700029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
700029bc:	4770      	bx	lr
	...

700029c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
700029c0:	b480      	push	{r7}
700029c2:	b085      	sub	sp, #20
700029c4:	af00      	add	r7, sp, #0
700029c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
700029c8:	687b      	ldr	r3, [r7, #4]
700029ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
700029cc:	68fb      	ldr	r3, [r7, #12]
700029ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700029d2:	681a      	ldr	r2, [r3, #0]
700029d4:	68fb      	ldr	r3, [r7, #12]
700029d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
700029da:	4619      	mov	r1, r3
700029dc:	4b09      	ldr	r3, [pc, #36]	@ (70002a04 <USB_ActivateSetup+0x44>)
700029de:	4013      	ands	r3, r2
700029e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
700029e2:	68fb      	ldr	r3, [r7, #12]
700029e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
700029e8:	685b      	ldr	r3, [r3, #4]
700029ea:	68fa      	ldr	r2, [r7, #12]
700029ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
700029f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
700029f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
700029f6:	2300      	movs	r3, #0
}
700029f8:	4618      	mov	r0, r3
700029fa:	3714      	adds	r7, #20
700029fc:	46bd      	mov	sp, r7
700029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
70002a02:	4770      	bx	lr
70002a04:	fffff800 	.word	0xfffff800

70002a08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
70002a08:	b480      	push	{r7}
70002a0a:	b087      	sub	sp, #28
70002a0c:	af00      	add	r7, sp, #0
70002a0e:	60f8      	str	r0, [r7, #12]
70002a10:	460b      	mov	r3, r1
70002a12:	607a      	str	r2, [r7, #4]
70002a14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
70002a16:	68fb      	ldr	r3, [r7, #12]
70002a18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
70002a1a:	68fb      	ldr	r3, [r7, #12]
70002a1c:	333c      	adds	r3, #60	@ 0x3c
70002a1e:	3304      	adds	r3, #4
70002a20:	681b      	ldr	r3, [r3, #0]
70002a22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
70002a24:	693b      	ldr	r3, [r7, #16]
70002a26:	4a26      	ldr	r2, [pc, #152]	@ (70002ac0 <USB_EP0_OutStart+0xb8>)
70002a28:	4293      	cmp	r3, r2
70002a2a:	d90a      	bls.n	70002a42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
70002a2c:	697b      	ldr	r3, [r7, #20]
70002a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002a32:	681b      	ldr	r3, [r3, #0]
70002a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
70002a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
70002a3c:	d101      	bne.n	70002a42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
70002a3e:	2300      	movs	r3, #0
70002a40:	e037      	b.n	70002ab2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
70002a42:	697b      	ldr	r3, [r7, #20]
70002a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002a48:	461a      	mov	r2, r3
70002a4a:	2300      	movs	r3, #0
70002a4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
70002a4e:	697b      	ldr	r3, [r7, #20]
70002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002a54:	691b      	ldr	r3, [r3, #16]
70002a56:	697a      	ldr	r2, [r7, #20]
70002a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002a5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
70002a60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
70002a62:	697b      	ldr	r3, [r7, #20]
70002a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002a68:	691b      	ldr	r3, [r3, #16]
70002a6a:	697a      	ldr	r2, [r7, #20]
70002a6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002a70:	f043 0318 	orr.w	r3, r3, #24
70002a74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
70002a76:	697b      	ldr	r3, [r7, #20]
70002a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002a7c:	691b      	ldr	r3, [r3, #16]
70002a7e:	697a      	ldr	r2, [r7, #20]
70002a80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002a84:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
70002a88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
70002a8a:	7afb      	ldrb	r3, [r7, #11]
70002a8c:	2b01      	cmp	r3, #1
70002a8e:	d10f      	bne.n	70002ab0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
70002a90:	697b      	ldr	r3, [r7, #20]
70002a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002a96:	461a      	mov	r2, r3
70002a98:	687b      	ldr	r3, [r7, #4]
70002a9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
70002a9c:	697b      	ldr	r3, [r7, #20]
70002a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
70002aa2:	681b      	ldr	r3, [r3, #0]
70002aa4:	697a      	ldr	r2, [r7, #20]
70002aa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
70002aaa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
70002aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
70002ab0:	2300      	movs	r3, #0
}
70002ab2:	4618      	mov	r0, r3
70002ab4:	371c      	adds	r7, #28
70002ab6:	46bd      	mov	sp, r7
70002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
70002abc:	4770      	bx	lr
70002abe:	bf00      	nop
70002ac0:	4f54300a 	.word	0x4f54300a

70002ac4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
70002ac4:	b480      	push	{r7}
70002ac6:	b083      	sub	sp, #12
70002ac8:	af00      	add	r7, sp, #0
70002aca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
70002acc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
70002ace:	4618      	mov	r0, r3
70002ad0:	370c      	adds	r7, #12
70002ad2:	46bd      	mov	sp, r7
70002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
70002ad8:	4770      	bx	lr

70002ada <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
70002ada:	b580      	push	{r7, lr}
70002adc:	b084      	sub	sp, #16
70002ade:	af00      	add	r7, sp, #0
70002ae0:	6078      	str	r0, [r7, #4]
70002ae2:	460b      	mov	r3, r1
70002ae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
70002ae6:	2300      	movs	r3, #0
70002ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
70002aea:	687b      	ldr	r3, [r7, #4]
70002aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002af0:	2b00      	cmp	r3, #0
70002af2:	d009      	beq.n	70002b08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
70002af4:	687b      	ldr	r3, [r7, #4]
70002af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002afa:	681b      	ldr	r3, [r3, #0]
70002afc:	78fa      	ldrb	r2, [r7, #3]
70002afe:	4611      	mov	r1, r2
70002b00:	6878      	ldr	r0, [r7, #4]
70002b02:	4798      	blx	r3
70002b04:	4603      	mov	r3, r0
70002b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70002b08:	7bfb      	ldrb	r3, [r7, #15]
}
70002b0a:	4618      	mov	r0, r3
70002b0c:	3710      	adds	r7, #16
70002b0e:	46bd      	mov	sp, r7
70002b10:	bd80      	pop	{r7, pc}

70002b12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
70002b12:	b580      	push	{r7, lr}
70002b14:	b084      	sub	sp, #16
70002b16:	af00      	add	r7, sp, #0
70002b18:	6078      	str	r0, [r7, #4]
70002b1a:	460b      	mov	r3, r1
70002b1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
70002b1e:	2300      	movs	r3, #0
70002b20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
70002b22:	687b      	ldr	r3, [r7, #4]
70002b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002b28:	685b      	ldr	r3, [r3, #4]
70002b2a:	78fa      	ldrb	r2, [r7, #3]
70002b2c:	4611      	mov	r1, r2
70002b2e:	6878      	ldr	r0, [r7, #4]
70002b30:	4798      	blx	r3
70002b32:	4603      	mov	r3, r0
70002b34:	2b00      	cmp	r3, #0
70002b36:	d001      	beq.n	70002b3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
70002b38:	2303      	movs	r3, #3
70002b3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
70002b3e:	4618      	mov	r0, r3
70002b40:	3710      	adds	r7, #16
70002b42:	46bd      	mov	sp, r7
70002b44:	bd80      	pop	{r7, pc}

70002b46 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
70002b46:	b580      	push	{r7, lr}
70002b48:	b084      	sub	sp, #16
70002b4a:	af00      	add	r7, sp, #0
70002b4c:	6078      	str	r0, [r7, #4]
70002b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
70002b50:	687b      	ldr	r3, [r7, #4]
70002b52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002b56:	6839      	ldr	r1, [r7, #0]
70002b58:	4618      	mov	r0, r3
70002b5a:	f001 f8e2 	bl	70003d22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
70002b5e:	687b      	ldr	r3, [r7, #4]
70002b60:	2201      	movs	r2, #1
70002b62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
70002b66:	687b      	ldr	r3, [r7, #4]
70002b68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
70002b6c:	461a      	mov	r2, r3
70002b6e:	687b      	ldr	r3, [r7, #4]
70002b70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
70002b74:	687b      	ldr	r3, [r7, #4]
70002b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70002b7a:	f003 031f 	and.w	r3, r3, #31
70002b7e:	2b02      	cmp	r3, #2
70002b80:	d01a      	beq.n	70002bb8 <USBD_LL_SetupStage+0x72>
70002b82:	2b02      	cmp	r3, #2
70002b84:	d822      	bhi.n	70002bcc <USBD_LL_SetupStage+0x86>
70002b86:	2b00      	cmp	r3, #0
70002b88:	d002      	beq.n	70002b90 <USBD_LL_SetupStage+0x4a>
70002b8a:	2b01      	cmp	r3, #1
70002b8c:	d00a      	beq.n	70002ba4 <USBD_LL_SetupStage+0x5e>
70002b8e:	e01d      	b.n	70002bcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
70002b90:	687b      	ldr	r3, [r7, #4]
70002b92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002b96:	4619      	mov	r1, r3
70002b98:	6878      	ldr	r0, [r7, #4]
70002b9a:	f000 fb0f 	bl	700031bc <USBD_StdDevReq>
70002b9e:	4603      	mov	r3, r0
70002ba0:	73fb      	strb	r3, [r7, #15]
      break;
70002ba2:	e020      	b.n	70002be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
70002ba4:	687b      	ldr	r3, [r7, #4]
70002ba6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002baa:	4619      	mov	r1, r3
70002bac:	6878      	ldr	r0, [r7, #4]
70002bae:	f000 fb77 	bl	700032a0 <USBD_StdItfReq>
70002bb2:	4603      	mov	r3, r0
70002bb4:	73fb      	strb	r3, [r7, #15]
      break;
70002bb6:	e016      	b.n	70002be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
70002bb8:	687b      	ldr	r3, [r7, #4]
70002bba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
70002bbe:	4619      	mov	r1, r3
70002bc0:	6878      	ldr	r0, [r7, #4]
70002bc2:	f000 fbd9 	bl	70003378 <USBD_StdEPReq>
70002bc6:	4603      	mov	r3, r0
70002bc8:	73fb      	strb	r3, [r7, #15]
      break;
70002bca:	e00c      	b.n	70002be6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
70002bcc:	687b      	ldr	r3, [r7, #4]
70002bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70002bd2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
70002bd6:	b2db      	uxtb	r3, r3
70002bd8:	4619      	mov	r1, r3
70002bda:	6878      	ldr	r0, [r7, #4]
70002bdc:	f001 fa76 	bl	700040cc <USBD_LL_StallEP>
70002be0:	4603      	mov	r3, r0
70002be2:	73fb      	strb	r3, [r7, #15]
      break;
70002be4:	bf00      	nop
  }

  return ret;
70002be6:	7bfb      	ldrb	r3, [r7, #15]
}
70002be8:	4618      	mov	r0, r3
70002bea:	3710      	adds	r7, #16
70002bec:	46bd      	mov	sp, r7
70002bee:	bd80      	pop	{r7, pc}

70002bf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
70002bf0:	b580      	push	{r7, lr}
70002bf2:	b086      	sub	sp, #24
70002bf4:	af00      	add	r7, sp, #0
70002bf6:	60f8      	str	r0, [r7, #12]
70002bf8:	460b      	mov	r3, r1
70002bfa:	607a      	str	r2, [r7, #4]
70002bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
70002bfe:	2300      	movs	r3, #0
70002c00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
70002c02:	7afb      	ldrb	r3, [r7, #11]
70002c04:	2b00      	cmp	r3, #0
70002c06:	d16e      	bne.n	70002ce6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
70002c08:	68fb      	ldr	r3, [r7, #12]
70002c0a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
70002c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
70002c10:	68fb      	ldr	r3, [r7, #12]
70002c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
70002c16:	2b03      	cmp	r3, #3
70002c18:	f040 8098 	bne.w	70002d4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
70002c1c:	693b      	ldr	r3, [r7, #16]
70002c1e:	689a      	ldr	r2, [r3, #8]
70002c20:	693b      	ldr	r3, [r7, #16]
70002c22:	68db      	ldr	r3, [r3, #12]
70002c24:	429a      	cmp	r2, r3
70002c26:	d913      	bls.n	70002c50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
70002c28:	693b      	ldr	r3, [r7, #16]
70002c2a:	689a      	ldr	r2, [r3, #8]
70002c2c:	693b      	ldr	r3, [r7, #16]
70002c2e:	68db      	ldr	r3, [r3, #12]
70002c30:	1ad2      	subs	r2, r2, r3
70002c32:	693b      	ldr	r3, [r7, #16]
70002c34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
70002c36:	693b      	ldr	r3, [r7, #16]
70002c38:	68da      	ldr	r2, [r3, #12]
70002c3a:	693b      	ldr	r3, [r7, #16]
70002c3c:	689b      	ldr	r3, [r3, #8]
70002c3e:	4293      	cmp	r3, r2
70002c40:	bf28      	it	cs
70002c42:	4613      	movcs	r3, r2
70002c44:	461a      	mov	r2, r3
70002c46:	6879      	ldr	r1, [r7, #4]
70002c48:	68f8      	ldr	r0, [r7, #12]
70002c4a:	f001 f8e1 	bl	70003e10 <USBD_CtlContinueRx>
70002c4e:	e07d      	b.n	70002d4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
70002c50:	68fb      	ldr	r3, [r7, #12]
70002c52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
70002c56:	f003 031f 	and.w	r3, r3, #31
70002c5a:	2b02      	cmp	r3, #2
70002c5c:	d014      	beq.n	70002c88 <USBD_LL_DataOutStage+0x98>
70002c5e:	2b02      	cmp	r3, #2
70002c60:	d81d      	bhi.n	70002c9e <USBD_LL_DataOutStage+0xae>
70002c62:	2b00      	cmp	r3, #0
70002c64:	d002      	beq.n	70002c6c <USBD_LL_DataOutStage+0x7c>
70002c66:	2b01      	cmp	r3, #1
70002c68:	d003      	beq.n	70002c72 <USBD_LL_DataOutStage+0x82>
70002c6a:	e018      	b.n	70002c9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
70002c6c:	2300      	movs	r3, #0
70002c6e:	75bb      	strb	r3, [r7, #22]
            break;
70002c70:	e018      	b.n	70002ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
70002c72:	68fb      	ldr	r3, [r7, #12]
70002c74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
70002c78:	b2db      	uxtb	r3, r3
70002c7a:	4619      	mov	r1, r3
70002c7c:	68f8      	ldr	r0, [r7, #12]
70002c7e:	f000 fa64 	bl	7000314a <USBD_CoreFindIF>
70002c82:	4603      	mov	r3, r0
70002c84:	75bb      	strb	r3, [r7, #22]
            break;
70002c86:	e00d      	b.n	70002ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
70002c88:	68fb      	ldr	r3, [r7, #12]
70002c8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
70002c8e:	b2db      	uxtb	r3, r3
70002c90:	4619      	mov	r1, r3
70002c92:	68f8      	ldr	r0, [r7, #12]
70002c94:	f000 fa66 	bl	70003164 <USBD_CoreFindEP>
70002c98:	4603      	mov	r3, r0
70002c9a:	75bb      	strb	r3, [r7, #22]
            break;
70002c9c:	e002      	b.n	70002ca4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
70002c9e:	2300      	movs	r3, #0
70002ca0:	75bb      	strb	r3, [r7, #22]
            break;
70002ca2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
70002ca4:	7dbb      	ldrb	r3, [r7, #22]
70002ca6:	2b00      	cmp	r3, #0
70002ca8:	d119      	bne.n	70002cde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002caa:	68fb      	ldr	r3, [r7, #12]
70002cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002cb0:	b2db      	uxtb	r3, r3
70002cb2:	2b03      	cmp	r3, #3
70002cb4:	d113      	bne.n	70002cde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
70002cb6:	7dba      	ldrb	r2, [r7, #22]
70002cb8:	68fb      	ldr	r3, [r7, #12]
70002cba:	32ae      	adds	r2, #174	@ 0xae
70002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002cc0:	691b      	ldr	r3, [r3, #16]
70002cc2:	2b00      	cmp	r3, #0
70002cc4:	d00b      	beq.n	70002cde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
70002cc6:	7dba      	ldrb	r2, [r7, #22]
70002cc8:	68fb      	ldr	r3, [r7, #12]
70002cca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
70002cce:	7dba      	ldrb	r2, [r7, #22]
70002cd0:	68fb      	ldr	r3, [r7, #12]
70002cd2:	32ae      	adds	r2, #174	@ 0xae
70002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002cd8:	691b      	ldr	r3, [r3, #16]
70002cda:	68f8      	ldr	r0, [r7, #12]
70002cdc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
70002cde:	68f8      	ldr	r0, [r7, #12]
70002ce0:	f001 f8a7 	bl	70003e32 <USBD_CtlSendStatus>
70002ce4:	e032      	b.n	70002d4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
70002ce6:	7afb      	ldrb	r3, [r7, #11]
70002ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70002cec:	b2db      	uxtb	r3, r3
70002cee:	4619      	mov	r1, r3
70002cf0:	68f8      	ldr	r0, [r7, #12]
70002cf2:	f000 fa37 	bl	70003164 <USBD_CoreFindEP>
70002cf6:	4603      	mov	r3, r0
70002cf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70002cfa:	7dbb      	ldrb	r3, [r7, #22]
70002cfc:	2bff      	cmp	r3, #255	@ 0xff
70002cfe:	d025      	beq.n	70002d4c <USBD_LL_DataOutStage+0x15c>
70002d00:	7dbb      	ldrb	r3, [r7, #22]
70002d02:	2b00      	cmp	r3, #0
70002d04:	d122      	bne.n	70002d4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002d06:	68fb      	ldr	r3, [r7, #12]
70002d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002d0c:	b2db      	uxtb	r3, r3
70002d0e:	2b03      	cmp	r3, #3
70002d10:	d117      	bne.n	70002d42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
70002d12:	7dba      	ldrb	r2, [r7, #22]
70002d14:	68fb      	ldr	r3, [r7, #12]
70002d16:	32ae      	adds	r2, #174	@ 0xae
70002d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002d1c:	699b      	ldr	r3, [r3, #24]
70002d1e:	2b00      	cmp	r3, #0
70002d20:	d00f      	beq.n	70002d42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
70002d22:	7dba      	ldrb	r2, [r7, #22]
70002d24:	68fb      	ldr	r3, [r7, #12]
70002d26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
70002d2a:	7dba      	ldrb	r2, [r7, #22]
70002d2c:	68fb      	ldr	r3, [r7, #12]
70002d2e:	32ae      	adds	r2, #174	@ 0xae
70002d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002d34:	699b      	ldr	r3, [r3, #24]
70002d36:	7afa      	ldrb	r2, [r7, #11]
70002d38:	4611      	mov	r1, r2
70002d3a:	68f8      	ldr	r0, [r7, #12]
70002d3c:	4798      	blx	r3
70002d3e:	4603      	mov	r3, r0
70002d40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
70002d42:	7dfb      	ldrb	r3, [r7, #23]
70002d44:	2b00      	cmp	r3, #0
70002d46:	d001      	beq.n	70002d4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
70002d48:	7dfb      	ldrb	r3, [r7, #23]
70002d4a:	e000      	b.n	70002d4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
70002d4c:	2300      	movs	r3, #0
}
70002d4e:	4618      	mov	r0, r3
70002d50:	3718      	adds	r7, #24
70002d52:	46bd      	mov	sp, r7
70002d54:	bd80      	pop	{r7, pc}

70002d56 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
70002d56:	b580      	push	{r7, lr}
70002d58:	b086      	sub	sp, #24
70002d5a:	af00      	add	r7, sp, #0
70002d5c:	60f8      	str	r0, [r7, #12]
70002d5e:	460b      	mov	r3, r1
70002d60:	607a      	str	r2, [r7, #4]
70002d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
70002d64:	7afb      	ldrb	r3, [r7, #11]
70002d66:	2b00      	cmp	r3, #0
70002d68:	d16f      	bne.n	70002e4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
70002d6a:	68fb      	ldr	r3, [r7, #12]
70002d6c:	3314      	adds	r3, #20
70002d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
70002d70:	68fb      	ldr	r3, [r7, #12]
70002d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
70002d76:	2b02      	cmp	r3, #2
70002d78:	d15a      	bne.n	70002e30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
70002d7a:	693b      	ldr	r3, [r7, #16]
70002d7c:	689a      	ldr	r2, [r3, #8]
70002d7e:	693b      	ldr	r3, [r7, #16]
70002d80:	68db      	ldr	r3, [r3, #12]
70002d82:	429a      	cmp	r2, r3
70002d84:	d914      	bls.n	70002db0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
70002d86:	693b      	ldr	r3, [r7, #16]
70002d88:	689a      	ldr	r2, [r3, #8]
70002d8a:	693b      	ldr	r3, [r7, #16]
70002d8c:	68db      	ldr	r3, [r3, #12]
70002d8e:	1ad2      	subs	r2, r2, r3
70002d90:	693b      	ldr	r3, [r7, #16]
70002d92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
70002d94:	693b      	ldr	r3, [r7, #16]
70002d96:	689b      	ldr	r3, [r3, #8]
70002d98:	461a      	mov	r2, r3
70002d9a:	6879      	ldr	r1, [r7, #4]
70002d9c:	68f8      	ldr	r0, [r7, #12]
70002d9e:	f001 f826 	bl	70003dee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70002da2:	2300      	movs	r3, #0
70002da4:	2200      	movs	r2, #0
70002da6:	2100      	movs	r1, #0
70002da8:	68f8      	ldr	r0, [r7, #12]
70002daa:	f001 fa39 	bl	70004220 <USBD_LL_PrepareReceive>
70002dae:	e03f      	b.n	70002e30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
70002db0:	693b      	ldr	r3, [r7, #16]
70002db2:	68da      	ldr	r2, [r3, #12]
70002db4:	693b      	ldr	r3, [r7, #16]
70002db6:	689b      	ldr	r3, [r3, #8]
70002db8:	429a      	cmp	r2, r3
70002dba:	d11c      	bne.n	70002df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
70002dbc:	693b      	ldr	r3, [r7, #16]
70002dbe:	685a      	ldr	r2, [r3, #4]
70002dc0:	693b      	ldr	r3, [r7, #16]
70002dc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
70002dc4:	429a      	cmp	r2, r3
70002dc6:	d316      	bcc.n	70002df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
70002dc8:	693b      	ldr	r3, [r7, #16]
70002dca:	685a      	ldr	r2, [r3, #4]
70002dcc:	68fb      	ldr	r3, [r7, #12]
70002dce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
70002dd2:	429a      	cmp	r2, r3
70002dd4:	d20f      	bcs.n	70002df6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
70002dd6:	2200      	movs	r2, #0
70002dd8:	2100      	movs	r1, #0
70002dda:	68f8      	ldr	r0, [r7, #12]
70002ddc:	f001 f807 	bl	70003dee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
70002de0:	68fb      	ldr	r3, [r7, #12]
70002de2:	2200      	movs	r2, #0
70002de4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70002de8:	2300      	movs	r3, #0
70002dea:	2200      	movs	r2, #0
70002dec:	2100      	movs	r1, #0
70002dee:	68f8      	ldr	r0, [r7, #12]
70002df0:	f001 fa16 	bl	70004220 <USBD_LL_PrepareReceive>
70002df4:	e01c      	b.n	70002e30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002df6:	68fb      	ldr	r3, [r7, #12]
70002df8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002dfc:	b2db      	uxtb	r3, r3
70002dfe:	2b03      	cmp	r3, #3
70002e00:	d10f      	bne.n	70002e22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
70002e02:	68fb      	ldr	r3, [r7, #12]
70002e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002e08:	68db      	ldr	r3, [r3, #12]
70002e0a:	2b00      	cmp	r3, #0
70002e0c:	d009      	beq.n	70002e22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
70002e0e:	68fb      	ldr	r3, [r7, #12]
70002e10:	2200      	movs	r2, #0
70002e12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
70002e16:	68fb      	ldr	r3, [r7, #12]
70002e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002e1c:	68db      	ldr	r3, [r3, #12]
70002e1e:	68f8      	ldr	r0, [r7, #12]
70002e20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
70002e22:	2180      	movs	r1, #128	@ 0x80
70002e24:	68f8      	ldr	r0, [r7, #12]
70002e26:	f001 f951 	bl	700040cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
70002e2a:	68f8      	ldr	r0, [r7, #12]
70002e2c:	f001 f814 	bl	70003e58 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
70002e30:	68fb      	ldr	r3, [r7, #12]
70002e32:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
70002e36:	2b00      	cmp	r3, #0
70002e38:	d03a      	beq.n	70002eb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
70002e3a:	68f8      	ldr	r0, [r7, #12]
70002e3c:	f7ff fe42 	bl	70002ac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
70002e40:	68fb      	ldr	r3, [r7, #12]
70002e42:	2200      	movs	r2, #0
70002e44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
70002e48:	e032      	b.n	70002eb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
70002e4a:	7afb      	ldrb	r3, [r7, #11]
70002e4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
70002e50:	b2db      	uxtb	r3, r3
70002e52:	4619      	mov	r1, r3
70002e54:	68f8      	ldr	r0, [r7, #12]
70002e56:	f000 f985 	bl	70003164 <USBD_CoreFindEP>
70002e5a:	4603      	mov	r3, r0
70002e5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
70002e5e:	7dfb      	ldrb	r3, [r7, #23]
70002e60:	2bff      	cmp	r3, #255	@ 0xff
70002e62:	d025      	beq.n	70002eb0 <USBD_LL_DataInStage+0x15a>
70002e64:	7dfb      	ldrb	r3, [r7, #23]
70002e66:	2b00      	cmp	r3, #0
70002e68:	d122      	bne.n	70002eb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002e6a:	68fb      	ldr	r3, [r7, #12]
70002e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002e70:	b2db      	uxtb	r3, r3
70002e72:	2b03      	cmp	r3, #3
70002e74:	d11c      	bne.n	70002eb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
70002e76:	7dfa      	ldrb	r2, [r7, #23]
70002e78:	68fb      	ldr	r3, [r7, #12]
70002e7a:	32ae      	adds	r2, #174	@ 0xae
70002e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002e80:	695b      	ldr	r3, [r3, #20]
70002e82:	2b00      	cmp	r3, #0
70002e84:	d014      	beq.n	70002eb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
70002e86:	7dfa      	ldrb	r2, [r7, #23]
70002e88:	68fb      	ldr	r3, [r7, #12]
70002e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
70002e8e:	7dfa      	ldrb	r2, [r7, #23]
70002e90:	68fb      	ldr	r3, [r7, #12]
70002e92:	32ae      	adds	r2, #174	@ 0xae
70002e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70002e98:	695b      	ldr	r3, [r3, #20]
70002e9a:	7afa      	ldrb	r2, [r7, #11]
70002e9c:	4611      	mov	r1, r2
70002e9e:	68f8      	ldr	r0, [r7, #12]
70002ea0:	4798      	blx	r3
70002ea2:	4603      	mov	r3, r0
70002ea4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
70002ea6:	7dbb      	ldrb	r3, [r7, #22]
70002ea8:	2b00      	cmp	r3, #0
70002eaa:	d001      	beq.n	70002eb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
70002eac:	7dbb      	ldrb	r3, [r7, #22]
70002eae:	e000      	b.n	70002eb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
70002eb0:	2300      	movs	r3, #0
}
70002eb2:	4618      	mov	r0, r3
70002eb4:	3718      	adds	r7, #24
70002eb6:	46bd      	mov	sp, r7
70002eb8:	bd80      	pop	{r7, pc}

70002eba <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
70002eba:	b580      	push	{r7, lr}
70002ebc:	b084      	sub	sp, #16
70002ebe:	af00      	add	r7, sp, #0
70002ec0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
70002ec2:	2300      	movs	r3, #0
70002ec4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
70002ec6:	687b      	ldr	r3, [r7, #4]
70002ec8:	2201      	movs	r2, #1
70002eca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
70002ece:	687b      	ldr	r3, [r7, #4]
70002ed0:	2200      	movs	r2, #0
70002ed2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
70002ed6:	687b      	ldr	r3, [r7, #4]
70002ed8:	2200      	movs	r2, #0
70002eda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
70002edc:	687b      	ldr	r3, [r7, #4]
70002ede:	2200      	movs	r2, #0
70002ee0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
70002ee4:	687b      	ldr	r3, [r7, #4]
70002ee6:	2200      	movs	r2, #0
70002ee8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
70002eec:	687b      	ldr	r3, [r7, #4]
70002eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002ef2:	2b00      	cmp	r3, #0
70002ef4:	d014      	beq.n	70002f20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
70002ef6:	687b      	ldr	r3, [r7, #4]
70002ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002efc:	685b      	ldr	r3, [r3, #4]
70002efe:	2b00      	cmp	r3, #0
70002f00:	d00e      	beq.n	70002f20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
70002f02:	687b      	ldr	r3, [r7, #4]
70002f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70002f08:	685b      	ldr	r3, [r3, #4]
70002f0a:	687a      	ldr	r2, [r7, #4]
70002f0c:	6852      	ldr	r2, [r2, #4]
70002f0e:	b2d2      	uxtb	r2, r2
70002f10:	4611      	mov	r1, r2
70002f12:	6878      	ldr	r0, [r7, #4]
70002f14:	4798      	blx	r3
70002f16:	4603      	mov	r3, r0
70002f18:	2b00      	cmp	r3, #0
70002f1a:	d001      	beq.n	70002f20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
70002f1c:	2303      	movs	r3, #3
70002f1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
70002f20:	2340      	movs	r3, #64	@ 0x40
70002f22:	2200      	movs	r2, #0
70002f24:	2100      	movs	r1, #0
70002f26:	6878      	ldr	r0, [r7, #4]
70002f28:	f001 f8aa 	bl	70004080 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
70002f2c:	687b      	ldr	r3, [r7, #4]
70002f2e:	2201      	movs	r2, #1
70002f30:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
70002f34:	687b      	ldr	r3, [r7, #4]
70002f36:	2240      	movs	r2, #64	@ 0x40
70002f38:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
70002f3c:	2340      	movs	r3, #64	@ 0x40
70002f3e:	2200      	movs	r2, #0
70002f40:	2180      	movs	r1, #128	@ 0x80
70002f42:	6878      	ldr	r0, [r7, #4]
70002f44:	f001 f89c 	bl	70004080 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
70002f48:	687b      	ldr	r3, [r7, #4]
70002f4a:	2201      	movs	r2, #1
70002f4c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
70002f4e:	687b      	ldr	r3, [r7, #4]
70002f50:	2240      	movs	r2, #64	@ 0x40
70002f52:	621a      	str	r2, [r3, #32]

  return ret;
70002f54:	7bfb      	ldrb	r3, [r7, #15]
}
70002f56:	4618      	mov	r0, r3
70002f58:	3710      	adds	r7, #16
70002f5a:	46bd      	mov	sp, r7
70002f5c:	bd80      	pop	{r7, pc}

70002f5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
70002f5e:	b480      	push	{r7}
70002f60:	b083      	sub	sp, #12
70002f62:	af00      	add	r7, sp, #0
70002f64:	6078      	str	r0, [r7, #4]
70002f66:	460b      	mov	r3, r1
70002f68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
70002f6a:	687b      	ldr	r3, [r7, #4]
70002f6c:	78fa      	ldrb	r2, [r7, #3]
70002f6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
70002f70:	2300      	movs	r3, #0
}
70002f72:	4618      	mov	r0, r3
70002f74:	370c      	adds	r7, #12
70002f76:	46bd      	mov	sp, r7
70002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
70002f7c:	4770      	bx	lr

70002f7e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
70002f7e:	b480      	push	{r7}
70002f80:	b083      	sub	sp, #12
70002f82:	af00      	add	r7, sp, #0
70002f84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
70002f86:	687b      	ldr	r3, [r7, #4]
70002f88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002f8c:	b2db      	uxtb	r3, r3
70002f8e:	2b04      	cmp	r3, #4
70002f90:	d006      	beq.n	70002fa0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
70002f92:	687b      	ldr	r3, [r7, #4]
70002f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002f98:	b2da      	uxtb	r2, r3
70002f9a:	687b      	ldr	r3, [r7, #4]
70002f9c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
70002fa0:	687b      	ldr	r3, [r7, #4]
70002fa2:	2204      	movs	r2, #4
70002fa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
70002fa8:	2300      	movs	r3, #0
}
70002faa:	4618      	mov	r0, r3
70002fac:	370c      	adds	r7, #12
70002fae:	46bd      	mov	sp, r7
70002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
70002fb4:	4770      	bx	lr

70002fb6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
70002fb6:	b480      	push	{r7}
70002fb8:	b083      	sub	sp, #12
70002fba:	af00      	add	r7, sp, #0
70002fbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
70002fbe:	687b      	ldr	r3, [r7, #4]
70002fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002fc4:	b2db      	uxtb	r3, r3
70002fc6:	2b04      	cmp	r3, #4
70002fc8:	d106      	bne.n	70002fd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
70002fca:	687b      	ldr	r3, [r7, #4]
70002fcc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
70002fd0:	b2da      	uxtb	r2, r3
70002fd2:	687b      	ldr	r3, [r7, #4]
70002fd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
70002fd8:	2300      	movs	r3, #0
}
70002fda:	4618      	mov	r0, r3
70002fdc:	370c      	adds	r7, #12
70002fde:	46bd      	mov	sp, r7
70002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
70002fe4:	4770      	bx	lr

70002fe6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
70002fe6:	b580      	push	{r7, lr}
70002fe8:	b082      	sub	sp, #8
70002fea:	af00      	add	r7, sp, #0
70002fec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
70002fee:	687b      	ldr	r3, [r7, #4]
70002ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70002ff4:	b2db      	uxtb	r3, r3
70002ff6:	2b03      	cmp	r3, #3
70002ff8:	d110      	bne.n	7000301c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
70002ffa:	687b      	ldr	r3, [r7, #4]
70002ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003000:	2b00      	cmp	r3, #0
70003002:	d00b      	beq.n	7000301c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
70003004:	687b      	ldr	r3, [r7, #4]
70003006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
7000300a:	69db      	ldr	r3, [r3, #28]
7000300c:	2b00      	cmp	r3, #0
7000300e:	d005      	beq.n	7000301c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
70003010:	687b      	ldr	r3, [r7, #4]
70003012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003016:	69db      	ldr	r3, [r3, #28]
70003018:	6878      	ldr	r0, [r7, #4]
7000301a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
7000301c:	2300      	movs	r3, #0
}
7000301e:	4618      	mov	r0, r3
70003020:	3708      	adds	r7, #8
70003022:	46bd      	mov	sp, r7
70003024:	bd80      	pop	{r7, pc}

70003026 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
70003026:	b580      	push	{r7, lr}
70003028:	b082      	sub	sp, #8
7000302a:	af00      	add	r7, sp, #0
7000302c:	6078      	str	r0, [r7, #4]
7000302e:	460b      	mov	r3, r1
70003030:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
70003032:	687b      	ldr	r3, [r7, #4]
70003034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
70003038:	687b      	ldr	r3, [r7, #4]
7000303a:	32ae      	adds	r2, #174	@ 0xae
7000303c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003040:	2b00      	cmp	r3, #0
70003042:	d101      	bne.n	70003048 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
70003044:	2303      	movs	r3, #3
70003046:	e01c      	b.n	70003082 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003048:	687b      	ldr	r3, [r7, #4]
7000304a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
7000304e:	b2db      	uxtb	r3, r3
70003050:	2b03      	cmp	r3, #3
70003052:	d115      	bne.n	70003080 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
70003054:	687b      	ldr	r3, [r7, #4]
70003056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000305a:	687b      	ldr	r3, [r7, #4]
7000305c:	32ae      	adds	r2, #174	@ 0xae
7000305e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003062:	6a1b      	ldr	r3, [r3, #32]
70003064:	2b00      	cmp	r3, #0
70003066:	d00b      	beq.n	70003080 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
70003068:	687b      	ldr	r3, [r7, #4]
7000306a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000306e:	687b      	ldr	r3, [r7, #4]
70003070:	32ae      	adds	r2, #174	@ 0xae
70003072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003076:	6a1b      	ldr	r3, [r3, #32]
70003078:	78fa      	ldrb	r2, [r7, #3]
7000307a:	4611      	mov	r1, r2
7000307c:	6878      	ldr	r0, [r7, #4]
7000307e:	4798      	blx	r3
    }
  }

  return USBD_OK;
70003080:	2300      	movs	r3, #0
}
70003082:	4618      	mov	r0, r3
70003084:	3708      	adds	r7, #8
70003086:	46bd      	mov	sp, r7
70003088:	bd80      	pop	{r7, pc}

7000308a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
7000308a:	b580      	push	{r7, lr}
7000308c:	b082      	sub	sp, #8
7000308e:	af00      	add	r7, sp, #0
70003090:	6078      	str	r0, [r7, #4]
70003092:	460b      	mov	r3, r1
70003094:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
70003096:	687b      	ldr	r3, [r7, #4]
70003098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
7000309c:	687b      	ldr	r3, [r7, #4]
7000309e:	32ae      	adds	r2, #174	@ 0xae
700030a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700030a4:	2b00      	cmp	r3, #0
700030a6:	d101      	bne.n	700030ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
700030a8:	2303      	movs	r3, #3
700030aa:	e01c      	b.n	700030e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
700030ac:	687b      	ldr	r3, [r7, #4]
700030ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700030b2:	b2db      	uxtb	r3, r3
700030b4:	2b03      	cmp	r3, #3
700030b6:	d115      	bne.n	700030e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
700030b8:	687b      	ldr	r3, [r7, #4]
700030ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
700030be:	687b      	ldr	r3, [r7, #4]
700030c0:	32ae      	adds	r2, #174	@ 0xae
700030c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700030c8:	2b00      	cmp	r3, #0
700030ca:	d00b      	beq.n	700030e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
700030cc:	687b      	ldr	r3, [r7, #4]
700030ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
700030d2:	687b      	ldr	r3, [r7, #4]
700030d4:	32ae      	adds	r2, #174	@ 0xae
700030d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
700030dc:	78fa      	ldrb	r2, [r7, #3]
700030de:	4611      	mov	r1, r2
700030e0:	6878      	ldr	r0, [r7, #4]
700030e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
700030e4:	2300      	movs	r3, #0
}
700030e6:	4618      	mov	r0, r3
700030e8:	3708      	adds	r7, #8
700030ea:	46bd      	mov	sp, r7
700030ec:	bd80      	pop	{r7, pc}

700030ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
700030ee:	b480      	push	{r7}
700030f0:	b083      	sub	sp, #12
700030f2:	af00      	add	r7, sp, #0
700030f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
700030f6:	2300      	movs	r3, #0
}
700030f8:	4618      	mov	r0, r3
700030fa:	370c      	adds	r7, #12
700030fc:	46bd      	mov	sp, r7
700030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
70003102:	4770      	bx	lr

70003104 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
70003104:	b580      	push	{r7, lr}
70003106:	b084      	sub	sp, #16
70003108:	af00      	add	r7, sp, #0
7000310a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
7000310c:	2300      	movs	r3, #0
7000310e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
70003110:	687b      	ldr	r3, [r7, #4]
70003112:	2201      	movs	r2, #1
70003114:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
70003118:	687b      	ldr	r3, [r7, #4]
7000311a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
7000311e:	2b00      	cmp	r3, #0
70003120:	d00e      	beq.n	70003140 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
70003122:	687b      	ldr	r3, [r7, #4]
70003124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003128:	685b      	ldr	r3, [r3, #4]
7000312a:	687a      	ldr	r2, [r7, #4]
7000312c:	6852      	ldr	r2, [r2, #4]
7000312e:	b2d2      	uxtb	r2, r2
70003130:	4611      	mov	r1, r2
70003132:	6878      	ldr	r0, [r7, #4]
70003134:	4798      	blx	r3
70003136:	4603      	mov	r3, r0
70003138:	2b00      	cmp	r3, #0
7000313a:	d001      	beq.n	70003140 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
7000313c:	2303      	movs	r3, #3
7000313e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
70003140:	7bfb      	ldrb	r3, [r7, #15]
}
70003142:	4618      	mov	r0, r3
70003144:	3710      	adds	r7, #16
70003146:	46bd      	mov	sp, r7
70003148:	bd80      	pop	{r7, pc}

7000314a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
7000314a:	b480      	push	{r7}
7000314c:	b083      	sub	sp, #12
7000314e:	af00      	add	r7, sp, #0
70003150:	6078      	str	r0, [r7, #4]
70003152:	460b      	mov	r3, r1
70003154:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
70003156:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
70003158:	4618      	mov	r0, r3
7000315a:	370c      	adds	r7, #12
7000315c:	46bd      	mov	sp, r7
7000315e:	f85d 7b04 	ldr.w	r7, [sp], #4
70003162:	4770      	bx	lr

70003164 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
70003164:	b480      	push	{r7}
70003166:	b083      	sub	sp, #12
70003168:	af00      	add	r7, sp, #0
7000316a:	6078      	str	r0, [r7, #4]
7000316c:	460b      	mov	r3, r1
7000316e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
70003170:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
70003172:	4618      	mov	r0, r3
70003174:	370c      	adds	r7, #12
70003176:	46bd      	mov	sp, r7
70003178:	f85d 7b04 	ldr.w	r7, [sp], #4
7000317c:	4770      	bx	lr

7000317e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
7000317e:	b480      	push	{r7}
70003180:	b087      	sub	sp, #28
70003182:	af00      	add	r7, sp, #0
70003184:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
70003186:	687b      	ldr	r3, [r7, #4]
70003188:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
7000318a:	697b      	ldr	r3, [r7, #20]
7000318c:	781b      	ldrb	r3, [r3, #0]
7000318e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
70003190:	697b      	ldr	r3, [r7, #20]
70003192:	3301      	adds	r3, #1
70003194:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
70003196:	697b      	ldr	r3, [r7, #20]
70003198:	781b      	ldrb	r3, [r3, #0]
7000319a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
7000319c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
700031a0:	021b      	lsls	r3, r3, #8
700031a2:	b21a      	sxth	r2, r3
700031a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
700031a8:	4313      	orrs	r3, r2
700031aa:	b21b      	sxth	r3, r3
700031ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
700031ae:	89fb      	ldrh	r3, [r7, #14]
}
700031b0:	4618      	mov	r0, r3
700031b2:	371c      	adds	r7, #28
700031b4:	46bd      	mov	sp, r7
700031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
700031ba:	4770      	bx	lr

700031bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700031bc:	b580      	push	{r7, lr}
700031be:	b084      	sub	sp, #16
700031c0:	af00      	add	r7, sp, #0
700031c2:	6078      	str	r0, [r7, #4]
700031c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
700031c6:	2300      	movs	r3, #0
700031c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
700031ca:	683b      	ldr	r3, [r7, #0]
700031cc:	781b      	ldrb	r3, [r3, #0]
700031ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
700031d2:	2b40      	cmp	r3, #64	@ 0x40
700031d4:	d005      	beq.n	700031e2 <USBD_StdDevReq+0x26>
700031d6:	2b40      	cmp	r3, #64	@ 0x40
700031d8:	d857      	bhi.n	7000328a <USBD_StdDevReq+0xce>
700031da:	2b00      	cmp	r3, #0
700031dc:	d00f      	beq.n	700031fe <USBD_StdDevReq+0x42>
700031de:	2b20      	cmp	r3, #32
700031e0:	d153      	bne.n	7000328a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
700031e2:	687b      	ldr	r3, [r7, #4]
700031e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
700031e8:	687b      	ldr	r3, [r7, #4]
700031ea:	32ae      	adds	r2, #174	@ 0xae
700031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700031f0:	689b      	ldr	r3, [r3, #8]
700031f2:	6839      	ldr	r1, [r7, #0]
700031f4:	6878      	ldr	r0, [r7, #4]
700031f6:	4798      	blx	r3
700031f8:	4603      	mov	r3, r0
700031fa:	73fb      	strb	r3, [r7, #15]
      break;
700031fc:	e04a      	b.n	70003294 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
700031fe:	683b      	ldr	r3, [r7, #0]
70003200:	785b      	ldrb	r3, [r3, #1]
70003202:	2b09      	cmp	r3, #9
70003204:	d83b      	bhi.n	7000327e <USBD_StdDevReq+0xc2>
70003206:	a201      	add	r2, pc, #4	@ (adr r2, 7000320c <USBD_StdDevReq+0x50>)
70003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000320c:	70003261 	.word	0x70003261
70003210:	70003275 	.word	0x70003275
70003214:	7000327f 	.word	0x7000327f
70003218:	7000326b 	.word	0x7000326b
7000321c:	7000327f 	.word	0x7000327f
70003220:	7000323f 	.word	0x7000323f
70003224:	70003235 	.word	0x70003235
70003228:	7000327f 	.word	0x7000327f
7000322c:	70003257 	.word	0x70003257
70003230:	70003249 	.word	0x70003249
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
70003234:	6839      	ldr	r1, [r7, #0]
70003236:	6878      	ldr	r0, [r7, #4]
70003238:	f000 fa3c 	bl	700036b4 <USBD_GetDescriptor>
          break;
7000323c:	e024      	b.n	70003288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
7000323e:	6839      	ldr	r1, [r7, #0]
70003240:	6878      	ldr	r0, [r7, #4]
70003242:	f000 fbcb 	bl	700039dc <USBD_SetAddress>
          break;
70003246:	e01f      	b.n	70003288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
70003248:	6839      	ldr	r1, [r7, #0]
7000324a:	6878      	ldr	r0, [r7, #4]
7000324c:	f000 fc0a 	bl	70003a64 <USBD_SetConfig>
70003250:	4603      	mov	r3, r0
70003252:	73fb      	strb	r3, [r7, #15]
          break;
70003254:	e018      	b.n	70003288 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
70003256:	6839      	ldr	r1, [r7, #0]
70003258:	6878      	ldr	r0, [r7, #4]
7000325a:	f000 fcad 	bl	70003bb8 <USBD_GetConfig>
          break;
7000325e:	e013      	b.n	70003288 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
70003260:	6839      	ldr	r1, [r7, #0]
70003262:	6878      	ldr	r0, [r7, #4]
70003264:	f000 fcde 	bl	70003c24 <USBD_GetStatus>
          break;
70003268:	e00e      	b.n	70003288 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
7000326a:	6839      	ldr	r1, [r7, #0]
7000326c:	6878      	ldr	r0, [r7, #4]
7000326e:	f000 fd0d 	bl	70003c8c <USBD_SetFeature>
          break;
70003272:	e009      	b.n	70003288 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
70003274:	6839      	ldr	r1, [r7, #0]
70003276:	6878      	ldr	r0, [r7, #4]
70003278:	f000 fd31 	bl	70003cde <USBD_ClrFeature>
          break;
7000327c:	e004      	b.n	70003288 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
7000327e:	6839      	ldr	r1, [r7, #0]
70003280:	6878      	ldr	r0, [r7, #4]
70003282:	f000 fd88 	bl	70003d96 <USBD_CtlError>
          break;
70003286:	bf00      	nop
      }
      break;
70003288:	e004      	b.n	70003294 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
7000328a:	6839      	ldr	r1, [r7, #0]
7000328c:	6878      	ldr	r0, [r7, #4]
7000328e:	f000 fd82 	bl	70003d96 <USBD_CtlError>
      break;
70003292:	bf00      	nop
  }

  return ret;
70003294:	7bfb      	ldrb	r3, [r7, #15]
}
70003296:	4618      	mov	r0, r3
70003298:	3710      	adds	r7, #16
7000329a:	46bd      	mov	sp, r7
7000329c:	bd80      	pop	{r7, pc}
7000329e:	bf00      	nop

700032a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700032a0:	b580      	push	{r7, lr}
700032a2:	b084      	sub	sp, #16
700032a4:	af00      	add	r7, sp, #0
700032a6:	6078      	str	r0, [r7, #4]
700032a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
700032aa:	2300      	movs	r3, #0
700032ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
700032ae:	683b      	ldr	r3, [r7, #0]
700032b0:	781b      	ldrb	r3, [r3, #0]
700032b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
700032b6:	2b40      	cmp	r3, #64	@ 0x40
700032b8:	d005      	beq.n	700032c6 <USBD_StdItfReq+0x26>
700032ba:	2b40      	cmp	r3, #64	@ 0x40
700032bc:	d852      	bhi.n	70003364 <USBD_StdItfReq+0xc4>
700032be:	2b00      	cmp	r3, #0
700032c0:	d001      	beq.n	700032c6 <USBD_StdItfReq+0x26>
700032c2:	2b20      	cmp	r3, #32
700032c4:	d14e      	bne.n	70003364 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
700032c6:	687b      	ldr	r3, [r7, #4]
700032c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
700032cc:	b2db      	uxtb	r3, r3
700032ce:	3b01      	subs	r3, #1
700032d0:	2b02      	cmp	r3, #2
700032d2:	d840      	bhi.n	70003356 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
700032d4:	683b      	ldr	r3, [r7, #0]
700032d6:	889b      	ldrh	r3, [r3, #4]
700032d8:	b2db      	uxtb	r3, r3
700032da:	2b01      	cmp	r3, #1
700032dc:	d836      	bhi.n	7000334c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
700032de:	683b      	ldr	r3, [r7, #0]
700032e0:	889b      	ldrh	r3, [r3, #4]
700032e2:	b2db      	uxtb	r3, r3
700032e4:	4619      	mov	r1, r3
700032e6:	6878      	ldr	r0, [r7, #4]
700032e8:	f7ff ff2f 	bl	7000314a <USBD_CoreFindIF>
700032ec:	4603      	mov	r3, r0
700032ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
700032f0:	7bbb      	ldrb	r3, [r7, #14]
700032f2:	2bff      	cmp	r3, #255	@ 0xff
700032f4:	d01d      	beq.n	70003332 <USBD_StdItfReq+0x92>
700032f6:	7bbb      	ldrb	r3, [r7, #14]
700032f8:	2b00      	cmp	r3, #0
700032fa:	d11a      	bne.n	70003332 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
700032fc:	7bba      	ldrb	r2, [r7, #14]
700032fe:	687b      	ldr	r3, [r7, #4]
70003300:	32ae      	adds	r2, #174	@ 0xae
70003302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003306:	689b      	ldr	r3, [r3, #8]
70003308:	2b00      	cmp	r3, #0
7000330a:	d00f      	beq.n	7000332c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
7000330c:	7bba      	ldrb	r2, [r7, #14]
7000330e:	687b      	ldr	r3, [r7, #4]
70003310:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
70003314:	7bba      	ldrb	r2, [r7, #14]
70003316:	687b      	ldr	r3, [r7, #4]
70003318:	32ae      	adds	r2, #174	@ 0xae
7000331a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
7000331e:	689b      	ldr	r3, [r3, #8]
70003320:	6839      	ldr	r1, [r7, #0]
70003322:	6878      	ldr	r0, [r7, #4]
70003324:	4798      	blx	r3
70003326:	4603      	mov	r3, r0
70003328:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
7000332a:	e004      	b.n	70003336 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
7000332c:	2303      	movs	r3, #3
7000332e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
70003330:	e001      	b.n	70003336 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
70003332:	2303      	movs	r3, #3
70003334:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
70003336:	683b      	ldr	r3, [r7, #0]
70003338:	88db      	ldrh	r3, [r3, #6]
7000333a:	2b00      	cmp	r3, #0
7000333c:	d110      	bne.n	70003360 <USBD_StdItfReq+0xc0>
7000333e:	7bfb      	ldrb	r3, [r7, #15]
70003340:	2b00      	cmp	r3, #0
70003342:	d10d      	bne.n	70003360 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
70003344:	6878      	ldr	r0, [r7, #4]
70003346:	f000 fd74 	bl	70003e32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
7000334a:	e009      	b.n	70003360 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
7000334c:	6839      	ldr	r1, [r7, #0]
7000334e:	6878      	ldr	r0, [r7, #4]
70003350:	f000 fd21 	bl	70003d96 <USBD_CtlError>
          break;
70003354:	e004      	b.n	70003360 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
70003356:	6839      	ldr	r1, [r7, #0]
70003358:	6878      	ldr	r0, [r7, #4]
7000335a:	f000 fd1c 	bl	70003d96 <USBD_CtlError>
          break;
7000335e:	e000      	b.n	70003362 <USBD_StdItfReq+0xc2>
          break;
70003360:	bf00      	nop
      }
      break;
70003362:	e004      	b.n	7000336e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
70003364:	6839      	ldr	r1, [r7, #0]
70003366:	6878      	ldr	r0, [r7, #4]
70003368:	f000 fd15 	bl	70003d96 <USBD_CtlError>
      break;
7000336c:	bf00      	nop
  }

  return ret;
7000336e:	7bfb      	ldrb	r3, [r7, #15]
}
70003370:	4618      	mov	r0, r3
70003372:	3710      	adds	r7, #16
70003374:	46bd      	mov	sp, r7
70003376:	bd80      	pop	{r7, pc}

70003378 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003378:	b580      	push	{r7, lr}
7000337a:	b084      	sub	sp, #16
7000337c:	af00      	add	r7, sp, #0
7000337e:	6078      	str	r0, [r7, #4]
70003380:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
70003382:	2300      	movs	r3, #0
70003384:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
70003386:	683b      	ldr	r3, [r7, #0]
70003388:	889b      	ldrh	r3, [r3, #4]
7000338a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
7000338c:	683b      	ldr	r3, [r7, #0]
7000338e:	781b      	ldrb	r3, [r3, #0]
70003390:	f003 0360 	and.w	r3, r3, #96	@ 0x60
70003394:	2b40      	cmp	r3, #64	@ 0x40
70003396:	d007      	beq.n	700033a8 <USBD_StdEPReq+0x30>
70003398:	2b40      	cmp	r3, #64	@ 0x40
7000339a:	f200 817f 	bhi.w	7000369c <USBD_StdEPReq+0x324>
7000339e:	2b00      	cmp	r3, #0
700033a0:	d02a      	beq.n	700033f8 <USBD_StdEPReq+0x80>
700033a2:	2b20      	cmp	r3, #32
700033a4:	f040 817a 	bne.w	7000369c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
700033a8:	7bbb      	ldrb	r3, [r7, #14]
700033aa:	4619      	mov	r1, r3
700033ac:	6878      	ldr	r0, [r7, #4]
700033ae:	f7ff fed9 	bl	70003164 <USBD_CoreFindEP>
700033b2:	4603      	mov	r3, r0
700033b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
700033b6:	7b7b      	ldrb	r3, [r7, #13]
700033b8:	2bff      	cmp	r3, #255	@ 0xff
700033ba:	f000 8174 	beq.w	700036a6 <USBD_StdEPReq+0x32e>
700033be:	7b7b      	ldrb	r3, [r7, #13]
700033c0:	2b00      	cmp	r3, #0
700033c2:	f040 8170 	bne.w	700036a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
700033c6:	7b7a      	ldrb	r2, [r7, #13]
700033c8:	687b      	ldr	r3, [r7, #4]
700033ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
700033ce:	7b7a      	ldrb	r2, [r7, #13]
700033d0:	687b      	ldr	r3, [r7, #4]
700033d2:	32ae      	adds	r2, #174	@ 0xae
700033d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700033d8:	689b      	ldr	r3, [r3, #8]
700033da:	2b00      	cmp	r3, #0
700033dc:	f000 8163 	beq.w	700036a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
700033e0:	7b7a      	ldrb	r2, [r7, #13]
700033e2:	687b      	ldr	r3, [r7, #4]
700033e4:	32ae      	adds	r2, #174	@ 0xae
700033e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
700033ea:	689b      	ldr	r3, [r3, #8]
700033ec:	6839      	ldr	r1, [r7, #0]
700033ee:	6878      	ldr	r0, [r7, #4]
700033f0:	4798      	blx	r3
700033f2:	4603      	mov	r3, r0
700033f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
700033f6:	e156      	b.n	700036a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
700033f8:	683b      	ldr	r3, [r7, #0]
700033fa:	785b      	ldrb	r3, [r3, #1]
700033fc:	2b03      	cmp	r3, #3
700033fe:	d008      	beq.n	70003412 <USBD_StdEPReq+0x9a>
70003400:	2b03      	cmp	r3, #3
70003402:	f300 8145 	bgt.w	70003690 <USBD_StdEPReq+0x318>
70003406:	2b00      	cmp	r3, #0
70003408:	f000 809b 	beq.w	70003542 <USBD_StdEPReq+0x1ca>
7000340c:	2b01      	cmp	r3, #1
7000340e:	d03c      	beq.n	7000348a <USBD_StdEPReq+0x112>
70003410:	e13e      	b.n	70003690 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
70003412:	687b      	ldr	r3, [r7, #4]
70003414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003418:	b2db      	uxtb	r3, r3
7000341a:	2b02      	cmp	r3, #2
7000341c:	d002      	beq.n	70003424 <USBD_StdEPReq+0xac>
7000341e:	2b03      	cmp	r3, #3
70003420:	d016      	beq.n	70003450 <USBD_StdEPReq+0xd8>
70003422:	e02c      	b.n	7000347e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
70003424:	7bbb      	ldrb	r3, [r7, #14]
70003426:	2b00      	cmp	r3, #0
70003428:	d00d      	beq.n	70003446 <USBD_StdEPReq+0xce>
7000342a:	7bbb      	ldrb	r3, [r7, #14]
7000342c:	2b80      	cmp	r3, #128	@ 0x80
7000342e:	d00a      	beq.n	70003446 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
70003430:	7bbb      	ldrb	r3, [r7, #14]
70003432:	4619      	mov	r1, r3
70003434:	6878      	ldr	r0, [r7, #4]
70003436:	f000 fe49 	bl	700040cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
7000343a:	2180      	movs	r1, #128	@ 0x80
7000343c:	6878      	ldr	r0, [r7, #4]
7000343e:	f000 fe45 	bl	700040cc <USBD_LL_StallEP>
70003442:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
70003444:	e020      	b.n	70003488 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
70003446:	6839      	ldr	r1, [r7, #0]
70003448:	6878      	ldr	r0, [r7, #4]
7000344a:	f000 fca4 	bl	70003d96 <USBD_CtlError>
              break;
7000344e:	e01b      	b.n	70003488 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
70003450:	683b      	ldr	r3, [r7, #0]
70003452:	885b      	ldrh	r3, [r3, #2]
70003454:	2b00      	cmp	r3, #0
70003456:	d10e      	bne.n	70003476 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
70003458:	7bbb      	ldrb	r3, [r7, #14]
7000345a:	2b00      	cmp	r3, #0
7000345c:	d00b      	beq.n	70003476 <USBD_StdEPReq+0xfe>
7000345e:	7bbb      	ldrb	r3, [r7, #14]
70003460:	2b80      	cmp	r3, #128	@ 0x80
70003462:	d008      	beq.n	70003476 <USBD_StdEPReq+0xfe>
70003464:	683b      	ldr	r3, [r7, #0]
70003466:	88db      	ldrh	r3, [r3, #6]
70003468:	2b00      	cmp	r3, #0
7000346a:	d104      	bne.n	70003476 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
7000346c:	7bbb      	ldrb	r3, [r7, #14]
7000346e:	4619      	mov	r1, r3
70003470:	6878      	ldr	r0, [r7, #4]
70003472:	f000 fe2b 	bl	700040cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
70003476:	6878      	ldr	r0, [r7, #4]
70003478:	f000 fcdb 	bl	70003e32 <USBD_CtlSendStatus>

              break;
7000347c:	e004      	b.n	70003488 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
7000347e:	6839      	ldr	r1, [r7, #0]
70003480:	6878      	ldr	r0, [r7, #4]
70003482:	f000 fc88 	bl	70003d96 <USBD_CtlError>
              break;
70003486:	bf00      	nop
          }
          break;
70003488:	e107      	b.n	7000369a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
7000348a:	687b      	ldr	r3, [r7, #4]
7000348c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003490:	b2db      	uxtb	r3, r3
70003492:	2b02      	cmp	r3, #2
70003494:	d002      	beq.n	7000349c <USBD_StdEPReq+0x124>
70003496:	2b03      	cmp	r3, #3
70003498:	d016      	beq.n	700034c8 <USBD_StdEPReq+0x150>
7000349a:	e04b      	b.n	70003534 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
7000349c:	7bbb      	ldrb	r3, [r7, #14]
7000349e:	2b00      	cmp	r3, #0
700034a0:	d00d      	beq.n	700034be <USBD_StdEPReq+0x146>
700034a2:	7bbb      	ldrb	r3, [r7, #14]
700034a4:	2b80      	cmp	r3, #128	@ 0x80
700034a6:	d00a      	beq.n	700034be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
700034a8:	7bbb      	ldrb	r3, [r7, #14]
700034aa:	4619      	mov	r1, r3
700034ac:	6878      	ldr	r0, [r7, #4]
700034ae:	f000 fe0d 	bl	700040cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
700034b2:	2180      	movs	r1, #128	@ 0x80
700034b4:	6878      	ldr	r0, [r7, #4]
700034b6:	f000 fe09 	bl	700040cc <USBD_LL_StallEP>
700034ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
700034bc:	e040      	b.n	70003540 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
700034be:	6839      	ldr	r1, [r7, #0]
700034c0:	6878      	ldr	r0, [r7, #4]
700034c2:	f000 fc68 	bl	70003d96 <USBD_CtlError>
              break;
700034c6:	e03b      	b.n	70003540 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
700034c8:	683b      	ldr	r3, [r7, #0]
700034ca:	885b      	ldrh	r3, [r3, #2]
700034cc:	2b00      	cmp	r3, #0
700034ce:	d136      	bne.n	7000353e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
700034d0:	7bbb      	ldrb	r3, [r7, #14]
700034d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
700034d6:	2b00      	cmp	r3, #0
700034d8:	d004      	beq.n	700034e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
700034da:	7bbb      	ldrb	r3, [r7, #14]
700034dc:	4619      	mov	r1, r3
700034de:	6878      	ldr	r0, [r7, #4]
700034e0:	f000 fe13 	bl	7000410a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
700034e4:	6878      	ldr	r0, [r7, #4]
700034e6:	f000 fca4 	bl	70003e32 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
700034ea:	7bbb      	ldrb	r3, [r7, #14]
700034ec:	4619      	mov	r1, r3
700034ee:	6878      	ldr	r0, [r7, #4]
700034f0:	f7ff fe38 	bl	70003164 <USBD_CoreFindEP>
700034f4:	4603      	mov	r3, r0
700034f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
700034f8:	7b7b      	ldrb	r3, [r7, #13]
700034fa:	2bff      	cmp	r3, #255	@ 0xff
700034fc:	d01f      	beq.n	7000353e <USBD_StdEPReq+0x1c6>
700034fe:	7b7b      	ldrb	r3, [r7, #13]
70003500:	2b00      	cmp	r3, #0
70003502:	d11c      	bne.n	7000353e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
70003504:	7b7a      	ldrb	r2, [r7, #13]
70003506:	687b      	ldr	r3, [r7, #4]
70003508:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
7000350c:	7b7a      	ldrb	r2, [r7, #13]
7000350e:	687b      	ldr	r3, [r7, #4]
70003510:	32ae      	adds	r2, #174	@ 0xae
70003512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003516:	689b      	ldr	r3, [r3, #8]
70003518:	2b00      	cmp	r3, #0
7000351a:	d010      	beq.n	7000353e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
7000351c:	7b7a      	ldrb	r2, [r7, #13]
7000351e:	687b      	ldr	r3, [r7, #4]
70003520:	32ae      	adds	r2, #174	@ 0xae
70003522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
70003526:	689b      	ldr	r3, [r3, #8]
70003528:	6839      	ldr	r1, [r7, #0]
7000352a:	6878      	ldr	r0, [r7, #4]
7000352c:	4798      	blx	r3
7000352e:	4603      	mov	r3, r0
70003530:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
70003532:	e004      	b.n	7000353e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
70003534:	6839      	ldr	r1, [r7, #0]
70003536:	6878      	ldr	r0, [r7, #4]
70003538:	f000 fc2d 	bl	70003d96 <USBD_CtlError>
              break;
7000353c:	e000      	b.n	70003540 <USBD_StdEPReq+0x1c8>
              break;
7000353e:	bf00      	nop
          }
          break;
70003540:	e0ab      	b.n	7000369a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
70003542:	687b      	ldr	r3, [r7, #4]
70003544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003548:	b2db      	uxtb	r3, r3
7000354a:	2b02      	cmp	r3, #2
7000354c:	d002      	beq.n	70003554 <USBD_StdEPReq+0x1dc>
7000354e:	2b03      	cmp	r3, #3
70003550:	d032      	beq.n	700035b8 <USBD_StdEPReq+0x240>
70003552:	e097      	b.n	70003684 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
70003554:	7bbb      	ldrb	r3, [r7, #14]
70003556:	2b00      	cmp	r3, #0
70003558:	d007      	beq.n	7000356a <USBD_StdEPReq+0x1f2>
7000355a:	7bbb      	ldrb	r3, [r7, #14]
7000355c:	2b80      	cmp	r3, #128	@ 0x80
7000355e:	d004      	beq.n	7000356a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
70003560:	6839      	ldr	r1, [r7, #0]
70003562:	6878      	ldr	r0, [r7, #4]
70003564:	f000 fc17 	bl	70003d96 <USBD_CtlError>
                break;
70003568:	e091      	b.n	7000368e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
7000356a:	f997 300e 	ldrsb.w	r3, [r7, #14]
7000356e:	2b00      	cmp	r3, #0
70003570:	da0b      	bge.n	7000358a <USBD_StdEPReq+0x212>
70003572:	7bbb      	ldrb	r3, [r7, #14]
70003574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
70003578:	4613      	mov	r3, r2
7000357a:	009b      	lsls	r3, r3, #2
7000357c:	4413      	add	r3, r2
7000357e:	009b      	lsls	r3, r3, #2
70003580:	3310      	adds	r3, #16
70003582:	687a      	ldr	r2, [r7, #4]
70003584:	4413      	add	r3, r2
70003586:	3304      	adds	r3, #4
70003588:	e00b      	b.n	700035a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
7000358a:	7bbb      	ldrb	r3, [r7, #14]
7000358c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70003590:	4613      	mov	r3, r2
70003592:	009b      	lsls	r3, r3, #2
70003594:	4413      	add	r3, r2
70003596:	009b      	lsls	r3, r3, #2
70003598:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
7000359c:	687a      	ldr	r2, [r7, #4]
7000359e:	4413      	add	r3, r2
700035a0:	3304      	adds	r3, #4
700035a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
700035a4:	68bb      	ldr	r3, [r7, #8]
700035a6:	2200      	movs	r2, #0
700035a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
700035aa:	68bb      	ldr	r3, [r7, #8]
700035ac:	2202      	movs	r2, #2
700035ae:	4619      	mov	r1, r3
700035b0:	6878      	ldr	r0, [r7, #4]
700035b2:	f000 fc01 	bl	70003db8 <USBD_CtlSendData>
              break;
700035b6:	e06a      	b.n	7000368e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
700035b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
700035bc:	2b00      	cmp	r3, #0
700035be:	da11      	bge.n	700035e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
700035c0:	7bbb      	ldrb	r3, [r7, #14]
700035c2:	f003 020f 	and.w	r2, r3, #15
700035c6:	6879      	ldr	r1, [r7, #4]
700035c8:	4613      	mov	r3, r2
700035ca:	009b      	lsls	r3, r3, #2
700035cc:	4413      	add	r3, r2
700035ce:	009b      	lsls	r3, r3, #2
700035d0:	440b      	add	r3, r1
700035d2:	3324      	adds	r3, #36	@ 0x24
700035d4:	881b      	ldrh	r3, [r3, #0]
700035d6:	2b00      	cmp	r3, #0
700035d8:	d117      	bne.n	7000360a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
700035da:	6839      	ldr	r1, [r7, #0]
700035dc:	6878      	ldr	r0, [r7, #4]
700035de:	f000 fbda 	bl	70003d96 <USBD_CtlError>
                  break;
700035e2:	e054      	b.n	7000368e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
700035e4:	7bbb      	ldrb	r3, [r7, #14]
700035e6:	f003 020f 	and.w	r2, r3, #15
700035ea:	6879      	ldr	r1, [r7, #4]
700035ec:	4613      	mov	r3, r2
700035ee:	009b      	lsls	r3, r3, #2
700035f0:	4413      	add	r3, r2
700035f2:	009b      	lsls	r3, r3, #2
700035f4:	440b      	add	r3, r1
700035f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
700035fa:	881b      	ldrh	r3, [r3, #0]
700035fc:	2b00      	cmp	r3, #0
700035fe:	d104      	bne.n	7000360a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
70003600:	6839      	ldr	r1, [r7, #0]
70003602:	6878      	ldr	r0, [r7, #4]
70003604:	f000 fbc7 	bl	70003d96 <USBD_CtlError>
                  break;
70003608:	e041      	b.n	7000368e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
7000360a:	f997 300e 	ldrsb.w	r3, [r7, #14]
7000360e:	2b00      	cmp	r3, #0
70003610:	da0b      	bge.n	7000362a <USBD_StdEPReq+0x2b2>
70003612:	7bbb      	ldrb	r3, [r7, #14]
70003614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
70003618:	4613      	mov	r3, r2
7000361a:	009b      	lsls	r3, r3, #2
7000361c:	4413      	add	r3, r2
7000361e:	009b      	lsls	r3, r3, #2
70003620:	3310      	adds	r3, #16
70003622:	687a      	ldr	r2, [r7, #4]
70003624:	4413      	add	r3, r2
70003626:	3304      	adds	r3, #4
70003628:	e00b      	b.n	70003642 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
7000362a:	7bbb      	ldrb	r3, [r7, #14]
7000362c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
70003630:	4613      	mov	r3, r2
70003632:	009b      	lsls	r3, r3, #2
70003634:	4413      	add	r3, r2
70003636:	009b      	lsls	r3, r3, #2
70003638:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
7000363c:	687a      	ldr	r2, [r7, #4]
7000363e:	4413      	add	r3, r2
70003640:	3304      	adds	r3, #4
70003642:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
70003644:	7bbb      	ldrb	r3, [r7, #14]
70003646:	2b00      	cmp	r3, #0
70003648:	d002      	beq.n	70003650 <USBD_StdEPReq+0x2d8>
7000364a:	7bbb      	ldrb	r3, [r7, #14]
7000364c:	2b80      	cmp	r3, #128	@ 0x80
7000364e:	d103      	bne.n	70003658 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
70003650:	68bb      	ldr	r3, [r7, #8]
70003652:	2200      	movs	r2, #0
70003654:	601a      	str	r2, [r3, #0]
70003656:	e00e      	b.n	70003676 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
70003658:	7bbb      	ldrb	r3, [r7, #14]
7000365a:	4619      	mov	r1, r3
7000365c:	6878      	ldr	r0, [r7, #4]
7000365e:	f000 fd73 	bl	70004148 <USBD_LL_IsStallEP>
70003662:	4603      	mov	r3, r0
70003664:	2b00      	cmp	r3, #0
70003666:	d003      	beq.n	70003670 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
70003668:	68bb      	ldr	r3, [r7, #8]
7000366a:	2201      	movs	r2, #1
7000366c:	601a      	str	r2, [r3, #0]
7000366e:	e002      	b.n	70003676 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
70003670:	68bb      	ldr	r3, [r7, #8]
70003672:	2200      	movs	r2, #0
70003674:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
70003676:	68bb      	ldr	r3, [r7, #8]
70003678:	2202      	movs	r2, #2
7000367a:	4619      	mov	r1, r3
7000367c:	6878      	ldr	r0, [r7, #4]
7000367e:	f000 fb9b 	bl	70003db8 <USBD_CtlSendData>
              break;
70003682:	e004      	b.n	7000368e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
70003684:	6839      	ldr	r1, [r7, #0]
70003686:	6878      	ldr	r0, [r7, #4]
70003688:	f000 fb85 	bl	70003d96 <USBD_CtlError>
              break;
7000368c:	bf00      	nop
          }
          break;
7000368e:	e004      	b.n	7000369a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
70003690:	6839      	ldr	r1, [r7, #0]
70003692:	6878      	ldr	r0, [r7, #4]
70003694:	f000 fb7f 	bl	70003d96 <USBD_CtlError>
          break;
70003698:	bf00      	nop
      }
      break;
7000369a:	e005      	b.n	700036a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
7000369c:	6839      	ldr	r1, [r7, #0]
7000369e:	6878      	ldr	r0, [r7, #4]
700036a0:	f000 fb79 	bl	70003d96 <USBD_CtlError>
      break;
700036a4:	e000      	b.n	700036a8 <USBD_StdEPReq+0x330>
      break;
700036a6:	bf00      	nop
  }

  return ret;
700036a8:	7bfb      	ldrb	r3, [r7, #15]
}
700036aa:	4618      	mov	r0, r3
700036ac:	3710      	adds	r7, #16
700036ae:	46bd      	mov	sp, r7
700036b0:	bd80      	pop	{r7, pc}
	...

700036b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700036b4:	b580      	push	{r7, lr}
700036b6:	b084      	sub	sp, #16
700036b8:	af00      	add	r7, sp, #0
700036ba:	6078      	str	r0, [r7, #4]
700036bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
700036be:	2300      	movs	r3, #0
700036c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
700036c2:	2300      	movs	r3, #0
700036c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
700036c6:	2300      	movs	r3, #0
700036c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
700036ca:	683b      	ldr	r3, [r7, #0]
700036cc:	885b      	ldrh	r3, [r3, #2]
700036ce:	0a1b      	lsrs	r3, r3, #8
700036d0:	b29b      	uxth	r3, r3
700036d2:	3b01      	subs	r3, #1
700036d4:	2b0e      	cmp	r3, #14
700036d6:	f200 8152 	bhi.w	7000397e <USBD_GetDescriptor+0x2ca>
700036da:	a201      	add	r2, pc, #4	@ (adr r2, 700036e0 <USBD_GetDescriptor+0x2c>)
700036dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700036e0:	70003751 	.word	0x70003751
700036e4:	70003769 	.word	0x70003769
700036e8:	700037a9 	.word	0x700037a9
700036ec:	7000397f 	.word	0x7000397f
700036f0:	7000397f 	.word	0x7000397f
700036f4:	7000391f 	.word	0x7000391f
700036f8:	7000394b 	.word	0x7000394b
700036fc:	7000397f 	.word	0x7000397f
70003700:	7000397f 	.word	0x7000397f
70003704:	7000397f 	.word	0x7000397f
70003708:	7000397f 	.word	0x7000397f
7000370c:	7000397f 	.word	0x7000397f
70003710:	7000397f 	.word	0x7000397f
70003714:	7000397f 	.word	0x7000397f
70003718:	7000371d 	.word	0x7000371d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
7000371c:	687b      	ldr	r3, [r7, #4]
7000371e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003722:	69db      	ldr	r3, [r3, #28]
70003724:	2b00      	cmp	r3, #0
70003726:	d00b      	beq.n	70003740 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
70003728:	687b      	ldr	r3, [r7, #4]
7000372a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000372e:	69db      	ldr	r3, [r3, #28]
70003730:	687a      	ldr	r2, [r7, #4]
70003732:	7c12      	ldrb	r2, [r2, #16]
70003734:	f107 0108 	add.w	r1, r7, #8
70003738:	4610      	mov	r0, r2
7000373a:	4798      	blx	r3
7000373c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
7000373e:	e126      	b.n	7000398e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
70003740:	6839      	ldr	r1, [r7, #0]
70003742:	6878      	ldr	r0, [r7, #4]
70003744:	f000 fb27 	bl	70003d96 <USBD_CtlError>
        err++;
70003748:	7afb      	ldrb	r3, [r7, #11]
7000374a:	3301      	adds	r3, #1
7000374c:	72fb      	strb	r3, [r7, #11]
      break;
7000374e:	e11e      	b.n	7000398e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
70003750:	687b      	ldr	r3, [r7, #4]
70003752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003756:	681b      	ldr	r3, [r3, #0]
70003758:	687a      	ldr	r2, [r7, #4]
7000375a:	7c12      	ldrb	r2, [r2, #16]
7000375c:	f107 0108 	add.w	r1, r7, #8
70003760:	4610      	mov	r0, r2
70003762:	4798      	blx	r3
70003764:	60f8      	str	r0, [r7, #12]
      break;
70003766:	e112      	b.n	7000398e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
70003768:	687b      	ldr	r3, [r7, #4]
7000376a:	7c1b      	ldrb	r3, [r3, #16]
7000376c:	2b00      	cmp	r3, #0
7000376e:	d10d      	bne.n	7000378c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
70003770:	687b      	ldr	r3, [r7, #4]
70003772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
70003778:	f107 0208 	add.w	r2, r7, #8
7000377c:	4610      	mov	r0, r2
7000377e:	4798      	blx	r3
70003780:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
70003782:	68fb      	ldr	r3, [r7, #12]
70003784:	3301      	adds	r3, #1
70003786:	2202      	movs	r2, #2
70003788:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
7000378a:	e100      	b.n	7000398e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
7000378c:	687b      	ldr	r3, [r7, #4]
7000378e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
70003794:	f107 0208 	add.w	r2, r7, #8
70003798:	4610      	mov	r0, r2
7000379a:	4798      	blx	r3
7000379c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
7000379e:	68fb      	ldr	r3, [r7, #12]
700037a0:	3301      	adds	r3, #1
700037a2:	2202      	movs	r2, #2
700037a4:	701a      	strb	r2, [r3, #0]
      break;
700037a6:	e0f2      	b.n	7000398e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
700037a8:	683b      	ldr	r3, [r7, #0]
700037aa:	885b      	ldrh	r3, [r3, #2]
700037ac:	b2db      	uxtb	r3, r3
700037ae:	2b05      	cmp	r3, #5
700037b0:	f200 80ac 	bhi.w	7000390c <USBD_GetDescriptor+0x258>
700037b4:	a201      	add	r2, pc, #4	@ (adr r2, 700037bc <USBD_GetDescriptor+0x108>)
700037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
700037ba:	bf00      	nop
700037bc:	700037d5 	.word	0x700037d5
700037c0:	70003809 	.word	0x70003809
700037c4:	7000383d 	.word	0x7000383d
700037c8:	70003871 	.word	0x70003871
700037cc:	700038a5 	.word	0x700038a5
700037d0:	700038d9 	.word	0x700038d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
700037d4:	687b      	ldr	r3, [r7, #4]
700037d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700037da:	685b      	ldr	r3, [r3, #4]
700037dc:	2b00      	cmp	r3, #0
700037de:	d00b      	beq.n	700037f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
700037e0:	687b      	ldr	r3, [r7, #4]
700037e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700037e6:	685b      	ldr	r3, [r3, #4]
700037e8:	687a      	ldr	r2, [r7, #4]
700037ea:	7c12      	ldrb	r2, [r2, #16]
700037ec:	f107 0108 	add.w	r1, r7, #8
700037f0:	4610      	mov	r0, r2
700037f2:	4798      	blx	r3
700037f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
700037f6:	e091      	b.n	7000391c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
700037f8:	6839      	ldr	r1, [r7, #0]
700037fa:	6878      	ldr	r0, [r7, #4]
700037fc:	f000 facb 	bl	70003d96 <USBD_CtlError>
            err++;
70003800:	7afb      	ldrb	r3, [r7, #11]
70003802:	3301      	adds	r3, #1
70003804:	72fb      	strb	r3, [r7, #11]
          break;
70003806:	e089      	b.n	7000391c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
70003808:	687b      	ldr	r3, [r7, #4]
7000380a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000380e:	689b      	ldr	r3, [r3, #8]
70003810:	2b00      	cmp	r3, #0
70003812:	d00b      	beq.n	7000382c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
70003814:	687b      	ldr	r3, [r7, #4]
70003816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000381a:	689b      	ldr	r3, [r3, #8]
7000381c:	687a      	ldr	r2, [r7, #4]
7000381e:	7c12      	ldrb	r2, [r2, #16]
70003820:	f107 0108 	add.w	r1, r7, #8
70003824:	4610      	mov	r0, r2
70003826:	4798      	blx	r3
70003828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
7000382a:	e077      	b.n	7000391c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
7000382c:	6839      	ldr	r1, [r7, #0]
7000382e:	6878      	ldr	r0, [r7, #4]
70003830:	f000 fab1 	bl	70003d96 <USBD_CtlError>
            err++;
70003834:	7afb      	ldrb	r3, [r7, #11]
70003836:	3301      	adds	r3, #1
70003838:	72fb      	strb	r3, [r7, #11]
          break;
7000383a:	e06f      	b.n	7000391c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
7000383c:	687b      	ldr	r3, [r7, #4]
7000383e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003842:	68db      	ldr	r3, [r3, #12]
70003844:	2b00      	cmp	r3, #0
70003846:	d00b      	beq.n	70003860 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
70003848:	687b      	ldr	r3, [r7, #4]
7000384a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
7000384e:	68db      	ldr	r3, [r3, #12]
70003850:	687a      	ldr	r2, [r7, #4]
70003852:	7c12      	ldrb	r2, [r2, #16]
70003854:	f107 0108 	add.w	r1, r7, #8
70003858:	4610      	mov	r0, r2
7000385a:	4798      	blx	r3
7000385c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
7000385e:	e05d      	b.n	7000391c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70003860:	6839      	ldr	r1, [r7, #0]
70003862:	6878      	ldr	r0, [r7, #4]
70003864:	f000 fa97 	bl	70003d96 <USBD_CtlError>
            err++;
70003868:	7afb      	ldrb	r3, [r7, #11]
7000386a:	3301      	adds	r3, #1
7000386c:	72fb      	strb	r3, [r7, #11]
          break;
7000386e:	e055      	b.n	7000391c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
70003870:	687b      	ldr	r3, [r7, #4]
70003872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003876:	691b      	ldr	r3, [r3, #16]
70003878:	2b00      	cmp	r3, #0
7000387a:	d00b      	beq.n	70003894 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
7000387c:	687b      	ldr	r3, [r7, #4]
7000387e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
70003882:	691b      	ldr	r3, [r3, #16]
70003884:	687a      	ldr	r2, [r7, #4]
70003886:	7c12      	ldrb	r2, [r2, #16]
70003888:	f107 0108 	add.w	r1, r7, #8
7000388c:	4610      	mov	r0, r2
7000388e:	4798      	blx	r3
70003890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
70003892:	e043      	b.n	7000391c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
70003894:	6839      	ldr	r1, [r7, #0]
70003896:	6878      	ldr	r0, [r7, #4]
70003898:	f000 fa7d 	bl	70003d96 <USBD_CtlError>
            err++;
7000389c:	7afb      	ldrb	r3, [r7, #11]
7000389e:	3301      	adds	r3, #1
700038a0:	72fb      	strb	r3, [r7, #11]
          break;
700038a2:	e03b      	b.n	7000391c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
700038a4:	687b      	ldr	r3, [r7, #4]
700038a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700038aa:	695b      	ldr	r3, [r3, #20]
700038ac:	2b00      	cmp	r3, #0
700038ae:	d00b      	beq.n	700038c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
700038b0:	687b      	ldr	r3, [r7, #4]
700038b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700038b6:	695b      	ldr	r3, [r3, #20]
700038b8:	687a      	ldr	r2, [r7, #4]
700038ba:	7c12      	ldrb	r2, [r2, #16]
700038bc:	f107 0108 	add.w	r1, r7, #8
700038c0:	4610      	mov	r0, r2
700038c2:	4798      	blx	r3
700038c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
700038c6:	e029      	b.n	7000391c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
700038c8:	6839      	ldr	r1, [r7, #0]
700038ca:	6878      	ldr	r0, [r7, #4]
700038cc:	f000 fa63 	bl	70003d96 <USBD_CtlError>
            err++;
700038d0:	7afb      	ldrb	r3, [r7, #11]
700038d2:	3301      	adds	r3, #1
700038d4:	72fb      	strb	r3, [r7, #11]
          break;
700038d6:	e021      	b.n	7000391c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
700038d8:	687b      	ldr	r3, [r7, #4]
700038da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700038de:	699b      	ldr	r3, [r3, #24]
700038e0:	2b00      	cmp	r3, #0
700038e2:	d00b      	beq.n	700038fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
700038e4:	687b      	ldr	r3, [r7, #4]
700038e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
700038ea:	699b      	ldr	r3, [r3, #24]
700038ec:	687a      	ldr	r2, [r7, #4]
700038ee:	7c12      	ldrb	r2, [r2, #16]
700038f0:	f107 0108 	add.w	r1, r7, #8
700038f4:	4610      	mov	r0, r2
700038f6:	4798      	blx	r3
700038f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
700038fa:	e00f      	b.n	7000391c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
700038fc:	6839      	ldr	r1, [r7, #0]
700038fe:	6878      	ldr	r0, [r7, #4]
70003900:	f000 fa49 	bl	70003d96 <USBD_CtlError>
            err++;
70003904:	7afb      	ldrb	r3, [r7, #11]
70003906:	3301      	adds	r3, #1
70003908:	72fb      	strb	r3, [r7, #11]
          break;
7000390a:	e007      	b.n	7000391c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
7000390c:	6839      	ldr	r1, [r7, #0]
7000390e:	6878      	ldr	r0, [r7, #4]
70003910:	f000 fa41 	bl	70003d96 <USBD_CtlError>
          err++;
70003914:	7afb      	ldrb	r3, [r7, #11]
70003916:	3301      	adds	r3, #1
70003918:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
7000391a:	bf00      	nop
      }
      break;
7000391c:	e037      	b.n	7000398e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
7000391e:	687b      	ldr	r3, [r7, #4]
70003920:	7c1b      	ldrb	r3, [r3, #16]
70003922:	2b00      	cmp	r3, #0
70003924:	d109      	bne.n	7000393a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
70003926:	687b      	ldr	r3, [r7, #4]
70003928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
7000392c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
7000392e:	f107 0208 	add.w	r2, r7, #8
70003932:	4610      	mov	r0, r2
70003934:	4798      	blx	r3
70003936:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
70003938:	e029      	b.n	7000398e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
7000393a:	6839      	ldr	r1, [r7, #0]
7000393c:	6878      	ldr	r0, [r7, #4]
7000393e:	f000 fa2a 	bl	70003d96 <USBD_CtlError>
        err++;
70003942:	7afb      	ldrb	r3, [r7, #11]
70003944:	3301      	adds	r3, #1
70003946:	72fb      	strb	r3, [r7, #11]
      break;
70003948:	e021      	b.n	7000398e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
7000394a:	687b      	ldr	r3, [r7, #4]
7000394c:	7c1b      	ldrb	r3, [r3, #16]
7000394e:	2b00      	cmp	r3, #0
70003950:	d10d      	bne.n	7000396e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
70003952:	687b      	ldr	r3, [r7, #4]
70003954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
70003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
7000395a:	f107 0208 	add.w	r2, r7, #8
7000395e:	4610      	mov	r0, r2
70003960:	4798      	blx	r3
70003962:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
70003964:	68fb      	ldr	r3, [r7, #12]
70003966:	3301      	adds	r3, #1
70003968:	2207      	movs	r2, #7
7000396a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
7000396c:	e00f      	b.n	7000398e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
7000396e:	6839      	ldr	r1, [r7, #0]
70003970:	6878      	ldr	r0, [r7, #4]
70003972:	f000 fa10 	bl	70003d96 <USBD_CtlError>
        err++;
70003976:	7afb      	ldrb	r3, [r7, #11]
70003978:	3301      	adds	r3, #1
7000397a:	72fb      	strb	r3, [r7, #11]
      break;
7000397c:	e007      	b.n	7000398e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
7000397e:	6839      	ldr	r1, [r7, #0]
70003980:	6878      	ldr	r0, [r7, #4]
70003982:	f000 fa08 	bl	70003d96 <USBD_CtlError>
      err++;
70003986:	7afb      	ldrb	r3, [r7, #11]
70003988:	3301      	adds	r3, #1
7000398a:	72fb      	strb	r3, [r7, #11]
      break;
7000398c:	bf00      	nop
  }

  if (err != 0U)
7000398e:	7afb      	ldrb	r3, [r7, #11]
70003990:	2b00      	cmp	r3, #0
70003992:	d11e      	bne.n	700039d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
70003994:	683b      	ldr	r3, [r7, #0]
70003996:	88db      	ldrh	r3, [r3, #6]
70003998:	2b00      	cmp	r3, #0
7000399a:	d016      	beq.n	700039ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
7000399c:	893b      	ldrh	r3, [r7, #8]
7000399e:	2b00      	cmp	r3, #0
700039a0:	d00e      	beq.n	700039c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
700039a2:	683b      	ldr	r3, [r7, #0]
700039a4:	88da      	ldrh	r2, [r3, #6]
700039a6:	893b      	ldrh	r3, [r7, #8]
700039a8:	4293      	cmp	r3, r2
700039aa:	bf28      	it	cs
700039ac:	4613      	movcs	r3, r2
700039ae:	b29b      	uxth	r3, r3
700039b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
700039b2:	893b      	ldrh	r3, [r7, #8]
700039b4:	461a      	mov	r2, r3
700039b6:	68f9      	ldr	r1, [r7, #12]
700039b8:	6878      	ldr	r0, [r7, #4]
700039ba:	f000 f9fd 	bl	70003db8 <USBD_CtlSendData>
700039be:	e009      	b.n	700039d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
700039c0:	6839      	ldr	r1, [r7, #0]
700039c2:	6878      	ldr	r0, [r7, #4]
700039c4:	f000 f9e7 	bl	70003d96 <USBD_CtlError>
700039c8:	e004      	b.n	700039d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
700039ca:	6878      	ldr	r0, [r7, #4]
700039cc:	f000 fa31 	bl	70003e32 <USBD_CtlSendStatus>
700039d0:	e000      	b.n	700039d4 <USBD_GetDescriptor+0x320>
    return;
700039d2:	bf00      	nop
  }
}
700039d4:	3710      	adds	r7, #16
700039d6:	46bd      	mov	sp, r7
700039d8:	bd80      	pop	{r7, pc}
700039da:	bf00      	nop

700039dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
700039dc:	b580      	push	{r7, lr}
700039de:	b084      	sub	sp, #16
700039e0:	af00      	add	r7, sp, #0
700039e2:	6078      	str	r0, [r7, #4]
700039e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
700039e6:	683b      	ldr	r3, [r7, #0]
700039e8:	889b      	ldrh	r3, [r3, #4]
700039ea:	2b00      	cmp	r3, #0
700039ec:	d131      	bne.n	70003a52 <USBD_SetAddress+0x76>
700039ee:	683b      	ldr	r3, [r7, #0]
700039f0:	88db      	ldrh	r3, [r3, #6]
700039f2:	2b00      	cmp	r3, #0
700039f4:	d12d      	bne.n	70003a52 <USBD_SetAddress+0x76>
700039f6:	683b      	ldr	r3, [r7, #0]
700039f8:	885b      	ldrh	r3, [r3, #2]
700039fa:	2b7f      	cmp	r3, #127	@ 0x7f
700039fc:	d829      	bhi.n	70003a52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
700039fe:	683b      	ldr	r3, [r7, #0]
70003a00:	885b      	ldrh	r3, [r3, #2]
70003a02:	b2db      	uxtb	r3, r3
70003a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
70003a08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003a0a:	687b      	ldr	r3, [r7, #4]
70003a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003a10:	b2db      	uxtb	r3, r3
70003a12:	2b03      	cmp	r3, #3
70003a14:	d104      	bne.n	70003a20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
70003a16:	6839      	ldr	r1, [r7, #0]
70003a18:	6878      	ldr	r0, [r7, #4]
70003a1a:	f000 f9bc 	bl	70003d96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003a1e:	e01d      	b.n	70003a5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
70003a20:	687b      	ldr	r3, [r7, #4]
70003a22:	7bfa      	ldrb	r2, [r7, #15]
70003a24:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
70003a28:	7bfb      	ldrb	r3, [r7, #15]
70003a2a:	4619      	mov	r1, r3
70003a2c:	6878      	ldr	r0, [r7, #4]
70003a2e:	f000 fbb7 	bl	700041a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
70003a32:	6878      	ldr	r0, [r7, #4]
70003a34:	f000 f9fd 	bl	70003e32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
70003a38:	7bfb      	ldrb	r3, [r7, #15]
70003a3a:	2b00      	cmp	r3, #0
70003a3c:	d004      	beq.n	70003a48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
70003a3e:	687b      	ldr	r3, [r7, #4]
70003a40:	2202      	movs	r2, #2
70003a42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003a46:	e009      	b.n	70003a5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
70003a48:	687b      	ldr	r3, [r7, #4]
70003a4a:	2201      	movs	r2, #1
70003a4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
70003a50:	e004      	b.n	70003a5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
70003a52:	6839      	ldr	r1, [r7, #0]
70003a54:	6878      	ldr	r0, [r7, #4]
70003a56:	f000 f99e 	bl	70003d96 <USBD_CtlError>
  }
}
70003a5a:	bf00      	nop
70003a5c:	bf00      	nop
70003a5e:	3710      	adds	r7, #16
70003a60:	46bd      	mov	sp, r7
70003a62:	bd80      	pop	{r7, pc}

70003a64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003a64:	b580      	push	{r7, lr}
70003a66:	b084      	sub	sp, #16
70003a68:	af00      	add	r7, sp, #0
70003a6a:	6078      	str	r0, [r7, #4]
70003a6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
70003a6e:	2300      	movs	r3, #0
70003a70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
70003a72:	683b      	ldr	r3, [r7, #0]
70003a74:	885b      	ldrh	r3, [r3, #2]
70003a76:	b2da      	uxtb	r2, r3
70003a78:	4b4e      	ldr	r3, [pc, #312]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003a7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
70003a7c:	4b4d      	ldr	r3, [pc, #308]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003a7e:	781b      	ldrb	r3, [r3, #0]
70003a80:	2b01      	cmp	r3, #1
70003a82:	d905      	bls.n	70003a90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
70003a84:	6839      	ldr	r1, [r7, #0]
70003a86:	6878      	ldr	r0, [r7, #4]
70003a88:	f000 f985 	bl	70003d96 <USBD_CtlError>
    return USBD_FAIL;
70003a8c:	2303      	movs	r3, #3
70003a8e:	e08c      	b.n	70003baa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
70003a90:	687b      	ldr	r3, [r7, #4]
70003a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003a96:	b2db      	uxtb	r3, r3
70003a98:	2b02      	cmp	r3, #2
70003a9a:	d002      	beq.n	70003aa2 <USBD_SetConfig+0x3e>
70003a9c:	2b03      	cmp	r3, #3
70003a9e:	d029      	beq.n	70003af4 <USBD_SetConfig+0x90>
70003aa0:	e075      	b.n	70003b8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
70003aa2:	4b44      	ldr	r3, [pc, #272]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003aa4:	781b      	ldrb	r3, [r3, #0]
70003aa6:	2b00      	cmp	r3, #0
70003aa8:	d020      	beq.n	70003aec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
70003aaa:	4b42      	ldr	r3, [pc, #264]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003aac:	781b      	ldrb	r3, [r3, #0]
70003aae:	461a      	mov	r2, r3
70003ab0:	687b      	ldr	r3, [r7, #4]
70003ab2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
70003ab4:	4b3f      	ldr	r3, [pc, #252]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003ab6:	781b      	ldrb	r3, [r3, #0]
70003ab8:	4619      	mov	r1, r3
70003aba:	6878      	ldr	r0, [r7, #4]
70003abc:	f7ff f80d 	bl	70002ada <USBD_SetClassConfig>
70003ac0:	4603      	mov	r3, r0
70003ac2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
70003ac4:	7bfb      	ldrb	r3, [r7, #15]
70003ac6:	2b00      	cmp	r3, #0
70003ac8:	d008      	beq.n	70003adc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
70003aca:	6839      	ldr	r1, [r7, #0]
70003acc:	6878      	ldr	r0, [r7, #4]
70003ace:	f000 f962 	bl	70003d96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
70003ad2:	687b      	ldr	r3, [r7, #4]
70003ad4:	2202      	movs	r2, #2
70003ad6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
70003ada:	e065      	b.n	70003ba8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
70003adc:	6878      	ldr	r0, [r7, #4]
70003ade:	f000 f9a8 	bl	70003e32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
70003ae2:	687b      	ldr	r3, [r7, #4]
70003ae4:	2203      	movs	r2, #3
70003ae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
70003aea:	e05d      	b.n	70003ba8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
70003aec:	6878      	ldr	r0, [r7, #4]
70003aee:	f000 f9a0 	bl	70003e32 <USBD_CtlSendStatus>
      break;
70003af2:	e059      	b.n	70003ba8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
70003af4:	4b2f      	ldr	r3, [pc, #188]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003af6:	781b      	ldrb	r3, [r3, #0]
70003af8:	2b00      	cmp	r3, #0
70003afa:	d112      	bne.n	70003b22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
70003afc:	687b      	ldr	r3, [r7, #4]
70003afe:	2202      	movs	r2, #2
70003b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
70003b04:	4b2b      	ldr	r3, [pc, #172]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003b06:	781b      	ldrb	r3, [r3, #0]
70003b08:	461a      	mov	r2, r3
70003b0a:	687b      	ldr	r3, [r7, #4]
70003b0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
70003b0e:	4b29      	ldr	r3, [pc, #164]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003b10:	781b      	ldrb	r3, [r3, #0]
70003b12:	4619      	mov	r1, r3
70003b14:	6878      	ldr	r0, [r7, #4]
70003b16:	f7fe fffc 	bl	70002b12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
70003b1a:	6878      	ldr	r0, [r7, #4]
70003b1c:	f000 f989 	bl	70003e32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
70003b20:	e042      	b.n	70003ba8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
70003b22:	4b24      	ldr	r3, [pc, #144]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003b24:	781b      	ldrb	r3, [r3, #0]
70003b26:	461a      	mov	r2, r3
70003b28:	687b      	ldr	r3, [r7, #4]
70003b2a:	685b      	ldr	r3, [r3, #4]
70003b2c:	429a      	cmp	r2, r3
70003b2e:	d02a      	beq.n	70003b86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
70003b30:	687b      	ldr	r3, [r7, #4]
70003b32:	685b      	ldr	r3, [r3, #4]
70003b34:	b2db      	uxtb	r3, r3
70003b36:	4619      	mov	r1, r3
70003b38:	6878      	ldr	r0, [r7, #4]
70003b3a:	f7fe ffea 	bl	70002b12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
70003b3e:	4b1d      	ldr	r3, [pc, #116]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003b40:	781b      	ldrb	r3, [r3, #0]
70003b42:	461a      	mov	r2, r3
70003b44:	687b      	ldr	r3, [r7, #4]
70003b46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
70003b48:	4b1a      	ldr	r3, [pc, #104]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003b4a:	781b      	ldrb	r3, [r3, #0]
70003b4c:	4619      	mov	r1, r3
70003b4e:	6878      	ldr	r0, [r7, #4]
70003b50:	f7fe ffc3 	bl	70002ada <USBD_SetClassConfig>
70003b54:	4603      	mov	r3, r0
70003b56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
70003b58:	7bfb      	ldrb	r3, [r7, #15]
70003b5a:	2b00      	cmp	r3, #0
70003b5c:	d00f      	beq.n	70003b7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
70003b5e:	6839      	ldr	r1, [r7, #0]
70003b60:	6878      	ldr	r0, [r7, #4]
70003b62:	f000 f918 	bl	70003d96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
70003b66:	687b      	ldr	r3, [r7, #4]
70003b68:	685b      	ldr	r3, [r3, #4]
70003b6a:	b2db      	uxtb	r3, r3
70003b6c:	4619      	mov	r1, r3
70003b6e:	6878      	ldr	r0, [r7, #4]
70003b70:	f7fe ffcf 	bl	70002b12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
70003b74:	687b      	ldr	r3, [r7, #4]
70003b76:	2202      	movs	r2, #2
70003b78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
70003b7c:	e014      	b.n	70003ba8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
70003b7e:	6878      	ldr	r0, [r7, #4]
70003b80:	f000 f957 	bl	70003e32 <USBD_CtlSendStatus>
      break;
70003b84:	e010      	b.n	70003ba8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
70003b86:	6878      	ldr	r0, [r7, #4]
70003b88:	f000 f953 	bl	70003e32 <USBD_CtlSendStatus>
      break;
70003b8c:	e00c      	b.n	70003ba8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
70003b8e:	6839      	ldr	r1, [r7, #0]
70003b90:	6878      	ldr	r0, [r7, #4]
70003b92:	f000 f900 	bl	70003d96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
70003b96:	4b07      	ldr	r3, [pc, #28]	@ (70003bb4 <USBD_SetConfig+0x150>)
70003b98:	781b      	ldrb	r3, [r3, #0]
70003b9a:	4619      	mov	r1, r3
70003b9c:	6878      	ldr	r0, [r7, #4]
70003b9e:	f7fe ffb8 	bl	70002b12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
70003ba2:	2303      	movs	r3, #3
70003ba4:	73fb      	strb	r3, [r7, #15]
      break;
70003ba6:	bf00      	nop
  }

  return ret;
70003ba8:	7bfb      	ldrb	r3, [r7, #15]
}
70003baa:	4618      	mov	r0, r3
70003bac:	3710      	adds	r7, #16
70003bae:	46bd      	mov	sp, r7
70003bb0:	bd80      	pop	{r7, pc}
70003bb2:	bf00      	nop
70003bb4:	2400002c 	.word	0x2400002c

70003bb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003bb8:	b580      	push	{r7, lr}
70003bba:	b082      	sub	sp, #8
70003bbc:	af00      	add	r7, sp, #0
70003bbe:	6078      	str	r0, [r7, #4]
70003bc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
70003bc2:	683b      	ldr	r3, [r7, #0]
70003bc4:	88db      	ldrh	r3, [r3, #6]
70003bc6:	2b01      	cmp	r3, #1
70003bc8:	d004      	beq.n	70003bd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
70003bca:	6839      	ldr	r1, [r7, #0]
70003bcc:	6878      	ldr	r0, [r7, #4]
70003bce:	f000 f8e2 	bl	70003d96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
70003bd2:	e023      	b.n	70003c1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
70003bd4:	687b      	ldr	r3, [r7, #4]
70003bd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003bda:	b2db      	uxtb	r3, r3
70003bdc:	2b02      	cmp	r3, #2
70003bde:	dc02      	bgt.n	70003be6 <USBD_GetConfig+0x2e>
70003be0:	2b00      	cmp	r3, #0
70003be2:	dc03      	bgt.n	70003bec <USBD_GetConfig+0x34>
70003be4:	e015      	b.n	70003c12 <USBD_GetConfig+0x5a>
70003be6:	2b03      	cmp	r3, #3
70003be8:	d00b      	beq.n	70003c02 <USBD_GetConfig+0x4a>
70003bea:	e012      	b.n	70003c12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
70003bec:	687b      	ldr	r3, [r7, #4]
70003bee:	2200      	movs	r2, #0
70003bf0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
70003bf2:	687b      	ldr	r3, [r7, #4]
70003bf4:	3308      	adds	r3, #8
70003bf6:	2201      	movs	r2, #1
70003bf8:	4619      	mov	r1, r3
70003bfa:	6878      	ldr	r0, [r7, #4]
70003bfc:	f000 f8dc 	bl	70003db8 <USBD_CtlSendData>
        break;
70003c00:	e00c      	b.n	70003c1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
70003c02:	687b      	ldr	r3, [r7, #4]
70003c04:	3304      	adds	r3, #4
70003c06:	2201      	movs	r2, #1
70003c08:	4619      	mov	r1, r3
70003c0a:	6878      	ldr	r0, [r7, #4]
70003c0c:	f000 f8d4 	bl	70003db8 <USBD_CtlSendData>
        break;
70003c10:	e004      	b.n	70003c1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
70003c12:	6839      	ldr	r1, [r7, #0]
70003c14:	6878      	ldr	r0, [r7, #4]
70003c16:	f000 f8be 	bl	70003d96 <USBD_CtlError>
        break;
70003c1a:	bf00      	nop
}
70003c1c:	bf00      	nop
70003c1e:	3708      	adds	r7, #8
70003c20:	46bd      	mov	sp, r7
70003c22:	bd80      	pop	{r7, pc}

70003c24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003c24:	b580      	push	{r7, lr}
70003c26:	b082      	sub	sp, #8
70003c28:	af00      	add	r7, sp, #0
70003c2a:	6078      	str	r0, [r7, #4]
70003c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
70003c2e:	687b      	ldr	r3, [r7, #4]
70003c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003c34:	b2db      	uxtb	r3, r3
70003c36:	3b01      	subs	r3, #1
70003c38:	2b02      	cmp	r3, #2
70003c3a:	d81e      	bhi.n	70003c7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
70003c3c:	683b      	ldr	r3, [r7, #0]
70003c3e:	88db      	ldrh	r3, [r3, #6]
70003c40:	2b02      	cmp	r3, #2
70003c42:	d004      	beq.n	70003c4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
70003c44:	6839      	ldr	r1, [r7, #0]
70003c46:	6878      	ldr	r0, [r7, #4]
70003c48:	f000 f8a5 	bl	70003d96 <USBD_CtlError>
        break;
70003c4c:	e01a      	b.n	70003c84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
70003c4e:	687b      	ldr	r3, [r7, #4]
70003c50:	2201      	movs	r2, #1
70003c52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
70003c54:	687b      	ldr	r3, [r7, #4]
70003c56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
70003c5a:	2b00      	cmp	r3, #0
70003c5c:	d005      	beq.n	70003c6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
70003c5e:	687b      	ldr	r3, [r7, #4]
70003c60:	68db      	ldr	r3, [r3, #12]
70003c62:	f043 0202 	orr.w	r2, r3, #2
70003c66:	687b      	ldr	r3, [r7, #4]
70003c68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
70003c6a:	687b      	ldr	r3, [r7, #4]
70003c6c:	330c      	adds	r3, #12
70003c6e:	2202      	movs	r2, #2
70003c70:	4619      	mov	r1, r3
70003c72:	6878      	ldr	r0, [r7, #4]
70003c74:	f000 f8a0 	bl	70003db8 <USBD_CtlSendData>
      break;
70003c78:	e004      	b.n	70003c84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
70003c7a:	6839      	ldr	r1, [r7, #0]
70003c7c:	6878      	ldr	r0, [r7, #4]
70003c7e:	f000 f88a 	bl	70003d96 <USBD_CtlError>
      break;
70003c82:	bf00      	nop
  }
}
70003c84:	bf00      	nop
70003c86:	3708      	adds	r7, #8
70003c88:	46bd      	mov	sp, r7
70003c8a:	bd80      	pop	{r7, pc}

70003c8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003c8c:	b580      	push	{r7, lr}
70003c8e:	b082      	sub	sp, #8
70003c90:	af00      	add	r7, sp, #0
70003c92:	6078      	str	r0, [r7, #4]
70003c94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
70003c96:	683b      	ldr	r3, [r7, #0]
70003c98:	885b      	ldrh	r3, [r3, #2]
70003c9a:	2b01      	cmp	r3, #1
70003c9c:	d107      	bne.n	70003cae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
70003c9e:	687b      	ldr	r3, [r7, #4]
70003ca0:	2201      	movs	r2, #1
70003ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
70003ca6:	6878      	ldr	r0, [r7, #4]
70003ca8:	f000 f8c3 	bl	70003e32 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
70003cac:	e013      	b.n	70003cd6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
70003cae:	683b      	ldr	r3, [r7, #0]
70003cb0:	885b      	ldrh	r3, [r3, #2]
70003cb2:	2b02      	cmp	r3, #2
70003cb4:	d10b      	bne.n	70003cce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
70003cb6:	683b      	ldr	r3, [r7, #0]
70003cb8:	889b      	ldrh	r3, [r3, #4]
70003cba:	0a1b      	lsrs	r3, r3, #8
70003cbc:	b29b      	uxth	r3, r3
70003cbe:	b2da      	uxtb	r2, r3
70003cc0:	687b      	ldr	r3, [r7, #4]
70003cc2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
70003cc6:	6878      	ldr	r0, [r7, #4]
70003cc8:	f000 f8b3 	bl	70003e32 <USBD_CtlSendStatus>
}
70003ccc:	e003      	b.n	70003cd6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
70003cce:	6839      	ldr	r1, [r7, #0]
70003cd0:	6878      	ldr	r0, [r7, #4]
70003cd2:	f000 f860 	bl	70003d96 <USBD_CtlError>
}
70003cd6:	bf00      	nop
70003cd8:	3708      	adds	r7, #8
70003cda:	46bd      	mov	sp, r7
70003cdc:	bd80      	pop	{r7, pc}

70003cde <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003cde:	b580      	push	{r7, lr}
70003ce0:	b082      	sub	sp, #8
70003ce2:	af00      	add	r7, sp, #0
70003ce4:	6078      	str	r0, [r7, #4]
70003ce6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
70003ce8:	687b      	ldr	r3, [r7, #4]
70003cea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
70003cee:	b2db      	uxtb	r3, r3
70003cf0:	3b01      	subs	r3, #1
70003cf2:	2b02      	cmp	r3, #2
70003cf4:	d80b      	bhi.n	70003d0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
70003cf6:	683b      	ldr	r3, [r7, #0]
70003cf8:	885b      	ldrh	r3, [r3, #2]
70003cfa:	2b01      	cmp	r3, #1
70003cfc:	d10c      	bne.n	70003d18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
70003cfe:	687b      	ldr	r3, [r7, #4]
70003d00:	2200      	movs	r2, #0
70003d02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
70003d06:	6878      	ldr	r0, [r7, #4]
70003d08:	f000 f893 	bl	70003e32 <USBD_CtlSendStatus>
      }
      break;
70003d0c:	e004      	b.n	70003d18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
70003d0e:	6839      	ldr	r1, [r7, #0]
70003d10:	6878      	ldr	r0, [r7, #4]
70003d12:	f000 f840 	bl	70003d96 <USBD_CtlError>
      break;
70003d16:	e000      	b.n	70003d1a <USBD_ClrFeature+0x3c>
      break;
70003d18:	bf00      	nop
  }
}
70003d1a:	bf00      	nop
70003d1c:	3708      	adds	r7, #8
70003d1e:	46bd      	mov	sp, r7
70003d20:	bd80      	pop	{r7, pc}

70003d22 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
70003d22:	b580      	push	{r7, lr}
70003d24:	b084      	sub	sp, #16
70003d26:	af00      	add	r7, sp, #0
70003d28:	6078      	str	r0, [r7, #4]
70003d2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
70003d2c:	683b      	ldr	r3, [r7, #0]
70003d2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
70003d30:	68fb      	ldr	r3, [r7, #12]
70003d32:	781a      	ldrb	r2, [r3, #0]
70003d34:	687b      	ldr	r3, [r7, #4]
70003d36:	701a      	strb	r2, [r3, #0]

  pbuff++;
70003d38:	68fb      	ldr	r3, [r7, #12]
70003d3a:	3301      	adds	r3, #1
70003d3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
70003d3e:	68fb      	ldr	r3, [r7, #12]
70003d40:	781a      	ldrb	r2, [r3, #0]
70003d42:	687b      	ldr	r3, [r7, #4]
70003d44:	705a      	strb	r2, [r3, #1]

  pbuff++;
70003d46:	68fb      	ldr	r3, [r7, #12]
70003d48:	3301      	adds	r3, #1
70003d4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
70003d4c:	68f8      	ldr	r0, [r7, #12]
70003d4e:	f7ff fa16 	bl	7000317e <SWAPBYTE>
70003d52:	4603      	mov	r3, r0
70003d54:	461a      	mov	r2, r3
70003d56:	687b      	ldr	r3, [r7, #4]
70003d58:	805a      	strh	r2, [r3, #2]

  pbuff++;
70003d5a:	68fb      	ldr	r3, [r7, #12]
70003d5c:	3301      	adds	r3, #1
70003d5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
70003d60:	68fb      	ldr	r3, [r7, #12]
70003d62:	3301      	adds	r3, #1
70003d64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
70003d66:	68f8      	ldr	r0, [r7, #12]
70003d68:	f7ff fa09 	bl	7000317e <SWAPBYTE>
70003d6c:	4603      	mov	r3, r0
70003d6e:	461a      	mov	r2, r3
70003d70:	687b      	ldr	r3, [r7, #4]
70003d72:	809a      	strh	r2, [r3, #4]

  pbuff++;
70003d74:	68fb      	ldr	r3, [r7, #12]
70003d76:	3301      	adds	r3, #1
70003d78:	60fb      	str	r3, [r7, #12]
  pbuff++;
70003d7a:	68fb      	ldr	r3, [r7, #12]
70003d7c:	3301      	adds	r3, #1
70003d7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
70003d80:	68f8      	ldr	r0, [r7, #12]
70003d82:	f7ff f9fc 	bl	7000317e <SWAPBYTE>
70003d86:	4603      	mov	r3, r0
70003d88:	461a      	mov	r2, r3
70003d8a:	687b      	ldr	r3, [r7, #4]
70003d8c:	80da      	strh	r2, [r3, #6]
}
70003d8e:	bf00      	nop
70003d90:	3710      	adds	r7, #16
70003d92:	46bd      	mov	sp, r7
70003d94:	bd80      	pop	{r7, pc}

70003d96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
70003d96:	b580      	push	{r7, lr}
70003d98:	b082      	sub	sp, #8
70003d9a:	af00      	add	r7, sp, #0
70003d9c:	6078      	str	r0, [r7, #4]
70003d9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
70003da0:	2180      	movs	r1, #128	@ 0x80
70003da2:	6878      	ldr	r0, [r7, #4]
70003da4:	f000 f992 	bl	700040cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
70003da8:	2100      	movs	r1, #0
70003daa:	6878      	ldr	r0, [r7, #4]
70003dac:	f000 f98e 	bl	700040cc <USBD_LL_StallEP>
}
70003db0:	bf00      	nop
70003db2:	3708      	adds	r7, #8
70003db4:	46bd      	mov	sp, r7
70003db6:	bd80      	pop	{r7, pc}

70003db8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
70003db8:	b580      	push	{r7, lr}
70003dba:	b084      	sub	sp, #16
70003dbc:	af00      	add	r7, sp, #0
70003dbe:	60f8      	str	r0, [r7, #12]
70003dc0:	60b9      	str	r1, [r7, #8]
70003dc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
70003dc4:	68fb      	ldr	r3, [r7, #12]
70003dc6:	2202      	movs	r2, #2
70003dc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
70003dcc:	68fb      	ldr	r3, [r7, #12]
70003dce:	687a      	ldr	r2, [r7, #4]
70003dd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
70003dd2:	68fb      	ldr	r3, [r7, #12]
70003dd4:	687a      	ldr	r2, [r7, #4]
70003dd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
70003dd8:	687b      	ldr	r3, [r7, #4]
70003dda:	68ba      	ldr	r2, [r7, #8]
70003ddc:	2100      	movs	r1, #0
70003dde:	68f8      	ldr	r0, [r7, #12]
70003de0:	f000 f9fd 	bl	700041de <USBD_LL_Transmit>

  return USBD_OK;
70003de4:	2300      	movs	r3, #0
}
70003de6:	4618      	mov	r0, r3
70003de8:	3710      	adds	r7, #16
70003dea:	46bd      	mov	sp, r7
70003dec:	bd80      	pop	{r7, pc}

70003dee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
70003dee:	b580      	push	{r7, lr}
70003df0:	b084      	sub	sp, #16
70003df2:	af00      	add	r7, sp, #0
70003df4:	60f8      	str	r0, [r7, #12]
70003df6:	60b9      	str	r1, [r7, #8]
70003df8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
70003dfa:	687b      	ldr	r3, [r7, #4]
70003dfc:	68ba      	ldr	r2, [r7, #8]
70003dfe:	2100      	movs	r1, #0
70003e00:	68f8      	ldr	r0, [r7, #12]
70003e02:	f000 f9ec 	bl	700041de <USBD_LL_Transmit>

  return USBD_OK;
70003e06:	2300      	movs	r3, #0
}
70003e08:	4618      	mov	r0, r3
70003e0a:	3710      	adds	r7, #16
70003e0c:	46bd      	mov	sp, r7
70003e0e:	bd80      	pop	{r7, pc}

70003e10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
70003e10:	b580      	push	{r7, lr}
70003e12:	b084      	sub	sp, #16
70003e14:	af00      	add	r7, sp, #0
70003e16:	60f8      	str	r0, [r7, #12]
70003e18:	60b9      	str	r1, [r7, #8]
70003e1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
70003e1c:	687b      	ldr	r3, [r7, #4]
70003e1e:	68ba      	ldr	r2, [r7, #8]
70003e20:	2100      	movs	r1, #0
70003e22:	68f8      	ldr	r0, [r7, #12]
70003e24:	f000 f9fc 	bl	70004220 <USBD_LL_PrepareReceive>

  return USBD_OK;
70003e28:	2300      	movs	r3, #0
}
70003e2a:	4618      	mov	r0, r3
70003e2c:	3710      	adds	r7, #16
70003e2e:	46bd      	mov	sp, r7
70003e30:	bd80      	pop	{r7, pc}

70003e32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
70003e32:	b580      	push	{r7, lr}
70003e34:	b082      	sub	sp, #8
70003e36:	af00      	add	r7, sp, #0
70003e38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
70003e3a:	687b      	ldr	r3, [r7, #4]
70003e3c:	2204      	movs	r2, #4
70003e3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
70003e42:	2300      	movs	r3, #0
70003e44:	2200      	movs	r2, #0
70003e46:	2100      	movs	r1, #0
70003e48:	6878      	ldr	r0, [r7, #4]
70003e4a:	f000 f9c8 	bl	700041de <USBD_LL_Transmit>

  return USBD_OK;
70003e4e:	2300      	movs	r3, #0
}
70003e50:	4618      	mov	r0, r3
70003e52:	3708      	adds	r7, #8
70003e54:	46bd      	mov	sp, r7
70003e56:	bd80      	pop	{r7, pc}

70003e58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
70003e58:	b580      	push	{r7, lr}
70003e5a:	b082      	sub	sp, #8
70003e5c:	af00      	add	r7, sp, #0
70003e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
70003e60:	687b      	ldr	r3, [r7, #4]
70003e62:	2205      	movs	r2, #5
70003e64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
70003e68:	2300      	movs	r3, #0
70003e6a:	2200      	movs	r2, #0
70003e6c:	2100      	movs	r1, #0
70003e6e:	6878      	ldr	r0, [r7, #4]
70003e70:	f000 f9d6 	bl	70004220 <USBD_LL_PrepareReceive>

  return USBD_OK;
70003e74:	2300      	movs	r3, #0
}
70003e76:	4618      	mov	r0, r3
70003e78:	3708      	adds	r7, #8
70003e7a:	46bd      	mov	sp, r7
70003e7c:	bd80      	pop	{r7, pc}

70003e7e <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003e7e:	b580      	push	{r7, lr}
70003e80:	b082      	sub	sp, #8
70003e82:	af00      	add	r7, sp, #0
70003e84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
70003e86:	687b      	ldr	r3, [r7, #4]
70003e88:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
70003e8c:	687b      	ldr	r3, [r7, #4]
70003e8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
70003e92:	4619      	mov	r1, r3
70003e94:	4610      	mov	r0, r2
70003e96:	f7fe fe56 	bl	70002b46 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SetupStageCallback_PostTreatment */

}
70003e9a:	bf00      	nop
70003e9c:	3708      	adds	r7, #8
70003e9e:	46bd      	mov	sp, r7
70003ea0:	bd80      	pop	{r7, pc}

70003ea2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003ea2:	b580      	push	{r7, lr}
70003ea4:	b082      	sub	sp, #8
70003ea6:	af00      	add	r7, sp, #0
70003ea8:	6078      	str	r0, [r7, #4]
70003eaa:	460b      	mov	r3, r1
70003eac:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
70003eae:	687b      	ldr	r3, [r7, #4]
70003eb0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
70003eb4:	78fa      	ldrb	r2, [r7, #3]
70003eb6:	6879      	ldr	r1, [r7, #4]
70003eb8:	4613      	mov	r3, r2
70003eba:	00db      	lsls	r3, r3, #3
70003ebc:	4413      	add	r3, r2
70003ebe:	009b      	lsls	r3, r3, #2
70003ec0:	440b      	add	r3, r1
70003ec2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
70003ec6:	681a      	ldr	r2, [r3, #0]
70003ec8:	78fb      	ldrb	r3, [r7, #3]
70003eca:	4619      	mov	r1, r3
70003ecc:	f7fe fe90 	bl	70002bf0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
70003ed0:	bf00      	nop
70003ed2:	3708      	adds	r7, #8
70003ed4:	46bd      	mov	sp, r7
70003ed6:	bd80      	pop	{r7, pc}

70003ed8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003ed8:	b580      	push	{r7, lr}
70003eda:	b082      	sub	sp, #8
70003edc:	af00      	add	r7, sp, #0
70003ede:	6078      	str	r0, [r7, #4]
70003ee0:	460b      	mov	r3, r1
70003ee2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
70003ee4:	687b      	ldr	r3, [r7, #4]
70003ee6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
70003eea:	78fa      	ldrb	r2, [r7, #3]
70003eec:	6879      	ldr	r1, [r7, #4]
70003eee:	4613      	mov	r3, r2
70003ef0:	00db      	lsls	r3, r3, #3
70003ef2:	4413      	add	r3, r2
70003ef4:	009b      	lsls	r3, r3, #2
70003ef6:	440b      	add	r3, r1
70003ef8:	3320      	adds	r3, #32
70003efa:	681a      	ldr	r2, [r3, #0]
70003efc:	78fb      	ldrb	r3, [r7, #3]
70003efe:	4619      	mov	r1, r3
70003f00:	f7fe ff29 	bl	70002d56 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
70003f04:	bf00      	nop
70003f06:	3708      	adds	r7, #8
70003f08:	46bd      	mov	sp, r7
70003f0a:	bd80      	pop	{r7, pc}

70003f0c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003f0c:	b580      	push	{r7, lr}
70003f0e:	b082      	sub	sp, #8
70003f10:	af00      	add	r7, sp, #0
70003f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SofCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
70003f14:	687b      	ldr	r3, [r7, #4]
70003f16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f1a:	4618      	mov	r0, r3
70003f1c:	f7ff f863 	bl	70002fe6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SofCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SofCallback_PostTreatment */
}
70003f20:	bf00      	nop
70003f22:	3708      	adds	r7, #8
70003f24:	46bd      	mov	sp, r7
70003f26:	bd80      	pop	{r7, pc}

70003f28 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003f28:	b580      	push	{r7, lr}
70003f2a:	b084      	sub	sp, #16
70003f2c:	af00      	add	r7, sp, #0
70003f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
70003f30:	2301      	movs	r3, #1
70003f32:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_HIGH)
70003f34:	687b      	ldr	r3, [r7, #4]
70003f36:	79db      	ldrb	r3, [r3, #7]
70003f38:	2b00      	cmp	r3, #0
70003f3a:	d102      	bne.n	70003f42 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
70003f3c:	2300      	movs	r3, #0
70003f3e:	73fb      	strb	r3, [r7, #15]
70003f40:	e008      	b.n	70003f54 <HAL_PCD_ResetCallback+0x2c>
  }
  else if (hpcd->Init.speed == PCD_SPEED_FULL)
70003f42:	687b      	ldr	r3, [r7, #4]
70003f44:	79db      	ldrb	r3, [r3, #7]
70003f46:	2b02      	cmp	r3, #2
70003f48:	d102      	bne.n	70003f50 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
70003f4a:	2301      	movs	r3, #1
70003f4c:	73fb      	strb	r3, [r7, #15]
70003f4e:	e001      	b.n	70003f54 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
70003f50:	f7fc fa03 	bl	7000035a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
70003f54:	687b      	ldr	r3, [r7, #4]
70003f56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f5a:	7bfa      	ldrb	r2, [r7, #15]
70003f5c:	4611      	mov	r1, r2
70003f5e:	4618      	mov	r0, r3
70003f60:	f7fe fffd 	bl	70002f5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
70003f64:	687b      	ldr	r3, [r7, #4]
70003f66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f6a:	4618      	mov	r0, r3
70003f6c:	f7fe ffa5 	bl	70002eba <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
70003f70:	bf00      	nop
70003f72:	3710      	adds	r7, #16
70003f74:	46bd      	mov	sp, r7
70003f76:	bd80      	pop	{r7, pc}

70003f78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003f78:	b580      	push	{r7, lr}
70003f7a:	b082      	sub	sp, #8
70003f7c:	af00      	add	r7, sp, #0
70003f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */

  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
70003f80:	687b      	ldr	r3, [r7, #4]
70003f82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003f86:	4618      	mov	r0, r3
70003f88:	f7fe fff9 	bl	70002f7e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
70003f8c:	687b      	ldr	r3, [r7, #4]
70003f8e:	7adb      	ldrb	r3, [r3, #11]
70003f90:	2b00      	cmp	r3, #0
70003f92:	d007      	beq.n	70003fa4 <HAL_PCD_SuspendCallback+0x2c>
  {
	HAL_SuspendTick();
70003f94:	f7fc fb00 	bl	70000598 <HAL_SuspendTick>
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
70003f98:	4b04      	ldr	r3, [pc, #16]	@ (70003fac <HAL_PCD_SuspendCallback+0x34>)
70003f9a:	691b      	ldr	r3, [r3, #16]
70003f9c:	4a03      	ldr	r2, [pc, #12]	@ (70003fac <HAL_PCD_SuspendCallback+0x34>)
70003f9e:	f043 0306 	orr.w	r3, r3, #6
70003fa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
70003fa4:	bf00      	nop
70003fa6:	3708      	adds	r7, #8
70003fa8:	46bd      	mov	sp, r7
70003faa:	bd80      	pop	{r7, pc}
70003fac:	e000ed00 	.word	0xe000ed00

70003fb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70003fb0:	b580      	push	{r7, lr}
70003fb2:	b082      	sub	sp, #8
70003fb4:	af00      	add	r7, sp, #0
70003fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
70003fb8:	687b      	ldr	r3, [r7, #4]
70003fba:	7adb      	ldrb	r3, [r3, #11]
70003fbc:	2b00      	cmp	r3, #0
70003fbe:	d007      	beq.n	70003fd0 <HAL_PCD_ResumeCallback+0x20>
  {
    HAL_ResumeTick();
70003fc0:	f7fc fafa 	bl	700005b8 <HAL_ResumeTick>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
70003fc4:	4b0d      	ldr	r3, [pc, #52]	@ (70003ffc <HAL_PCD_ResumeCallback+0x4c>)
70003fc6:	691b      	ldr	r3, [r3, #16]
70003fc8:	4a0c      	ldr	r2, [pc, #48]	@ (70003ffc <HAL_PCD_ResumeCallback+0x4c>)
70003fca:	f023 0306 	bic.w	r3, r3, #6
70003fce:	6113      	str	r3, [r2, #16]

  }
  /* USER CODE END 3 */
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
70003fd0:	687b      	ldr	r3, [r7, #4]
70003fd2:	681b      	ldr	r3, [r3, #0]
70003fd4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
70003fd8:	681b      	ldr	r3, [r3, #0]
70003fda:	687a      	ldr	r2, [r7, #4]
70003fdc:	6812      	ldr	r2, [r2, #0]
70003fde:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
70003fe2:	f023 0301 	bic.w	r3, r3, #1
70003fe6:	6013      	str	r3, [r2, #0]
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
70003fe8:	687b      	ldr	r3, [r7, #4]
70003fea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70003fee:	4618      	mov	r0, r3
70003ff0:	f7fe ffe1 	bl	70002fb6 <USBD_LL_Resume>

  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
70003ff4:	bf00      	nop
70003ff6:	3708      	adds	r7, #8
70003ff8:	46bd      	mov	sp, r7
70003ffa:	bd80      	pop	{r7, pc}
70003ffc:	e000ed00 	.word	0xe000ed00

70004000 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70004000:	b580      	push	{r7, lr}
70004002:	b082      	sub	sp, #8
70004004:	af00      	add	r7, sp, #0
70004006:	6078      	str	r0, [r7, #4]
70004008:	460b      	mov	r3, r1
7000400a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PreTreatment */
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
7000400c:	687b      	ldr	r3, [r7, #4]
7000400e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70004012:	78fa      	ldrb	r2, [r7, #3]
70004014:	4611      	mov	r1, r2
70004016:	4618      	mov	r0, r3
70004018:	f7ff f837 	bl	7000308a <USBD_LL_IsoOUTIncomplete>
  /* USER CODE BEGIN HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOOUTIncompleteCallback_PostTreatment */

}
7000401c:	bf00      	nop
7000401e:	3708      	adds	r7, #8
70004020:	46bd      	mov	sp, r7
70004022:	bd80      	pop	{r7, pc}

70004024 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70004024:	b580      	push	{r7, lr}
70004026:	b082      	sub	sp, #8
70004028:	af00      	add	r7, sp, #0
7000402a:	6078      	str	r0, [r7, #4]
7000402c:	460b      	mov	r3, r1
7000402e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PreTreatment */
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
70004030:	687b      	ldr	r3, [r7, #4]
70004032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70004036:	78fa      	ldrb	r2, [r7, #3]
70004038:	4611      	mov	r1, r2
7000403a:	4618      	mov	r0, r3
7000403c:	f7fe fff3 	bl	70003026 <USBD_LL_IsoINIncomplete>

  /* USER CODE BEGIN HAL_PCD_ISOINIncompleteCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ISOINIncompleteCallback_PostTreatment */
}
70004040:	bf00      	nop
70004042:	3708      	adds	r7, #8
70004044:	46bd      	mov	sp, r7
70004046:	bd80      	pop	{r7, pc}

70004048 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70004048:	b580      	push	{r7, lr}
7000404a:	b082      	sub	sp, #8
7000404c:	af00      	add	r7, sp, #0
7000404e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PreTreatment */
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
70004050:	687b      	ldr	r3, [r7, #4]
70004052:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70004056:	4618      	mov	r0, r3
70004058:	f7ff f849 	bl	700030ee <USBD_LL_DevConnected>
  /* USER CODE BEGIN HAL_PCD_ConnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ConnectCallback_PostTreatment */
}
7000405c:	bf00      	nop
7000405e:	3708      	adds	r7, #8
70004060:	46bd      	mov	sp, r7
70004062:	bd80      	pop	{r7, pc}

70004064 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
70004064:	b580      	push	{r7, lr}
70004066:	b082      	sub	sp, #8
70004068:	af00      	add	r7, sp, #0
7000406a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PreTreatment */
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
7000406c:	687b      	ldr	r3, [r7, #4]
7000406e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
70004072:	4618      	mov	r0, r3
70004074:	f7ff f846 	bl	70003104 <USBD_LL_DevDisconnected>
  /* USER CODE BEGIN HAL_PCD_DisconnectCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DisconnectCallback_PostTreatment */
}
70004078:	bf00      	nop
7000407a:	3708      	adds	r7, #8
7000407c:	46bd      	mov	sp, r7
7000407e:	bd80      	pop	{r7, pc}

70004080 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
70004080:	b580      	push	{r7, lr}
70004082:	b084      	sub	sp, #16
70004084:	af00      	add	r7, sp, #0
70004086:	6078      	str	r0, [r7, #4]
70004088:	4608      	mov	r0, r1
7000408a:	4611      	mov	r1, r2
7000408c:	461a      	mov	r2, r3
7000408e:	4603      	mov	r3, r0
70004090:	70fb      	strb	r3, [r7, #3]
70004092:	460b      	mov	r3, r1
70004094:	70bb      	strb	r3, [r7, #2]
70004096:	4613      	mov	r3, r2
70004098:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
7000409a:	2300      	movs	r3, #0
7000409c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000409e:	2300      	movs	r3, #0
700040a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
700040a2:	687b      	ldr	r3, [r7, #4]
700040a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
700040a8:	78bb      	ldrb	r3, [r7, #2]
700040aa:	883a      	ldrh	r2, [r7, #0]
700040ac:	78f9      	ldrb	r1, [r7, #3]
700040ae:	f7fd f868 	bl	70001182 <HAL_PCD_EP_Open>
700040b2:	4603      	mov	r3, r0
700040b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
700040b6:	7bfb      	ldrb	r3, [r7, #15]
700040b8:	4618      	mov	r0, r3
700040ba:	f000 f8d3 	bl	70004264 <USBD_Get_USB_Status>
700040be:	4603      	mov	r3, r0
700040c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
700040c2:	7bbb      	ldrb	r3, [r7, #14]
}
700040c4:	4618      	mov	r0, r3
700040c6:	3710      	adds	r7, #16
700040c8:	46bd      	mov	sp, r7
700040ca:	bd80      	pop	{r7, pc}

700040cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
700040cc:	b580      	push	{r7, lr}
700040ce:	b084      	sub	sp, #16
700040d0:	af00      	add	r7, sp, #0
700040d2:	6078      	str	r0, [r7, #4]
700040d4:	460b      	mov	r3, r1
700040d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
700040d8:	2300      	movs	r3, #0
700040da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
700040dc:	2300      	movs	r3, #0
700040de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
700040e0:	687b      	ldr	r3, [r7, #4]
700040e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
700040e6:	78fa      	ldrb	r2, [r7, #3]
700040e8:	4611      	mov	r1, r2
700040ea:	4618      	mov	r0, r3
700040ec:	f7fd f928 	bl	70001340 <HAL_PCD_EP_SetStall>
700040f0:	4603      	mov	r3, r0
700040f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
700040f4:	7bfb      	ldrb	r3, [r7, #15]
700040f6:	4618      	mov	r0, r3
700040f8:	f000 f8b4 	bl	70004264 <USBD_Get_USB_Status>
700040fc:	4603      	mov	r3, r0
700040fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
70004100:	7bbb      	ldrb	r3, [r7, #14]
}
70004102:	4618      	mov	r0, r3
70004104:	3710      	adds	r7, #16
70004106:	46bd      	mov	sp, r7
70004108:	bd80      	pop	{r7, pc}

7000410a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
7000410a:	b580      	push	{r7, lr}
7000410c:	b084      	sub	sp, #16
7000410e:	af00      	add	r7, sp, #0
70004110:	6078      	str	r0, [r7, #4]
70004112:	460b      	mov	r3, r1
70004114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
70004116:	2300      	movs	r3, #0
70004118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000411a:	2300      	movs	r3, #0
7000411c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
7000411e:	687b      	ldr	r3, [r7, #4]
70004120:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
70004124:	78fa      	ldrb	r2, [r7, #3]
70004126:	4611      	mov	r1, r2
70004128:	4618      	mov	r0, r3
7000412a:	f7fd f96c 	bl	70001406 <HAL_PCD_EP_ClrStall>
7000412e:	4603      	mov	r3, r0
70004130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
70004132:	7bfb      	ldrb	r3, [r7, #15]
70004134:	4618      	mov	r0, r3
70004136:	f000 f895 	bl	70004264 <USBD_Get_USB_Status>
7000413a:	4603      	mov	r3, r0
7000413c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
7000413e:	7bbb      	ldrb	r3, [r7, #14]
}
70004140:	4618      	mov	r0, r3
70004142:	3710      	adds	r7, #16
70004144:	46bd      	mov	sp, r7
70004146:	bd80      	pop	{r7, pc}

70004148 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
70004148:	b480      	push	{r7}
7000414a:	b085      	sub	sp, #20
7000414c:	af00      	add	r7, sp, #0
7000414e:	6078      	str	r0, [r7, #4]
70004150:	460b      	mov	r3, r1
70004152:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
70004154:	687b      	ldr	r3, [r7, #4]
70004156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
7000415a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
7000415c:	f997 3003 	ldrsb.w	r3, [r7, #3]
70004160:	2b00      	cmp	r3, #0
70004162:	da0b      	bge.n	7000417c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
70004164:	78fb      	ldrb	r3, [r7, #3]
70004166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
7000416a:	68f9      	ldr	r1, [r7, #12]
7000416c:	4613      	mov	r3, r2
7000416e:	00db      	lsls	r3, r3, #3
70004170:	4413      	add	r3, r2
70004172:	009b      	lsls	r3, r3, #2
70004174:	440b      	add	r3, r1
70004176:	3316      	adds	r3, #22
70004178:	781b      	ldrb	r3, [r3, #0]
7000417a:	e00b      	b.n	70004194 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
7000417c:	78fb      	ldrb	r3, [r7, #3]
7000417e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
70004182:	68f9      	ldr	r1, [r7, #12]
70004184:	4613      	mov	r3, r2
70004186:	00db      	lsls	r3, r3, #3
70004188:	4413      	add	r3, r2
7000418a:	009b      	lsls	r3, r3, #2
7000418c:	440b      	add	r3, r1
7000418e:	f203 2356 	addw	r3, r3, #598	@ 0x256
70004192:	781b      	ldrb	r3, [r3, #0]
  }
}
70004194:	4618      	mov	r0, r3
70004196:	3714      	adds	r7, #20
70004198:	46bd      	mov	sp, r7
7000419a:	f85d 7b04 	ldr.w	r7, [sp], #4
7000419e:	4770      	bx	lr

700041a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
700041a0:	b580      	push	{r7, lr}
700041a2:	b084      	sub	sp, #16
700041a4:	af00      	add	r7, sp, #0
700041a6:	6078      	str	r0, [r7, #4]
700041a8:	460b      	mov	r3, r1
700041aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
700041ac:	2300      	movs	r3, #0
700041ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
700041b0:	2300      	movs	r3, #0
700041b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
700041b4:	687b      	ldr	r3, [r7, #4]
700041b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
700041ba:	78fa      	ldrb	r2, [r7, #3]
700041bc:	4611      	mov	r1, r2
700041be:	4618      	mov	r0, r3
700041c0:	f7fc ffbb 	bl	7000113a <HAL_PCD_SetAddress>
700041c4:	4603      	mov	r3, r0
700041c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
700041c8:	7bfb      	ldrb	r3, [r7, #15]
700041ca:	4618      	mov	r0, r3
700041cc:	f000 f84a 	bl	70004264 <USBD_Get_USB_Status>
700041d0:	4603      	mov	r3, r0
700041d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
700041d4:	7bbb      	ldrb	r3, [r7, #14]
}
700041d6:	4618      	mov	r0, r3
700041d8:	3710      	adds	r7, #16
700041da:	46bd      	mov	sp, r7
700041dc:	bd80      	pop	{r7, pc}

700041de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
700041de:	b580      	push	{r7, lr}
700041e0:	b086      	sub	sp, #24
700041e2:	af00      	add	r7, sp, #0
700041e4:	60f8      	str	r0, [r7, #12]
700041e6:	607a      	str	r2, [r7, #4]
700041e8:	603b      	str	r3, [r7, #0]
700041ea:	460b      	mov	r3, r1
700041ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
700041ee:	2300      	movs	r3, #0
700041f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
700041f2:	2300      	movs	r3, #0
700041f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
700041f6:	68fb      	ldr	r3, [r7, #12]
700041f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
700041fc:	7af9      	ldrb	r1, [r7, #11]
700041fe:	683b      	ldr	r3, [r7, #0]
70004200:	687a      	ldr	r2, [r7, #4]
70004202:	f7fd f863 	bl	700012cc <HAL_PCD_EP_Transmit>
70004206:	4603      	mov	r3, r0
70004208:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000420a:	7dfb      	ldrb	r3, [r7, #23]
7000420c:	4618      	mov	r0, r3
7000420e:	f000 f829 	bl	70004264 <USBD_Get_USB_Status>
70004212:	4603      	mov	r3, r0
70004214:	75bb      	strb	r3, [r7, #22]

  return usb_status;
70004216:	7dbb      	ldrb	r3, [r7, #22]
}
70004218:	4618      	mov	r0, r3
7000421a:	3718      	adds	r7, #24
7000421c:	46bd      	mov	sp, r7
7000421e:	bd80      	pop	{r7, pc}

70004220 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
70004220:	b580      	push	{r7, lr}
70004222:	b086      	sub	sp, #24
70004224:	af00      	add	r7, sp, #0
70004226:	60f8      	str	r0, [r7, #12]
70004228:	607a      	str	r2, [r7, #4]
7000422a:	603b      	str	r3, [r7, #0]
7000422c:	460b      	mov	r3, r1
7000422e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
70004230:	2300      	movs	r3, #0
70004232:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
70004234:	2300      	movs	r3, #0
70004236:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
70004238:	68fb      	ldr	r3, [r7, #12]
7000423a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
7000423e:	7af9      	ldrb	r1, [r7, #11]
70004240:	683b      	ldr	r3, [r7, #0]
70004242:	687a      	ldr	r2, [r7, #4]
70004244:	f7fd f807 	bl	70001256 <HAL_PCD_EP_Receive>
70004248:	4603      	mov	r3, r0
7000424a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
7000424c:	7dfb      	ldrb	r3, [r7, #23]
7000424e:	4618      	mov	r0, r3
70004250:	f000 f808 	bl	70004264 <USBD_Get_USB_Status>
70004254:	4603      	mov	r3, r0
70004256:	75bb      	strb	r3, [r7, #22]

  return usb_status;
70004258:	7dbb      	ldrb	r3, [r7, #22]
}
7000425a:	4618      	mov	r0, r3
7000425c:	3718      	adds	r7, #24
7000425e:	46bd      	mov	sp, r7
70004260:	bd80      	pop	{r7, pc}
	...

70004264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
70004264:	b480      	push	{r7}
70004266:	b085      	sub	sp, #20
70004268:	af00      	add	r7, sp, #0
7000426a:	4603      	mov	r3, r0
7000426c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
7000426e:	2300      	movs	r3, #0
70004270:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
70004272:	79fb      	ldrb	r3, [r7, #7]
70004274:	2b03      	cmp	r3, #3
70004276:	d817      	bhi.n	700042a8 <USBD_Get_USB_Status+0x44>
70004278:	a201      	add	r2, pc, #4	@ (adr r2, 70004280 <USBD_Get_USB_Status+0x1c>)
7000427a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
7000427e:	bf00      	nop
70004280:	70004291 	.word	0x70004291
70004284:	70004297 	.word	0x70004297
70004288:	7000429d 	.word	0x7000429d
7000428c:	700042a3 	.word	0x700042a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
70004290:	2300      	movs	r3, #0
70004292:	73fb      	strb	r3, [r7, #15]
    break;
70004294:	e00b      	b.n	700042ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
70004296:	2303      	movs	r3, #3
70004298:	73fb      	strb	r3, [r7, #15]
    break;
7000429a:	e008      	b.n	700042ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
7000429c:	2301      	movs	r3, #1
7000429e:	73fb      	strb	r3, [r7, #15]
    break;
700042a0:	e005      	b.n	700042ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
700042a2:	2303      	movs	r3, #3
700042a4:	73fb      	strb	r3, [r7, #15]
    break;
700042a6:	e002      	b.n	700042ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
700042a8:	2303      	movs	r3, #3
700042aa:	73fb      	strb	r3, [r7, #15]
    break;
700042ac:	bf00      	nop
  }
  return usb_status;
700042ae:	7bfb      	ldrb	r3, [r7, #15]
}
700042b0:	4618      	mov	r0, r3
700042b2:	3714      	adds	r7, #20
700042b4:	46bd      	mov	sp, r7
700042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
700042ba:	4770      	bx	lr

700042bc <__libc_init_array>:
700042bc:	b570      	push	{r4, r5, r6, lr}
700042be:	4d0d      	ldr	r5, [pc, #52]	@ (700042f4 <__libc_init_array+0x38>)
700042c0:	4c0d      	ldr	r4, [pc, #52]	@ (700042f8 <__libc_init_array+0x3c>)
700042c2:	1b64      	subs	r4, r4, r5
700042c4:	10a4      	asrs	r4, r4, #2
700042c6:	2600      	movs	r6, #0
700042c8:	42a6      	cmp	r6, r4
700042ca:	d109      	bne.n	700042e0 <__libc_init_array+0x24>
700042cc:	4d0b      	ldr	r5, [pc, #44]	@ (700042fc <__libc_init_array+0x40>)
700042ce:	4c0c      	ldr	r4, [pc, #48]	@ (70004300 <__libc_init_array+0x44>)
700042d0:	f000 f818 	bl	70004304 <_init>
700042d4:	1b64      	subs	r4, r4, r5
700042d6:	10a4      	asrs	r4, r4, #2
700042d8:	2600      	movs	r6, #0
700042da:	42a6      	cmp	r6, r4
700042dc:	d105      	bne.n	700042ea <__libc_init_array+0x2e>
700042de:	bd70      	pop	{r4, r5, r6, pc}
700042e0:	f855 3b04 	ldr.w	r3, [r5], #4
700042e4:	4798      	blx	r3
700042e6:	3601      	adds	r6, #1
700042e8:	e7ee      	b.n	700042c8 <__libc_init_array+0xc>
700042ea:	f855 3b04 	ldr.w	r3, [r5], #4
700042ee:	4798      	blx	r3
700042f0:	3601      	adds	r6, #1
700042f2:	e7f2      	b.n	700042da <__libc_init_array+0x1e>
700042f4:	70004324 	.word	0x70004324
700042f8:	70004324 	.word	0x70004324
700042fc:	70004324 	.word	0x70004324
70004300:	70004328 	.word	0x70004328

70004304 <_init>:
70004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70004306:	bf00      	nop
70004308:	bcf8      	pop	{r3, r4, r5, r6, r7}
7000430a:	bc08      	pop	{r3}
7000430c:	469e      	mov	lr, r3
7000430e:	4770      	bx	lr

70004310 <_fini>:
70004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
70004312:	bf00      	nop
70004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
70004316:	bc08      	pop	{r3}
70004318:	469e      	mov	lr, r3
7000431a:	4770      	bx	lr
